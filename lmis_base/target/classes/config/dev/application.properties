#server settings start
#配置服务器端口，默认为8080
server.port=8082
#用户回话session过期时间，以秒为单位
server.session-timeout=100000
#配置访问路径，默认为/
server.context-path=/lmis_base
#配置Tomcat编码，默认为UTF-8
server.tomcat.uri-encoding=UTF-8
#Tomcat是否开启压缩，默认为关闭
server.tomcat.compression=on
#server settings end

#actuator的metrics接口是否需要安全保证
endpoints.metrics.enabled=true
endpoints.metrics.sensitive=false
#actuator的health接口是否需要安全保证
endpoints.health.enabled=true
endpoints.health.sensitive=false
#server shutdown settings start
#启用shutdown
endpoints.shutdown.enabled=true
#开启shutdown的安全验证
endpoints.shutdown.sensitive=true
#自定义shutdown路径
#endpoints.shutdown.path=/
#server shutdown settings end

#security settings start
security.basic.enabled=true
#针对/admin路径进行认证
security.basic.path=/invoke
#验证用户名
security.user.name=lmis_base
#验证密码
security.user.password=lmis_base
#security settings end

#management settings start
#actuator是否需要安全保证
management.security.enabled=true
#角色
management.security.role=SUPERUSER
#指定IP和端口
#management.address=127.0.0.1
#actuator暴露接口使用的端口，为了和api接口使用的端口进行分离
#management.port=8012
#actuator暴露接口的前缀
management.context-path=/invoke
#management settings end

#eureka client settings start
#Netflix Eureka实例是一个身份证，等于其域名注册（即只有一个服务/主机）
eureka.instance.instanceId=${spring.cloud.client.hostname}:${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}
#eureka.instance.instanceId=${spring.cloud.client.ipAddress}:${server.port}
#eureka.instance.instanceId=${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
#状态页面
eureka.instance.statusPageUrlPath=${management.context-path}/info
#健康指标页面
eureka.instance.healthCheckUrlPath=${management.context-path}/health
#续约更新时间间隔（默认30秒）
eureka.instance.lease-renewal-interval-in-seconds=30
#续约到期时间（默认90秒）
eureka.instance.lease-expiration-duration-in-seconds=90
#注册服务地址
#开发服务器地址
eureka.client.serviceUrl.defaultZone=http://eurekaserver:eurekaserver@10.7.46.57:8761/eureka/
#开启健康检查（需要spring-boot-starter-actuator依赖）
eureka.client.healthcheck.enabled=true
#禁用它的客户端注册行为
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
#eureka client settings end

#spring application settings start
spring.application.name=lmis_base
#spring application settings end

#datasource settings begin
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

#mysql settings begin
spring.datasource.driverClassName=com.mysql.jdbc.Driver
#开发服务器地址
spring.datasource.url=jdbc:mysql://10.7.46.94:3306/lmis_pos?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=baozun2017_test
#mysql settings end

#druid datasouce database settings begin
#下面为连接池的补充设置，应用到上面所有数据源中
#初始化大小，最小，最大
spring.datasource.initialSize=10
spring.datasource.minIdle=5
spring.datasource.maxActive=100
#配置获取连接等待超时的时间
spring.datasource.maxWait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=select 'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
#打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,slf4j,log4j
#通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true
#druid白名单
spring.datasource.allow-ip=127.0.0.1,192.168.2.25
#druid黑名单
spring.datasource.deny-ip=192.168.1.100
#登录druid的账号
spring.datasource.druid-login-username=admin
#登录druid的密码
spring.datasource.druid-login-password=admin
#druid datasouce database settings end
#datasouce settings end

#mybatis settings begin
#扫描实体的包名
mybatis.typeAliasesPackage=com.lmis.setup.*.model
#Mapper.xml所在的位置
mybatis.mapperLocations=classpath:/*/dao/*.xml
#mybatis配置路径
mybatis.configLocation=classpath:/mybatis-config.xml
#mybatis settings end

#REDIS (RedisProperties)
#Redis数据库索引（默认为0）
spring.redis.database=10
#Redis服务器地址
# 开发服务器redis ip
spring.redis.host=10.7.46.57
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=baozun2017_test
#连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8  
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1  
#连接池中的最大空闲连接
spring.redis.pool.max-idle=8  
#连接池中的最小空闲连接
spring.redis.pool.min-idle=0  
#连接超时时间（毫秒）
spring.redis.timeout=0  
# REDIS end

#THYMELEAF (ThymeleafAutoConfiguration)  
#spring.thymeleaf.prefix=classpath:/templates/  
#spring.thymeleaf.suffix=.html  
#spring.thymeleaf.mode=HTML5  
#spring.thymeleaf.encoding=UTF-8  
#;charset=<encoding> is added  
#spring.thymeleaf.content-type=text/html  
#set to false for hot refresh
spring.thymeleaf.cache=false
spring.thymeleaf.mode=LEGACYHTML5
##############end

#i18n setting.
#指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始，默认: messages
spring.messages.basename=messages/messages
#设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1
#spring.messages.cache-seconds= 3600
#设定Message bundles的编码，默认: UTF-8
#spring.messages.encoding=UTF-8
###############end

#page info	分页信息
##分页起始页数
base.page.pageNum=1
##分页每页数据条数
base.page.pageSize=20
############ end

#redis key 命名规范
#页面常量的key值
redis.key.constant=setup:constant:
#页面元素的key值
redis.key.element=setup:sql:element:
#页面元素集合的key值
redis.key.elements=setup:sql:elements:
#页面查询结果的key值
redis.key.column=setup:sql:column:
#当前用户信息的key值
redis.key.user=sys:user:
#用户登录后失效时间，单位秒
redis.key.user.timeout=6000
#用户对应组织机构数据的key值
redis.key.user.org=sys:user:org:
#用户对应功能菜单数据的key值
redis.key.user.fb=sys:user:fb:
#费项序列号
redis.key.item.uuid=budget:item:uuid:
#成功/异常消息
redis.key.sys.message=sys:message:code:
#系统消息缓存时间 
redis.key.sys.message.timeout=-1

#下拉框读取redis数据开关0-关1-开
dropdown.redis.switch=0
#下拉框读取数据页长配置
dropdown.page.pageSize=1000

############ end