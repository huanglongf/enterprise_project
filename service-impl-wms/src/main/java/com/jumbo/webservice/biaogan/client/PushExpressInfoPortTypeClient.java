package com.jumbo.webservice.biaogan.client;

/**
 * Please modify this class to meet your needs This class is not complete
 */

import java.net.URL;
import javax.xml.namespace.QName;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import com.jumbo.mq.MarshallerUtil;
import com.jumbo.webservice.biaogan.client.base.ArrayOfString;
import com.jumbo.webservice.biaogan.client.base.PushExpressInfo;
import com.jumbo.webservice.biaogan.client.base.PushExpressInfoPortType;
import com.jumbo.webservice.biaogan.client.base.WmsResultInfoToERP;
import com.jumbo.webservice.biaogan.command.InOutBoundResponse;

/**
 * This class was generated by Apache CXF 2.5.2 2012-03-19T12:59:29.306+08:00 Generated source
 * version: 2.5.2
 * 
 */
public final class PushExpressInfoPortTypeClient {

    private static final QName SERVICE_NAME = new QName("http://server.webservices.chamayi.chamago.com", "PushExpressInfo");

    private PushExpressInfoPortTypeClient() {}

    /**
     * 发送出库通知
     * 
     * @param xml
     */
    public static String soToWms(String xml) {
        URL wsdlURL = PushExpressInfo.WSDL_LOCATION;
        PushExpressInfo ss = new PushExpressInfo(wsdlURL, SERVICE_NAME);
        PushExpressInfoPortType port = ss.getPushExpressInfoHttpPort();
        setClient(port);
        java.lang.String _soToWms__return = port.soToWms(xml);
        // InOutBoundResponse r = (InOutBoundResponse)
        // MarshallerUtil.buildJaxb(InOutBoundResponse.class, _soToWms__return);
        MarshallerUtil.buildJaxb(InOutBoundResponse.class, _soToWms__return);
        return _soToWms__return;
    }

    /**
     * 入库通知
     * 
     * @param xml
     */
    public static InOutBoundResponse ansToWms(String xml) {
        URL wsdlURL = PushExpressInfo.WSDL_LOCATION;
        PushExpressInfo ss = new PushExpressInfo(wsdlURL, SERVICE_NAME);
        PushExpressInfoPortType port = ss.getPushExpressInfoHttpPort();
        setClient(port);
        java.lang.String _ansToWms__return = port.ansToWms(xml);
        InOutBoundResponse r = (InOutBoundResponse) MarshallerUtil.buildJaxb(InOutBoundResponse.class, _ansToWms__return);
        return r;
    }

    /**
     * 取消订单
     * 
     * @param orderId
     */
    public static String cancelOrder(String orderId) {
        URL wsdlURL = PushExpressInfo.WSDL_LOCATION;
        PushExpressInfo ss = new PushExpressInfo(wsdlURL, SERVICE_NAME);
        PushExpressInfoPortType port = ss.getPushExpressInfoHttpPort();
        setClient(port);
        java.lang.String _cancelOrder_in0 = orderId;
        java.lang.String _cancelOrder__return = port.cancelOrder(_cancelOrder_in0);
        return _cancelOrder__return;
    }

    /**
     * 同步sku
     * 
     * @param xml
     */
    public static String singleSkuToWms(String xml) {
        URL wsdlURL = PushExpressInfo.WSDL_LOCATION;
        PushExpressInfo ss = new PushExpressInfo(wsdlURL, SERVICE_NAME);
        PushExpressInfoPortType port = ss.getPushExpressInfoHttpPort();
        setClient(port);
        return port.singleSkuToWms(xml);
    }

    /**
     * 作业单查询
     * 
     * @param stacode
     */
    public static String orderQuery(String stacode) {
        URL wsdlURL = PushExpressInfo.WSDL_LOCATION;
        PushExpressInfo ss = new PushExpressInfo(wsdlURL, SERVICE_NAME);
        PushExpressInfoPortType port = ss.getPushExpressInfoHttpPort();
        setClient(port);
        WmsResultInfoToERP r = port.searchOrderStatus(stacode);
        ArrayOfString str = r.getResultInfo().getValue();

        // System.out.println(str.getString().get(0));
        return str.getString().get(0);
    }

    private static void setClient(PushExpressInfoPortType port) {
        Client client = ClientProxy.getClient(port);
        HTTPConduit http = (HTTPConduit) client.getConduit();
        HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
        httpClientPolicy.setConnectionTimeout(80000);
        httpClientPolicy.setAllowChunking(false);
        http.setClient(httpClientPolicy);
    }

}
