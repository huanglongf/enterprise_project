package com.jumbo.wms.manager.warehouse;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.apache.commons.collections.map.MultiValueMap;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.SingleColumnRowMapper;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.baozun.ecp.ip.command.agv.Response;
import com.baozun.ecp.ip.command.cancel.MissingOrders;
import com.baozun.ecp.ip.command.cancel.MissingOrders.MissingOrder;
import com.baozun.ecp.ip.manager.wms3.Wms3AdapterInteractManager;
import com.baozun.scm.baseservice.message.common.MessageCommond;
import com.baozun.scm.baseservice.message.rocketmq.service.server.RocketMQProducerServer;
import com.baozun.scm.primservice.logistics.manager.OrderConfirmContentManager;
import com.baozun.scm.primservice.logistics.model.OrderConfirmContent;
import com.baozun.scm.primservice.logistics.model.OrderConfirmResponse;
import com.baozun.task.annotation.SingleTaskLock;
import com.jcraft.jsch.ChannelSftp;
import com.jumbo.dao.authorization.OperationUnitDao;
import com.jumbo.dao.authorization.UserDao;
import com.jumbo.dao.automaticEquipment.GoodsCollectionDao;
import com.jumbo.dao.automaticEquipment.GoodsCollectionLogDao;
import com.jumbo.dao.automaticEquipment.WhContainerDao;
import com.jumbo.dao.automaticEquipment.WhPickingBatchDao;
import com.jumbo.dao.automaticEquipment.ZoonDao;
import com.jumbo.dao.baoshui.CustomsDeclarationDao;
import com.jumbo.dao.baoshui.CustomsDeclarationLineDao;
import com.jumbo.dao.baseinfo.BiChannelBrandRefDao;
import com.jumbo.dao.baseinfo.ChannelWhRefRefDao;
import com.jumbo.dao.baseinfo.CustomerDao;
import com.jumbo.dao.baseinfo.OperationCenterDao;
import com.jumbo.dao.baseinfo.SkuBarcodeDao;
import com.jumbo.dao.baseinfo.SkuCategoriesDao;
import com.jumbo.dao.baseinfo.SkuDao;
import com.jumbo.dao.baseinfo.SkuModifyLogDao;
import com.jumbo.dao.baseinfo.TransSfInfoDao;
import com.jumbo.dao.baseinfo.TransportatorDao;
import com.jumbo.dao.baseinfo.TransportatorWeigthDao;
import com.jumbo.dao.baseinfo.WarehouseCommandRowMapper;
import com.jumbo.dao.baseinfo.WarehouseDao;
import com.jumbo.dao.command.StaDeliverCommandDao;
import com.jumbo.dao.commandMapper.MapQtyRowMapper;
import com.jumbo.dao.commandMapper.MapRowMapper;
import com.jumbo.dao.commandMapper.SkuStoreModeRowMapper;
import com.jumbo.dao.invflow.WmsIMOccupiedAndReleaseDao;
import com.jumbo.dao.lf.StaLfDao;
import com.jumbo.dao.lf.ZdhPiciDao;
import com.jumbo.dao.lf.ZdhPiciLineDao;
import com.jumbo.dao.msg.MessageProducerErrorDao;
import com.jumbo.dao.pda.StaCartonDao;
import com.jumbo.dao.pda.StaCheckRecordLogDao;
import com.jumbo.dao.pda.StaOpDetailDao;
import com.jumbo.dao.pda.StaOpLogDao;
import com.jumbo.dao.rfid.SkuRfidDao;
import com.jumbo.dao.rfid.SkuRfidLogDao;
import com.jumbo.dao.system.ChooseOptionDao;
import com.jumbo.dao.system.SmsQueueDao;
import com.jumbo.dao.task.IDSFeedbackInfoCommandDao;
import com.jumbo.dao.vmi.defaultData.TransferOwnerSourceDao;
import com.jumbo.dao.vmi.defaultData.TransferOwnerTargetDao;
import com.jumbo.dao.vmi.defaultData.VmiRtoDao;
import com.jumbo.dao.vmi.defaultData.VmiRtoLineDao;
import com.jumbo.dao.vmi.warehouse.CompanyShopShareDao;
import com.jumbo.dao.vmi.warehouse.MsgInboundOrderDao;
import com.jumbo.dao.vmi.warehouse.MsgInboundOrderLineDao;
import com.jumbo.dao.vmi.warehouse.MsgOutboundOrderCancelDao;
import com.jumbo.dao.vmi.warehouse.MsgOutboundOrderDao;
import com.jumbo.dao.vmi.warehouse.MsgRtnInboundOrderDao;
import com.jumbo.dao.vmi.warehouse.MsgRtnInboundOrderLineDao;
import com.jumbo.dao.vmi.warehouse.MsgRtnOutAdditionalLineDao;
import com.jumbo.dao.vmi.warehouse.MsgRtnOutboundDao;
import com.jumbo.dao.vmi.warehouse.MsgRtnOutboundLineDao;
import com.jumbo.dao.warehouse.AdPackageLineDealDao;
import com.jumbo.dao.warehouse.AdPackageLineDealLogDao;
import com.jumbo.dao.warehouse.AdvanceOrderAddInfoDao;
import com.jumbo.dao.warehouse.AgvOutBoundDao;
import com.jumbo.dao.warehouse.AgvOutBoundLineDao;
import com.jumbo.dao.warehouse.BiChannelDao;
import com.jumbo.dao.warehouse.BiChannelImperfectDao;
import com.jumbo.dao.warehouse.BiChannelImperfectLineDao;
import com.jumbo.dao.warehouse.BiChannelSkuSuppliesDao;
import com.jumbo.dao.warehouse.CartonDao;
import com.jumbo.dao.warehouse.CartonLineDao;
import com.jumbo.dao.warehouse.ConvenienceStoreOrderInfoDao;
import com.jumbo.dao.warehouse.DeliveryChangeConfigureDao;
import com.jumbo.dao.warehouse.DeliveryChanngeLogDao;
import com.jumbo.dao.warehouse.DistributionRuleConditionDao;
import com.jumbo.dao.warehouse.DistributionRuleDao;
import com.jumbo.dao.warehouse.DistributionRuleDetailDao;
import com.jumbo.dao.warehouse.EMSConfirmOrderQueueDao;
import com.jumbo.dao.warehouse.EspritStoreDao;
import com.jumbo.dao.warehouse.GiftLineDao;
import com.jumbo.dao.warehouse.HandOverListDao;
import com.jumbo.dao.warehouse.HandOverListLineDao;
import com.jumbo.dao.warehouse.ImperfectCartonLineDao;
import com.jumbo.dao.warehouse.InboundAgvToHubDao;
import com.jumbo.dao.warehouse.InboundAgvToHubLineDao;
import com.jumbo.dao.warehouse.InventoryCheckDao;
import com.jumbo.dao.warehouse.InventoryCheckDifTotalLineDao;
import com.jumbo.dao.warehouse.InventoryCheckDifferenceLineDao;
import com.jumbo.dao.warehouse.InventoryCheckDifferenceSnLineDao;
import com.jumbo.dao.warehouse.InventoryCheckLineDao;
import com.jumbo.dao.warehouse.InventoryDao;
import com.jumbo.dao.warehouse.InventoryStatusDao;
import com.jumbo.dao.warehouse.InventoryZeroDao;
import com.jumbo.dao.warehouse.MsSnReportCommandDao;
import com.jumbo.dao.warehouse.MsgInvoiceDao;
import com.jumbo.dao.warehouse.OffLineTransOrderDao;
import com.jumbo.dao.warehouse.OffLineTransPackageDao;
import com.jumbo.dao.warehouse.OutBoundPackDao;
import com.jumbo.dao.warehouse.PackageInfoDao;
import com.jumbo.dao.warehouse.PdaPostLogDao;
import com.jumbo.dao.warehouse.PdaSkuLocationDao;
import com.jumbo.dao.warehouse.PickingListDao;
import com.jumbo.dao.warehouse.PickingListPackageDao;
import com.jumbo.dao.warehouse.QsSkuDao;
import com.jumbo.dao.warehouse.RecieverInfoDao;
import com.jumbo.dao.warehouse.RelationNikeDao;
import com.jumbo.dao.warehouse.ReturnApplicationDao;
import com.jumbo.dao.warehouse.ReturnPackageDao;
import com.jumbo.dao.warehouse.SfConfirmOrderQueueDao;
import com.jumbo.dao.warehouse.SfConfirmOrderQueueLogDao;
import com.jumbo.dao.warehouse.SfMailNoRemainRelationDao;
import com.jumbo.dao.warehouse.SfOrderCancelQueueDao;
import com.jumbo.dao.warehouse.SfOrderCancelQueueLogDao;
import com.jumbo.dao.warehouse.SfOrderFilterLogDao;
import com.jumbo.dao.warehouse.SkuChildSnDao;
import com.jumbo.dao.warehouse.SkuChildSnLogDao;
import com.jumbo.dao.warehouse.SkuDeclarationDao;
import com.jumbo.dao.warehouse.SkuImperfectDao;
import com.jumbo.dao.warehouse.SkuSizeConfigDao;
import com.jumbo.dao.warehouse.SkuSnDao;
import com.jumbo.dao.warehouse.SkuSnLogDao;
import com.jumbo.dao.warehouse.SkuWarehouseRefDao;
import com.jumbo.dao.warehouse.StaAdditionalLineDao;
import com.jumbo.dao.warehouse.StaCheckDetialDao;
import com.jumbo.dao.warehouse.StaCheckLogDao;
import com.jumbo.dao.warehouse.StaDeliveryInfoDao;
import com.jumbo.dao.warehouse.StaErrorLineDao;
import com.jumbo.dao.warehouse.StaInvoiceDao;
import com.jumbo.dao.warehouse.StaLineDao;
import com.jumbo.dao.warehouse.StarbucksIcePackageDao;
import com.jumbo.dao.warehouse.StockTransApplicationDao;
import com.jumbo.dao.warehouse.StockTransTxLogDao;
import com.jumbo.dao.warehouse.StockTransVoucherDao;
import com.jumbo.dao.warehouse.StvCheckImgDao;
import com.jumbo.dao.warehouse.StvLineDao;
import com.jumbo.dao.warehouse.TransDeliveryCfgDao;
import com.jumbo.dao.warehouse.TransEmsInfoDao;
import com.jumbo.dao.warehouse.TransStaRecordDao;
import com.jumbo.dao.warehouse.TransactionTypeDao;
import com.jumbo.dao.warehouse.WarehouseDistrictDao;
import com.jumbo.dao.warehouse.WarehouseLocationDao;
import com.jumbo.dao.warehouse.WarehouseMsgSkuDao;
import com.jumbo.dao.warehouse.WhInfoTimeRefDao;
import com.jumbo.dao.warehouse.WhStaPickingListLogDao;
import com.jumbo.dao.warehouse.WhTransProvideNoDao;
import com.jumbo.dao.warehouse.WmsCancelOrderDao;
import com.jumbo.dao.warehouse.WmsCancelOrderLineDao;
import com.jumbo.dao.warehouse.WmsInvoiceOrderDao;
import com.jumbo.dao.warehouse.WmsOtherOutBoundInvNoticeOmsDao;
import com.jumbo.dao.warehouse.WorkLineNoDao;
import com.jumbo.dao.warehouse.ZtoConfirmOrderQueueDao;
import com.jumbo.dao.warehouse.ZtoConfirmOrderQueueLogDao;
import com.jumbo.event.StockTransApplicationStatusChangeEvent;
import com.jumbo.event.TransactionalEvent;
import com.jumbo.event.listener.EventObserver;
import com.jumbo.pac.manager.extsys.wms.rmi.Rmi4Wms;
import com.jumbo.pac.manager.extsys.wms.rmi.model.BaseResult;
import com.jumbo.pac.manager.extsys.wms.rmi.model.OperationBill;
import com.jumbo.pac.manager.extsys.wms.rmi.model.OperationBillLine;
import com.jumbo.rmiservice.RmiService;
import com.jumbo.util.FormatUtil;
import com.jumbo.util.JsonUtil;
import com.jumbo.util.SFTPUtil;
import com.jumbo.util.StringUtil;
import com.jumbo.util.TimeHashMap;
import com.jumbo.util.UUIDUtil;
import com.jumbo.webservice.sf.SfWebserviceClient;
import com.jumbo.webservice.sf.model.SfOrderCancelResponse;
import com.jumbo.webservice.sfNew.SfOrderWebserviceClientInter;
import com.jumbo.webservice.sfNew.model.SfOrderConfirm;
import com.jumbo.webservice.sfNew.model.SfOrderConfirmOption;
import com.jumbo.webservice.sfNew.model.SfOrderConfirmResponse;
import com.jumbo.webservice.sfNew.model.SfResponse;
import com.jumbo.webservice.zto.Receiver;
import com.jumbo.webservice.zto.Sender;
import com.jumbo.webservice.zto.ZtoCommand;
import com.jumbo.webservice.zto.ZtoOrderClient;
import com.jumbo.wms.Constants;
import com.jumbo.wms.daemon.CnInterfaceTask;
import com.jumbo.wms.daemon.VmiDefaultFactory;
import com.jumbo.wms.daemon.VmiDefaultInterface;
import com.jumbo.wms.exception.BusinessException;
import com.jumbo.wms.exception.ErrorCode;
import com.jumbo.wms.manager.BaseManagerImpl;
import com.jumbo.wms.manager.checklist.CheckListManager;
import com.jumbo.wms.manager.expressDelivery.TransOlManager;
import com.jumbo.wms.manager.expressDelivery.TransOlManagerProxy;
import com.jumbo.wms.manager.expressDelivery.logistics.TransAliWaybill;
import com.jumbo.wms.manager.expressDelivery.logistics.TransOlInterface;
import com.jumbo.wms.manager.expressDelivery.logistics.TransOnLineFactory;
import com.jumbo.wms.manager.hub2wms.HubWmsManager;
import com.jumbo.wms.manager.hub2wms.HubWmsService;
import com.jumbo.wms.manager.hub2wms.WmsThreePLManager;
import com.jumbo.wms.manager.listener.InventoryCheckListenerManager;
import com.jumbo.wms.manager.outbound.AdCheckManager;
import com.jumbo.wms.manager.outbound.OutboundInfoManager;
import com.jumbo.wms.manager.pingan.WhPingAnCoverManager;
import com.jumbo.wms.manager.sku.SkuManager;
import com.jumbo.wms.manager.system.ChooseOptionManager;
import com.jumbo.wms.manager.system.SequenceManager;
import com.jumbo.wms.manager.task.CommonConfigManager;
import com.jumbo.wms.manager.vmi.VmiFactory;
import com.jumbo.wms.manager.vmi.VmiInterface;
import com.jumbo.wms.manager.vmi.converseData.ConverseVmiReceiveManager;
import com.jumbo.wms.manager.vmi.ext.ExtParam;
import com.jumbo.wms.manager.vmi.warehouse.VmiWarehouseFactory;
import com.jumbo.wms.manager.vmi.warehouse.VmiWarehouseInterface;
import com.jumbo.wms.model.DefaultStatus;
import com.jumbo.wms.model.SlipType;
import com.jumbo.wms.model.WmsOtherOutBoundInvNoticeOmsStatus;
import com.jumbo.wms.model.authorization.OperationUnit;
import com.jumbo.wms.model.authorization.OperationUnitType;
import com.jumbo.wms.model.authorization.User;
import com.jumbo.wms.model.automaticEquipment.WhContainer;
import com.jumbo.wms.model.automaticEquipment.WhPickingBatch;
import com.jumbo.wms.model.automaticEquipment.Zoon;
import com.jumbo.wms.model.baseinfo.BiChannel;
import com.jumbo.wms.model.baseinfo.ChannelWhRef;
import com.jumbo.wms.model.baseinfo.Customer;
import com.jumbo.wms.model.baseinfo.OperationCenter;
import com.jumbo.wms.model.baseinfo.Sku;
import com.jumbo.wms.model.baseinfo.SkuBarcode;
import com.jumbo.wms.model.baseinfo.SkuCategories;
import com.jumbo.wms.model.baseinfo.SkuDeclaration;
import com.jumbo.wms.model.baseinfo.SkuInterfaceType;
import com.jumbo.wms.model.baseinfo.SkuModifyLog;
import com.jumbo.wms.model.baseinfo.SkuRfid;
import com.jumbo.wms.model.baseinfo.SkuRfidLog;
import com.jumbo.wms.model.baseinfo.SkuSalesModel;
import com.jumbo.wms.model.baseinfo.SkuSnCardStatus;
import com.jumbo.wms.model.baseinfo.SkuSnType;
import com.jumbo.wms.model.baseinfo.SkuSpType;
import com.jumbo.wms.model.baseinfo.StvCheckImg;
import com.jumbo.wms.model.baseinfo.TransEmsInfo;
import com.jumbo.wms.model.baseinfo.TransSfInfo;
import com.jumbo.wms.model.baseinfo.Transportator;
import com.jumbo.wms.model.baseinfo.TransportatorWeigth;
import com.jumbo.wms.model.baseinfo.Warehouse;
import com.jumbo.wms.model.command.EspritStoreCommand;
import com.jumbo.wms.model.command.GiftLineCommand;
import com.jumbo.wms.model.command.InventoryStatusCommand;
import com.jumbo.wms.model.command.OperationCenterCommand;
import com.jumbo.wms.model.command.OperationUnitCommand;
import com.jumbo.wms.model.command.SalesReportFormCommand;
import com.jumbo.wms.model.command.SkuBarcodeCommand;
import com.jumbo.wms.model.command.SkuCommand;
import com.jumbo.wms.model.command.SkuCountryOfOriginCommand;
import com.jumbo.wms.model.command.SkuWarehouseRefCommand;
import com.jumbo.wms.model.command.StaDeliverCommand;
import com.jumbo.wms.model.command.TransportatorCommand;
import com.jumbo.wms.model.command.WarehouseCommand;
import com.jumbo.wms.model.jasperReport.OutBoundPackingObj;
import com.jumbo.wms.model.lf.StaLf;
import com.jumbo.wms.model.lf.StaLfCommand;
import com.jumbo.wms.model.lf.ZdhPici;
import com.jumbo.wms.model.lf.ZdhPiciCommand;
import com.jumbo.wms.model.lf.ZdhPiciLineCommand;
import com.jumbo.wms.model.mongodb.StaCheckRecord;
import com.jumbo.wms.model.mongodb.TwicePickingBarCode;
import com.jumbo.wms.model.msg.MongoAGVMessage;
import com.jumbo.wms.model.msg.MongoDBMessageTest;
import com.jumbo.wms.model.pda.StaCheckRecordLog;
import com.jumbo.wms.model.system.ChooseOption;
import com.jumbo.wms.model.system.SmsQueue;
import com.jumbo.wms.model.vmi.Default.TransferOwnerSource;
import com.jumbo.wms.model.vmi.Default.TransferOwnerSourceCommand;
import com.jumbo.wms.model.vmi.Default.TransferOwnerTarget;
import com.jumbo.wms.model.vmi.Default.TransferOwnerTargetCommand;
import com.jumbo.wms.model.vmi.Default.VmiRtoCommand;
import com.jumbo.wms.model.vmi.Default.VmiRtoLineCommand;
import com.jumbo.wms.model.vmi.warehouse.CompanyShopShare;
import com.jumbo.wms.model.vmi.warehouse.MsgInboundOrder;
import com.jumbo.wms.model.vmi.warehouse.MsgInboundOrderCommand;
import com.jumbo.wms.model.vmi.warehouse.MsgInboundOrderLine;
import com.jumbo.wms.model.vmi.warehouse.MsgInvoice;
import com.jumbo.wms.model.vmi.warehouse.MsgOutboundOrderCancel;
import com.jumbo.wms.model.vmi.warehouse.MsgOutboundOrderCancelCommand;
import com.jumbo.wms.model.vmi.warehouse.MsgOutboundOrderCancelStatus;
import com.jumbo.wms.model.vmi.warehouse.MsgOutboundOrderCommand;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnInboundOrder;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnInboundOrderCommand;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnInboundOrderLine;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnOutAdditionalLine;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnOutbound;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnOutboundCommand;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnOutboundCommand2;
import com.jumbo.wms.model.vmi.warehouse.MsgRtnOutboundLine;
import com.jumbo.wms.model.warehouse.*;
import com.jumbo.wms.model.warehouse.agv.AgvOutBound;
import com.jumbo.wms.model.warehouse.agv.AgvOutBoundLine;
import com.jumbo.wms.model.warehouse.agv.AgvOutBoundLineDto;
import com.jumbo.wms.model.warehouse.baoShui.CustomsDeclaration;
import com.jumbo.wms.model.warehouse.baoShui.CustomsDeclarationDto;
import com.jumbo.wms.model.warehouse.baoShui.CustomsDeclarationLine;
import com.jumbo.wms.model.warehouse.baoShui.CustomsDeclarationLineCommand;
import com.jumbo.wms.model.warehouse.test.PressureTestDto;
import com.jumbo.wms.web.commond.OrderCheckCommand;

import loxia.dao.Pagination;
import loxia.dao.Sort;
import loxia.dao.support.BaseRowMapper;
import loxia.dao.support.BeanPropertyRowMapperExt;
import loxia.service.VelocityTemplateService;
import loxia.support.TransCodeFormatValidator;
import loxia.support.TransCodeFormatValidatorEnum;
import loxia.support.excel.ExcelReader;
import loxia.support.excel.ExcelUtil;
import loxia.support.excel.ReadStatus;
import loxia.support.excel.definition.ExcelBlock;
import loxia.support.excel.definition.ExcelSheet;
import loxia.support.json.JSONArray;
import loxia.support.json.JSONException;
import loxia.support.json.JSONObject;
import loxia.utils.PropListCopyable;
import loxia.utils.PropertyUtil;

@Transactional
@Service("wareHouseManager")
public class WareHouseManagerImpl extends BaseManagerImpl implements WareHouseManager {

    private static final long serialVersionUID = 9031203153833883942L;
    protected static final Logger logger = LoggerFactory.getLogger(WareHouseManagerImpl.class);

    private EventObserver eventObserver;
    @Autowired
    private TransStaRecordDao staRecordDao;

    @Autowired
    private StaLfDao staLfDao;

    @Autowired
    private SkuRfidDao skuRfidDao;

    @Autowired
    private SkuRfidLogDao skuRfidLogDao;

    @Autowired
    private StaCheckDetialDao staCheckDetialDao;

    @Autowired
    private AgvOutBoundDao agvOutBoundDao;
    @Autowired
    private AgvOutBoundLineDao agvOutBoundLineDao;
    @Autowired
    private BiChannelSkuSuppliesDao biChannelSkuSuppliesDao;
    @Autowired
    private TransportatorWeigthDao transportatorWeigthDao;
    @Autowired
    private OffLineTransPackageDao offLineTransPackageDao;
    @Autowired
    private OffLineTransOrderDao offLineTransOrderDao;
    @Autowired
    private ReturnPackageDao returnPackageDao;
    @Autowired
    private BiChannelImperfectDao biChannelImperfectDao;
    @Autowired
    private BiChannelImperfectLineDao biChannelImperfectLineDao;
    @Autowired
    private StaInvoiceDao staInvoiceDao;
    @Autowired
    private OptimizeManager optimizeManager;
    @Autowired
    private OutBoundPackDao outBoundPackDao;
    @Autowired
    private SkuSizeConfigDao skuSizeConfigDao;
    @Autowired
    private SkuSnDao skuSnDao;
    @Autowired
    private BiChannelDao biChannelDao;
    @Autowired
    private WareHouseManagerExe whExe;
    @Autowired
    private StaOpLogDao staOpLogDao;
    @Autowired
    private EspritStoreDao espritStoreDao;
    @Autowired
    private MsgRtnOutAdditionalLineDao msgRtnOutAdditionalLineDao;
    @Autowired
    private ChooseOptionDao chooseOptionDao;
    @Autowired
    private InventoryDao inventoryDao;
    @Autowired
    private InventoryZeroDao inventoryZeroDao;
    @Autowired
    private InventoryStatusDao inventoryStatusDao;
    @Autowired
    private WareHouseManagerProxy wareHouseManagerProxy;
    @Autowired
    private WarehouseDistrictDao warehouseDistrictDao;
    @Autowired
    private ZtoConfirmOrderQueueDao ztoConfirmOrderQueueDao;
    @Autowired
    private ZtoConfirmOrderQueueLogDao ztoConfirmOrderQueueLogDao;
    @Autowired
    private WarehouseLocationDao warehouseLocationDao;
    @Autowired
    private WarehouseDao warehouseDao;
    @Autowired
    private StockTransApplicationDao staDao;
    @Autowired
    private CustomsDeclarationDao customsDeclarationDao;
    @Autowired
    private MsgInboundOrderDao msgInboundOrderDao;
    @Autowired
    private StaLineDao staLineDao;
    @Autowired
    private StockTransVoucherDao stvDao;
    @Autowired
    private StvLineDao stvLineDao;
    @Autowired
    private RelationNikeDao relationNikeDao;
    @Autowired
    private InboundAgvToHubDao inboundAgvToHubDao;
    @Autowired
    private WareHouseManagerQuery wareHouseManagerQuery;
    @Autowired
    private SequenceManager sequenceManager;
    @Autowired
    private ChannelWhRefRefDao refDao;
    @Autowired
    private PickingListDao pickingListDao;
    @Autowired
    private PickingListPackageDao pickingListPackageDao;
    @Autowired
    private UserDao userDao;
    @Autowired
    private CustomerDao customerDao;
    @Autowired
    private OperationUnitDao operationUnitDao;
    @Autowired
    private SkuDao skuDao;
    @Autowired
    private ChannelWhRefRefDao warehouseShopRefDao;
    @Autowired
    private SkuSnDao snDao;
    @Autowired
    private SkuSnLogDao snLogDao;
    @Autowired
    private TransactionTypeDao transactionTypeDao;
    @Autowired
    private StaDeliveryInfoDao staDeliveryInfoDao;
    @Autowired
    private StockTransTxLogDao stockTransTxLogDao;
    @Autowired
    private PackageInfoDao packageInfoDao;
    @Autowired
    private HandOverListLineDao handOverListLineDao;
    @Autowired
    private HandOverListDao handOverListDao;
    @Autowired
    private BiChannelDao companyShopDao;
    @Autowired
    private InventoryCheckDao inventoryCheckDao;
    @Autowired
    private InventoryCheckLineDao inventoryCheckLineDao;
    @Autowired
    private InboundAgvToHubLineDao inboundAgvToHubLineDao;

    @Autowired
    private SfConfirmOrderQueueDao sfConfirmOrderQueueDao;
    @Autowired
    private SfConfirmOrderQueueLogDao sfConfirmOrderQueueLogDao;
    @Autowired
    private InventoryCheckDifferenceLineDao inventoryCheckDifferenceLineDao;
    @Autowired
    private SkuBarcodeDao skuBarcodeDao;
    @Autowired
    private InventoryCheckDifferenceSnLineDao inventoryCheckDifferenceSnLineDao;
    @Autowired
    private SfOrderWebserviceClientInter sfOrderWebserviceClient;
    @Autowired
    private TransDeliveryCfgDao transDeliveryCfgDao;
    @Autowired
    private TransportatorDao transportatorDao;
    @Autowired
    private PdaPostLogDao pdaPostLogDao;
    @Autowired
    private StaAdditionalLineDao staAdditionalLineDao;
    @Autowired
    private SkuCategoriesDao skuCategoriesDao;
    @Autowired
    private TransSfInfoDao transSfInfoDao;
    @Autowired
    private VelocityTemplateService templateService;
    @Autowired
    private InventoryCheckDifTotalLineDao vmiinvCheckLineDao;
    @Autowired
    private MsgRtnOutboundDao msgRtnOutboundDao;
    @Autowired
    private MsgOutboundOrderCancelDao msgOutboundOrderCancelDao;
    @Autowired
    private CompanyShopShareDao companyShopShareDao;
    @Autowired
    private MsgInboundOrderLineDao msgInLineDao;
    @Autowired
    private IDSFeedbackInfoCommandDao idsFeedbackDao;
    @Autowired
    private VmiFactory vmiFactory;
    @Autowired
    private MsgInboundOrderDao msgInDao;
    @Autowired
    private MsgRtnOutboundLineDao msgRtnOutboundLineDao;
    @Autowired
    private MsgOutboundOrderDao msgOutboundOrderDao;
    @Autowired
    private MsgRtnInboundOrderDao msgRtnInboundOrderDao;
    @Autowired
    private MsgRtnInboundOrderLineDao msgRtnLineDao;
    @Autowired
    private PdaSkuLocationDao pdaSkuLocationDao;
    @Autowired
    private CartonDao cartonDao;
    @Autowired
    private GiftLineDao giftLineDao;
    @Autowired
    private CartonLineDao cartonLineDao;
    @Autowired
    private VmiWarehouseFactory vmiWarehouseFactory;

    @Autowired
    private RocketMQProducerServer producerServer;

    @Autowired
    private SfOrderCancelQueueDao sfOrderCancelQueueDao;
    @Autowired
    private SfOrderCancelQueueLogDao sfOrderCancelQueueLogDao;
    @Autowired
    private WorkLineNoDao workLineNoDao;
    @Autowired
    private WareHouseManagerExecute wmExecute;
    @Autowired
    private SfOrderFilterLogDao sfOrderFilterLogDao;
    @Autowired
    private SmsQueueDao smsQueueDao;
    @Autowired
    private WareHouseLocationManager wareHouseLocationManager;
    @Autowired
    private OperationCenterDao operationCenterDao;
    @Autowired
    private StockTransVoucherDao stockTransVoucherDao;
    @Autowired
    private RmiService rmiService;
    @Autowired
    private Rmi4Wms rmi4Wms;
    @Autowired
    private WhStaPickingListLogDao pickingListLogDao;
    @Autowired
    private StvCheckImgDao stvCheckDao;
    @Autowired
    private ReturnApplicationDao returnApplicationDao;
    @Autowired
    private WhInfoTimeRefDao whInfoTimeRefDao;
    @Autowired
    private MsSnReportCommandDao msSnReportCommandDao;
    @Autowired
    private StaDeliverCommandDao staDeliverCommandDao;
    @Autowired
    private ImperfectCartonLineDao imperfectCartonLineDao;
    @Autowired
    private SkuModifyLogDao skuModifyLogDao;
    @Autowired
    private StaErrorLineDao staErrorLineDao;
    @Autowired
    private MsgInvoiceDao msgInvoiceDao;
    @Autowired
    private ConvenienceStoreOrderInfoDao convenienceStoreOrderInfoDao;
    @Autowired
    private SkuWarehouseRefDao skuWarehouseRefDao;
    @Autowired
    private WmsIMOccupiedAndReleaseDao wmsIMOccupiedAndReleaseDao;
    @Autowired
    private WareHouseOutBoundManager warehouseOutBoundManager;
    @Autowired
    private TransOlManagerProxy transOlManagerProxy;
    @Autowired
    private TransOlManager transOlManager;
    @Autowired
    private WhTransProvideNoDao whTransProvideNoDao;
    @Autowired
    private WarehouseMsgSkuDao warehouseMsgSkuDao;
    @Autowired
    private DistributionRuleDao distributionRuleDao;

    @Autowired
    private OutboundInfoManager outboundInfoManager;

    @Autowired
    private DistributionRuleConditionDao distributionRuleConditionDao;
    @Autowired
    private DistributionRuleDetailDao distributionRuleDetailDao;
    @Autowired
    private SkuImperfectDao imperfectDao;
    @Autowired
    OrderConfirmContentManager confirmContentManager;
    @Autowired
    private WmsOtherOutBoundInvNoticeOmsDao wmsOtherOutBoundInvNoticeOmsDao;
    @Resource(name = "skunumberMainTainReader")
    private ExcelReader skunumberMainImport;

    @Autowired
    private HubWmsManager hubWmsManager;
    @Autowired
    private StaCheckLogDao staCheckLogDao;

    @Autowired
    private VmiDefaultFactory vmiDefaultFactory;
    @Autowired
    private CommonConfigManager configManager;
    @Autowired
    private InventoryCheckListenerManager inventoryCheckListenerManager;
    @Autowired
    private WmsInvoiceOrderDao wmsInvoiceOrderDao;
    @Autowired
    private TransOnLineFactory transOnLineFactory;
    @Autowired
    private com.jumbo.wms.manager.channel.ChannelManager channelManager;
    @Autowired
    private TransAliWaybill transAliWaybill;
    @Autowired
    private StaOpDetailDao staOpDetailDao;
    @Autowired
    private WhContainerDao whContainerDao;
    @Autowired
    private AutoOutboundTurnboxManager autoOutboundTurnboxManager;
    @Autowired
    private SkuChildSnDao childSnDao;
    @Autowired
    private SkuChildSnLogDao childSnLogDao;
    @Autowired
    private DeliveryChangeConfigureDao deliveryChangeConfigureDao;
    @Autowired
    private DeliveryChanngeLogDao dliveryChanngeLogDao;
    @Autowired
    private ZoonDao zoonDao;
    @Autowired
    private StaCartonDao staCartonDao;
    @Autowired
    private WareHouseManagerCancel wareHouseManagerCancel;
    @Autowired
    private SfMailNoRemainRelationDao sfMailNoRemainRelationDao;
    @Autowired
    private BiChannelBrandRefDao biChannelBrandRefDao;
    @Autowired
    private WmsThreePLManager wmsThreePLManager;
    @Autowired
    private ConverseVmiReceiveManager converReceiveManager;
    @Autowired
    private SkuManager skuManager;
    @Autowired
    private HubWmsService hubWmsService;
    @Autowired
    private TransferOwnerTargetDao transferOwnerTargetDao;
    @Autowired
    private TransferOwnerSourceDao transferOwnerSourceDao;
    @Autowired
    private RecieverInfoDao recieverInfoDao;
    @Autowired
    AdvanceOrderAddInfoDao addInfoDao;
    @Autowired
    private QsSkuDao qsSkuDao;
    @Autowired
    private MessageProducerErrorDao messageProducerErrorDao;
    @Autowired
    private StaCheckRecordLogDao staCheckRecordLogDao;

    @Autowired
    private AdCheckManager adCheckManager;
    @Autowired
    private VmiRtoDao vmiRtoDao;
    @Autowired
    private VmiRtoLineDao vmiRtoLineDao;
    @Autowired
    private EMSConfirmOrderQueueDao emsConfirmOrderQueueDao;

    @Autowired
    private DeliveryChanngeLogDao delogDao;

    @Autowired
    private TransEmsInfoDao transEmsInfoDao;

    @Autowired
    private ZdhPiciDao zdhPiciDao;

    @Autowired
    private ZdhPiciLineDao zdhPiciLineDao;

    @Autowired
    private AdPackageLineDealDao adPackageLineDealDao;

    @Autowired
    private AdPackageLineDealLogDao adPackageLineDealLogDao;

    @Autowired
    private Wms3AdapterInteractManager wms3AdapterInteractManager;

    @Autowired
    private StarbucksIcePackageDao starbucksIcePackageDao;

    @Value("${levis.owner}")
    public String owner;

    @Autowired
    private CnInterfaceTask cnInterfaceTask;
    @Resource(name = "staReaderInboundShelvesImperfect")
    private ExcelReader staReaderInboundShelves;
    @Resource(name = "transOlZto")
    private TransOlInterface zto;
    @Resource(name = "transOlSto")
    private TransOlInterface sto;
    @Resource(name = "transOlEms")
    private TransOlInterface ems;
    @Resource(name = "transOlTtk")
    private TransOlInterface ttk;
    @Resource(name = "transOlWX")
    private TransOlInterface WX;
    @Resource(name = "transOlSf")
    private TransOlInterface sf;
    @Resource(name = "transOlYto")
    private TransOlInterface yto;
    @Resource(name = "transOlCxc")
    private TransOlInterface cxc;
    @Resource(name = "transOlRfd")
    private TransOlInterface rfd;
    @Resource(name = "transOlDefault")
    private TransOlInterface def;
    @Resource(name = "transOlCNP")
    private TransOlInterface cnp;
    @Resource(name = "transOlLogistics")
    private TransOlInterface logistics;
    @Resource(name = "transOlCnyz")
    private TransOlInterface cnyz;

    @Resource(name = "skuTargetOwnerReader")
    private ExcelReader skuTargetOwnerReader;


    /**
     * MQ JmsTemplate
     */
    private JmsTemplate taxMqJmsTemplate;
    private JmsTemplate bhMqJmsTemplate;

    @Resource
    private ApplicationContext applicationContext;

    @Resource(name = "mongoTemplate")
    private MongoOperations mongoOperation;

    @Autowired
    private GoodsCollectionDao goodsCollectionDao;
    @Autowired
    private WhPickingBatchDao whPickingBatchDao;

    @Autowired
    private ChooseOptionManager chooseOptionManager;

    @Autowired
    private CheckListManager checkListManager;

    @Autowired
    private GoodsCollectionLogDao goodsCollectionLogDao;

    @Autowired
    private ChannelWhRefRefDao channelWhRefRefDao;
    @Autowired
    private WhPingAnCoverManager pinanCoverManager;
    @Autowired
    private CustomsDeclarationLineDao customsDeclarationLineDao;
    @Autowired

    private SkuDeclarationDao skuDeclarationDao;
    @Autowired

    private Wms3AdapterInteractManager adapterManager;
    @Autowired 

    private WmsCancelOrderDao wmsCancelOrderDao;
    @Autowired 
    private WmsCancelOrderLineDao wmsCancelOrderLineDao;




    /**
     * 匹配物流缓存
     */
    TimeHashMap<String, TransOlInterface> transCache = new TimeHashMap<String, TransOlInterface>();

    /**
     * 快递服务配置缓存
     */
    TimeHashMap<String, TransOlInterface> transLpCodeCache = new TimeHashMap<String, TransOlInterface>();

    /**
     * 菜鸟云栈配置缓存
     */
    TimeHashMap<String, String> caiNiaoLpCodeCache = new TimeHashMap<String, String>();


    TimeHashMap<String, ChooseOption> chooseOptionCache = new TimeHashMap<String, ChooseOption>();

    TimeHashMap<String, List<StarbucksIcePackage>> starbucksIcePackageMap = new TimeHashMap<String, List<StarbucksIcePackage>>();


    /**
     * 仓库信息配置缓存
     */
    static TimeHashMap<Long, Warehouse> warehouseMap = new TimeHashMap<Long, Warehouse>();

    /**
     * 将外包仓出库时间同步给PAC的店铺配置缓存
     */
    Map<String, String> vmiOwnerCodeCache = null;


    @PostConstruct
    protected void init() {
        try {
            eventObserver = applicationContext.getBean(EventObserver.class);
            taxMqJmsTemplate = (JmsTemplate) applicationContext.getBean("jmsTemplate");
            bhMqJmsTemplate = (JmsTemplate) applicationContext.getBean("bhJmsTemplate");
        } catch (Exception e) {
            log.error("no bean named jmsTemplate Class:WareHouseManagerImpl");
        }
    }


    @Override
    public void updateNikeSkuInfoByBarCode(String packageBarCode, String barcode, String supplierCode, String keyProperties, String name, BigDecimal length, BigDecimal width, BigDecimal height, BigDecimal weight, String categorieName,
            String countryOfOrigin, String htsCode, String unitName) {
        Sku sku = skuDao.getByBarcode1(barcode);
        Long categorieId = null;
        if (StringUtils.hasText(categorieName)) {
            categorieId = skuCategoriesDao.fingSkuCategoriesIdByName(categorieName, new SingleColumnRowMapper<BigDecimal>()) == null ? null : skuCategoriesDao.fingSkuCategoriesIdByName(categorieName, new SingleColumnRowMapper<BigDecimal>()).longValue();
        }
        length = length.multiply(new BigDecimal(10));
        width = width.multiply(new BigDecimal(10));
        height = height.multiply(new BigDecimal(10));
        sku.setLength(length);
        sku.setWidth(width);
        sku.setHeight(height);
        sku.setGrossWeight(weight);
        if (categorieId != null) {
            sku.setSkuCategoriesId(categorieId);
        }
        sku.setLastModifyTime(new Date());
        sku.setCountryOfOrigin(countryOfOrigin);
        sku.setHtsCode(htsCode);
        sku.setUnitName(unitName);
        SkuModifyLog smf = refreshSkuModifyLog(sku);
        if (smf != null) {
            skuModifyLogDao.save(smf);// 将新建或修改后的SKU保存进变更日志表
        }


    }

    /**
     * 短信信息先存贮到中间表 KJL
     * 
     * @param sta
     */
    public void sendSms(StockTransApplication sta) {
        BiChannel shop = companyShopDao.getByCode(sta.getOwner());
        // Integer type = staDao.findStaType(sta.getId(), new
        // SingleColumnRowMapper<Integer>(Integer.class));
        Integer type = 50;
        // 判断店铺是否需要发送短信
        if (shop != null && shop.getIsSms() != null && shop.getIsSms() && StringUtils.hasText(shop.getSmsTemplate()) && (type.equals(50) || type.equals(51))) {
            String mobile = sta.getStaDeliveryInfo().getMobile();// 要发送的手机号码
            String msg = ""; // 发送短信信息内容
            try {
                Transportator trans = transportatorDao.findByCode(sta.getStaDeliveryInfo().getLpCode());
                String transName = "";
                if (trans != null) {
                    transName = trans.getName();
                }
                String orderCode = sta.getSlipCode2();
                if (!StringUtils.hasText(orderCode)) {
                    orderCode = "";
                }
                Map<String, Object> param = new HashMap<String, Object>();
                param.put("soCode", orderCode);
                param.put("transName", transName);
                param.put("transNo", sta.getStaDeliveryInfo().getTrackingNo() == null ? "" : sta.getStaDeliveryInfo().getTrackingNo());
                param.put("sendTime", FormatUtil.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss"));
                msg = templateService.parseVMContent(shop.getSmsTemplate(), param);
            } catch (Exception e) {
                log.error("", e);
            }
            // 记录信息到中间表
            SmsQueue queue = new SmsQueue();
            queue.setStaCode(sta.getCode());
            queue.setCreateTime(new Date());
            queue.setMobile(mobile);
            queue.setSmsContent(msg);
            queue.setErrorCount(0);
            queue.setOwner(sta.getOwner());
            smsQueueDao.save(queue);
        }
    }


    public List<InventoryStatusCommand> findInventoryStatusList(boolean isSystem, OperationUnit ou, Sort[] sorts) {
        List<InventoryStatusCommand> result = new ArrayList<InventoryStatusCommand>();
        List<InventoryStatus> beanList = inventoryStatusDao.findInventoryListByIsSystem(isSystem, ou == null ? null : ou.getId(), sorts);
        for (InventoryStatus invs : beanList) {
            InventoryStatusCommand cmd = new InventoryStatusCommand();
            cmd.setId(invs.getId());
            cmd.setDescription(invs.getDescription());
            cmd.setIsAvailable(invs.getIsAvailable());
            cmd.setIsForSale(invs.getIsForSale());
            cmd.setIsInCost(invs.getIsInCost());
            cmd.setIsSystem(invs.getIsSystem());
            cmd.setLastModifyTime(invs.getLastModifyTime());
            cmd.setName(invs.getName());
            result.add(cmd);
        }
        return result;
    }

    @Transactional(readOnly = true)
    public List<InventoryStatus> findInvStatusListByCompany(Long companyOuId) {
        return inventoryStatusDao.findInvStatusListByCompany(companyOuId, null);
    }

    @Transactional
    public InventoryStatus createInventoryStatus(InventoryStatus entity) {
        return inventoryStatusDao.save(entity);
    }

    @Transactional
    public InventoryStatus updaetInventoryStatus(InventoryStatus from) {
        InventoryStatus to = inventoryStatusDao.getByPrimaryKey(from.getId());
        to.setLastModifyTime(new Date());
        try {
            PropertyUtil.copyProperties(from, to, new PropListCopyable(new String[] {"name", "description", "isForSale", "isInCost", "isAvailable"}));
        } catch (Exception e) {
            log.error("", e);
            log.error("Copy Bean properties error for InventoryStatus");
            throw new RuntimeException("Copy Bean properties error for InventoryStatus");
        }
        return inventoryStatusDao.save(to);
    }

    @Transactional
    public WarehouseDistrict createWarehouseDistrict(WarehouseDistrict entity) {
        WarehouseDistrict target = null;
        if (warehouseDistrictDao.findDistrictByCodeAndOu(entity.getCode(), entity.getOu().getId()) == null) {
            target = warehouseDistrictDao.save(entity);
        }
        return target;
    }

    /**
     * 根据组织为仓库的组织id查找相关的仓库列表，或未找到仓库的本组织列表
     * 
     * @param operationUnitList
     * @return
     */
    @Transactional(readOnly = true)
    public Map<String, List<Object>> findOperationUnitOrWarehouseMap(List<OperationUnit> operationUnitList) {
        if (operationUnitList == null || operationUnitList.isEmpty()) return null;
        Map<String, List<Object>> map = new HashMap<String, List<Object>>();
        /**
         * 仓库附加信息未填写完整的组织列表
         */
        List<Object> ouList = new ArrayList<Object>();
        /**
         * 组织对应的仓库附加信息填写完整的仓库列表
         */
        List<Object> whList = new ArrayList<Object>();
        Warehouse entity = null;
        for (OperationUnit ou : operationUnitList) {
            entity = warehouseDao.getByOuId(ou.getId());
            if (entity != null)
                whList.add(entity); // 找到仓库附加信息的仓库
            else
                ouList.add(ou); // 未找到仓库信息的组织
        }
        map.put("operationUnitList", ouList);
        map.put("warehouseList", whList);
        return map;
    }

    /**
     * 查找仓库的附加信息
     * 
     * @param start
     * @param pageSize
     * @param operationUnitList
     * @param sorts
     * @return
     */
    @Transactional(readOnly = true)
    public Pagination<Warehouse> findWarehouseDetailList(int start, int pageSize, List<OperationUnit> operationUnitList, Sort[] sorts) {
        if (operationUnitList == null || operationUnitList.isEmpty()) return null;
        List<Long> ouids = new ArrayList<Long>();
        for (OperationUnit ou : operationUnitList) {
            ouids.add(ou.getId());
        }
        return warehouseDao.findWarehouseDetailList(start, pageSize, ouids, sorts, new WarehouseCommandRowMapper());
    }

    /**
     * 批量设置仓库共享性
     * 
     * @param ids
     * @param flag
     */
    @Transactional
    public void updateInventoryShare(List<Long> ids, int flag) {
        warehouseDao.updateWarehouseShare(ids, flag);
    }

    public StockTransVoucher purchaseReceiveStep1(Long staId, List<StvLine> stvLineList, List<GiftLineCommand> giftLineList, User creator, String memo, Boolean isPda, boolean isExport, Integer snType) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        StockTransVoucher stv = null;
        StockTransVoucher s = null;
        if (null == snType) snType = SkuSnType.GENERAL.getValue();
        if (SkuSnType.NO_BARCODE_SKU.getValue() == snType) {
            sta.setIsBkCheck(true);// 星巴克订单
        }
        if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType()) || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())) {
            s = purchaseReceiveStep1ForTranCoss(sta, stvLineList, creator);
        } else {
            s = purchaseReceiveStep1(sta, stvLineList, giftLineList, creator, memo, isPda, isExport);
        }

        if (s != null) {
            stv = new StockTransVoucher();
            try {
                stv.setId(s.getId());
                stv.setIsPda(s.getIsPda());
            } catch (Exception e) {
                log.error("", e);
            }
        }
        return stv;
    }

    @Override
    public StockTransVoucher purchaseReceiveStepImperfect(Long staId, List<StvLine> stvLineList, List<GiftLineCommand> giftLineList, User creator, String memo, Boolean isPda, boolean isExport, Integer snType) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        StockTransVoucher stv = null;
        StockTransVoucher s = null;
        if (null == snType) snType = SkuSnType.GENERAL.getValue();
        if (SkuSnType.NO_BARCODE_SKU.getValue() == snType) {
            sta.setIsBkCheck(true);// 星巴克订单
        }
        if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType()) || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())) {
            s = purchaseReceiveStep1ForTranCoss(sta, stvLineList, creator);
        } else {
            s = purchaseReceiveStep1(sta, stvLineList, giftLineList, creator, memo, isPda, isExport);
        }

        if (s != null) {
            stv = new StockTransVoucher();
            try {
                stv.setId(s.getId());
                stv.setIsPda(s.getIsPda());
            } catch (Exception e) {
                log.error("", e);
            }
        }
        // 记录日志
        channelManager.saveImperfectStvLineLog(staId, sta.getMainWarehouse());
        return stv;
    }

    /**
     * 库间移入页面收货 对于每一个收货的行StaLine,查找出库的Stv对应的StvLine 根据出库的StvLine的owner,判断未完成的数量
     * 
     * @param mode
     * @param staId
     * @param stvLineList
     * @param creator
     * @return
     */

    private StockTransVoucher purchaseReceiveStep1ForTranCoss(StockTransApplication sta, List<StvLine> stvLineList, User creator) {
        if (StockTransApplicationStatus.FINISHED.equals(sta.getStatus())) {
            log.error("......The StockTransApplication has been finished by others.");
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 库间移动的库存状态,用于StvLine的库存状态
        InventoryStatus ins = sta.getAddiStatus();
        StockTransVoucher stv = null;
        stv = stvDao.findStvCreatedByStaId(sta.getId());
        if (stv != null) {
            // business_exception_10009=作业申请单有未完成上架的作业明细单,在未完成之前不能进行收货操作
            log.error("......The StockTransApplication has StockTransVoucher created, you can do nothing before complete the stv.");
            throw new BusinessException(ErrorCode.STA_HAS_CREATED_STV);
        }
        // Stv的事物类型
        TransactionType tranType = transactionTypeDao.findByCode(TransactionType.returnTypeInbound(sta.getType()));
        if (tranType == null) {
            throw new BusinessException(ErrorCode.STV_TRAN_TYPE_ERROR, new Object[] {sta.getType().name()});
        }
        stv = new StockTransVoucher();
        BigDecimal biSeqNo = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
        stv.setBusinessSeqNo(biSeqNo.longValue());
        stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>(String.class)));
        stv.setMode(null);
        stv.setCreateTime(new Date());
        stv.setCreator(creator);
        stv.setDirection(TransactionDirection.INBOUND);
        // 库间移动,对于多个ower的情况可以不set
        stv.setOwner(sta.getOwner());
        stv.setSta(sta);
        stv.setLastModifyTime(new Date());
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setWarehouse(sta.getAddiWarehouse());
        stv.setTransactionType(tranType);
        stv = stvDao.save(stv);
        for (StvLine stvLine : stvLineList) {
            if (stvLine == null) {
                continue;
            }
            StaLine staLine = staLineDao.getByPrimaryKey(stvLine.getStaLine().getId());
            stvLine.setInvStatus(ins);
            stvLine.setSkuCost(staLine.getSkuCost());
            stvLine.setStaLine(staLine);
            stvLine.setDirection(TransactionDirection.INBOUND);
            stvLine.setStv(stv);
            stvLine.setTransactionType(tranType);
            stvLine.setWarehouse(stv.getWarehouse());
            stvLine.setOwner(staLine.getOwner());
            cloneStvLineForTranCoss(stvLine, sta.getId());
        }
        sta.setInboundOperator(creator);
        sta.setInboundTime(new Date());
        staDao.save(sta);
        stvDao.flush();
        whExe.createSN(stv, stvLineList);
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.RECEIVE.getValue(), creator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.RECEIVE.getValue(), creator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        }
        return stv;
    }

    private void cloneStvLineForTranCoss(StvLine stvLine, Long staId) {
        // 当前收货行有可能对应多个owner的移动计划
        // 查询出所有相同staLine.id的库间移出的计划list,并且包含剩余待执行量
        List<StvLine> list = stvLineDao.findStvLineListForTranCossByStaLineIdSql(stvLine.getStaLine().getId(), staId, new BeanPropertyRowMapper<StvLine>(StvLine.class), new Sort[] {new Sort("quantity desc")});
        if (list == null || list.isEmpty()) return;
        Long quantity = stvLine.getQuantity();
        for (StvLine each : list) {
            try {
                StvLine temp = stvLine.clone();
                // 当前数量>=未完成量
                temp.setQuantity(quantity >= each.getQuantity() ? each.getQuantity() : quantity);
                temp.setOwner(each.getOwner());
                temp.setBatchCode(each.getBatchCode());
                stvLineDao.save(temp);
                quantity -= each.getQuantity();
                if (quantity <= 0) {
                    break;
                }
            } catch (Exception e) {
                log.error("......StvLine.clone failure");
            }
        }
    }

    /**
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#purchaseReceiveStep1(InboundStoreMode,
     *      Long, List)
     */
    public StockTransVoucher purchaseReceiveStep1(StockTransApplication sta, List<StvLine> stvLineList, List<GiftLineCommand> giftLineList, User creator, String memo, Boolean isPda, boolean isExport) {
        if (StockTransApplicationStatus.FINISHED.equals(sta.getStatus())) {
            log.error("......The StockTransApplication has been finished by others.");
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(sta.getId());
        if (isExport && stv != null) {
            stvDao.delete(stv);
            stv = null;
        }
        if (!StockTransApplicationType.GI_PUT_SHELVES.equals(sta.getType()) && stv != null) {
            // business_exception_10009=作业申请单有未完成上架的作业明细单,在未完成之前不能进行收货操作
            log.error("......The StockTransApplication has StockTransVoucher created, you can do nothing before complete the stv.");
            throw new BusinessException(ErrorCode.STA_HAS_CREATED_STV);
        }
        TransactionType tranType = transactionTypeDao.findByCode(TransactionType.returnTypeInbound(sta.getType()));
        if (tranType == null) {
            throw new BusinessException(ErrorCode.STV_TRAN_TYPE_ERROR, new Object[] {sta.getType().name()});
        }
        BiChannel bc = biChannelDao.getByCode(sta.getOwner());
        if (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType()) && bc == null) {
            throw new BusinessException(ErrorCode.CHANNEL_NOT_FOUNT, new Object[] {sta.getOwner()});
        }
        InventoryStatus ins = null;
        if (StockTransApplicationType.INBOUND_PURCHASE.getValue() == sta.getType().getValue() || StockTransApplicationType.GI_PUT_SHELVES.getValue() == sta.getType().getValue()) {
            ins = inventoryStatusDao.findInvStatusForSale(findCompanyOUByWarehouseId(sta.getMainWarehouse().getId()).getId());
            // business_exception_stv_10103=请初始化可销售的库存状态数据后再尝试此操作
            if (ins == null) {
                throw new BusinessException(ErrorCode.STV_NO_INVENTORY_STATUS);
            }
        }
        List<StvLineCommand> barCodes = null;
        if (!StringUtil.isEmpty(sta.getSlipCode1())
                && ((StockTransApplicationType.SAMPLE_INBOUND.equals(sta.getType()) || StockTransApplicationType.SERIAL_NUMBER_INBOUND.equals(sta.getType())) || (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType())
                        && (bc.getIsNotValInBoundBachCode() == null || !bc.getIsNotValInBoundBachCode()) && !Constants.NIKE_SHOP1_ID.equals(sta.getOwner()) && !Constants.NIKE_SHOP2_ID.equals(sta.getOwner()) && !StringUtil.isEmpty(sta.getSlipCode1())))) {
            if (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType())) {
                barCodes = whExe.getOutBoundBachCode(sta.getType(), null, null, sta.getSlipCode1(), sta.getCode());
            }else {
                barCodes = whExe.getOutBoundBachCode(sta.getType(), null, null, sta.getSlipCode1(), null);
            }
        }
        SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMdd");
        Date inboundTime = new Date();
        stv = new StockTransVoucher();
        BigDecimal biSeqNo = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
        stv.setBusinessSeqNo(biSeqNo.longValue());
        stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>(String.class)));
        stv.setMode(null);
        stv.setCreateTime(inboundTime);
        stv.setCreator(creator);
        stv.setDirection(TransactionDirection.INBOUND);
        stv.setOwner(sta.getOwner());
        stv.setSta(sta);
        stv.setLastModifyTime(new Date());
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setIsPda(isPda);

        if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType()) || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType()) || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())) {
            stv.setWarehouse(sta.getAddiWarehouse());
        } else {
            stv.setWarehouse(sta.getMainWarehouse());
        }
        stv.setTransactionType(tranType);
        stv = stvDao.save(stv);
        // stvDao.flush();
        String batchCode = Long.valueOf(inboundTime.getTime()).toString();
        List<StvLine> stvLines = new ArrayList<StvLine>();
        Map<Long, Long> skuQtyMap = new HashMap<Long, Long>();
        Map<String, Long> skuBatchQty = new HashMap<String, Long>();
        if (StockTransApplicationType.SERIAL_NUMBER_INBOUND.equals(sta.getType())) {
            for (StaLineCommand com : staLineDao.findSkuAndQty(sta.getId(), new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class))) {
                skuQtyMap.put(com.getSkuId(), com.getQuantity());
            }
        }
        for (StvLine stvLine : stvLineList) {
            if (stvLine == null) {
                continue;
            }
            StaLine staLine = null;
            if (stvLine.getStaLine() != null && stvLine.getStaLine().getId() != null) {
                staLine = staLineDao.getByPrimaryKey(stvLine.getStaLine().getId());
            } else {
                staLine = this.findStaLineByBarCodeOrCodeProps(stvLine.getSku(), stv.getSta().getId());
            }
            // 采购入库才需要设置库存状态,退换货入库、其他入库都有库存状态
            if (StockTransApplicationType.INBOUND_PURCHASE.getValue() == sta.getType().getValue() || StockTransApplicationType.GI_PUT_SHELVES.getValue() == sta.getType().getValue()) {
                stvLine.setInvStatus(ins);
            } else if (StockTransApplicationType.INBOUND_SETTLEMENT.getValue() == sta.getType().getValue() || StockTransApplicationType.INBOUND_CONSIGNMENT.getValue() == sta.getType().getValue()
                    || StockTransApplicationType.INBOUND_GIFT.getValue() == sta.getType().getValue() || StockTransApplicationType.INBOUND_MOBILE.getValue() == sta.getType().getValue()
                    || StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue() == sta.getType().getValue() || StockTransApplicationType.SAMPLE_INBOUND.getValue() == sta.getType().getValue()
                    || StockTransApplicationType.REAPAIR_INBOUND.getValue() == sta.getType().getValue() || StockTransApplicationType.SERIAL_NUMBER_INBOUND.getValue() == sta.getType().getValue()
                    || StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.getValue() == sta.getType().getValue() || StockTransApplicationType.SKU_EXCHANGE_INBOUND.getValue() == sta.getType().getValue()) {
                stvLine.setInvStatus(staLine.getInvStatus());
            }
            // 采购入库、退换货入库需要设置库存成本,其他出入库根据页面数据保存
            if (StockTransApplicationType.INBOUND_OTHERS.getValue() != sta.getType().getValue()) {
                stvLine.setSkuCost(staLine.getSkuCost());
            }
            stvLine.setStaLine(staLine);
            if (StringUtils.hasLength(staLine.getOwner())) {
                stvLine.setOwner(staLine.getOwner());
            } else {
                stvLine.setOwner(sta.getOwner());
            }
            if (null != bc && null != bc.getIsReturnCheckBatch() && bc.getIsReturnCheckBatch() && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
                String returnOwner = stvLine.getOwner();
                if (StringUtils.hasLength(bc.getReturnDefaultOwner())) {
                    returnOwner = bc.getReturnDefaultOwner();
                }
                stvLines.add(wmExecute.createStvLine(batchCode, TransactionDirection.INBOUND, inboundTime, stvLine.getInvStatus(), stvLine.getLocation(), returnOwner, null, null, null, stvLine.getQuantity(), null, stvLine.getSku(), stvLine.getSkuCost(),
                        stvLine.getSns(), stvLine.getProductionDate(), stvLine.getValidDate(), stvLine.getExpireDate(), stvLine.getStaLine(), stv));
            } else {
                if (StockTransApplicationType.SAMPLE_INBOUND.equals(sta.getType())
                        || (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType()) && (bc.getIsNotValInBoundBachCode() == null || !bc.getIsNotValInBoundBachCode()) && !StringUtil.isEmpty(sta.getSlipCode1()))) {
                    // !Constants.NIKE_SHOP2_ID.equals(sta.getOwner()) &&
                    // !Constants.NIKE_SHOP1_ID.equals(sta.getOwner()) &&
                    // !StringUtil.isEmpty(sta.getSlipCode1())
                    stvLines.addAll(wmExecute.createStvLineByDate(stv, stvLine, barCodes, true));
                } else if (StockTransApplicationType.SERIAL_NUMBER_INBOUND.equals(sta.getType())) {
                    /*******************************************************/
                    // 根据出库数量合并 例如A:10件（5 2012 ；2 2013;3 2014）
                    // 根据入库数量合并 例如B:20件 C:30件
                    // 计算倍数关系 B/A = 2 C/A = 3 可以得出需要入库 B（10 2012;4 2013) C（ 2012；4
                    // 2013）
                    /**************************************************************/
                    // 获取商品品种数
                    if (barCodes == null || barCodes.size() == 0) {
                        throw new BusinessException(ErrorCode.INBOUND_BATCH_CODE_ERROR);
                    }
                    Long sumout = 0L;
                    for (StvLineCommand stvLineCommand : barCodes) {
                        sumout += stvLineCommand.getQuantity();
                    }
                    Long beishu = skuQtyMap.get(stvLine.getSku().getId()) / sumout;
                    // 当前Line信息所需上架数量
                    Long quantity = stvLine.getQuantity();
                    String sns = stvLine.getSns();
                    for (StvLineCommand stvLineCommand : barCodes) {
                        String key = stvLine.getSku().getId() + "_" + stvLineCommand.getBatchCode() + "_" + (InboundStoreMode.SHELF_MANAGEMENT.equals(stvLine.getSku().getStoremode()) ? formatDate.format(stvLineCommand.getExpireDate()) : "");
                        // 当前商品当前批次已上架数量
                        Long exeQty = skuBatchQty.containsKey(key) ? skuBatchQty.get(key) : 0;
                        // 计算当前商品当前批次可执行数量 = （当前商品当前批次执行量） - （当前商品当前批次已上架数量）
                        Long tempQty = (stvLineCommand.getQuantity() * beishu) - exeQty;
                        if (tempQty < 1) continue;
                        // 计算当前商品当前批次最终执行量
                        Long qty = quantity > tempQty ? tempQty : quantity;

                        String sn = "";
                        String tempSn = "";
                        if (!StringUtil.isEmpty(sns)) {
                            String[] _sns = sns.split(",");
                            for (int i = 0; i < _sns.length; i++) {
                                if (i < qty) {
                                    sn += _sns[i] + ",";
                                } else {
                                    tempSn += _sns[i] + ",";
                                }
                            }
                            sn = sn.substring(0, sn.length() - 1);
                            tempSn = StringUtil.isEmpty(tempSn) ? null : tempSn.substring(0, tempSn.length() - 1);
                            sns = tempSn;
                        }
                        // 生成StvLine 数据 -- 拆分入库 对于过期时间是入库填写什么就入什么
                        stvLines.add(wmExecute.createStvLine(stvLineCommand.getBatchCode(), TransactionDirection.INBOUND, stvLineCommand.getInBoundTime(), stvLine.getInvStatus(), stvLine.getLocation(), sta.getOwner(), null, null, null, qty, null,
                                stvLine.getSku(), stvLine.getSkuCost(), sn, stvLine.getProductionDate(), stvLine.getValidDate(), stvLine.getExpireDate(), stvLine.getStaLine(), stv));
                        quantity -= qty;
                        skuBatchQty.put(key, exeQty + qty);
                        if (quantity < 1) break;
                    }
                    if (quantity != 0) {
                        throw new BusinessException(ErrorCode.INBOUND_BATCH_CODE_ERROR);
                    }
                } else {
                    stvLines.add(wmExecute.createStvLine(batchCode, TransactionDirection.INBOUND, inboundTime, stvLine.getInvStatus(), stvLine.getLocation(), stvLine.getOwner(), null, null, null, stvLine.getQuantity(), null, stvLine.getSku(),
                            stvLine.getSkuCost(), stvLine.getSns(), stvLine.getProductionDate(), stvLine.getValidDate(), stvLine.getExpireDate(), stvLine.getStaLine(), stv));
                }
            }
        }
        stv.setStvLines(stvLines);
        stv.setMemo(memo);
        sta.setMemo((sta.getMemo() == null ? "" : sta.getMemo()) + (memo == null ? "" : memo));
        sta.setInboundOperator(creator);
        sta.setInboundTime(new Date());
        staDao.save(sta);
        stvDao.flush();
        if (null != sta.getIsBkCheck() && true == sta.getIsBkCheck()) {// 星巴克SN关联stv（SN已创建）
            whExe.updateSN(stv, stvLines);
        } else {// 非星巴克创SN
            whExe.createSN(stv, stvLines);
        }
        if (giftLineList != null) {
            giftLineDao.deleteGiftLineByStaId(sta.getId());
            whExe.createGiftLine(giftLineList);
        }
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.RECEIVE.getValue(), creator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.RECEIVE.getValue(), creator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        }
        wmsThreePLManager.createCnWmsOrderStatusUploadByStv(stv.getId());

        // ======================================================================
        // 判断STA类型，sta是否已经生成过
        // vmi根据店铺生成反馈文件
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE && StringUtil.isEmpty(sta.getDataSource())) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null) {
                vmi.generateReceivingWhenInbound(sta, stv);
            }
        }
        // 菜鸟的生成库存状态修改盘点数据
        if (org.apache.commons.lang3.StringUtils.equals(sta.getSystemKey(), Constants.CAINIAO_DB_SYSTEM_KEY)) {
            cnInterfaceTask.createInvStatusUpdateNoticeToCaiNiao(sta.getId());
        }
        if (isExport) {
            purchaseReceiveStep2(stv.getId(), stvLines, false, creator, false, true);
        }
        return stv;
    }

    /**
     * 更新SN的状态
     * 
     * @param stv
     * @param status
     */
    private void updateSNStatusByStv(StockTransVoucher stv, SkuSnStatus status, String batchCode) {
        snDao.updateInboundByStvIdSql(stv.getId(), status.getValue(), batchCode);
        snLogDao.createInboundLogByStvIdSql(stv.getId(), batchCode);
    }

    /**
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#findStaLineListByStaId(java.lang.Long,
     *      loxia.dao.Sort[])
     */
    public List<StaLineCommand> findStaLineListByStaId(Long staId, Sort[] sorts) {
        List<StaLineCommand> staLineList = staLineDao.findStaLineListByStaIdSql(staId, false, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
        return staLineList;
    }

    public List<StockTransApplicationCommand> findCartonStaByGroupStaId(Long staId) {
        return staDao.findCartonStaListByStaIdSql(staId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public Pagination<StaLineCommand> findStaLineListByStaIdByPage(int start, int pageSize, Long staId, Sort[] sorts) {
        return staLineDao.findStaLineListByStaIdSqlByPage(start, pageSize, staId, false, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    // 手动收货
    public List<StaLineCommand> findStaLineListByStaIdHand(Long staId, Sort[] sorts) {
        return staLineDao.findLineListByStaId(staId, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public Pagination<StaLineCommand> findStaLineByStaFinish(int start, int pageSize, Long staId, Sort[] sorts) {
        return staLineDao.findStaLineByStaFinish(start, pageSize, staId, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public List<StaLineCommand> findVMIFlittingEnterLine(Long staId, Sort[] sorts) {
        return staLineDao.findVMIFlittingEnterLine(staId, false, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public Pagination<StaLineCommand> findStaLineCommandListByStaId(int start, int pageSize, Long staId, Sort[] sorts) {
        return staLineDao.findListByStaId(start, pageSize, staId, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * 获取STA作业单的明细行,包含sku的相关信息
     */
    @Override
    public Pagination<StaLineCommand> findHistoricalOrderDetailList(int start, int pageSize, Long staId, Sort[] sorts) {
        return staLineDao.findHistoricalOrderDetailListByStaId(start, pageSize, staId, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public Pagination<StvLineCommand> findStvLineCommandListByStaId(int start, int pageSize, Long staId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, StvLineCommand stvLineCommand, Sort[] sorts) {
        Map<String, Object> msp = stvLineCommand.getQueryMap();
        if (createTime != null) {
            msp.put("createTime", createTime);
        }
        if (endCreateTime != null) {
            msp.put("endCreateTime", endCreateTime);
        }
        if (finishTime != null) {
            msp.put("finishTime", finishTime);
        }
        if (endFinishTime != null) {
            msp.put("endFinishTime", endFinishTime);
        }
        return stvLineDao.findListByStaId(start, pageSize, staId, msp, sorts, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    @Override
    public Pagination<StvLineCommand> findHistoricalOrderDetailOperateList(int start, int pageSize, Long staId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, StvLineCommand stvLineCommand, Sort[] sorts) {
        Map<String, Object> msp = stvLineCommand.getQueryMap();
        if (createTime != null) {
            msp.put("createTime", createTime);
        }
        if (endCreateTime != null) {
            msp.put("endCreateTime", endCreateTime);
        }
        if (finishTime != null) {
            msp.put("finishTime", finishTime);
        }
        if (endFinishTime != null) {
            msp.put("endFinishTime", endFinishTime);
        }
        return stvLineDao.findHistoricalOrderDetailOperateListByStaId(start, pageSize, staId, msp, sorts, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public Pagination<StaLineCommand> findStvLineSnListByStaId(int start, int pageSize, Long staId, Sort[] sorts) {
        return staLineDao.findStaLineSnByStaId(start, pageSize, staId, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#findStaNotFinishedListByType(StockTransApplicationType,
     *      OperationUnit, Sort[])
     */
    public List<StockTransApplicationCommand> findStaNotFinishedListByTypeNoPage(StockTransApplicationType type, OperationUnit wh, Sort[] sorts) {
        return staDao.findStaNotFinishedListByTypeNoPage(type.getValue(), wh.getId(), sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public List<StockTransApplicationCommand> findTranCossStaNotFinishedListByTypeNoPage(StockTransApplicationType type, OperationUnit wh, Sort[] sorts) {
        return staDao.findTranCossStaNotFinishedListByTypeNoPage(type.getValue(), wh.getId(), sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public String findAllOptionListByOptionKey(String optionkey, String categoryCode) {

        return chooseOptionDao.findAllOptionListByOptionKey(optionkey, categoryCode, new SingleColumnRowMapper<String>());
    }

    @Override
    public Map<Integer, StockTransApplicationType> selectTypesByStaid() {

        Map<Integer, StockTransApplicationType> map = new HashMap<Integer, StockTransApplicationType>();
        try {
            map.put(StockTransApplicationType.SAMPLE_INBOUND.getValue(), StockTransApplicationType.SAMPLE_INBOUND);
            map.put(StockTransApplicationType.SKU_EXCHANGE_INBOUND.getValue(), StockTransApplicationType.SKU_EXCHANGE_INBOUND);
            map.put(StockTransApplicationType.REAPAIR_INBOUND.getValue(), StockTransApplicationType.REAPAIR_INBOUND);
            map.put(StockTransApplicationType.SERIAL_NUMBER_INBOUND.getValue(), StockTransApplicationType.SERIAL_NUMBER_INBOUND);
            map.put(StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.getValue(), StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND);

        } catch (Exception e) {
            log.error("", e);
        }
        return map;
    }

    @Override
    public Map<Integer, StockTransApplicationStatus> selectStatusByStaid() {

        Map<Integer, StockTransApplicationStatus> map = new HashMap<Integer, StockTransApplicationStatus>();
        try {
            map.put(StockTransApplicationStatus.CREATED.getValue(), StockTransApplicationStatus.CREATED);
            map.put(StockTransApplicationStatus.FINISHED.getValue(), StockTransApplicationStatus.FINISHED);

        } catch (Exception e) {
            log.error("", e);
        }
        return map;
    }


    public Pagination<StockTransApplicationCommand> findStaNotFinishedImperfectListByType(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, int start, int size, String slipCode1, String slipCode2, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String slipCode3 = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode3())) {
                slipCode3 = sta.getSlipCode3();
            }
        }
        if (slipCode1 != null && slipCode1.length() == 0) {
            slipCode1 = null;
        }

        if (slipCode2 != null && slipCode2.length() == 0) {
            slipCode2 = null;
        }
        Pagination<StockTransApplicationCommand> list =
                staDao.findRtnInbountSta(start, size, slipCode3, wh.getId(), sorts, startTime, endTime, code, refcode, owner, slipCode1, slipCode2, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        if (list.getItems() != null) {
            for (StockTransApplicationCommand tmp : list.getItems()) {
                StockTransApplicationExtInfoCommand cmd = staDao.findRtnInbountStaTransInfo(tmp.getId());
                if (cmd != null) {

                }
                tmp.setTransNo(cmd.getTransNo());
                tmp.setLpcode(cmd.getLpcode());
                tmp.setIsNeedInvoice(cmd.getIsNeedInvoice());
                tmp.setReturnReasonMemo(cmd.getReturnReasonMemo());
                StockTransApplicationExtInfoCommand cmd1 = staDao.findRtnInbountStaStvInfo(tmp.getId());
                if (cmd1 == null) {
                    tmp.setProcessStatus(7);
                } else {
                    tmp.setIsPDA(cmd1.getIsPDA());
                    tmp.setStvId(cmd1.getStvId());
                    tmp.setSkuQty(cmd1.getSkuQty());
                    tmp.setStvMode(cmd1.getStvMode());
                }
            }
        }
        return list;
    }

    public Pagination<StockTransApplicationCommand> findStaNotFinishedImperfectListByType1(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, int start, int size, String slipCode1, String slipCode2, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String slipCode3 = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode3())) {
                slipCode3 = sta.getSlipCode3();
            }
        }

        if (slipCode1 != null && slipCode1.length() == 0) {
            slipCode1 = null;
        }

        if (slipCode2 != null && slipCode2.length() == 0) {
            slipCode2 = null;
        }
        return staDao.findStaNotFinishedImperfectListByType(start, size, slipCode3, wh.getId(), sorts, startTime, endTime, code, refcode, owner, slipCode1, slipCode2, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }

    public Pagination<StockTransApplicationCommand> findStaNotFinishedListByType(StockTransApplication sta, Integer isNeedInvoice, String lpcode, String trackingNo, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime,
            int start, int size, String slipCode1, String slipCode2, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String slipCode3 = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode3())) {
                slipCode3 = sta.getSlipCode3();
            }
        }
        if (lpcode != null && lpcode.length() == 0) {
            lpcode = null;
        }

        if (slipCode1 != null && slipCode1.length() == 0) {
            slipCode1 = null;
        }

        if (slipCode2 != null && slipCode2.length() == 0) {
            slipCode2 = null;
        }

        if (trackingNo != null && !"".equals(trackingNo)) {
            if (StringUtils.hasText(trackingNo)) {
                trackingNo = trackingNo + "%";
            }
        } else if (trackingNo != null && trackingNo.length() == 0) {
            trackingNo = null;
        }
        // 查询条件有运单号和物流商
        if (trackingNo != null || lpcode != null || isNeedInvoice != null) {
            return staDao.findStaNotFinishedListByType(start, size, slipCode3, sta.getType().getValue(), wh.getId(), sorts, startTime, endTime, arriveStartTime, arriveEndTime, code, refcode, owner, isNeedInvoice, lpcode, trackingNo, slipCode1, slipCode2,
                    new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        } else {
            Pagination<StockTransApplicationCommand> p =
                    staDao.findStaNotFinishedListByTypeNoTransNo(start, size, slipCode3, sta.getType().getValue(), wh.getId(), sorts, startTime, endTime, arriveStartTime, arriveEndTime, code, refcode, owner, isNeedInvoice, slipCode1, slipCode2,
                            new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
            if (p != null && p.getTotalPages() > 0) {
                for (StockTransApplicationCommand staCom : p.getItems()) {
                    StockTransApplicationCommand s = staDeliveryInfoDao.findDeliveryInfoByStaRtn(staCom.getId(), new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
                    if (s != null) {
                        staCom.setTrackingNo(s.getTrackingNo());
                        staCom.setLpcode(s.getLpcode());
                        staCom.setIsNeedInvoice(s.getIsNeedInvoice());
                        staCom.setRemork(s.getRemork());
                    }
                    Integer status = stvDao.findProcessStatus(staCom.getId(), new SingleColumnRowMapper<Integer>(Integer.class));
                    if (status != null) {
                        staCom.setProcessStatus(7);
                        staCom.setStvId(status.longValue());
                    } else {
                        if (staCom != null && staCom.getStatus() != null) {
                            staCom.setProcessStatus(staCom.getStatus().getValue());
                        }
                    }
                }
            }
            return p;
        }
    }

    @Override
    public Pagination<StockTransApplicationCommand> findStaNotFinishedListByTypeNew(StockTransApplication sta, Integer isNeedInvoice, String lpcode, String trackingNo, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime,
            Date arriveEndTime, int start, int size, String slipCode1, String slipCode2, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String slipCode3 = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode3())) {
                slipCode3 = sta.getSlipCode3();
            }
        }
        if (lpcode != null && lpcode.length() == 0) {
            lpcode = null;
        }

        if (slipCode1 != null && slipCode1.length() == 0) {
            slipCode1 = null;
        }

        if (slipCode2 != null && slipCode2.length() == 0) {
            slipCode2 = null;
        }

        if (trackingNo != null && !"".equals(trackingNo)) {
            if (StringUtils.hasText(trackingNo)) {
                trackingNo = trackingNo + "%";
            }
        } else if (trackingNo != null && trackingNo.length() == 0) {
            trackingNo = null;
        }

        return staDao.findStaNotFinishedListByTypeNew(start, size, slipCode3, sta.getType().getValue(), wh.getId(), sorts, startTime, endTime, arriveStartTime, arriveEndTime, code, refcode, owner, isNeedInvoice, lpcode, trackingNo, slipCode1, slipCode2,
                new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public Pagination<StockTransApplicationCommand> findlockedSta(StockTransApplication sta, String barCode, Date startTime, Date endTime, String lpcode, String trackingNo, OperationUnit wh, String receiver, String receiverPhone, String orderCode,
            String taobaoOrderCode, int start, int size, Sort[] sorts) {
        String code = null;
        String refSlipCode = null;
        String owner = null;
        String slipCode3 = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode3())) {
                slipCode3 = sta.getSlipCode3();
            }

        }

        if (lpcode != null && !"".equals(lpcode)) {
            if (StringUtils.hasText(lpcode)) {
                lpcode = lpcode + "%";
            }
        } else if (lpcode != null && lpcode.length() == 0) {
            lpcode = null;
        }
        if (trackingNo != null && !"".equals(trackingNo)) {
            if (StringUtils.hasText(trackingNo)) {
                trackingNo = trackingNo + "%";
            }
        } else if (trackingNo != null && trackingNo.length() == 0) {
            trackingNo = null;
        }

        if (receiver != null && !"".equals(receiver)) {
            if (StringUtils.hasText(receiver)) {
                receiver = receiver + "%";
            }
        } else if (receiver != null && receiver.length() == 0) {
            receiver = null;
        }

        if (receiverPhone != null && !"".equals(receiverPhone)) {
            if (StringUtils.hasText(receiverPhone)) {
                receiverPhone = receiverPhone + "%";
            }
        } else if (receiverPhone != null && receiverPhone.length() == 0) {
            receiverPhone = null;
        }

        if (orderCode != null && !"".equals(orderCode)) {
            if (StringUtils.hasText(orderCode)) {
                orderCode = orderCode + "%";
            }
        } else if (orderCode != null && orderCode.length() == 0) {
            orderCode = null;
        }

        if (taobaoOrderCode != null && !"".equals(taobaoOrderCode)) {
            if (StringUtils.hasText(taobaoOrderCode)) {
                taobaoOrderCode = taobaoOrderCode + "%";
            }
        } else if (taobaoOrderCode != null && taobaoOrderCode.length() == 0) {
            taobaoOrderCode = null;
        }

        if (barCode != null && !"".equals(barCode)) {
            if (StringUtils.hasText(barCode)) {
                barCode = barCode.trim();
            }
        } else if (barCode == null || "".equals(barCode)) {
            return staDao.findlockedStaNoSku(start, size, sorts, slipCode3, startTime, endTime, code, refSlipCode, owner, lpcode, trackingNo, wh.getId(), receiver, receiverPhone, orderCode, taobaoOrderCode,
                    new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        }
        return staDao.findlockedSta(start, size, sorts, slipCode3, startTime, endTime, code, refSlipCode, owner, lpcode, trackingNo, wh.getId(), receiver, receiverPhone, orderCode, taobaoOrderCode, barCode,
                new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));

    }

    public void updateStaUnlocked(Long staId, String lpcode, String trackingNo, Long returnReasonType, String returnReasonMemo, Long ouId, String loginName) {

        // staDao.updateStaUnlocked(staId);
        staDao.updateStaUnlocked1(staId, loginName);

        if ((lpcode != null || !"".equals(lpcode)) && (trackingNo != null || !"".equals(trackingNo))) {

            List<ReturnPackage> rp = returnPackageDao.getPackageByTrackingNo(trackingNo.trim());
            if (rp == null || rp.size() == 0) {
                throw new BusinessException(ErrorCode.PACGING_IS_NOT_REGISTER, new Object[] {trackingNo});
            }
            returnPackageDao.updatePackageStatus(trackingNo, ReturnPackageStatus.IN_PROCESSING.getValue(), staId, ouId);
            StaDeliveryInfoCommand deliveryInfo = staDeliveryInfoDao.findTheStaDeliveryInfoByStaId(staId, new BeanPropertyRowMapperExt<StaDeliveryInfoCommand>(StaDeliveryInfoCommand.class));
            if (deliveryInfo != null) {
                staDeliveryInfoDao.updateStaDeliveryByStaId(staId, lpcode, trackingNo, returnReasonType, returnReasonMemo);
            } else {
                staDeliveryInfoDao.insertStaDeliveryByStaId(staId, lpcode, trackingNo, returnReasonType, returnReasonMemo);
            }
        }
    }

    public Pagination<StockTransApplicationCommand> findTranCossStaNotFinishedListByType(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime, int start, int size, String slipCode1,
            String slipCode2, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
        }
        return staDao.findTranCossStaNotFinishedListByType(sta.getType().getValue(), wh.getId(), new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), code, refcode, owner, startTime, endTime, arriveStartTime,
                arriveEndTime, start, size, slipCode1, slipCode2, sorts);
    }

    /**
     * 退货申请查询
     */
    public Pagination<ReturnApplicationCommand> findReturnAppList(Long ouId, ReturnApplicationCommand app, Date startTime, Date endTime, int start, int size, Sort[] sorts, Date feedBackstartTime, Date feedBackendTime) {
        String brand = null;
        String owner = null;// 仓库ID
        String code = null;// 编码
        String slipCode = null;// 相关单据号
        String slipCode2 = null;// 平台单据号
        String statusName = null;// 状态
        String trankNo = null;// 运单号
        String lpCode = null;// 物流商
        String returnUser = null;// 退货人
        String telephone = null;// 联系电话
        String source = null;
        String omsStatus = null;
        String staCode = null;
        String staStatus = null;
        if (app != null) {
            if (StringUtils.hasText(app.getOwner())) {
                owner = app.getOwner();
            }
            if (StringUtils.hasText(app.getBrand())) {
                brand = app.getBrand();
            }
            if (StringUtils.hasText(app.getCode())) {
                code = app.getCode() + "%";
            }
            if (StringUtils.hasText(app.getSlipCode())) {
                slipCode = "%" + app.getSlipCode() + "%";
            }
            if (StringUtils.hasText(app.getSlipCode2())) {
                slipCode2 = "%" + app.getSlipCode2() + "%";
            }
            if (StringUtils.hasText(app.getStatusName())) {
                statusName = app.getStatusName();
            }
            if (StringUtils.hasText(app.getTrankNo())) {
                trankNo = "%" + app.getTrankNo() + "%";
            }
            if (StringUtils.hasText(app.getLpCode())) {
                lpCode = app.getLpCode();
            }
            if (StringUtils.hasText(app.getReturnUser())) {
                returnUser = "%" + app.getReturnUser() + "%";
            }
            if (StringUtils.hasText(app.getTelephone())) {
                telephone = "%" + app.getTelephone() + "%";
            }
            if (StringUtils.hasText(app.getOmsStatusName())) {
                omsStatus = app.getOmsStatusName();
            }
            if (StringUtils.hasText(app.getStaCode())) {
                staCode = app.getStaCode();
            }
            if (StringUtils.hasText(app.getStatus())) {
                staStatus = app.getStatus();
            }

        }
        return returnApplicationDao.findReturnAppList(start, size, new BeanPropertyRowMapperExt<ReturnApplicationCommand>(ReturnApplicationCommand.class), sorts, ouId, owner, omsStatus, staCode, code, slipCode, slipCode2, statusName, trankNo, lpCode,
                returnUser, telephone, source, startTime, endTime, feedBackstartTime, feedBackendTime, staStatus, brand);
    }



    public List<StockTransApplicationCommand> findPredefinedStaByType(List<Integer> types, OperationUnit wh, Sort[] sorts) {
        return staDao.findPredefinedStaByType(types, wh.getId(), sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    // 预定义查询 - 未分页操作
    public List<StockTransApplicationCommand> findPredefinedSta(OperationUnit wh, Sort[] sorts) {
        ArrayList<Integer> types = new ArrayList<Integer>();
        types.add(StockTransApplicationType.INBOUND_CONSIGNMENT.getValue());
        types.add(StockTransApplicationType.INBOUND_SETTLEMENT.getValue());
        types.add(StockTransApplicationType.INBOUND_GIFT.getValue());
        types.add(StockTransApplicationType.INBOUND_MOBILE.getValue());
        types.add(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue());
        return findPredefinedStaByType(types, wh, sorts);
    }

    // 预定义查询 - 分页操作
    public Pagination<StockTransApplicationCommand> findPredefinedStaByPagination(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime, boolean isVMI, boolean SAMPLE, int type, int statu,
            int start, int size, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String locked = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
        }
        ArrayList<Integer> types = new ArrayList<Integer>();
        ArrayList<Integer> status = new ArrayList<Integer>();
        status.add(StockTransApplicationStatus.CREATED.getValue());
        status.add(StockTransApplicationStatus.PARTLY_RETURNED.getValue());
        if (isVMI) {
            types.add(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue());
        } else if (SAMPLE) {
            types.add(StockTransApplicationType.SAMPLE_INBOUND.getValue());
            types.add(StockTransApplicationType.REAPAIR_INBOUND.getValue());
            types.add(StockTransApplicationType.SERIAL_NUMBER_INBOUND.getValue());
            types.add(StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.getValue());
            types.add(StockTransApplicationType.SKU_EXCHANGE_INBOUND.getValue());
            status.clear();
            status.add(StockTransApplicationStatus.CREATED.getValue());
            status.add(StockTransApplicationStatus.FINISHED.getValue());
            locked = "true";
        } else {
            types.add(StockTransApplicationType.INBOUND_CONSIGNMENT.getValue());
            types.add(StockTransApplicationType.INBOUND_SETTLEMENT.getValue());
            types.add(StockTransApplicationType.INBOUND_MOBILE.getValue());
        }
        if (type != 0) {
            types.clear();
            types.add(type);
        }
        if (statu != 0) {
            status.clear();
            status.add(statu);
        }
        return staDao.findPredefinedStaByTypeBYPagination(start, size, types, status, locked, wh.getId(), code, refcode, owner, startTime, endTime, arriveStartTime, arriveEndTime, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }

    /**
     * 预定义取消 - 修改作業單status
     * 
     * @param StaId
     */
    public void modifyroleStatus(Long StaId, Long userId) {
        staDao.modifyroleStatusById(StaId);
        StockTransApplication sta = staDao.getByPrimaryKey(StaId);
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CANCELED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CANCELED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        }
    }

    // 预定义取消 - 分页操作
    public Pagination<StockTransApplicationCommand> findPredeCancelStaByPagination(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime, boolean isVMI, boolean SAMPLE, Integer intStatus,
            Integer intStaType, int type, int statu, int start, int size, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String locked = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (intStaType != null) {

            }
        }
        ArrayList<Integer> types = new ArrayList<Integer>();
        ArrayList<Integer> status = new ArrayList<Integer>();
        status.add(StockTransApplicationStatus.CREATED.getValue());
        status.add(StockTransApplicationStatus.PARTLY_RETURNED.getValue());

        if (isVMI) {
            types.add(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue());
        } else if (SAMPLE) {
            types.add(StockTransApplicationType.SAMPLE_INBOUND.getValue());
            types.add(StockTransApplicationType.REAPAIR_INBOUND.getValue());
            types.add(StockTransApplicationType.SERIAL_NUMBER_INBOUND.getValue());
            types.add(StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.getValue());
            types.add(StockTransApplicationType.SKU_EXCHANGE_INBOUND.getValue());
            status.clear();
            status.add(StockTransApplicationStatus.CREATED.getValue());
            status.add(StockTransApplicationStatus.FINISHED.getValue());
            locked = "true";
        } else {
            types.add(StockTransApplicationType.INBOUND_CONSIGNMENT.getValue());
            types.add(StockTransApplicationType.INBOUND_SETTLEMENT.getValue());
            types.add(StockTransApplicationType.INBOUND_MOBILE.getValue());
        }
        if (type != 0) {
            types.clear();
            types.add(type);
        }
        if (statu != 0) {
            status.clear();
            status.add(statu);
        }
        return staDao.findPredeCancelStaByPagination(start, size, intStatus, intStaType, types, status, locked, wh.getId(), code, refcode, owner, startTime, endTime, arriveStartTime, arriveEndTime, sorts,
                new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    // 预定义查询 - 分页操作
    public Pagination<StockTransApplicationCommand> findPredefinedStaByPaginationRoot(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime, boolean isVMI, boolean SAMPLE, int type, int statu,
            int start, int size, Long ouId, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String locked = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
        }
        ArrayList<Integer> types = new ArrayList<Integer>();
        ArrayList<Integer> status = new ArrayList<Integer>();
        status.add(StockTransApplicationStatus.CREATED.getValue());
        status.add(StockTransApplicationStatus.PARTLY_RETURNED.getValue());
        if (isVMI) {
            types.add(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue());
        } else if (SAMPLE) {
            types.add(StockTransApplicationType.SAMPLE_INBOUND.getValue());
            types.add(StockTransApplicationType.REAPAIR_INBOUND.getValue());
            types.add(StockTransApplicationType.SERIAL_NUMBER_INBOUND.getValue());
            types.add(StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.getValue());
            types.add(StockTransApplicationType.SKU_EXCHANGE_INBOUND.getValue());
            status.clear();
            status.add(StockTransApplicationStatus.CREATED.getValue());
            status.add(StockTransApplicationStatus.FINISHED.getValue());
            locked = "true";
        } else {
            types.add(StockTransApplicationType.INBOUND_CONSIGNMENT.getValue());
            types.add(StockTransApplicationType.INBOUND_SETTLEMENT.getValue());
            types.add(StockTransApplicationType.INBOUND_MOBILE.getValue());
        }
        if (type != 0) {
            types.clear();
            types.add(type);
        }
        if (statu != 0) {
            status.clear();
            status.add(statu);
        }
        return staDao.findPredefinedStaByTypeBYPaginationRoot(start, size, types, status, locked, wh.getId(), code, refcode, owner, startTime, endTime, arriveStartTime, arriveEndTime, ouId, sorts,
                new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public StockTransApplicationCommand findStaById(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        StockTransApplicationCommand staCmd = new StockTransApplicationCommand();
        BeanUtils.copyProperties(sta, staCmd);
        staCmd.setCreator(null);
        staCmd.setOutboundOperator(null);
        staCmd.setMainWarehouse(null);
        staCmd.setAddiWarehouse(null);
        staCmd.setMainStatus(null);
        staCmd.setAddiStatus(null);
        staCmd.setPickingList(null);
        staCmd.setHoList(null);
        staCmd.setGroupSta(null);
        staCmd.setSkuCategoriesId(null);
        if (sta.getStaDeliveryInfo() != null) {
            StaDeliveryInfoCommand sdic = new StaDeliveryInfoCommand();
            BeanUtils.copyProperties(sta.getStaDeliveryInfo(), sdic);
            sdic.setPackageInfos(null);
            sdic.setSta(null);
            staCmd.setStaDeliveryInfo(sdic);
        } else {
            staCmd.setStaDeliveryInfo(null);
        }
        return staCmd;
    }


    public Boolean isCodByStaId(Long staId) {
        Boolean msg = false;
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (null != sta && null != sta.getStaDeliveryInfo()) {
            if (sta.getStaDeliveryInfo().getIsCod()) {
                msg = true;
            }
        }
        return msg;
    }

    /**
     * 存在LAZY关联的model返回WEB层修改 by FXL
     */
    public StockTransApplicationCommand findStaCmdById(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        StockTransApplicationCommand staCmd = new StockTransApplicationCommand();
        org.springframework.beans.BeanUtils.copyProperties(sta, staCmd);
        staCmd.setCreator(null);
        staCmd.setOutboundOperator(null);
        staCmd.setInboundOperator(null);
        staCmd.setMainWarehouse(new OperationUnit(sta.getMainWarehouse().getId()));
        staCmd.setAddiWarehouse(null);
        staCmd.setMainStatus(null);
        staCmd.setAddiStatus(null);
        staCmd.setPickingList(null);
        staCmd.setHoList(null);
        staCmd.setGroupSta(null);
        staCmd.setSkuCategoriesId(null);
        if (sta.getStaDeliveryInfo() != null) {
            StaDeliveryInfoCommand sdic = new StaDeliveryInfoCommand();
            org.springframework.beans.BeanUtils.copyProperties(sta.getStaDeliveryInfo(), sdic);
            sdic.setPackageInfos(null);
            sdic.setSta(null);
            staCmd.setStaDeliveryInfo(sdic);
        } else {
            staCmd.setStaDeliveryInfo(null);
        }
        return staCmd;
    }

    /**
     * 已占用库存量列表查询
     * 
     * @param queryParams
     * @return
     */
    @Transactional(readOnly = true)
    public List<OccupationInfoCommand> findOccupationInfo(Map<String, Object> queryParams) {
        return inventoryDao.findOccupationInfo(queryParams, new BeanPropertyRowMapper<OccupationInfoCommand>(OccupationInfoCommand.class), null);
    }

    /**
     * 据需要判断指定STV是否需要自动生成建议库位 isSuggest 是否生成建议库位
     */
    public void suggestInboundLocation(Long stvId, boolean isSuggest) {
        try {
            StockTransVoucher stv = stvDao.getByPrimaryKey(stvId);
            if (!StockTransVoucherStatus.CREATED.equals(stv.getStatus())) {
                throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
            }
            if (stv.getSta().getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST) || stv.getSta().getType().equals(StockTransApplicationType.INBOUND_RETURN_PURCHASE)) {
                return;
            }
            if (!isSuggest) {
                // 已经推荐过库位不再推荐
                for (StvLine stvl : stv.getStvLines()) {
                    if (stvl.getLocation() != null) {
                        return;
                    }
                }
            }
            suggestInboundLocation(stv);
        } catch (Exception e) {
            log.error("", e);
        }
    }

    private void suggestInboundLocation(StockTransVoucher stv) {
        if (!StockTransVoucherStatus.CREATED.equals(stv.getStatus())) {
            throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
        }
        // 初始化库位
        stvLineDao.updateInboundLocation(stv.getId());
        List<StvLine> stvLines = stvLineDao.findStvLineListByStvId(stv.getId());
        Map<String, WarehouseLocation> together = new HashMap<String, WarehouseLocation>();
        Long transTypeId = stv.getTransactionType().getId();
        Long whOuId = stv.getWarehouse().getId();
        Long stvId = stv.getId();

        Map<String, List<StvLine>> slMap = new HashMap<String, List<StvLine>>();
        Map<String, Long> slCountMap = new HashMap<String, Long>();
        for (StvLine sl : stvLines) {
            String invStatusId = "";
            if (sl.getInvStatus() != null && sl.getInvStatus().getId() != null) {
                invStatusId = sl.getInvStatus().getId().toString();
            }
            String key = sl.getSku().getId() + "_" + invStatusId + "_" + (sl.getBatchCode() == null ? "" : sl.getBatchCode());
            if (slMap.containsKey(key)) {
                List<StvLine> sll = slMap.get(key);
                sll.add(sl);
                slCountMap.put(key, slCountMap.get(key) + sl.getQuantity());
            } else {
                List<StvLine> sll = new ArrayList<StvLine>();
                sll.add(sl);
                slMap.put(key, sll);
                slCountMap.put(key, sl.getQuantity());
            }
        }
        List<String> ls = new ArrayList<String>();
        // 查寻同商品同批次的库位
        List<WarehouseLocationCommand> loc = warehouseLocationDao.findSuggestLocationByStvInfo(whOuId, stvId, transTypeId, new BeanPropertyRowMapperExt<WarehouseLocationCommand>(WarehouseLocationCommand.class));
        // 是否查寻到了建议库位
        if (loc != null && loc.size() > 0) {
            for (WarehouseLocationCommand l : loc) {
                together.put(l.getSkuId() + "_" + (l.getInvStatusId() == null ? "" : l.getInvStatusId()) + "_" + (l.getBatchCode() == null ? "" : l.getBatchCode()), warehouseLocationDao.getByPrimaryKey(l.getId()));
            }
            for (String key : slMap.keySet()) {
                WarehouseLocation wl = together.get(key);
                if (wl != null) {
                    for (StvLine sl : slMap.get(key)) {
                        sl.setLocation(wl);
                    }
                    ls.add(key);
                }
            }
        }
        for (String s : ls) {
            slMap.remove(s);
        }
        // 是否 还有库位没有找到建议库位
        if (slMap != null && slMap.size() > 0) {
            // 查找同商品的有空库位的库区
            loc = warehouseLocationDao.findSuggestDistrictByStvInfo(whOuId, stvId, transTypeId, new BeanPropertyRowMapperExt<WarehouseLocationCommand>(WarehouseLocationCommand.class));
            // 是否查寻到了库区信息
            if (loc != null && loc.size() > 0) {
                together.clear();
                List<WarehouseLocationCommand> temp = null, tempSku = null, tempLoc = null;
                // 遍历库区信息
                for (WarehouseLocationCommand l : loc) {
                    // 查寻当前库区下面的空库位库位 和 对应的stvLine可以推荐库位的商品
                    temp = warehouseLocationDao.findSkuAndLocationByDistrict(whOuId, stvId, l.getDistrictId(), transTypeId, new BeanPropertyRowMapperExt<WarehouseLocationCommand>(WarehouseLocationCommand.class));
                    tempSku = new ArrayList<WarehouseLocationCommand>();
                    tempLoc = new ArrayList<WarehouseLocationCommand>();
                    // 隔离出 库位 和 商品
                    for (WarehouseLocationCommand wl : temp) {
                        (wl.getId() == -1 ? tempSku : tempLoc).add(wl);
                    }
                    // 检索stv中在当前库区可以推荐库位的商品
                    for (int i = 0; i < tempSku.size(); i++) {
                        // 获取skuId+invStruts+batchCode
                        String key = tempSku.get(i).getBatchCode();
                        Long qty = slCountMap.get(key);
                        for (int j = 0; j < tempLoc.size(); j++) {
                            WarehouseLocationCommand wl = tempLoc.get(j);
                            if (wl.getBatchCode() == null || wl.getBatchCode().isEmpty() || Integer.parseInt(wl.getBatchCode()) < 1 || Integer.parseInt(wl.getBatchCode()) >= qty) {
                                // 检索没有推荐库位的商品同批次、同商品、同库存状态
                                if (slMap.get(key) != null) {
                                    for (StvLine stvl : slMap.get(key)) {
                                        stvl.setLocation(warehouseLocationDao.getByPrimaryKey(tempLoc.get(j).getId()));
                                    }
                                }
                                tempLoc.remove(j);
                                break;
                            }
                        }
                    }
                }
            }
        }

    }


    @Transactional(readOnly = true)
    public Map<String, List<StvLineCommand>> loadStvLineByStvId(Long stvId) throws Exception {
        List<StvLineCommand> stvLines = stvLineDao.findStvLineCommandListByStvId(stvId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        Map<String, List<StvLineCommand>> staLineMap = new HashMap<String, List<StvLineCommand>>();
        // 对于StvLine按StaLine进行分组
        for (StvLineCommand stvLine : stvLines) {
            String key = stvLine.getStalineId() + "_" + stvLine.getOwner() + "_" + stvLine.getBatchCode() + "_" + stvLine.getInvStatusId();
            if (staLineMap.containsKey(key)) {
                staLineMap.get(key).add(stvLine);
            } else {
                List<StvLineCommand> stvLineList = new ArrayList<StvLineCommand>();
                stvLineList.add(stvLine);
                staLineMap.put(key, stvLineList);
            }
        }

        return staLineMap;
    }

    @Transactional(readOnly = true)
    public JSONArray loadStvLineByStvIdGroupBatchCode(Long stvId) throws Exception {
        List<StvLineCommand> stvLines = stvLineDao.findStvLineCommandListByStvId(stvId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        Map<String, List<StvLineCommand>> staLineMap = new HashMap<String, List<StvLineCommand>>();
        // 对于StvLine按StaLine进行分组
        for (StvLineCommand stvLine : stvLines) {
            String key = stvLine.getSkuCode() + "_" + stvLine.getLocationCode() + "_" + stvLine.getBatchCode() + "_" + stvLine.getOwner();
            if (staLineMap.containsKey(key)) {
                staLineMap.get(key).add(stvLine);
            } else {
                List<StvLineCommand> stvLineList = new ArrayList<StvLineCommand>();
                stvLineList.add(stvLine);
                staLineMap.put(key, stvLineList);
            }
        }
        List<JSONObject> array = new ArrayList<JSONObject>();
        for (Map.Entry<String, List<StvLineCommand>> entry : staLineMap.entrySet()) {
            long total = 0l;
            for (StvLineCommand l : entry.getValue()) {
                total += l.getQuantity();
            }
            entry.getValue().get(0).setTotalQuantity(total);
            JSONObject staLine = new JSONObject(entry.getValue().get(0));
            staLine.put("stvLines", new JSONArray(entry.getValue()));
            array.add(staLine);
        }
        return new JSONArray(array);
    }

    /**
     * 检查库容库位是否可用
     * 
     * @param code
     * @param inBoundQty
     * @param ouid
     * @param locCapacityCache
     * @param locCache
     * @param root
     */
    private WarehouseLocation checkLocation(String code, TransactionType type, Long inBoundQty, Long ouid, Map<String, WarehouseLocation> locCapacityCache, Map<Long, WarehouseLocation> locCache, Map<Long, Long> locTransTypes, BusinessException root,
            boolean isTransactionType) {
        if (code == null) {
            throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {code});
        }
        // 计算库容
        String locCode = code;
        WarehouseLocation locCapacity = locCapacityCache.get(locCode);
        if (locCapacity == null) {
            locCapacity = warehouseLocationDao.findLocationWithcapacityByCode(locCode, ouid, new BeanPropertyRowMapperExt<WarehouseLocation>(WarehouseLocation.class));
            if (locCapacity == null) {
                throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {locCode});
            }
            locCapacityCache.put(locCode, locCapacity);
        }
        WarehouseLocation loc = locCache.get(locCapacity.getId());
        if (loc == null) {
            loc = warehouseLocationDao.getByPrimaryKey(locCapacity.getId());
            locCache.put(loc.getId(), loc);
        }
        // 判断是否是 收货暂存区
        if (WarehouseDistrictType.RECEIVING.equals(loc.getDistrict().getType())) {
            return loc;
        }
        // 库位被锁定
        if (loc.getIsAvailable() == null || !loc.getIsAvailable() || (loc.getIsLocked() != null && loc.getIsLocked())) {
            setLinkedBusinessException(root, new BusinessException(ErrorCode.LOCATION_NOT_USING, new Object[] {locCode}));
        }
        // 库容不足
        else if (locCapacity.getCapacity() != null && locCapacity.getCapacity() - inBoundQty < 0) {
            setLinkedBusinessException(root, new BusinessException(ErrorCode.LOCATION_NOT_ENOUGHT_CAPACITY, new Object[] {locCode}));
        }
        // 库位是否支持作业类型
        /*
         * else if (type != null && type.getId() != null && isTransactionType) { if
         * (log.isDebugEnabled()) { log.debug("stv transaction type code is : [{}]",
         * type.getCode()); } Long typeId = locTransTypes.get(loc.getId()); if (typeId != null) { if
         * (typeId > 0 && type.getId().equals(typeId)) { // do nothing } else { if
         * (log.isDebugEnabled()) { log.debug("error not transaction type [{}]", loc.getCode()); }
         * // 库位不支持作业类型 setLinkedBusinessException(root, new
         * BusinessException(ErrorCode.WH_LOCATION_NO_TRANSACTION_TYPE, new Object[] {locCode ==
         * null ? "" : locCode, type.getName()})); } } else { if (log.isDebugEnabled()) {
         * log.debug("query transaction type [{}] [{}]", loc.getCode(), type.getCode()); } //
         * 查询库位是否支持作业类型，不支持默认-1 BigDecimal rs =
         * warehouseLocationDao.findIsSupportTranstype(loc.getId(), type.getId(), new
         * SingleColumnRowMapper<BigDecimal>()); if (rs == null) { locTransTypes.put(loc.getId(),
         * -1L); if (log.isDebugEnabled()) { log.debug("error not transaction type [{}]",
         * loc.getCode()); } // 库位不支持作业类型 setLinkedBusinessException(root, new
         * BusinessException(ErrorCode.WH_LOCATION_NO_TRANSACTION_TYPE, new Object[] {locCode ==
         * null ? "" : locCode, type.getName()})); } else { locTransTypes.put(loc.getId(),
         * type.getId()); } } }
         */
        // 更新库容
        if (locCapacity.getCapacity() != null) {
            locCapacity.setCapacity(locCapacity.getCapacity() - inBoundQty);
        }
        return loc;
    }

    /**
     * 校验批次隔离商品入库库位
     * 
     * @param stv
     * @param stvlineList
     */
    private void volidateInboundLocation(StockTransVoucher stv, List<StvLine> stvlineList, boolean isNotVolidateExpireDate, boolean isTransactionType) {
        Map<Long, InboundStoreMode> modeMap = stvLineDao.findSkuStoreMode(stv.getId(), new SkuStoreModeRowMapper());
        Map<String, WarehouseLocation> locCapacityCache = new HashMap<String, WarehouseLocation>();
        Map<Long, Long> locTransTypesCache = new HashMap<Long, Long>();
        Map<Long, WarehouseLocation> locCache = new HashMap<Long, WarehouseLocation>();
        Long ouid = stv.getWarehouse().getId();

        // 不允许入库库位
        List<String> errLoc = stvLineDao.findInboundErrorLocation(stv.getId(), ouid, new SingleColumnRowMapper<String>());
        // 同商品 同库位 不认许入同样的批次或者生成日期
        List<String> errSkuLoc = inventoryDao.findErrorSkuLocation(stv.getId(), ouid, new SingleColumnRowMapper<String>());
        BusinessException root = new BusinessException(ErrorCode.LOCATION_INBOUND_NOT_SUPPORT);
        TransactionType type = stv.getTransactionType();
        // 检查库位锁定可用与库容
        if (type != null)
            log.debug("type.getCode() {} ,", type.getCode());
        else
            log.debug("type {} is null ");

        if (type != null && Constants.TRANSACTION_TYPE_TRANSIT_INNER_IN.equals(type.getCode())) {
            type = null;
        }
        SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMdd");
        Set<Long> recevingLocSet = new HashSet<Long>(); // 存放收货暂存区库位
        for (StvLine line : stvlineList) {
            Long skuid = line.getSku().getId();
            WarehouseLocation wl = null;
            if (line.getLocation().getId() == null) {
                wl = warehouseLocationDao.findByLocationCode(line.getLocation().getCode(), ouid);
            } else {
                wl = warehouseLocationDao.getByPrimaryKey(line.getLocation().getId());
            }
            InboundStoreMode mode = modeMap.get(skuid);
            WarehouseLocation loc = checkLocation(wl.getCode(), type, line.getQuantity(), ouid, locCapacityCache, locCache, locTransTypesCache, root, isTransactionType);
            boolean isCheckStockMode = true; // 是否检查商品单批隔离

            if (WarehouseDistrictType.RECEIVING.equals(loc.getDistrict().getType())) {
                recevingLocSet.add(loc.getId());
            }
            if (recevingLocSet.contains(loc.getId())) {
                isCheckStockMode = false;
            }

            line.setLocation(loc);
            if (log.isDebugEnabled()) {
                if (loc != null) {
                    log.debug("location : {}", line.getLocation().getCode());
                }
                log.debug("mode : [{}]", mode);
                log.debug("sku id [{}]: ", skuid);
            }
            if (mode == null) {
                Sku sku = skuDao.getByPrimaryKey(skuid);
                if (log.isDebugEnabled()) {
                    log.debug("STV_LINE_SKU_STORE_MODE_NOT_FOUND");
                }
                throw new BusinessException(ErrorCode.STV_LINE_SKU_STORE_MODE_NOT_FOUND, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode()});
            } else if (!isCheckStockMode || mode.equals(InboundStoreMode.TOGETHER)) {
                if (log.isDebugEnabled()) {
                    log.debug("InboundStoreMode-TOGETHER");
                }
                continue;
            } else if (mode.equals(InboundStoreMode.SHELF_MANAGEMENT) || mode.equals(InboundStoreMode.RESPECTIVE)) {
                // 保质期商品管理 和 单批隔离商品管理
                String key = line.getSku().getId() + "_" + loc.getCode().toUpperCase();
                if (!isNotVolidateExpireDate) {
                    String errKey = line.getSku().getId() + "_" + loc.getId() + "_" + mode.getValue() + "_" + (mode.equals(InboundStoreMode.SHELF_MANAGEMENT) ? formatDate.format(line.getExpireDate()) : line.getBatchCode());
                    // 判断是否存在同商品同库位的情况存在
                    if (errLoc.contains(key)) {
                        if (null != loc.getIsMixTime() && "1".equals(loc.getIsMixTime())) {

                        } // 再次判断 同商品同库位的情况下 是否存在不同批次或者不同生产日期的情况存在 如果存在 给出错误提示
                        else if (!errSkuLoc.contains(errKey)) {
                            Sku sku = skuDao.getByPrimaryKey(skuid);
                            setLinkedBusinessException(root,
                                    new BusinessException(mode.equals(InboundStoreMode.SHELF_MANAGEMENT) ? ErrorCode.LOCATION_INBOUND_NOT_DETIAL : ErrorCode.LOCATION_INBOUND_NOT_SUPPORT_DETIAL, new Object[] {loc.getCode(), sku.getName(), sku.getCode()}));
                        }
                    } else {
                        // 此处为了 保证在 同商品同库位 不同批次或者不同生成日期的商品存在 例如：库间移动 移出存在同商品 不同批次或者生产日期商品时 移入时
                        // 很可能入到同一库位上 。
                        errLoc.add(key);
                        errSkuLoc.add(errKey);
                    }
                }
            }
        }
        if (root.getLinkedException() != null) {
            throw root;
        }
    }


    public void purchaseSetInvoiceNumber(StockTransVoucher temp, List<StvLineCommand> stvlineList, boolean finish, User operator, Boolean isForced) {
        isForced = isForced == null ? false : isForced;
        StockTransVoucher stv = stvDao.getByPrimaryKey(temp.getId());
        if (!StockTransVoucherStatus.CREATED.equals(stv.getStatus())) {
            throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
        }
        // 暂存区出库
        if (stv.getSta() != null && StockTransApplicationType.GI_PUT_SHELVES.equals(stv.getSta().getType())) {
            try {
                wmExecute.executeGIout(stv.getSta(), stv.getId(), operator.getId());
            } catch (CloneNotSupportedException e) {
                log.error("", e);
                throw new BusinessException(ErrorCode.PDA_SYS_ERROR);
            }
        }
        // 获取残次品库存状态
        InventoryStatus invStatus = null;
        if (isForced) {
            Long companyId = null;
            if (stv.getWarehouse().getParentUnit() != null) {
                OperationUnit ou1 = operationUnitDao.getByPrimaryKey(stv.getWarehouse().getParentUnit().getId());
                if (ou1 != null) {
                    companyId = ou1.getParentUnit().getId();
                }
            }
            invStatus = inventoryStatusDao.findInvStatusisForSale(companyId, false);
        }

        List<StvLineCommand> slList = new ArrayList<StvLineCommand>();
        // 查询退货对应销售的批货批次当中所对应出库的商品已经过期时间
        // ChooseOption ch = chooseOptionDao.findByCategoryCodeAndKey("snOrExpDate", "1");
        ChooseOption ch = getChooseOptionCache("snOrExpDate");
        if (ch != null && ch.getOptionValue().equals("1")) {
            // 改造点 效期
            List<StaCheckDetialCommand> staCheckDetialList = staCheckDetialDao.findExpDateAllByStaId(stv.getSta().getId(), new BeanPropertyRowMapper<StaCheckDetialCommand>(StaCheckDetialCommand.class));
            for (StaCheckDetialCommand staCheckDatial : staCheckDetialList) {
                StvLineCommand stvLineCommand = new StvLineCommand();
                stvLineCommand.setSkuId(staCheckDatial.getSkuId());
                stvLineCommand.setStrExpireDate(staCheckDatial.getStrExpireDate());
                stvLineCommand.setExpireDate(staCheckDatial.getExpDate());
                stvLineCommand.setQuantity(staCheckDatial.getQty());
                slList.add(stvLineCommand);
            }
        } else {
            String slipCode = stv.getSta().getSlipCode1();
            String groupStaCode = staDao.findGroupStaCode(slipCode, new SingleColumnRowMapper<String>(String.class));
            slList = stvLineDao.findExpireDateByPickingList(groupStaCode, slipCode, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        }

        Map<String, List<StvLineCommand>> map = new HashMap<String, List<StvLineCommand>>();
        for (StvLineCommand com : slList) {
            String key = com.getSkuId() + "_" + com.getStrExpireDate();
            List<StvLineCommand> tempList = null;
            if (map.containsKey(key)) {
                tempList = map.get(key);
            } else {
                tempList = new ArrayList<StvLineCommand>();
                map.put(key, tempList);
            }
            tempList.add(com);
        }
        log.info("Esp t4 po:" + stv.getSta().getRefSlipCode() + " set invoiceNumber:" + temp.getInvoiceNumber() + " dutyPercentage:" + temp.getDutyPercentage() + " miscFeePercentage" + temp.getMiscFeePercentage());
        stv.setInvoiceNumber(temp.getInvoiceNumber());
        stv.setDutyPercentage(temp.getDutyPercentage());
        stv.setMiscFeePercentage(temp.getMiscFeePercentage());
        stvDao.save(stv);
        List<StvLine> lineList = new ArrayList<StvLine>();
        SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMdd");
        for (StvLineCommand l : stvlineList) {

            Sku sku = skuDao.getByPrimaryKey(l.getSku().getId());
            l.setSku(sku);
            // 判断是否保质期商品
            if (InboundStoreMode.SHELF_MANAGEMENT.equals(sku.getStoremode())) {
                wareHouseManagerProxy.setStvLineProductionDateAndExpireDate(l, l.getStrPoductionDate(), l.getStrExpireDate());
                // 校验保质期商品 收货校验保质期于出库作业单配货清单中，如不正确提示错误信息，确认强行入库时则只能入残次品状态
                String strEpireDate = formatDate.format(l.getExpireDate());
                String key = sku.getId() + "_" + strEpireDate;
                if (map.containsKey(key)) {
                    List<StvLineCommand> tempList = map.get(key);
                    Long quantity = l.getQuantity();
                    for (int i = 0; i < tempList.size(); i++) {
                        StvLineCommand sl = tempList.get(i);
                        if (sl.getQuantity() >= quantity) {
                            lineList.add(createStvLine(sku, l.getOwner(), warehouseLocationDao.findByLocationCode(l.getLocation().getCode(), stv.getWarehouse().getId()), l.getInvStatus(), l.getTransactionType(), quantity, l.getBatchCode(),
                                    l.getInBoundTime(), sl.getProductionDate(), sl.getValidDate(), sl.getExpireDate(), l.getStaLine(), stv));
                            sl.setQuantity(sl.getQuantity() - quantity);
                            quantity = 0l;
                        } else {
                            lineList.add(createStvLine(sku, l.getOwner(), warehouseLocationDao.findByLocationCode(l.getLocation().getCode(), stv.getWarehouse().getId()), l.getInvStatus(), l.getTransactionType(), sl.getQuantity(), l.getBatchCode(),
                                    l.getInBoundTime(), sl.getProductionDate(), sl.getValidDate(), sl.getExpireDate(), l.getStaLine(), stv));
                            quantity -= sl.getQuantity();
                            sl.setQuantity(0l);
                        }
                        if (sl.getQuantity() < 1) {
                            tempList.remove(i);
                        }
                        if (quantity.equals(0L)) {
                            break;
                        }
                    }
                    if (quantity > 0) {
                        if (isForced) {
                            // 强制入库 将库存状态修改为残次品
                            lineList.add(createStvLine(sku, l.getOwner(), warehouseLocationDao.findByLocationCode(l.getLocation().getCode(), stv.getWarehouse().getId()), invStatus, l.getTransactionType(), quantity, l.getBatchCode(), l.getInBoundTime(),
                                    l.getProductionDate(), l.getValidDate(), l.getExpireDate(), l.getStaLine(), stv));
                        } else {
                            // 抛出错误提示
                            throw new BusinessException(ErrorCode.RETURN_ORDER_ERROR, new Object[] {sku.getBarCode(), strEpireDate});
                        }
                    }
                } else if (isForced) {
                    // 强制入库 将库存状态修改为残次品
                    lineList.add(createStvLine(sku, l.getOwner(), warehouseLocationDao.findByLocationCode(l.getLocation().getCode(), stv.getWarehouse().getId()), invStatus, l.getTransactionType(), l.getQuantity(), l.getBatchCode(), l.getInBoundTime(),
                            l.getProductionDate(), l.getValidDate(), l.getExpireDate(), l.getStaLine(), stv));
                } else {
                    // 抛出错误提示
                    throw new BusinessException(ErrorCode.RETURN_ORDER_ERROR, new Object[] {sku.getBarCode(), strEpireDate});
                }
            } else {
                lineList.add(createStvLine(sku, l.getOwner(), warehouseLocationDao.findByLocationCode(l.getLocation().getCode(), stv.getWarehouse().getId()), l.getInvStatus(), l.getTransactionType(), l.getQuantity(), l.getBatchCode(), l.getInBoundTime(),
                        l.getProductionDate(), l.getValidDate(), l.getExpireDate(), l.getStaLine(), stv));
            }
        }
        purchaseReceiveStep2(stv.getId(), lineList, finish, operator, false, true);
        // inboundNoticePAC
        StockTransApplication sta = stv.getSta();
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        createWmsOtherOutBoundInvNoticeOms(sta.getId(), 10l, WmsOtherOutBoundInvNoticeOmsStatus.OTHER_INBOUND);// 2为占用、10为完成、17为取消、20为作废
    }



    public StvLine createStvLine(Sku sku, String owner, WarehouseLocation loc, InventoryStatus invStatus, TransactionType tranType, Long quantity, String batchCode, Date inboundTime, Date productionDate, Integer validDate, Date expireDate,
            StaLine staLine, StockTransVoucher stv) {
        StvLine stvLine = new StvLine();
        stvLine.setSku(sku);
        stvLine.setBatchCode(batchCode);
        stvLine.setDirection(stv.getDirection());
        stvLine.setLocation(loc);
        stvLine.setDistrict(loc.getDistrict());
        stvLine.setInBoundTime(inboundTime);
        stvLine.setInvStatus(invStatus);
        stvLine.setOwner(owner);
        stvLine.setQuantity(quantity);
        stvLine.setStv(stv);
        stvLine.setStaLine(staLine);
        stvLine.setTransactionType(tranType);
        stvLine.setWarehouse(stv.getWarehouse());
        stvLine.setProductionDate(productionDate);
        stvLine.setValidDate(validDate);
        stvLine.setExpireDate(expireDate);
        return stvLine;
    }

    /**
     * 对于当前收货进行系统上架详细展开 1） 保存tv明细 2） 更新库存 使用存储过程更新，存储过程名称： sp_insert_inventory参数: stvId 3）
     * 更新相关单据数据和状态
     * 
     * @param stvId 作业明细单ID
     * @param stvlineList 作业明细单行
     * @param finish 是否关闭作业申请单
     * @param ouId 仓库ID
     * @param staId 作业申请单ID
     * @param operator 操作员
     */
    public void purchaseReceiveStep2(Long stvId, List<StvLine> stvlineList, boolean finish, User operator, boolean isNotVolidateExpireDate, boolean isTransactionType) {
        log.debug("start purchaseReceiveStep2");
        boolean b = false;
        StockTransVoucher stv = stvDao.getByPrimaryKey(stvId);
        ChooseOption ch = chooseOptionDao.findByCategoryCodeAndKey("RUKU_DEL_STVLINE", "1");
        if (ch == null || ch.getOptionValue() == null) {
            b = false;
        } else {
            if (Constants.TRANSACTION_TYPE_TRANSIT_INNER_IN.equals(stv.getTransactionType().getCode())) {
                b = false;
            } else {
                b = true;
            }
        }

        Map<String, Long> map = new HashMap<String, Long>();

        // business_exception_stv_10101=作业明细单的状态错误,已被其他用户修改
        if (!StockTransVoucherStatus.CREATED.equals(stv.getStatus())) {
            throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
        }
        String batchCode = Long.valueOf(new Date().getTime()).toString();
        // 校验商品库位存放规则
        volidateInboundLocation(stv, stvlineList, isNotVolidateExpireDate, isTransactionType);
        if (log.isDebugEnabled()) {
            log.debug("volidateInboundLocation success");
        }
        // 更新stvLine和相关检查
        if (!Constants.TRANSACTION_TYPE_TRANSIT_INNER_IN.equals(stv.getTransactionType().getCode())) {
            try {
                map = updataStvlineList(stv, stvlineList, batchCode);
            } catch (Exception e) {
                if (log.isErrorEnabled()) {
                    log.error("purchaseReceiveStep2 Exception:", e);
                }
                throw new BusinessException(ErrorCode.PO_SYSTEM_ERROR);
            }
            log.debug("updataStvlineList success");
            if (b) {
                Long newId = map.get("newId");
                stv = stvDao.getByPrimaryKey(newId);
            }
            if (stv.getSta().getType().equals(StockTransApplicationType.TRANSIT_CROSS) || stv.getSta().getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
                if (b) {
                    snDao.updateTransitCrossInByStvIdSql2(map.get("id"), map.get("newId"), SkuSnStatus.USING.getValue());
                    snDao.flush();
                    snLogDao.createTransitCrossLogByStvIdSql2(map.get("id"), map.get("newId"));
                } else {
                    snDao.updateTransitCrossInByStvIdSql(stv.getId(), SkuSnStatus.USING.getValue());
                    snLogDao.createTransitCrossLogByStvIdSql(stv.getId());
                }
            } else {
                if (b) {
                    snDao.updateInboundByStvIdSql2(map.get("id"), map.get("newId"), SkuSnStatus.USING.getValue(), batchCode);
                    snDao.flush();
                    snLogDao.createInboundLogByStvIdSql2(map.get("id"), map.get("newId"), batchCode);
                } else {
                    updateSNStatusByStv(stv, SkuSnStatus.USING, batchCode);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("update stvLine");
        }
        // 调用存储过程
        stv.setStatus(StockTransVoucherStatus.FINISHED);
        stv.setLastModifyTime(new Date());
        stv.setFinishTime(new Date());
        stv.setOperator(operator);
        stvDao.save(stv);
        stvDao.flush();
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_ou_id", stv.getWarehouse().getId());
        if (b) {
            params.put("in_stv_id", map.get("newId"));
        } else {
            params.put("in_stv_id", stvId);
        }
        params.put("in_com_id", findCompanyOUByWarehouseId(stv.getWarehouse().getId()).getId());
        params.put("is_in_cost", stv.getTransactionType().getIsInCost() ? 1 : 0);
        SqlParameter[] sqlParameters = {new SqlParameter("in_ou_id", Types.NUMERIC), new SqlParameter("in_stv_id", Types.NUMERIC), new SqlParameter("in_com_id", Types.NUMERIC), new SqlParameter("is_in_cost", Types.NUMERIC)};
        inventoryDao.executeSp("sp_insert_inventory", sqlParameters, params);
        updateStaLineQuantityForPurchase(stv.getSta().getId(), stvlineList);
        updateSTAForPurchase(stv.getSta().getId(), operator, finish);
        StockTransApplication sta = staDao.getByPrimaryKey(stv.getSta().getId());
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            if (operator != null) {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.SHELVES.getValue(), operator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
            } else {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.SHELVES.getValue(), null, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
            }
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            if (operator != null) {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.SHELVES.getValue(), operator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
            } else {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.SHELVES.getValue(), null, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
            }
        }
        wmsThreePLManager.createCnWmsOrderStatusUploadByStv(stv.getId());
        // ======================================================================
        // 判断STA类型，sta是否已经生成过
        // vmi根据店铺生成反馈文件
        try {
            // 记录入库sn
            if (sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
                List<StvLineCommand> stvLineList = stvLineDao.findSnSkuByStvId(stv.getId(), new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
                List<StvLineCommand> stvLineCommandList = stvLineDao.findExpDateByStvId(stv.getId(), new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
                List<StvLineCommand> nikeRfidList = stvLineDao.findNikeRfidByStvId(stv.getId(), new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
                if (stvLineList != null && stvLineList.size() > 0) {
                    if (stvLineList.get(0).getIsSnSkuBoolean() != null && stvLineList.get(0).getIsSnSkuBoolean()) {
                        List<SkuSn> skuSnList = snDao.findSkuSnListByStv(stv.getId(), SkuSnStatus.USING);
                        if (skuSnList != null && skuSnList.size() > 0) {
                            for (SkuSn skuSn : skuSnList) {
                                StaCheckLog staCheckLog = new StaCheckLog();
                                staCheckLog.setLogDate(new Date());
                                staCheckLog.setOrderCode(sta.getSlipCode1());
                                staCheckLog.setQty(-1L);
                                staCheckLog.setSkuId(skuSn.getSku().getId());
                                staCheckLog.setSn(skuSn.getSn());
                                staCheckLog.setStaCode(sta.getCode());
                                staCheckLogDao.save(staCheckLog);
                            }
                        }
                    }
                }

                if (stvLineCommandList != null && stvLineCommandList.size() > 0) {
                    if (stvLineCommandList.get(0).getIsSn() != null && stvLineCommandList.get(0).getIsSn()) {
                        stvLineCommandList = stvLineDao.findExpDateByStvId1(stv.getId(), new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
                        for (StvLineCommand stvLine : stvLineCommandList) {
                            StaCheckLog staCheckLog = new StaCheckLog();
                            staCheckLog.setLogDate(new Date());
                            staCheckLog.setOrderCode(sta.getSlipCode1());
                            staCheckLog.setQty(-stvLine.getQuantity());
                            staCheckLog.setSkuId(stvLine.getSkuId());
                            staCheckLog.setExpDate(stvLine.getExpireDate());
                            staCheckLog.setStaCode(sta.getCode());
                            staCheckLogDao.save(staCheckLog);
                        }
                    }
                }
                if(nikeRfidList!=null&&nikeRfidList.size()>0&&nikeRfidList.get(0).getIsRfid()!=null&&nikeRfidList.get(0).getIsRfid()) {
                    List<SkuRfidLog> RfidList = skuRfidLogDao.findSkuRFIDByStaId(sta.getId());
                    if (RfidList != null && RfidList.size() > 0) {
                        for (SkuRfidLog rfid : RfidList) {
                            if (rfid.getRfidCode().indexOf("⊥") > 0) {
                                String[] rfidCode = rfid.getRfidCode().split("⊥");
                                for (String code : rfidCode) {
                                    StaCheckLog staCheckLog = new StaCheckLog();
                                    staCheckLog.setLogDate(new Date());
                                    staCheckLog.setOrderCode(sta.getSlipCode1());
                                    staCheckLog.setQty(-1L);
                                    staCheckLog.setSkuId(rfid.getSkuId());
                                    staCheckLog.setRfid(code);
                                    staCheckLog.setStaCode(sta.getCode());
                                    staCheckLogDao.save(staCheckLog);
                                }
                            } else {
                                StaCheckLog staCheckLog = new StaCheckLog();
                                staCheckLog.setLogDate(new Date());
                                staCheckLog.setOrderCode(sta.getSlipCode1());
                                staCheckLog.setQty(-1L);
                                staCheckLog.setSkuId(rfid.getSkuId());
                                staCheckLog.setRfid(rfid.getRfidCode());
                                staCheckLog.setStaCode(sta.getCode());
                                staCheckLogDao.save(staCheckLog);
                            }

                        }
                    }
                }
            }

            if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE && StringUtil.isEmpty(sta.getDataSource())) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
                if (vmi != null) {
                    vmi.generateReceivingWhenShelv(sta, stv);
                }
            }
            if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && StringUtil.isEmpty(sta.getDataSource())) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                if (!StringUtil.isEmpty(shop.getDefaultCode())) {
                    VmiDefaultInterface vv = vmiDefaultFactory.getVmiDefaultInterface(shop.getDefaultCode());
                    if (vv != null) {
                        vv.generateSaveSkuBatch(batchCode, sta, stvlineList);
                    }
                }
            }
            // 如果是退换货入判定是否有品牌定制
            if (sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                if (!StringUtil.isEmpty(shop.getDefaultCode())) {
                    ExtParam ext = new ExtParam();
                    ext.setSta(sta);
                    ext.setStv(stv);
                    ext.setBiChannel(shop);
                    VmiDefaultInterface vv = vmiDefaultFactory.getVmiDefaultInterface(shop.getDefaultCode());
                    if (vv != null) {
                        vv.generateVmiInBound(ext);
                    }
                }
            }
            // VMI---库存状态变更反馈
            if (sta.getType().equals(StockTransApplicationType.INVENTORY_STATUS_CHANGE) && sta.getVmiRCStatus() != Boolean.TRUE) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                VmiInterface vmi = null;
                if (shop != null && shop.getVmiCode() != null) {
                    vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
                    if (vmi != null) {
                        vmi.generateInvStatusChange(sta);
                    }
                }
            }
            // VM---转仓（调拨）反馈
            if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER) && sta.getVmiRCStatus() != Boolean.TRUE) {
                BiChannel fromShop = companyShopDao.getByCode(sta.getOwner());
                VmiInterface vmi = vmiFactory.getBrandVmi(fromShop.getVmiCode());
                if (vmi != null) {
                    vmi.generateReceivingFlitting(sta);
                }
            }
            eventObserver.onEvent(new TransactionalEvent(stv));
            // 菜鸟的生成库存状态修改盘点数据
            if (org.apache.commons.lang3.StringUtils.equals(sta.getSystemKey(), Constants.CAINIAO_DB_SYSTEM_KEY)) {
                cnInterfaceTask.createInvStatusUpdateNoticeToCaiNiao(sta.getId());
            }

            if (StockTransVoucherStatus.FINISHED.equals(stv.getStatus())) {
                if (sta.getType().equals(StockTransApplicationType.TRANSIT_INNER)) {
                    hubWmsManager.insertAgvTransitInnerToHub(stv.getId());
                } else {
                    hubWmsManager.insertAgvInBoundToHub(stv.getId());
                }
            }

            // 库存状态调整影响可销售库存，同步增量至平台（修改为使用库存日志触发）
            // if (sta.getType().equals(StockTransApplicationType.INVENTORY_STATUS_CHANGE)) {
            // try {
            // stockTransTxLogDao.insertIncrementInvWhenSalesQtyChange(sta.getId());
            // } catch (Exception e) {
            // log.error("库存状态调整影响可销售库存，同步增量至平台异常！sta.code=" + sta.getCode(), e);
            // }
            // }
        } catch (BusinessException e) {
            throw e;
        } catch (Exception e) {
            log.error("", e);
            throw new BusinessException();
        }
    }

    /**
     * 创建入库通知中间表
     */
    public MsgInboundOrder msgInorder(StockTransApplication sta, Warehouse wh) {
        if (StringUtils.hasText(wh.getVmiSource()) && !owner.equals(sta.getOwner())) {
            MsgInboundOrder msgInorder = null;
            msgInorder = new MsgInboundOrder();
            Long id = warehouseMsgSkuDao.getThreePlSeq(new SingleColumnRowMapper<Long>(Long.class));
            msgInorder.setUuid(id);
            msgInorder.setSource(wh.getVmiSource());
            msgInorder.setSourceWh(wh.getVmiSourceWh());
            msgInorder.setStaCode(sta.getCode());
            msgInorder.setStatus(DefaultStatus.CREATED);
            StockTransApplication stainfo = staDao.findStaByCode(sta.getCode());
            if (stainfo != null) {
                msgInorder.setType(stainfo.getType());
            }
            // 由于 串号入库等类型 是 作业单解锁后，才新增的。 取作业单的时间， 会导致 创建时间和当前时间有 延迟，外包仓获取不到订单。 所以改为当前时间
            msgInorder.setCreateTime(new Date());
            msgInorder.setPlanArriveTime(sta.getArriveTime());
            msgInorder.setTotalActual(sta.getTotalActual());
            msgInorder.setRefSlipCode(sta.getRefSlipCode());
            StaDeliveryInfo stadeliver = staDeliveryInfoDao.getByPrimaryKey(sta.getId());
            if (stadeliver != null) {
                msgInorder.setMobile(stadeliver.getMobile());
                msgInorder.setLpCode(stadeliver.getLpCode());
                msgInorder.setTrackingNo(stadeliver.getTrackingNo());
                msgInorder.setReceiver(stadeliver.getReceiver());
                msgInorder.setMobile(stadeliver.getMobile());
                msgInorder.setTelephone(stadeliver.getTelephone());
            }
            if (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType())) {
                String tbcode = sta.getSlipCode1();
                String racode = sta.getRefSlipCode();
                String trackingNo = "";
                if (sta.getStaDeliveryInfo() != null) {
                    trackingNo = sta.getStaDeliveryInfo().getTrackingNo();
                }
                msgInorder.setRemark("," + tbcode + "," + racode + "," + trackingNo + "," + sta.getRefSlipCode());

                // IDS 退货取备注
                if (Constants.VIM_WH_SOURCE_IDS.equals(wh.getVmiSource()) || Constants.VIM_WH_SOURCE_FOLLIE.equals(wh.getVmiSource()) || Constants.VIM_WH_SOURCE_ARVATO_WMF.equals(wh.getVmiSource())) {
                    msgInorder.setRemark(sta.getMemo());
                }
                // YH&HD 退货取备注
                if (Constants.VIM_WH_SOURCE_YH.equals(wh.getVmiSource()) || Constants.VIM_WH_SOURCE_HD.equals(wh.getVmiSource())) {
                    if (StringUtils.hasLength(sta.getSystemKey())) {
                        // 直连
                        msgInorder.setExtMemo(stadeliver.getTransMemo());
                    } else {
                        // 非直连
                        msgInorder.setExtMemo(stadeliver.getRemark());
                    }
                }
            } else {
                if (StockTransApplicationType.INBOUND_PURCHASE.equals(sta.getType())) {
                    msgInorder.setRemark("," + sta.getRefSlipCode());
                }
                if (StockTransApplicationType.SAMPLE_INBOUND.equals(sta.getType()) || StockTransApplicationType.SERIAL_NUMBER_INBOUND.equals(sta.getType()) || StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.equals(sta.getType())
                        || StockTransApplicationType.SKU_RETURN_INBOUND.equals(sta.getType()) || StockTransApplicationType.SKU_EXCHANGE_INBOUND.equals(sta.getType())) {
                    ChooseOption cp = chooseOptionDao.findByCategoryCodeAndKey("whSTAType", sta.getType().getValue() + "");
                    msgInorder.setRemark(cp.getOptionValue() + "," + sta.getRefSlipCode());
                }
            }
            if (sta.getOwner() != null) {
                msgInorder.setShopId(companyShopDao.getByCode(sta.getAddiOwner() == null ? sta.getOwner() : sta.getAddiOwner()).getId());
            }
            msgInorder = msgInDao.save(msgInorder);
            msgInDao.flush();
            if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType())) {
                List<StvLine> stvlines = stvLineDao.findAllByStaId(sta.getId(), new BeanPropertyRowMapperExt<StvLine>(StvLine.class));
                for (StvLine line : stvlines) {
                    MsgInboundOrderLine inline = new MsgInboundOrderLine();
                    inline.setQty(line.getQuantity());
                    inline.setSku(line.getSku());
                    inline.setMsgInOrder(msgInorder);
                    inline.setInvStatus(line.getInvStatus());
                    msgInLineDao.save(inline);
                }
            } else {
                List<StaLine> stalines = staLineDao.findByStaId(sta.getId());
                for (StaLine line : stalines) {
                    MsgInboundOrderLine inline = new MsgInboundOrderLine();
                    inline.setQty(line.getQuantity());
                    inline.setSku(line.getSku());
                    inline.setMsgInOrder(msgInorder);
                    inline.setInvStatus(line.getInvStatus());
                    inline.setUnitPrice(line.getUnitPrice());
                    msgInLineDao.save(inline);
                    msgInLineDao.flush();
                }
            }
            sta.setIsLocked(false);
            staDao.save(sta);
            msgInLineDao.flush();
            return msgInorder;
        }
        return null;
    }

    /**
     * VIM_退换货入库
     */
    public void transactionTypeInboundReturn(Long staId, List<StaLine> stalineList, MsgRtnInboundOrder inOrder) throws Exception {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (StringUtil.isEmpty(inOrder.getSource())) {
            throw new BusinessException("");
        }
        List<StaLineCommand> stalines = null;
        if (("guess").equals(inOrder.getSource())) {
            stalines = staLineDao.findStalineByStaId(staId, sta.getCode(), new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
        } else {
            stalines = staLineDao.findStalineByStaIdCheck(staId, sta.getCode(), inOrder.getId(), inOrder.getSource(), new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
        }
        Map<Long, StaLine> map = new HashMap<Long, StaLine>();
        BiChannel bc = biChannelDao.getByCode(sta.getOwner());
        StockTransVoucher stv = null;
        List<StaLine> stalineObjList = staLineDao.findByStaId(staId);
        if (stalines.size() > 0) {
            log.warn("传入单据" + sta.getCode() + "与本地StaLine 数量不一致");
            // 数量不同
            throw new BusinessException("");
        }
        for (StaLine staLine : stalineObjList) {
            Long key = staLine.getSku().getId();
            map.put(key, staLine);
        }
        // 入库
        WarehouseLocation locList = warehouseLocationDao.findOneWarehouseLocationByOuid(sta.getMainWarehouse().getId());
        if (locList == null) {
            log.error("没有对应库位");
            throw new BusinessException("");
        }
        List<StvLineCommand> barCodes = null;
        if (null != bc && null != bc.getIsReturnCheckBatch() && bc.getIsReturnCheckBatch() && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
            barCodes = whExe.getOutBoundBachCode(sta.getType(), null, sta.getSlipCode1(), sta.getSlipCode1(), sta.getCode());
        } else {
            // 退货入库 批次入的必须是出的批次
            if (sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST) && (bc.getIsNotValInBoundBachCode() == null || !bc.getIsNotValInBoundBachCode())) {
                barCodes = whExe.getOutBoundBachCode(sta.getType(), null, sta.getSlipCode1(), sta.getSlipCode1(), sta.getCode());
            }
        }
        TransactionType tranType = transactionTypeDao.findByCode(TransactionType.returnTypeInbound(sta.getType()));
        stv = new StockTransVoucher();
        BigDecimal biSeqNo = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
        stv.setBusinessSeqNo(biSeqNo.longValue());
        stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>(String.class)));
        stv.setMode(null);
        stv.setCreateTime(new Date());
        stv.setDirection(TransactionDirection.INBOUND);
        stv.setOwner(sta.getOwner());
        stv.setSta(sta);
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setLastModifyTime(new Date());
        if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType()) || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())) {
            stv.setWarehouse(sta.getAddiWarehouse());
        } else {
            stv.setWarehouse(sta.getMainWarehouse());
        }
        stv.setTransactionType(tranType);// 作业类型
        stv = stvDao.save(stv);
        Date inboundTime = new Date();
        String batchCode = Long.valueOf(inboundTime.getTime()).toString();
        List<StvLine> stvLines = new ArrayList<StvLine>();
        OperationUnit ou = sta.getMainWarehouse();
        Warehouse wh = warehouseDao.getByOuId(ou.getId());
        Long skuQty = 0L;
        VmiWarehouseInterface vw = vmiWarehouseFactory.getVmiWarehouse(wh.getVmiSource());
        for (StaLine staLine : stalineList) {
            InventoryStatus is = inventoryStatusDao.getByPrimaryKey(staLine.getInvStatus().getId());
            WarehouseLocation locList1 = null;
            if (vw != null) {
                locList1 = vw.findLocByInvStatus(is);
            }
            if (locList1 != null) {
                locList = locList1;
            }
            StaLine line = map.get(staLine.getSku().getId());
            BigDecimal skuCost = new BigDecimal(0);
            if (line != null) {
                skuCost = line.getSkuCost();
            }
            StvLine stvLine = new StvLine();
            stvLine.setQuantity(staLine.getQuantity());
            stvLine.setSku(staLine.getSku());
            stvLine.setInvStatus(is);
            stvLine.setLocation(locList);
            String returnOwner = null;
            returnOwner = sta.getOwner();
            if (null != bc && null != bc.getIsReturnCheckBatch() && bc.getIsReturnCheckBatch() && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
                StockTransTxLogCommand stock = stockTransTxLogDao.findOwnerByStaCode(sta.getSlipCode1(), staLine.getSku().getId(), new BeanPropertyRowMapper<StockTransTxLogCommand>(StockTransTxLogCommand.class));
                if (null != stock && null != stock.getOwner()) {
                    stvLine.setOwner(stock.getOwner());
                } else {
                    stvLine.setOwner(sta.getOwner());
                }
                if (StringUtils.hasLength(bc.getReturnDefaultOwner())) {
                    returnOwner = bc.getReturnDefaultOwner();
                }
            } else {
                stvLine.setOwner(sta.getOwner());
            }
            stvLine.setSkuCost(skuCost);
            stvLine.setStaLine(staLineDao.findStaLineBySkuId(staLine.getSku().getId(), staId));
            if (bc.getIsNotValInBoundBachCode() == null || !bc.getIsNotValInBoundBachCode()) {
                stvLines.addAll(wmExecute.createStvLineByDate(stv, stvLine, barCodes, true));
            } else {
                stvLines.add(wmExecute.createStvLine(batchCode, TransactionDirection.INBOUND, inboundTime, stvLine.getInvStatus(), stvLine.getLocation(), returnOwner, null, null, null, stvLine.getQuantity(), null, stvLine.getSku(), stvLine.getSkuCost(),
                        stvLine.getSns(), stvLine.getProductionDate(), stvLine.getValidDate(), stvLine.getExpireDate(), stvLine.getStaLine(), stv));
            }
        }
        stv.setSkuQty(skuQty);
        stv.setLastModifyTime(new Date());
        stv.setStatus(StockTransVoucherStatus.FINISHED);
        stv.setFinishTime(new Date());
        stvDao.save(stv);
        stvDao.flush();
        /********************************* 入库新加SN号逻辑 **********************************/
        rtnInboundSn(stv, inOrder);
        whExe.validateBiChannelSupport(stv, null);
        // 更新库存数量
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_ou_id", stv.getWarehouse().getId());
        params.put("in_stv_id", stv.getId());
        params.put("in_com_id", findCompanyOUByWarehouseId(stv.getWarehouse().getId()).getId());
        params.put("is_in_cost", stv.getTransactionType().getIsInCost() ? 1 : 0);
        SqlParameter[] sqlParameters = {new SqlParameter("in_ou_id", Types.NUMERIC), new SqlParameter("in_stv_id", Types.NUMERIC), new SqlParameter("in_com_id", Types.NUMERIC), new SqlParameter("is_in_cost", Types.NUMERIC)};
        inventoryDao.executeSp("sp_insert_inventory", sqlParameters, params);
        updateStaLineQuantityForPurchase(stv.getSta().getId(), stvLines);
        updateSTAForPurchase(stv.getSta().getId(), null, true);
        try {
            eventObserver.onEvent(new TransactionalEvent(stv));
        } catch (BusinessException e) {
            throw e;
        }
    }

    private void rtnInboundSn(StockTransVoucher stv, MsgRtnInboundOrder inOrder) {
        if (inOrder != null) {
            MsgRtnInboundOrder mi = msgRtnInboundOrderDao.getByPrimaryKey(inOrder.getId());
            if (mi.getSource().equals(Constants.VIM_WH_SOURCE_SF)) {
                List<Sku> errorSku = skuDao.findErrorInboundSn(mi.getId(), new BeanPropertyRowMapper<Sku>(Sku.class));
                if (errorSku != null && errorSku.size() > 0) {
                    // 入库反馈的SN号跟要求的不符合（需要SN的数量不对)
                    throw new BusinessException("");
                } else {
                    String batchCode = Long.valueOf(new Date().getTime()).toString();
                    skuSnDao.batchInsertSn(mi.getId(), stv.getId(), stv.getSta().getMainWarehouse().getId(), batchCode);
                    skuSnDao.flush();
                    snLogDao.createInboundLogByStvId(stv.getId());
                }
            }
        }
    }

    private void validateRtnMsgMatchOutBoundStvLine(List<StvLine> stvLines, List<StaLine> msgLines, Map<Long, StaLine> resultMap) {
        Long key = null;
        Map<Long, Long> stvLineSkuMap = new HashMap<Long, Long>();
        // Map<Long,Long> msgSkuMap = new HashMap<Long,Long>();
        Map<Long, StaLine> msgSkuMap = new HashMap<Long, StaLine>();
        for (StvLine stvLine : stvLines) {
            if (stvLine.getSku() == null) {
                log.debug("========================");
                continue;
            }
            key = stvLine.getSku().getId();
            if (stvLineSkuMap.get(key) == null) {
                stvLineSkuMap.put(key, stvLine.getQuantity());
            } else {
                stvLineSkuMap.put(key, stvLineSkuMap.get(key) + stvLine.getQuantity());
            }
        }
        key = null;
        /*
         * for (StaLine msgLine:msgLines){ if (msgLine.getSku() == null) {
         * log.debug("========================"); continue; } key = msgLine.getSku().getId(); if
         * (msgSkuMap.get(key) == null){ msgSkuMap.put(key, msgLine.getQuantity()); }else {
         * msgSkuMap.put(key,msgSkuMap.get(key) + msgLine.getQuantity()); } }
         */
        for (StaLine staline : msgLines) {
            if (staline.getSku() == null) {
                log.debug("========================");
                continue;
            }
            key = staline.getSku().getId();
            if (msgSkuMap.get(key) == null) {
                msgSkuMap.put(key, staline);
            } else {
                Long addQty = msgSkuMap.get(key).getQuantity() + staline.getQuantity();
                staline.setQuantity(addQty);
                msgSkuMap.put(key, staline);
            }
        }

        key = null;
        long msgQty = 0L, stvLineQty = 0;
        List<Long> skuIds = new ArrayList<Long>();
        StaLine staLine = null;
        for (Map.Entry<Long, StaLine> entry : msgSkuMap.entrySet()) {
            key = entry.getKey();
            if (!stvLineSkuMap.containsKey(key)) {
                skuIds.add(key);
                continue;
            }
            // 外包仓反馈的sku数量
            msgQty = msgSkuMap.get(key).getQuantity();
            // 出库的sku数量
            stvLineQty = stvLineSkuMap.get(key).longValue();
            if (stvLineQty > msgQty) {
                staLine = msgSkuMap.get(key);
                staLine.setQuantity(stvLineQty - msgQty);
                resultMap.put(key, staLine);
            }
        }
        if (!skuIds.isEmpty()) {
            Sku sku = null;
            BusinessException root = new BusinessException(ErrorCode.THREEPL_OUT_BOUND_FAILED_MSG_RETURN_SKU_MATCH);
            // BusinessException parent = root;
            // int i = 0;
            for (Long id : skuIds) {
                sku = skuDao.getByPrimaryKey(id);
                BusinessException current = root;
                while (current.getLinkedException() != null) {
                    current = current.getLinkedException();
                }
                BusinessException be = new BusinessException(ErrorCode.SKU_NOT_MATCH_OUTBOUND_STVLINE, new Object[] {sku.getBarCode(), sku.getJmCode(), sku.getKeyProperties()});
                current.setLinkedException(be);
            }
            throw root;
        }
    }

    /**
     * 外包仓入库信息stv stvline创建
     * 
     * @param sta
     * @param stvs
     * @param stvBean
     * @param ouId
     * @return
     */
    private StockTransVoucher createTransCrossInboundStvForThreePl(StockTransApplication sta, List<StockTransVoucher> stvs) {
        Long staId = sta.getId();
        // 校验出库是否已经完成
        if (!sta.getStatus().equals(StockTransApplicationStatus.INTRANSIT)) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getStatus()});
        }
        if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
            List<OperationUnitCommand> list2 = operationUnitDao.findWarehouseByCompanyList(sta.getAddiWarehouse().getId(), sta.getAddiOwner(), new BeanPropertyRowMapper<OperationUnitCommand>(OperationUnitCommand.class));
            if (list2 == null || list2.size() == 0) {
                throw new BusinessException(ErrorCode.VMI_FLITTING_OUT_SHOP_REF, new Object[] {sta.getAddiWarehouse().getName(), sta.getAddiOwner()});
            }
        }
        if (stvs == null || stvs.size() != 1 || !stvs.get(0).getStatus().equals(StockTransVoucherStatus.FINISHED)) {
            if (log.isDebugEnabled()) {
                if (stvs == null) {
                    log.debug("stv is null");
                } else if (stvs.size() != 1) {
                    log.debug("stvs size error");
                } else if (!stvs.get(0).getStatus().equals(StockTransVoucherStatus.FINISHED)) {
                    log.debug("stv status error {}", stvs.get(0).getStatus());
                }
            }
            throw new BusinessException(ErrorCode.BETWENLIBARY_STV_OUTBOUND_NO_FINISH, new Object[] {sta.getCode()});
        }
        List<StvLineCommand> outStvLine = stvLineDao.findTRansitCrossOutList(sta.getId(), new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        // 创建入库stv
        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        stv.setCode(stvDao.getCode(staId, new SingleColumnRowMapper<String>()));
        stv.setCreateTime(new Date());
        stv.setDirection(TransactionDirection.INBOUND);
        TransactionType t = null;
        if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
            stv.setOwner(sta.getAddiOwner());
            t = transactionTypeDao.findByCode(Constants.VMI_FLITTING_IN);
        } else {
            stv.setOwner(sta.getOwner());
            t = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_CROSS_IN);
        }
        stv.setSta(sta);
        stv.setLastModifyTime(new Date());
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setTransactionType(t);
        stv.setWarehouse(sta.getAddiWarehouse());
        List<StvLine> stvls = new ArrayList<StvLine>();
        Long skuQty = 0L;
        // 创建入库stv line
        for (StvLine l : stvs.get(0).getStvLines()) {
            try {
                Long qty = l.getQuantity();
                for (int i = 0; i < outStvLine.size(); i++) {
                    StvLineCommand sl = outStvLine.get(i);
                    if (sl.getSkuId().equals(l.getSku().getId()) && sl.getOwner().equals(stv.getOwner())) {
                        // 获取当前批次的 入库时间
                        Date date = stvLineDao.findInboundTimeByBatchCode(sl.getBatchCode(), new SingleColumnRowMapper<Date>(Date.class));
                        if (date == null) {
                            throw new BusinessException(ErrorCode.INBOUND_TIME_IS_NULL);
                        }
                        Long tempQty = qty;
                        if (qty < sl.getQuantity()) {
                            sl.setQuantity(sl.getQuantity() - qty);
                            qty = 0L;
                        } else {
                            tempQty = sl.getQuantity();
                            qty -= sl.getQuantity();
                            outStvLine.remove(i--);
                        }
                        stvls.add(wmExecute.createStvLine(sl.getBatchCode(), TransactionDirection.INBOUND, date, l.getInvStatus(), l.getLocation(), stv.getOwner(), null, null, null, tempQty, null, l.getSku(), l.getSkuCost(), null, l.getProductionDate(),
                                l.getValidDate(), l.getExpireDate(), l.getStaLine(), stv));
                        skuQty += tempQty;
                        if (qty.equals(0L)) {
                            break;
                        }
                    }
                }
                if (qty != 0) {
                    throw new BusinessException(ErrorCode.INBOUND_BATCH_CODE_ERROR, new Object[] {l.getSku().getBarCode()});
                }
            } catch (BusinessException e) {
                log.error("", e);
                throw e;
            } catch (Exception e) {
                log.error("", e);
                throw new BusinessException(ErrorCode.SYSTEM_ERROR);
            }
        }
        stv.setSkuQty(skuQty);
        sta.setInboundTime(new Date());
        staDao.save(sta);
        stv.setStvLines(stvls);
        stvDao.save(stv);
        stvDao.flush();
        return stv;
    }

    /**
     * 库间移动入库操作
     */
    public void transitCrossPurchaseForThreePl(Long staId, List<StaLine> stalines) {
        log.debug("===========================warehousemanager method [ transitCrossPurchaseForThreePl ] begin: ===================== ");
        /*
         * 1.根据出库stv无条件执行入库(新加外包仓入库方法) 2.判断反馈明细行商品数量是否与出库明细一直 3.如数量不一致创建库存调整单据，类型外包仓库间移动调整出/入库
         * 4.单据创建后直接执行完成
         */
        if (staId == null || stalines == null || stalines.isEmpty()) {
            log.debug("===============================staId is null or  msg rtn is null or empty app will exit=======================");
            return;
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!sta.getStatus().equals(StockTransApplicationStatus.INTRANSIT)) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        OperationUnit addOu = sta.getAddiWarehouse();
        if (addOu == null) throw new BusinessException(ErrorCode.CROSS_IN_MAINHOUSE_IS_NULL);
        Warehouse wh = warehouseDao.getByOuId(addOu.getId());
        // 外包仓库
        if (!StringUtils.hasLength(wh.getVmiSource())) {
            log.debug("===============================in bound wareshoue is not three pl app will exit==============================");
            return;
        }
        List<StockTransVoucher> stvs = stvDao.findStvFinishListByStaId(staId);
        StockTransVoucher outStv = stvs.get(0);
        if (outStv == null) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        List<StvLine> stvLines = outStv.getStvLines();
        if (stvLines == null || stvLines.isEmpty()) {
            throw new BusinessException(ErrorCode.STV_LINE_NOT_FOUND);
        }
        Map<Long, StaLine> resultMap = new HashMap<Long, StaLine>();

        validateRtnMsgMatchOutBoundStvLine(stvLines, stalines, resultMap);
        StockTransVoucher inStv = createTransCrossInboundStvForThreePl(sta, stvs);
        // 入库
        TransactionType type = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_CROSS_IN);
        Long transctionId = type.getId();
        // 反馈数据不一致
        if (!resultMap.isEmpty()) {
            // 调整
            Long skuId = null;
            StaLine staLine = null;
            InventoryCheck inventoryCheck = createInboudnInventoryCheckForThreePl(sta.getCode(), sta.getAddiWarehouse());
            Long invCkId = inventoryCheck.getId();
            Map<Long, BigDecimal> skuCostMap = new HashMap<Long, BigDecimal>();

            for (Map.Entry<Long, StaLine> entry : resultMap.entrySet()) {
                skuId = entry.getKey();
                staLine = entry.getValue();
                // 创建 差异调整单
                createInboudnInventoryCheckDiffLineForThreePl(inStv.getId(), skuId, invCkId, staLine.getInvStatus().getId(), staLine.getQuantity(), skuCostMap);
                // 创建 汇总调整单
                createInboudnInventoryCheckTotalDiffLineForThreePl(inStv.getId(), skuId, invCkId, staLine.getInvStatus().getId(), staLine.getQuantity(), skuCostMap);
                // 盘点出库
                inventoryCheckOutBoundForThreePl(inventoryCheck);
            }
            // 入库操作： 反馈有差异
            createSkuInventoryTransCrossForThreePl(true, inStv.getId(), outStv.getId(), sta.getAddiWarehouse().getId(), transctionId);
        } else {
            log.debug("===============================resultMap is null ==========================");
            // 入库操作： 反馈无差异
            createSkuInventoryTransCrossForThreePl(false, inStv.getId(), outStv.getId(), sta.getAddiWarehouse().getId(), transctionId);
        }
        // 更新 stv状态， sta状态 为完成， staline更新完成数量
        updateStaLineCompleteQtyBySta(staId);
        inStv.setStatus(StockTransVoucherStatus.FINISHED);
        inStv.setLastModifyTime(new Date());
        sta.setStatus(StockTransApplicationStatus.FINISHED);
        sta = staDao.getByPrimaryKey(sta.getId());
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode()) && StockTransApplicationStatus.FINISHED.equals(sta.getStatus())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null, addOu.getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode()) && StockTransApplicationStatus.FINISHED.equals(sta.getStatus())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null, addOu.getId());
        }
        sta.setLastModifyTime(new Date());
        stvDao.save(inStv);
        staDao.save(sta);
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }
        try {
            eventObserver.onEvent(new TransactionalEvent(inStv));
        } catch (BusinessException e) {
            throw e;
        }
    }

    // 盘点出库 - 占用库存
    private void inventoryCheckOutBoundForThreePl(InventoryCheck ic) {
        // 盘点盘亏类型
        TransactionType outType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_INVENTORY_CHECK_OUT);
        if (outType == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_INVENTORY_CHECK_OUT_NOT_FOUND);
        }
        // 解锁库位
        // warehouseLocationDao.unLockByInvCheck(ic.getId());
        // 更新库存
        Map<String, Object> invparams = new HashMap<String, Object>();
        invparams.put("in_ic_id", ic.getId());
        invparams.put("in_out_transtype_id", outType.getId());
        SqlParameter[] invSqlP = {new SqlParameter("in_ic_id", Types.NUMERIC), new SqlParameter("in_out_transtype_id", Types.NUMERIC)};
        staDao.executeSp("sp_inv_check_exec_three_pl", invSqlP, invparams);
        /*
         * ic.setStatus(InventoryCheckStatus.FINISHED); inventoryCheckDao.save(ic);
         * inventoryCheckDao.flush();
         */
    }

    private void createSkuInventoryTransCrossForThreePl(boolean isDifference, Long inStvId, Long outStvId, Long addOuId, Long transctionId) {
        // add inventory
        inventoryDao.generateNewInventoryForTransCrossThreePl(inStvId);
        // add日志
        stockTransTxLogDao.generateLogForTransCrossThreePl(inStvId, outStvId, addOuId, transctionId);
        // add oms log
        stockTransTxLogDao.generateOMSInvLogForTransCrossThreePl(inStvId);
        if (isDifference) {
            // 有差异入库
            // 删除入库stvline，重新创建
            stvLineDao.deleteByStvId(inStvId);
            stvLineDao.generateByStvId(inStvId, outStvId, TransactionDirection.INBOUND.getValue(), addOuId, transctionId);
        }
    }

    private void createInboudnInventoryCheckTotalDiffLineForThreePl(Long staId, Long skuId, Long invCheckId, Long invStatusId, Long quantity, Map<Long, BigDecimal> skuCostMap) {
        vmiinvCheckLineDao.generateInventoryCheckDifTotalLine(quantity, invCheckId, skuId, invStatusId, skuCostMap.get(skuId));
        vmiinvCheckLineDao.flush();
    }

    private InventoryCheck createInboudnInventoryCheckForThreePl(String code, OperationUnit ou) {
        if (!StringUtils.hasLength(code)) {
            throw new BusinessException("sta code is null.");
        }
        InventoryCheck invCk = new InventoryCheck();
        invCk.setCreateTime(new Date());
        invCk.setOu(ou);
        invCk.setStatus(InventoryCheckStatus.CREATED);
        invCk.setType(InventoryCheckType.NORMAL);
        invCk.setSlipCode(code);
        invCk.setCode(sequenceManager.getCode(InventoryCheck.class.getName(), invCk));
        inventoryCheckDao.save(invCk);
        inventoryCheckDao.flush();
        return invCk;
    }

    private void createInboudnInventoryCheckDiffLineForThreePl(Long inStvId, Long skuId, Long inventoryCheckId, Long invStatusId, Long rawQty, Map<Long, BigDecimal> skuCostMap) {
        // 入库的stvline信息
        List<StvLineCommand> diffLines = stvLineDao.findByStaIdAndSkuIdInvStatusId(inStvId, skuId, invStatusId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (diffLines == null || diffLines.isEmpty()) {
            throw new BusinessException(ErrorCode.STV_LINE_NOT_FOUND);
        }
        long qty = rawQty.longValue();
        Long stvlineQty = null;
        for (StvLineCommand stvLineDiff : diffLines) {
            // sku成本cache
            skuCostMap.put(stvLineDiff.getSkuId(), stvLineDiff.getSkuCost());

            if (skuId.equals(stvLineDiff.getSkuId())) {
                if (qty <= 0L) {
                    break;
                }
                stvlineQty = stvLineDiff.getQuantity() == null ? 0L : stvLineDiff.getQuantity();
                if (stvlineQty.longValue() <= 0L) {
                    continue;
                }
                if (stvlineQty.longValue() > qty) {
                    stvLineDao.updateQuantityById(stvLineDiff.getId(), stvlineQty.longValue() - qty);
                    inventoryCheckDifferenceLineDao.generateInventoryCheckDifferenceLine(skuId, qty, inventoryCheckId, stvLineDiff.getTypeId(), stvLineDiff.getLocationId(), stvLineDiff.getIntInvstatus(), stvLineDiff.getOwner(), stvLineDiff.getSkuCost());
                    qty = 0L;
                } else {
                    stvLineDao.updateQuantityById(stvLineDiff.getId(), 0);
                    inventoryCheckDifferenceLineDao.generateInventoryCheckDifferenceLine(skuId, stvlineQty.longValue(), inventoryCheckId, stvLineDiff.getTypeId(), stvLineDiff.getLocationId(), stvLineDiff.getIntInvstatus(), stvLineDiff.getOwner(),
                            stvLineDiff.getSkuCost());
                    qty = qty - stvlineQty;
                }
            }
        }
        stvLineDao.flush();
        inventoryCheckDifferenceLineDao.flush();
    }



    /**
     * vmi_采购入库
     */
    public void purchaseReceiveStep(Long staId, List<StaLine> stalineList, MsgRtnInboundOrder inOrder) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        List<StaLine> stalines = staLineDao.findByStaId(staId);
        // Map<String, StaLine> map = new HashMap<String, StaLine>();
        StockTransVoucher stv = null;
        List<StvLine> stvLines = new ArrayList<StvLine>();
        /**************************************** 存在计划外商品 **************************/
        for (StaLine s : stalineList) {
            boolean flag = false;
            for (StaLine staLine : stalines) {
                if (staLine.getSku().getId().equals(s.getSku().getId())) {
                    flag = true;
                }
            }
            if (!flag) {
                log.error(inOrder.getId() + "the sku not in plan,id is" + s.getSku().getId() + "--------------------------------");
                throw new BusinessException("");
            }
        }
        /**************************************** 存在计划外商品 **************************/
        for (StaLine staLine : stalines) {
            long qty = (staLine.getQuantity() == null ? 0 : staLine.getQuantity()) - (staLine.getCompleteQuantity() == null ? 0 : staLine.getCompleteQuantity());
            for (StaLine staLineinfo : stalineList) {
                if (StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())) {
                    staLineinfo.setInvStatus(sta.getMainStatus());
                }
                if (staLine.getSku().getId().equals(staLineinfo.getSku().getId()) && ((staLine.getInvStatus() != null && staLine.getInvStatus().getId().equals(staLineinfo.getInvStatus().getId())) || staLine.getInvStatus() == null)) {
                    qty -= staLineinfo.getQuantity();
                }
                if (StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())) {
                    staLineinfo.setInvStatus(sta.getAddiStatus());
                }
            }
            if (StockTransApplicationType.INBOUND_OTHERS.equals(sta.getType())// 其他入库
                    || StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType())// 库间移动 KJL迁移
                    || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())// 同公司调拨KJL迁移
                    || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())// 不同公司调拨KJL迁移
                    || StockTransApplicationType.SAMPLE_INBOUND.equals(sta.getType())// 样品领用入库
                    || StockTransApplicationType.SKU_EXCHANGE_INBOUND.equals(sta.getType())// 商品置换入库
                    || StockTransApplicationType.SERIAL_NUMBER_INBOUND.equals(sta.getType())// 串号拆分入库
                    || StockTransApplicationType.SERIAL_NUMBER_GROUP_INBOUND.equals(sta.getType())// 串号组合入库
                    || StockTransApplicationType.REAPAIR_INBOUND.equals(sta.getType())// 送修入库
            ) {
                if (qty != 0) {
                    log.error("其他入库操作入库数量不一致");
                    throw new BusinessException();
                }
            } else {
                if (qty < 0) {
                    log.error("实际本次执行量已经超出剩余待确认收货量");
                    // 收货数量大于预定义计划未完成执行量
                    throw new BusinessException();
                }
            }
            // String key = staLine.getSku().getCode();
            // map.put(key, staLine);
        }
        // 入库
        WarehouseLocation locList = null;
        if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType()) || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType()) || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())) {
            locList = warehouseLocationDao.findOneWarehouseLocationByOuid(sta.getAddiWarehouse().getId());
        } else {
            locList = warehouseLocationDao.findOneWarehouseLocationByOuid(sta.getMainWarehouse().getId());
        }
        if (locList == null) {
            log.error("Sta未找到对应的仓位");
            throw new BusinessException();
        }
        TransactionType tranType = transactionTypeDao.findByCode(TransactionType.returnTypeInbound(sta.getType()));
        stv = new StockTransVoucher();
        if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType())// 库间移动
                || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())// 同公司调拨
                || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())// 不同公司调拨
                || StockTransApplicationType.SAMPLE_INBOUND.equals(sta.getType())// 样品领用
                || StockTransApplicationType.SERIAL_NUMBER_INBOUND.equals(sta.getType())// 串号拆分入库
        ) {
            BigDecimal biSeqNo = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
            stv.setBusinessSeqNo(biSeqNo.longValue());
            stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>(String.class)));
            stv.setMode(null);

            stv.setCreateTime(new Date());
            stv.setDirection(TransactionDirection.INBOUND);
            stv.setSta(sta);
            stv.setStatus(StockTransVoucherStatus.CREATED);
            stv.setLastModifyTime(new Date());
            if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType()) || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType()) || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())) {
                stv.setWarehouse(sta.getAddiWarehouse());
                stv.setOwner(sta.getAddiOwner());
            } else {
                stv.setWarehouse(sta.getMainWarehouse());
                stv.setOwner(sta.getOwner());
            }
            stv.setTransactionType(tranType);// 作业类型
            stv = stvDao.save(stv);
            // 此处逻辑不允许部分入库且样品领用多个入对应一个出，拆分出库保证拆出来的商品跟原始商品匹配，整体要求批次号入库时间对应
            // 此处分步骤操作、先查询出库时记录的批次号入库时间（要求的批次号入库时间），然后统一库位入库，样品要逐行扣减
            // Step1:查询待入库商品批次号入库时间，库存状态
            List<StvLineCommand> stvLineList = new ArrayList<StvLineCommand>();
            if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType())// 库间移动
                    || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())// 同公司调拨
                    || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())// 不同公司调拨
            ) {
                stvLineList = stvLineDao.findStvLineWithBatchCodeAndInboundTime(sta.getId(), null, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
            } else {
                stvLineList = stvLineDao.findStvLineWithBatchCodeAndInboundTime(null, sta.getSlipCode1(), new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
            }
            if (StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType())// 库间移动
                    || StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())// 同公司调拨
                    || StockTransApplicationType.DIFF_COMPANY_TRANSFER.equals(sta.getType())// 不同公司调拨
            ) {
                for (StvLineCommand slc : stvLineList) {
                    StvLine stvLine = new StvLine();
                    InventoryStatus inv = new InventoryStatus();
                    inv.setId(slc.getIntInvstatus());
                    stvLine.setInvStatus(inv);
                    Sku sku = new Sku();
                    sku.setId(slc.getSkuId());
                    stvLine.setSku(sku);
                    // stvLine.setStaLine(map.get(staLine.getSku().getCode()));
                    stvLine.setDirection(TransactionDirection.INBOUND);
                    stvLine.setStv(stv);
                    stvLine.setBatchCode(slc.getBatchCode());
                    stvLine.setInBoundTime(slc.getInBoundTime());
                    stvLine.setTransactionType(tranType);
                    stvLine.setLocation(locList);
                    stvLine.setDistrict(locList.getDistrict());
                    stvLine.setWarehouse(stv.getWarehouse());
                    stvLine.setOwner(stv.getOwner());
                    stvLine.setSkuCost(new BigDecimal(0));
                    stvLine.setQuantity(slc.getQuantity());
                    stvLine = stvLineDao.save(stvLine);
                    stvLines.add(stvLine);
                }
            } else {
                if (StockTransApplicationType.SAMPLE_INBOUND.equals(sta.getType())) {// 样品入库
                    for (StaLine staLine : stalines) {
                        Long qty = staLine.getQuantity();
                        for (StvLineCommand slc : stvLineList) {
                            if (staLine.getSku().getId().equals(slc.getSkuId()) && staLine.getOwner().equals(slc.getOwner()) && staLine.getInvStatus().getId().equals(slc.getIntInvstatus()) && !slc.getQuantity().equals(0L) && qty > 0) {
                                if (slc.getQuantity() <= qty) {
                                    StvLine stvLine = new StvLine();
                                    InventoryStatus inv = new InventoryStatus();
                                    inv.setId(slc.getIntInvstatus());
                                    stvLine.setInvStatus(inv);
                                    Sku sku = new Sku();
                                    sku.setId(slc.getSkuId());
                                    stvLine.setSku(sku);
                                    // stvLine.setStaLine(map.get(staLine.getSku().getCode()));
                                    stvLine.setDirection(TransactionDirection.INBOUND);
                                    stvLine.setStv(stv);
                                    stvLine.setBatchCode(slc.getBatchCode());
                                    stvLine.setInBoundTime(slc.getInBoundTime());
                                    stvLine.setTransactionType(tranType);
                                    stvLine.setLocation(locList);
                                    stvLine.setDistrict(locList.getDistrict());
                                    stvLine.setWarehouse(stv.getWarehouse());
                                    stvLine.setOwner(stv.getOwner());
                                    stvLine.setSkuCost(new BigDecimal(0));
                                    stvLine.setQuantity(slc.getQuantity());
                                    stvLine = stvLineDao.save(stvLine);
                                    stvLines.add(stvLine);
                                    qty = qty - slc.getQuantity();
                                    slc.setQuantity(0L);
                                } else {
                                    StvLine stvLine = new StvLine();
                                    InventoryStatus inv = new InventoryStatus();
                                    inv.setId(slc.getIntInvstatus());
                                    stvLine.setInvStatus(inv);
                                    Sku sku = new Sku();
                                    sku.setId(slc.getSkuId());
                                    stvLine.setSku(sku);
                                    // stvLine.setStaLine(map.get(staLine.getSku().getCode()));
                                    stvLine.setDirection(TransactionDirection.INBOUND);
                                    stvLine.setStv(stv);
                                    stvLine.setBatchCode(slc.getBatchCode());
                                    stvLine.setInBoundTime(slc.getInBoundTime());
                                    stvLine.setTransactionType(tranType);
                                    stvLine.setLocation(locList);
                                    stvLine.setDistrict(locList.getDistrict());
                                    stvLine.setWarehouse(stv.getWarehouse());
                                    stvLine.setOwner(stv.getOwner());
                                    stvLine.setSkuCost(new BigDecimal(0));
                                    stvLine.setQuantity(qty);
                                    stvLine = stvLineDao.save(stvLine);
                                    stvLines.add(stvLine);
                                    slc.setQuantity(slc.getQuantity() - qty);
                                    qty = 0L;
                                }
                            }
                        }
                        if (!qty.equals(0L)) {
                            log.error("未能从出库完全匹配本次入库!");
                            throw new BusinessException();
                        }
                    }
                } else {// 串号拆分
                    Long outQty = 0L;// 出库数量
                    for (StvLineCommand slc : stvLineList) {
                        outQty += slc.getQuantity();
                    }
                    Map<Long, Long> map = new HashMap<Long, Long>();// 入库商品Id 数量
                    for (StaLine staLine : stalines) {
                        if (map.get(staLine.getSku().getId()) == null) {
                            map.put(staLine.getSku().getId(), staLine.getQuantity());
                        } else {
                            map.put(staLine.getSku().getId(), map.get(staLine.getSku().getId()) + staLine.getQuantity());
                        }
                    }
                    Map<Long, Long> map1 = new HashMap<Long, Long>();// 对应入库商品和其与出库的倍数关系
                    for (Long set : map.keySet()) {
                        map1.put(set, map.get(set) / outQty);
                    }
                    for (StaLine staLine : stalines) {
                        Long qty = staLine.getQuantity();
                        Long num = map1.get(staLine.getSku().getId());
                        for (StvLineCommand slc : stvLineList) {
                            if (staLine.getInvStatus().getId().equals(slc.getIntInvstatus()) && staLine.getOwner().equals(slc.getOwner())) {
                                StvLine stvLine = new StvLine();
                                stvLine.setInvStatus(staLine.getInvStatus());
                                stvLine.setSku(staLine.getSku());
                                // stvLine.setStaLine(map.get(staLine.getSku().getCode()));
                                stvLine.setDirection(TransactionDirection.INBOUND);
                                stvLine.setStv(stv);
                                stvLine.setBatchCode(slc.getBatchCode());
                                stvLine.setInBoundTime(slc.getInBoundTime());
                                stvLine.setTransactionType(tranType);
                                stvLine.setLocation(locList);
                                stvLine.setDistrict(locList.getDistrict());
                                stvLine.setWarehouse(stv.getWarehouse());
                                stvLine.setOwner(stv.getOwner());
                                stvLine.setSkuCost(new BigDecimal(0));
                                stvLine.setQuantity(slc.getQuantity() * num);
                                stvLine = stvLineDao.save(stvLine);
                                stvLines.add(stvLine);
                                qty = qty - slc.getQuantity() * num;
                            }
                        }
                        if (!qty.equals(0L)) {
                            log.error("拆分未能从出库完全匹配本次入库!");
                            throw new BusinessException();
                        }
                    }
                }
            }
        } else {
            if (StockTransApplicationType.INBOUND_OTHERS.equals(sta.getType())) {
                stv = stvDao.findStvCreatedByStaId(sta.getId());
                stvLines = stvLineDao.findStvLineListByStvId(stv.getId());
            } else {
                BigDecimal biSeqNo = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
                stv.setBusinessSeqNo(biSeqNo.longValue());
                stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>(String.class)));
                stv.setMode(null);

                stv.setCreateTime(new Date());
                stv.setDirection(TransactionDirection.INBOUND);
                stv.setOwner(sta.getOwner());
                stv.setSta(sta);
                stv.setStatus(StockTransVoucherStatus.CREATED);
                stv.setLastModifyTime(new Date());
                stv.setWarehouse(sta.getMainWarehouse());
                stv.setTransactionType(tranType);// 作业类型
                stv = stvDao.save(stv);
                Date date = new Date();
                String batchCode = Long.valueOf(new Date().getTime()).toString();
                for (StaLine staLine : stalineList) {
                    StvLine stvLine = new StvLine();
                    stvLine.setInvStatus(staLine.getInvStatus());
                    stvLine.setSku(staLine.getSku());
                    // stvLine.setStaLine(map.get(staLine.getSku().getCode()));
                    stvLine.setDirection(TransactionDirection.INBOUND);
                    stvLine.setStv(stv);
                    stvLine.setBatchCode(batchCode);
                    stvLine.setInBoundTime(date);
                    stvLine.setTransactionType(tranType);
                    stvLine.setLocation(locList);
                    stvLine.setDistrict(locList.getDistrict());
                    stvLine.setWarehouse(stv.getWarehouse());
                    stvLine.setOwner(sta.getOwner());
                    // if (map.get(staLine.getSku().getCode()) == null) {
                    stvLine.setSkuCost(new BigDecimal(0));
                    // } else {
                    // stvLine.setSkuCost(map.get(staLine.getSku().getCode()).getSkuCost());
                    // }
                    stvLine.setQuantity(staLine.getQuantity());
                    stvLine = stvLineDao.save(stvLine);
                    stvLines.add(stvLine);
                }
            }

            Date date = new Date();
            String batchCode = Long.valueOf(date.getTime()).toString();
            for (int i = 0; i < stvLines.size(); i++) {
                StvLine line = stvLines.get(i);
                line.setBatchCode(batchCode);
                line.setInBoundTime(date);
                stvLineDao.save(line);
            }
            stvLineDao.flush();
        }
        stv.setStatus(StockTransVoucherStatus.FINISHED);
        stv.setLastModifyTime(new Date());
        stv.setFinishTime(new Date());
        stvDao.save(stv);
        stvDao.flush();
        /********************************* 入库新加SN号逻辑 **********************************/
        rtnInboundSn(stv, inOrder);
        /********************************* 入库新加SN号逻辑 **********************************/
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_ou_id", stv.getWarehouse().getId());
        params.put("in_stv_id", stv.getId());
        params.put("in_com_id", findCompanyOUByWarehouseId(stv.getWarehouse().getId()).getId());
        params.put("is_in_cost", (stv.getTransactionType() != null && stv.getTransactionType().getIsInCost()) ? 1 : 0);
        SqlParameter[] sqlParameters = {new SqlParameter("in_ou_id", Types.NUMERIC), new SqlParameter("in_stv_id", Types.NUMERIC), new SqlParameter("in_com_id", Types.NUMERIC), new SqlParameter("is_in_cost", Types.NUMERIC)};
        inventoryDao.executeSp("sp_insert_inventory", sqlParameters, params);
        updateStaLineAndSta(stv.getSta().getId());
        // 更新staLine完成数量，更新作业单状态
        staDao.flush();
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE && StringUtil.isEmpty(sta.getDataSource())) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null) {
                vmi.generateReceivingWhenInbound(sta, stv);
            }
        }
        staDao.flush();
        try {
            eventObserver.onEvent(new TransactionalEvent(stv));
        } catch (BusinessException e) {
            throw e;
        }
    }

    private void updateStaLineAndSta(Long id) {
        StockTransApplication sta = staDao.getByPrimaryKey(id);
        Boolean flag = true;
        List<StvLineCommand> list = stvLineDao.getAllFinishedSku(id, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
        Map<String, Long> qm = new HashMap<String, Long>();
        for (StvLineCommand slc : list) {
            qm.put(slc.getSkuId() + slc.getOwner() + "|" + slc.getIntInvstatus(), slc.getQuantity());
        }
        List<StaLine> staList = staLineDao.findByStaId(id);
        for (StaLine sl : staList) {
            sl.setCompleteQuantity(0L);
            Long invId = sl.getInvStatus() == null ? -1000L : sl.getInvStatus().getId();
            String owner = sl.getOwner();
            if (sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER) || sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS) || sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
                owner = sta.getAddiOwner();
            }
            if (sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER)) {
                invId = sta.getAddiStatus().getId();
            }
            String key = sl.getSku().getId() + owner + "|" + invId;
            if (qm.get(key) != null) {
                sl.setCompleteQuantity(qm.get(key));
                qm.remove(key);
            }
            if (!sl.getCompleteQuantity().equals(sl.getQuantity())) {
                flag = false;
            }
        }
        if (flag) {
            if (qm.size() != 0) {
                log.error("inbound error or outbound error,qm.size equals 0 is the right result!");
                throw new BusinessException("");
            }
            sta.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null, sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            sta.setInboundTime(new Date());
            sta.setFinishTime(new Date());
            staDao.save(sta);
        } else {
            flag = true;
            Map<String, Long> qm1 = new HashMap<String, Long>();
            for (String set : qm.keySet()) {
                String set1 = set.split("\\|")[0];
                if (qm1.containsKey(set1)) {
                    qm1.put(set1, qm1.get(set1) + qm.get(set));
                } else {
                    qm1.put(set1, qm.get(set));
                }
            }
            for (StaLine sl : staList) {
                String owner = sl.getOwner();
                if (sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER) || sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS) || sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
                    owner = sta.getAddiOwner();
                }
                String key = sl.getSku().getId() + owner;
                if (qm1.get(key) != null) {
                    sl.setCompleteQuantity(sl.getCompleteQuantity() + qm1.get(key));
                    qm1.remove(key);
                }
                if (!sl.getCompleteQuantity().equals(sl.getQuantity())) {
                    flag = false;
                }
            }
            if (qm1.size() != 0) {
                log.error("inbound error or outbound error,qm1.size equals 0 is the right result!");
                throw new BusinessException("");
            }
            if (flag) {
                sta.setStatus(StockTransApplicationStatus.FINISHED);
                // 订单状态与账号关联
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null, sta.getMainWarehouse().getId());
                sta.setInboundTime(new Date());
                sta.setFinishTime(new Date());
                sta.setLastModifyTime(new Date());
                staDao.save(sta);
            } else {
                sta.setStatus(StockTransApplicationStatus.PARTLY_RETURNED);
                sta.setInboundTime(new Date());
                sta.setLastModifyTime(new Date());
                staDao.save(sta);
            }
        }
        // if
        // (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT)
        // &&
        // sta.getVmiRCStatus() != Boolean.TRUE) {
        // CompanyShop shop =
        // companyShopDao.findByInnerShopCode(sta.getOwner());
        // VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
        // if (vmi != null) {
        // vmi.generateReceivingWhenFinished(sta);
        // }
        // }
        // try {
        // eventObserver.onEvent(new TransactionalEvent(sta));
        // } catch (BusinessException e) {
        // throw e;
        // }
    }

    /**
     * 创建0库存
     * 
     * @deprecated 已经移植到存储过程sp_insert_inventory
     * @param stvId
     */
    @SuppressWarnings("unused")
    private void createZeroInventoryForSpecial(Long stvId) {
        inventoryDao.createZeroInventoryForSpecial(stvId);
    }


    private void copyStv(StockTransVoucher stv, StockTransVoucher newStv) {
        newStv.setAffirmor(stv.getAffirmor());
        newStv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).longValue());
        newStv.setCode(stv.getCode());
        newStv.setCreateTime(new Date());
        newStv.setCreator(stv.getCreator());
        newStv.setDirection(stv.getDirection());
        newStv.setDutyPercentage(stv.getDutyPercentage());
        newStv.setFinishTime(stv.getFinishTime());
        newStv.setGiLocationCode(stv.getGiLocationCode());
        // newStv.setId(null);
        newStv.setIntDirection(stv.getIntDirection());
        // if (stv.getIntMode() == null) {} else {
        // newStv.setIntMode(stv.getIntMode());
        // }
        newStv.setInvoiceNumber(stv.getInvoiceNumber());
        newStv.setIsPda(stv.getIsPda());
        newStv.setLastModifyTime(new Date());
        newStv.setMemo(stv.getMemo());
        newStv.setMiscFeePercentage(stv.getMiscFeePercentage());
        newStv.setMode(stv.getMode());
        newStv.setOperator(stv.getOperator());
        newStv.setOwner(stv.getOwner());
        newStv.setReceiptor(stv.getReceiptor());
        newStv.setSkuQty(stv.getSkuQty());
        newStv.setSta(stv.getSta());
        newStv.setStatus(stv.getStatus());
        newStv.setStvlineCommandList(stv.getStvlineCommandList());
        // newStv.setStvLines(stv.getStvLines());
        newStv.setTransactionType(stv.getTransactionType());
        newStv.setType(stv.getType());
        newStv.setVersion(1);
        newStv.setWarehouse(stv.getWarehouse());
        newStv = stvDao.save(newStv);
    }

    /**
     * 1,update stvLineList from the web, 2,update stvLineList from the excel imported
     * 
     * @param stvId
     * @param intMode
     * @param ouId
     * @param stvlineList
     * @throws Exception
     */
    private Map<String, Long> updataStvlineList(StockTransVoucher stv, List<StvLine> stvlineList, String batchCode) {
        boolean b = false;
        ChooseOption ch = chooseOptionDao.findByCategoryCodeAndKey("RUKU_DEL_STVLINE", "1");
        if (ch == null || ch.getOptionValue() == null) {
            b = false;
        } else {
            b = true;
        }
        Map<String, Long> map = new HashMap<String, Long>();
        StockTransApplication sta = stv.getSta();
        StockTransVoucher newStv = new StockTransVoucher();
        // kg 复制stv
        if (b) {
            copyStv(stv, newStv);
            stv.setStatus(StockTransVoucherStatus.CANCELED);
            stvDao.save(stv);
        }
        // ////
        List<BusinessException> errors = new ArrayList<BusinessException>();
        Map<String, StvLine> staLineIdCache = new HashMap<String, StvLine>();
        List<StvLine> stvLineIds = new ArrayList<StvLine>();
        List<StvLine> stvLines = stvLineDao.findStvLineListByStvId(stv.getId());
        BiChannel biChannel = companyShopDao.getByCode(sta.getOwner());
        for (StvLine stvLine : stvLines) {
            String key = stvLine.getStaLine().getId() + "_" + stvLine.getOwner();
            if (sta.getType().equals(StockTransApplicationType.INVENTORY_STATUS_CHANGE)// 库存状态调整
                    || sta.getType().equals(StockTransApplicationType.TRANSIT_INNER)// 库内移动
                    || sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS)// 库间移动
                    || sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)// 同公司调拨
                    || sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER)// 不同公司调拨
                    || sta.getType().equals(StockTransApplicationType.VMI_OWNER_TRANSFER)// 转店
                    || sta.getType().equals(StockTransApplicationType.REAPAIR_INBOUND)// 送修入库
                    || sta.getType().equals(StockTransApplicationType.SAMPLE_INBOUND)// 样品领用入库
                    || sta.getType().equals(StockTransApplicationType.SERIAL_NUMBER_INBOUND)// 串号拆分入库
                    || sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)// 退换货申请-退货入库
                    || sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_PURCHASE)// 采购退货调整入库
                    || sta.getType().equals(StockTransApplicationType.INVENTORY_ADJUSTMENT_UPDATE)// 库存出入调整（针对盘点调整）
            ) {
                if (null != biChannel && null != biChannel.getIsReturnCheckBatch() && biChannel.getIsReturnCheckBatch() && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {

                } else {
                    key += "_" + stvLine.getBatchCode();
                }

            }
            staLineIdCache.put(key, stvLine);
            stvLineIds.add(stvLine);
        }
        for (StvLine stvLine : stvlineList) {
            String key = stvLine.getStaLine().getId() + "_" + stvLine.getOwner();
            if (sta.getType().equals(StockTransApplicationType.INVENTORY_STATUS_CHANGE)// 库存状态调整
                    || sta.getType().equals(StockTransApplicationType.TRANSIT_INNER)// 库内移动
                    || sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS)// 库间移动
                    || sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)// 同公司调拨
                    || sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER)// 不同公司调拨
                    || sta.getType().equals(StockTransApplicationType.VMI_OWNER_TRANSFER)// 转店
                    || sta.getType().equals(StockTransApplicationType.REAPAIR_INBOUND)// 送修入库
                    || sta.getType().equals(StockTransApplicationType.SAMPLE_INBOUND)// 样品领用入库
                    || sta.getType().equals(StockTransApplicationType.SERIAL_NUMBER_INBOUND)// 串号拆分入库
                    || sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)// 退换货申请-退货入库
                    || sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_PURCHASE)// 采购退货调整入库
                    || sta.getType().equals(StockTransApplicationType.INVENTORY_ADJUSTMENT_UPDATE)// 退换货申请-退货入库
            ) {
                if (null != biChannel && null != biChannel.getIsReturnCheckBatch() && biChannel.getIsReturnCheckBatch() && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {

                } else {
                    key += "_" + stvLine.getBatchCode();
                }
            }

            StvLine transientStvLine = null;
            try {
                transientStvLine = staLineIdCache.get(key).clone();
            } catch (CloneNotSupportedException e) {
                log.error("", e);
                throw new BusinessException(ErrorCode.SYSTEM_ERROR);
            }
            transientStvLine.setLocation(stvLine.getLocation());
            transientStvLine.setQuantity(stvLine.getQuantity());
            transientStvLine.setExpireDate(stvLine.getExpireDate());
            transientStvLine.setValidDate(stvLine.getValidDate());
            transientStvLine.setProductionDate(stvLine.getProductionDate());
            try {
                WarehouseLocation location = stvLine.getLocation();
                if (location == null) {
                    throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND);
                }
                transientStvLine.setLocation(location);
                transientStvLine.setDistrict(location.getDistrict());
                // 退换货
                if (stvLine.getInvStatus() != null && (Constants.TRANSACTION_TYPE_INBOUND_RETURN_REQUEST.equals(stv.getTransactionType().getCode()) || Constants.TRANSACTION_RETURN_PURCHASE_INBOUND.equals(stv.getTransactionType().getCode()))) {
                    transientStvLine.setInvStatus(stvLine.getInvStatus());
                } else if (Constants.TRANSACTION_TYPE_CODE_PURCHASE_INBOUND.equals(stv.getTransactionType().getCode())) {
                    transientStvLine.setBatchCode(batchCode);
                    log.debug("=========sku cost============" + stvLine.getSkuCost());
                }
                // 库存状态修改
                else if (Constants.TRANSACTION_TYPE_INVENTORY_STATUS_CHANGE_IN.equals(stv.getTransactionType().getCode())) {
                    transientStvLine.setInvStatus(stvLine.getInvStatus());
                    transientStvLine.setSkuCost(stvLine.getSkuCost());
                } else if (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType())) {
                    transientStvLine.setInvStatus(stvLine.getInvStatus());
                } else if (StockTransApplicationType.INVENTORY_ADJUSTMENT_UPDATE.equals(sta.getType())) {
                    transientStvLine.setInvStatus(stvLine.getInvStatus());
                }

                if (null != biChannel && null != biChannel.getIsReturnCheckBatch() && biChannel.getIsReturnCheckBatch() && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
                    transientStvLine.setBatchCode(batchCode);
                }
                if (errors.isEmpty()) {
                    // kg
                    if (b) {
                        transientStvLine.setStv(newStv);
                    }
                    //
                    stvLineDao.save(transientStvLine);
                }
            } catch (BusinessException be) {
                errors.add(be);
            }
        }
        // kg
        if (!b) {
            if (errors.isEmpty()) {
                for (StvLine sl : stvLineIds) {
                    stvLineDao.deleteById(sl.getId());
                }
                stvLineDao.flush();
            }
        }
        //
        businessExceptionPost(errors);
        map.put("id", stv.getId());
        map.put("newId", newStv.getId());
        return map;
    }

    public boolean updateStaLineQuantityForPurchase(Long staId, List<StvLine> stvLines) {
        for (StvLine stvLine : stvLines) {
            StaLine staLine = null;
            if (stvLine.getStaLine() == null) {
                staLine = staLineDao.findStaLineBySkuId(stvLine.getSku().getId(), staId);
            } else {
                staLine = staLineDao.getByPrimaryKey(stvLine.getStaLine().getId());
            }
            staLine.setCompleteQuantity(stvLine.getQuantity() + (staLine.getCompleteQuantity() == null ? 0L : staLine.getCompleteQuantity()));
        }
        return true;
    }

    /**
     * 更新作业申请单的入库上架时间、操作员、状态
     * 
     * @param staId 作业申请单ID
     * @param operator 操作员
     * @param finish 是否关闭PO单
     * @return
     */
    public StockTransApplicationStatus updateSTAForPurchase(Long staId, User operator, boolean finish) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        staDao.flush();
        sta.setLastModifyTime(new Date());

        // 退换货默认完成
        if (sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST) || sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS) || sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)
                || sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER)) {
            finish = true;
        }
        StockTransApplicationStatus before = sta.getStatus();
        if (StockTransApplicationStatus.CANCELED.equals(before)) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR);
        }
        Date now = new Date();
        sta.setInboundOperator(operator);

        initOwnerCode();
        if (vmiOwnerCodeCache.get(sta.getOwner()) != null) {
            MsgRtnInboundOrder mro = msgRtnInboundOrderDao.findInboundByStaCode(sta.getCode(), new BeanPropertyRowMapperExt<MsgRtnInboundOrder>(MsgRtnInboundOrder.class));
            if (mro != null) {
                sta.setInboundTime(mro.getInboundTime());
            }
        } else {
            sta.setInboundTime(now);
        }


        if (finish || isSTAFinishedForPurchase(staId)) {
            sta.setFinishTime(now);
            sta.setLastModifyTime(new Date());
            sta.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), operator == null ? null : operator.getId(), sta.getMainWarehouse().getId());
            } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), operator == null ? null : operator.getId(), sta.getMainWarehouse().getId());
            }
            BiChannel sh = biChannelDao.getByCode(sta.getOwner());
            if (sh != null && sh.getVmiCode() != null && ("4690".equals(sh.getVmiCode()) || "4691".equals(sh.getVmiCode()))) {
                converReceiveManager.generateVMIReceiveInfoBySample(sta);
            }

            wmsThreePLManager.createCnWmsOrderStatusUpload(sta.getId());
        } else {
            sta.setLastModifyTime(new Date());
            sta.setStatus(StockTransApplicationStatus.PARTLY_RETURNED);
            wmsThreePLManager.createCnWmsOrderStatusUpload(sta.getId());
        }
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }
        applicationContext.publishEvent(new StockTransApplicationStatusChangeEvent(sta, before));
        // staDao.save(sta);
        stvDao.flush();
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return before;
    }

    /**
     * 作业申请单是否有未完成的行
     * 
     * @param staId
     * @return
     */
    public boolean isSTAFinishedForPurchase(Long staId) {
        List<StaLineCommand> notFinishedList = staLineDao.findStaLineListByStaIdSql(staId, true, null, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
        return notFinishedList == null || notFinishedList.isEmpty();
    }

    public List<StockTransApplicationCommand> findStaListByPickingList(Long pickingListId, Long ouid, List<Long> plist, Sort[] sorts) {
        if (plist != null) {
            if (plist.size() == 0) plist = null;
        }
        return staDao.findStaByPickingList(ouid, pickingListId, plist, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public List<StockTransApplicationCommand> findStaListByPickingListopc(Long pickingListId, List<Long> ouid, Sort[] sorts) {
        return staDao.findStaByPickingListopc(ouid, pickingListId, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public Pagination<StockTransApplicationCommand> findSalesCanCancelStaList(int start, int size, String shopId, StockTransApplication sta, Long wh_ou_id, Sort[] sorts) {
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CREATED.getValue());
        statusList.add(StockTransApplicationStatus.FAILED.getValue());
        statusList.add(StockTransApplicationStatus.CHECKED.getValue());
        statusList.add(StockTransApplicationStatus.OCCUPIED.getValue());

        List<Integer> typeList = new ArrayList<Integer>();
        typeList.add(StockTransApplicationType.OUTBOUND_SALES.getValue());
        typeList.add(StockTransApplicationType.OUT_SALES_ORDER_OUTBOUND_SALES.getValue());
        return findSalesStaListPage(null, null, null, start, size, null, typeList, statusList, null, shopId, sta, null, null, wh_ou_id, false, false, false, null, null, sorts);
    }

    public List<StockTransApplicationCommand> findSalesPendingStaList(List<String> cities, Boolean isSkuSn, Date fromDate, Date toDate, List<String> innerCodes, String shopId, Integer isNeedInvoice, StockTransApplication sta, Sku sku, Long wh_ou_id,
            List<String> skuCodeList, Sort[] sorts) {
        if (isNeedInvoice != null) {
            if (sta.getStaDeliveryInfo() == null) {
                sta.setStaDeliveryInfo(new StaDeliveryInfo());
            }
            if (isNeedInvoice == 0) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(false);
            } else if (isNeedInvoice == 1) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(true);
            }
        }
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CREATED.getValue());
        statusList.add(StockTransApplicationStatus.FAILED.getValue());
        return findSalesStaList(cities, null, null, true, isSkuSn, null, statusList, innerCodes, shopId, sta, sku, fromDate, toDate, wh_ou_id, null, true, true, true, skuCodeList, sorts);
    }

    public List<StockTransApplicationCommand> findToSupportTransSalesPendingStaList(String province, Boolean isSkuSn, Date fromDate, Date toDate, String shopId, Integer isNeedInvoice, StockTransApplication sta, Long wh_ou_id, Sort[] sorts) {
        if (isNeedInvoice != null) {
            if (sta.getStaDeliveryInfo() == null) {
                sta.setStaDeliveryInfo(new StaDeliveryInfo());
            }
            if (isNeedInvoice == 0) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(false);
            } else if (isNeedInvoice == 1) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(true);
            }
        }
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CREATED.getValue());
        statusList.add(StockTransApplicationStatus.FAILED.getValue());
        // List<Integer> typeList = staDao.findSalesTypeList(new
        // SingleColumnRowMapper<Integer>());
        return findSalesStaList(null, province, null, false, isSkuSn, null, statusList, null, shopId, sta, null, fromDate, toDate, wh_ou_id, null, true, true, true, null, sorts);
    }

    public Pagination<StockTransApplicationCommand> findSalesPendingStaListPage(String shoplist, List<String> cities, int start, int pageSzie, Boolean isSkuSn, Date fromDate, Date toDate, String shopId, Integer isNeedInvoice, StockTransApplication sta,
            Sku sku, Long wh_ou_id, List<String> skuCodeList, Sort[] sorts) {
        if (isNeedInvoice != null) {
            if (sta.getStaDeliveryInfo() == null) {
                sta.setStaDeliveryInfo(new StaDeliveryInfo());
            }
            if (isNeedInvoice == 0) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(false);
            } else if (isNeedInvoice == 1) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(true);
            }
        }
        List<String> shopInnerCodes = null;
        StringUtils.hasText(shoplist);
        if (StringUtils.hasLength(shoplist)) {
            shopInnerCodes = new ArrayList<String>();
            String[] shopArrays = shoplist.split("\\|");
            for (String s : shopArrays) {
                shopInnerCodes.add(s);
            }
        }
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CREATED.getValue());
        statusList.add(StockTransApplicationStatus.FAILED.getValue());
        return findSalesStaListPage(cities, null, true, start, pageSzie, isSkuSn, null, statusList, shopInnerCodes, shopId, sta, fromDate, toDate, wh_ou_id, true, true, true, sku, skuCodeList, sorts);
    }

    public Pagination<StockTransApplicationCommand> findToTransSupportSalesPendingStaListPage(int start, int pageSzie, String province, Boolean isSkuSn, Date fromDate, Date toDate, String shopId, Integer isNeedInvoice, StockTransApplication sta,
            Long wh_ou_id, Sort[] sorts) {
        if (isNeedInvoice != null) {
            if (sta.getStaDeliveryInfo() == null) {
                sta.setStaDeliveryInfo(new StaDeliveryInfo());
            }
            if (isNeedInvoice == 0) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(false);
            } else if (isNeedInvoice == 1) {
                sta.getStaDeliveryInfo().setStoreComIsNeedInvoice(true);
            }
        }
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CREATED.getValue());
        statusList.add(StockTransApplicationStatus.FAILED.getValue());
        // List<Integer> typeList = staDao.findSalesTypeList(new
        // SingleColumnRowMapper<Integer>());
        return findSalesStaListPage(null, province, false, start, pageSzie, isSkuSn, null, statusList, null, shopId, sta, fromDate, toDate, wh_ou_id, true, true, true, null, null, sorts);
    }

    public StockTransApplicationCommand findSalesStaByTrackingNo1(String trackingNo, Long wh_ou_id, List<Long> idList) {
        PackageInfo info = packageInfoDao.findByTrackingNoIsHandover(trackingNo);
        if (info.getPackAge() != null) {
            List<StockTransApplicationCommand> list = staDao.findSalesOrderByTrackingNo(trackingNo, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
            if (list != null && list.size() != 0) {
                return list.get(0);
            } else {
                return null;
            }
        } else {
            List<Integer> statusList = new ArrayList<Integer>();
            statusList.add(StockTransApplicationStatus.CHECKED.getValue());
            List<StockTransApplicationCommand> list =
                    staDao.findSalesStaByTrackingNo(PickingListCheckMode.PICKING_SECKILL.getValue(), trackingNo, statusList, wh_ou_id, idList, PackageInfoStatus.CREATED.getValue(), new BeanPropertyRowMapper<StockTransApplicationCommand>(
                            StockTransApplicationCommand.class));
            if (list != null && list.size() != 0) {
                return list.get(0);
            } else {
                return null;
            }
        }
    }

    public List<StockTransApplicationCommand> findSalesStaByTrackingNos(String trackingNo, Long wh_ou_id, List<Long> idList) {
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CHECKED.getValue());
        List<StockTransApplicationCommand> list =
                staDao.findSalesStaByTrackingNo(PickingListCheckMode.PICKING_SECKILL.getValue(), trackingNo, statusList, wh_ou_id, idList, PackageInfoStatus.CREATED.getValue(), new BeanPropertyRowMapper<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class));
        if (list != null && list.size() != 0) {
            return list;
        } else {
            return null;
        }
    }

    public StockTransApplicationCommand findSalesStaByTrackingNo(PickingMode mode, String trackingNo, Long wh_ou_id, List<Long> plists) {
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(StockTransApplicationStatus.CHECKED.getValue());
        StockTransApplication sta = new StockTransApplication();
        StaDeliveryInfo info = new StaDeliveryInfo();
        info.setTrackingNo(trackingNo);
        sta.setStaDeliveryInfo(info);
        List<StockTransApplicationCommand> list = findSalesStaList(null, null, null, true, null, mode, null, statusList, null, null, sta, null, null, wh_ou_id, plists, false, false, false, null, null, null);
        if (list != null && list.size() != 0) {
            return list.get(0);
        } else {
            return null;
        }
    }

    public List<StockTransApplicationCommand> findSalesStaList(List<String> cities, String province, Boolean isNotGroup, Boolean isLpCode, Boolean isSnSta, List<Integer> typeList, List<Integer> statusList, List<String> innerCodes, String shopId,
            StockTransApplication sta, Sku sku, Date fromDate, Date toDate, Long ouid, List<Long> plists, Boolean checkPickingList, Boolean isCheckInBoundSta, Boolean isLike, List<String> skuCodeList, Sort[] sorts) {
        return findSalesStaList(cities, province, isNotGroup, isLpCode, isSnSta, null, typeList, statusList, innerCodes, shopId, sta, fromDate, toDate, ouid, plists, checkPickingList, isCheckInBoundSta, isLike, sku, skuCodeList, sorts);
    }

    // /by page
    public Pagination<StockTransApplicationCommand> findSalesStaListByPage(int start, int pagesize, List<String> cities, String province, Boolean isNotGroup, Boolean isLpCode, Boolean isSnSta, List<Integer> typeList, List<Integer> statusList,
            List<String> innerCodes, String shopId, StockTransApplication sta, Sku sku, Date fromDate, Date toDate, Long ouid, List<Long> plists, Boolean checkPickingList, Boolean isCheckInBoundSta, Boolean isLike, List<String> skuCodeList, Sort[] sorts) {
        return findSalesStaListByPage(start, pagesize, cities, province, isNotGroup, isLpCode, isSnSta, null, typeList, statusList, innerCodes, shopId, sta, fromDate, toDate, ouid, plists, checkPickingList, isCheckInBoundSta, isLike, sku, skuCodeList,
                sorts);
    }

    private Pagination<StockTransApplicationCommand> findSalesStaListPage(List<String> cities, String province, Boolean isLpcode, int start, int pageSzie, Boolean isSnSta, List<Integer> typeList, List<Integer> statusList, List<String> shopInnerCodes,
            String shopId, StockTransApplication sta, Date fromDate, Date toDate, Long ouid, Boolean checkPickingList, Boolean isCheckInBoundSta, Boolean isLike, Sku sku, List<String> skuCodeList, Sort[] sorts) {
        return findSalesStaListPage(cities, province, isLpcode, start, pageSzie, isSnSta, null, typeList, statusList, shopInnerCodes, shopId, sta, fromDate, toDate, ouid, checkPickingList, isCheckInBoundSta, isLike, sku, skuCodeList, sorts);
    }


    private Pagination<StockTransApplicationCommand> findSalesStaListByPage(int start, int pagesize, List<String> cities, String province, Boolean isNotGroup, Boolean isLpcode, Boolean isSnSta, PickingMode mode, List<Integer> typeList,
            List<Integer> statusList, List<String> innerCodes, String shopId, StockTransApplication sta, Date fromDate, Date toDate, Long ouid, List<Long> plists, Boolean checkPickingList, Boolean isCheckInBoundSta, Boolean isLike, Sku sku,
            List<String> skuCodeList, Sort[] sorts) {
        Long whId = ouid;
        String code = null;
        Boolean isNeedInvoice = null;
        String refSlipCode = null;
        String lpCode = null;
        String pickingListCode = null;
        String receiver = null;
        String trackingNo = null;
        String skus = null;
        if ((sta == null || sta.getType() == null) && typeList == null) {
            typeList = staDao.findSalesTypeList(new SingleColumnRowMapper<Integer>());
        } else if (typeList == null) {
            typeList = new ArrayList<Integer>();
            typeList.add(sta.getType().getValue());
        }
        if (sta != null) {
            if (StringUtils.hasText(sta.getSkus())) {
                skus = sta.getSkus() + ":%";
            }
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (sta.getStaDeliveryInfo() != null) {
                isNeedInvoice = sta.getStaDeliveryInfo().getStoreComIsNeedInvoice();
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getLpCode())) {
                    lpCode = sta.getStaDeliveryInfo().getLpCode();
                }
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getReceiver())) {
                    receiver = "%" + sta.getStaDeliveryInfo().getReceiver() + "%";
                }
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getTrackingNo())) {
                    if (isLike == null || !isLike) {
                        // 精确查找
                        trackingNo = sta.getStaDeliveryInfo().getTrackingNo();
                    } else {
                        trackingNo = sta.getStaDeliveryInfo().getTrackingNo() + "%";
                    }

                }
            }
            if (sta.getPickingList() != null) {
                if (StringUtils.hasText(sta.getPickingList().getCode())) {
                    pickingListCode = sta.getPickingList().getCode() + "%";
                }
            }
        }
        if (StringUtils.hasText(province)) {
            province = "%" + province + "%";
        } else {
            province = null;
        }
        if (StringUtils.hasText(shopId)) {

        } else {
            shopId = null;
        }
        Map<String, String> skumap = null;
        if (sku != null) {
            skumap = new HashMap<String, String>();
            if (StringUtils.hasText(sku.getBarCode())) {
                skumap.put("skuBarCode", sku.getBarCode());
            }
            if (StringUtils.hasText(sku.getName())) {
                skumap.put("skuName", sku.getName());
            }
            if (StringUtils.hasText(sku.getJmCode())) {
                skumap.put("skuJmCode", sku.getJmCode());
            }
            if (StringUtils.hasText(sku.getCode())) {
                skumap.put("skuCode", sku.getCode());
            }
            if (StringUtils.hasText(sku.getKeyProperties())) {
                skumap.put("skuKeyProperties", sku.getKeyProperties());
            }
        }
        Long skuQty = sta == null ? null : sta.getSkuQty();
        // 按商品创建配货清单,需按商品排序
        if (skuQty != null && skuQty == 1) {
            sorts = new Sort[] {new Sort("pro_id"), new Sort("sku_id")};
        }
        if (sta == null) {
            sta = new StockTransApplication();
        }
        // 增加查询条件：行业、是否为大件商品 fanht
        if (mode == null) {
            return staDao.findSalesStaListForModel1ByPage(start, pagesize, sta.getIsSpecialPackaging(), cities, province, isNotGroup, isLpcode, isSnSta, null, skus, whId, plists, statusList, fromDate, toDate, code, refSlipCode, typeList, isNeedInvoice,
                    lpCode, innerCodes, shopId, pickingListCode, receiver, trackingNo, checkPickingList, isCheckInBoundSta, isLike, skuQty, skuCodeList, skumap, sta == null ? null : sta.getSkuMaxLength(), sorts,
                    new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        } else {
            return staDao.findSalesStaListForModel1ByPage(start, pagesize, sta.getIsSpecialPackaging(), cities, province, isNotGroup, isLpcode, isSnSta, mode.getValue(), skus, whId, plists, statusList, fromDate, toDate, code, refSlipCode, typeList,
                    isNeedInvoice, lpCode, innerCodes, shopId, pickingListCode, receiver, trackingNo, checkPickingList, isCheckInBoundSta, isLike, skuQty, skuCodeList, skumap, sta == null ? null : sta.getSkuMaxLength(), sorts,
                    new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        }
    }



    private List<StockTransApplicationCommand> findSalesStaList(List<String> cities, String province, Boolean isNotGroup, Boolean isLpcode, Boolean isSnSta, PickingMode mode, List<Integer> typeList, List<Integer> statusList, List<String> innerCodes,
            String shopId, StockTransApplication sta, Date fromDate, Date toDate, Long ouid, List<Long> plists, Boolean checkPickingList, Boolean isCheckInBoundSta, Boolean isLike, Sku sku, List<String> skuCodeList, Sort[] sorts) {
        Long whId = ouid;
        String code = null;
        Boolean isNeedInvoice = null;
        String refSlipCode = null;
        String lpCode = null;
        String pickingListCode = null;
        String receiver = null;
        String trackingNo = null;
        String skus = null;
        if ((sta == null || sta.getType() == null) && typeList == null) {
            typeList = staDao.findSalesTypeList(new SingleColumnRowMapper<Integer>());
        } else if (typeList == null) {
            typeList = new ArrayList<Integer>();
            typeList.add(sta.getType().getValue());
        }
        if (sta != null) {
            if (StringUtils.hasText(sta.getSkus())) {
                skus = sta.getSkus() + ":%";
            }
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (sta.getStaDeliveryInfo() != null) {
                isNeedInvoice = sta.getStaDeliveryInfo().getStoreComIsNeedInvoice();
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getLpCode())) {
                    lpCode = sta.getStaDeliveryInfo().getLpCode();
                }
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getReceiver())) {
                    receiver = "%" + sta.getStaDeliveryInfo().getReceiver() + "%";
                }
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getTrackingNo())) {
                    if (isLike == null || !isLike) {
                        // 精确查找
                        trackingNo = sta.getStaDeliveryInfo().getTrackingNo();
                    } else {
                        trackingNo = sta.getStaDeliveryInfo().getTrackingNo() + "%";
                    }

                }
            }
            if (sta.getPickingList() != null) {
                if (StringUtils.hasText(sta.getPickingList().getCode())) {
                    pickingListCode = sta.getPickingList().getCode() + "%";
                }
            }
        }
        if (StringUtils.hasText(province)) {
            province = "%" + province + "%";
        } else {
            province = null;
        }
        if (StringUtils.hasText(shopId)) {

        } else {
            shopId = null;
        }
        Map<String, String> skumap = null;
        if (sku != null) {
            skumap = new HashMap<String, String>();
            if (StringUtils.hasText(sku.getBarCode())) {
                skumap.put("skuBarCode", sku.getBarCode());
            }
            if (StringUtils.hasText(sku.getName())) {
                skumap.put("skuName", sku.getName());
            }
            if (StringUtils.hasText(sku.getJmCode())) {
                skumap.put("skuJmCode", sku.getJmCode());
            }
            if (StringUtils.hasText(sku.getCode())) {
                skumap.put("skuCode", sku.getCode());
            }
            if (StringUtils.hasText(sku.getKeyProperties())) {
                skumap.put("skuKeyProperties", sku.getKeyProperties());
            }
        }
        Long skuQty = sta == null ? null : sta.getSkuQty();
        // 按商品创建配货清单,需按商品排序
        if (skuQty != null && skuQty == 1) {
            sorts = new Sort[] {new Sort("pro_id"), new Sort("sku_id")};
        }
        if (sta == null) {
            sta = new StockTransApplication();
        }
        // 增加查询条件：行业、是否为大件商品 fanht
        if (mode == null) {
            return staDao.findSalesStaListForModel1(sta.getIsSpecialPackaging(), cities, province, isNotGroup, isLpcode, isSnSta, null, skus, whId, plists, statusList, fromDate, toDate, code, refSlipCode, typeList, isNeedInvoice, lpCode, innerCodes,
                    shopId, pickingListCode, receiver, trackingNo, checkPickingList, isCheckInBoundSta, isLike, skuQty, skuCodeList, skumap, sta == null ? null : sta.getSkuMaxLength(), sorts, new BeanPropertyRowMapper<StockTransApplicationCommand>(
                            StockTransApplicationCommand.class));
        } else {
            return staDao.findSalesStaListForModel1(sta.getIsSpecialPackaging(), cities, province, isNotGroup, isLpcode, isSnSta, mode.getValue(), skus, whId, plists, statusList, fromDate, toDate, code, refSlipCode, typeList, isNeedInvoice, lpCode,
                    innerCodes, shopId, pickingListCode, receiver, trackingNo, checkPickingList, isCheckInBoundSta, isLike, skuQty, skuCodeList, skumap, sta == null ? null : sta.getSkuMaxLength(), sorts,
                    new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        }
    }

    private Pagination<StockTransApplicationCommand> findSalesStaListPage(List<String> cities, String province, Boolean isLpcode, int start, int pageSzie, Boolean isSnSta, PickingMode mode, List<Integer> typeList, List<Integer> statusList,
            List<String> shopInnerCodes, String shopId, StockTransApplication sta, Date fromDate, Date toDate, Long ouid, Boolean checkPickingList, Boolean isCheckInBoundSta, Boolean isLike, Sku sku, List<String> skuCodeList, Sort[] sorts) {
        Long whId = ouid;
        String code = null;
        Boolean isNeedInvoice = null;
        String refSlipCode = null;
        String lpCode = null;
        String pickingListCode = null;
        String receiver = null;
        String trackingNo = null;
        String skus = null;
        if ((sta == null || sta.getType() == null) && typeList == null) {
            typeList = staDao.findSalesTypeList(new SingleColumnRowMapper<Integer>());
            // typeList.add(StockTransApplicationType.OUTBOUND_SALES.getValue());
            // typeList.add(StockTransApplicationType.OUTBOUND_RETURN_REQUEST.getValue());
        } else if (typeList == null) {
            typeList = new ArrayList<Integer>();
            typeList.add(sta.getType().getValue());
        }
        if (sta != null) {
            if (StringUtils.hasText(sta.getSkus())) {
                skus = sta.getSkus() + ":%";
            }
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (sta.getStaDeliveryInfo() != null) {
                isNeedInvoice = sta.getStaDeliveryInfo().getStoreComIsNeedInvoice();
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getLpCode())) {
                    lpCode = sta.getStaDeliveryInfo().getLpCode();
                }
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getReceiver())) {
                    receiver = "%" + sta.getStaDeliveryInfo().getReceiver() + "%";
                }
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getTrackingNo())) {
                    if (isLike == null || !isLike) {
                        // 精确查找
                        trackingNo = sta.getStaDeliveryInfo().getTrackingNo();
                    } else {
                        trackingNo = sta.getStaDeliveryInfo().getTrackingNo() + "%";
                    }

                }
            }
            if (sta.getPickingList() != null) {
                if (StringUtils.hasText(sta.getPickingList().getCode())) {
                    pickingListCode = sta.getPickingList().getCode() + "%";
                }
            }
        }
        if (StringUtils.hasText(shopId)) {

        } else {
            shopId = null;
        }
        if (StringUtils.hasText(province)) {
            province = "%" + province + "%";
        } else {
            province = null;
        }
        Map<String, String> skumap = null;
        if (sku != null) {
            skumap = new HashMap<String, String>();
            if (StringUtils.hasText(sku.getBarCode())) {
                skumap.put("skuBarCode", sku.getBarCode());
            }
            if (StringUtils.hasText(sku.getName())) {
                skumap.put("skuName", sku.getName());
            }
            if (StringUtils.hasText(sku.getJmCode())) {
                skumap.put("skuJmCode", sku.getJmCode());
            }
            if (StringUtils.hasText(sku.getCode())) {
                skumap.put("skuCode", sku.getCode());
            }
            if (StringUtils.hasText(sku.getKeyProperties())) {
                skumap.put("skuKeyProperties", sku.getKeyProperties());
            }
        }
        Long skuQty = sta == null ? null : sta.getSkuQty();
        // 增加查询条件：行业、是否为大件商品 fanht
        if (mode == null) {
            return staDao.findSalesStaListPageNewModel1(start, pageSzie, (sta == null || sta.getIsSpecialPackaging() == null) ? false : sta.getIsSpecialPackaging(), cities, province, isLpcode, isSnSta, null, skus, whId, statusList, fromDate, toDate,
                    code, refSlipCode, typeList, isNeedInvoice, lpCode, shopInnerCodes, shopId, pickingListCode, receiver, trackingNo, checkPickingList, isCheckInBoundSta, isLike, skuQty, skuCodeList, skumap, sta == null ? null : sta.getSkuMaxLength(),
                    sorts, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        } else {
            return staDao.findSalesStaListPageNewModel1(start, pageSzie, (sta.getIsSpecialPackaging() == null ? false : sta.getIsSpecialPackaging()), cities, province, isLpcode, isSnSta, mode.getValue(), skus, whId, statusList, fromDate, toDate, code,
                    refSlipCode, typeList, isNeedInvoice, lpCode, shopInnerCodes, shopId, pickingListCode, receiver, trackingNo, checkPickingList, isCheckInBoundSta, isLike, skuQty, skuCodeList, skumap, sta == null ? null : sta.getSkuMaxLength(), sorts,
                    new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        }

    }

    public void createPickingListMode2(boolean isSpecialPackaging, Integer minLimit, Integer limit, List<Long> ids, Long ouId, Long creatorId, Boolean isMqInvoice) {
        Map<String, List<StockTransApplication>> map = new HashMap<String, List<StockTransApplication>>();
        for (Long staId : ids) {
            StockTransApplication sta = staDao.getByPrimaryKey(staId);
            List<StockTransApplication> list = map.get(sta.getSkus());
            if (list == null) {
                list = new ArrayList<StockTransApplication>();
                list.add(sta);
                map.put(sta.getSkus(), list);
            } else {
                list.add(sta);
            }
        }
        try {
            for (List<StockTransApplication> list : map.values()) {
                if (limit != null && limit < list.size()) {
                    List<StockTransApplication> stas = new ArrayList<StockTransApplication>();
                    int tmpLimit = limit;
                    for (StockTransApplication sta : list) {
                        stas.add(sta);
                        tmpLimit--;
                        if (tmpLimit == 0) {
                            createPickingListNative(isSpecialPackaging, stas, ParcelSortingMode.SECONDARY, PickingMode.MODE2, ouId, creatorId, PickingListCheckMode.DEFAULE, isMqInvoice, null);
                            tmpLimit = limit;
                            stas = new ArrayList<StockTransApplication>();
                        }
                    }
                    if (stas.size() != 0 && (minLimit == null || minLimit == 0 || minLimit <= stas.size())) {
                        createPickingListNative(isSpecialPackaging, stas, ParcelSortingMode.SECONDARY, PickingMode.MODE2, ouId, creatorId, PickingListCheckMode.DEFAULE, isMqInvoice, null);
                    }
                } else {
                    if (list.size() != 0 && (minLimit == null || minLimit == 0 || minLimit <= list.size())) {
                        createPickingListNative(isSpecialPackaging, list, ParcelSortingMode.SECONDARY, PickingMode.MODE2, ouId, creatorId, PickingListCheckMode.DEFAULE, isMqInvoice, null);
                    }
                }
            }
        } catch (BusinessException e) {
            throw e;
        }
    }

    private PickingList createPickingListNative(boolean isSpecialPackaging, List<StockTransApplication> stas, ParcelSortingMode mode, PickingMode pickingMode, Long ouId, Long creatorId, PickingListCheckMode checkMode, Boolean isMqInvoice, Boolean isBigBox) {
        if (stas == null || stas.size() == 0) {
            return null;
        }
        BusinessException rootExc = null;
        for (StockTransApplication sta : stas) {
            if (sta == null) {
                if (rootExc == null) {
                    rootExc = new BusinessException();
                }
                BusinessException currrentExc = new BusinessException(ErrorCode.STA_NOT_FOUND, new Object[] {""});
                rootExc.setLinkedException(currrentExc);
            } else if (!(sta.getStatus().getValue() == StockTransApplicationStatus.FAILED.getValue() || sta.getStatus().getValue() == StockTransApplicationStatus.CREATED.getValue())) {
                if (rootExc == null) {
                    rootExc = new BusinessException();
                }
                BusinessException currrentExc = new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
                rootExc.setLinkedException(currrentExc);
            } else {
                if (sta.getPickingList() != null) {
                    if (rootExc == null) {
                        rootExc = new BusinessException();
                    }
                    BusinessException currrentExc = new BusinessException(ErrorCode.PICKING_LIST_IN_STA_IS_NOT_NULL, new Object[] {sta.getCode()});
                    rootExc.setLinkedException(currrentExc);
                }
            }

        }
        if (rootExc != null) {
            throw rootExc;
        }
        OperationUnit ou = operationUnitDao.getByPrimaryKey(ouId);
        if (ou == null) {
            throw new BusinessException(ErrorCode.OPERATION_UNIT_NOT_FOUNT, new Object[] {ouId});
        }
        User creator = userDao.getByPrimaryKey(creatorId);
        if (creator == null) {
            throw new BusinessException(ErrorCode.USER_NOT_FOUND, new Object[] {creatorId});
        }
        PickingList pl = new PickingList();
        if (stas != null && stas.size() > 0) {
            pl.setLpcode(stas.get(0).getStaDeliveryInfo().getLpCode());
        }
        pl.setPickingMode(pickingMode);
        pl.setWarehouse(ou);
        pl.setCreator(creator);
        pl.setExecutedTime(new Date());
        pl.setCheckMode(checkMode);
        pl.setSortingMode(mode);
        pl.setStaList(stas);
        pl.setIsMqInvoice(isMqInvoice);
        // 追加是否包含大件商品 isBigBox fanht
        pl.setIsBigBox(isBigBox);
        pl.setPlanBillCount(stas.size());
        pl.setIsSpecialPackaging(isSpecialPackaging);
        pl.setStatus(PickingListStatus.WAITING);
        // 订单状态与账号关联 // 带仓库ID
        whInfoTimeRefDao.insertWhInfoTime2(pl.getCode(), WhInfoTimeRefBillType.STA_PICKING.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), creatorId, ouId);
        wareHouseManagerCancel.setPickingListPlanQty(pl);
        pl.setCode(sequenceManager.getCode(PickingList.class.getName(), pl));
        pickingListDao.save(pl);
        for (StockTransApplication sta : pl.getStaList()) {
            sta.setPickingList(pl);
            staDao.save(sta);
        }
        return pl;
    }

    /**
     * 手动生成配货批 追加是否包含大件商品 isBigBox fanht
     */
    public void createPickingList(Boolean isSpecialPackaging, List<Long> staIds, ParcelSortingMode mode, PickingMode pickingMode, Long ouId, Long creatorId, Boolean isMqInvoice, Boolean isBigBox) {
        List<StockTransApplication> stas = new ArrayList<StockTransApplication>();
        for (Long staId : staIds) {
            StockTransApplication sta = staDao.getByPrimaryKey(staId);
            stas.add(sta);
        }
        try {
            if (isSpecialPackaging == null && stas.size() > 0) {
                isSpecialPackaging = stas.get(0).getIsSpecialPackaging() == null ? false : stas.get(0).getIsSpecialPackaging();
            }
            createPickingListNative(isSpecialPackaging, stas, mode, pickingMode, ouId, creatorId, PickingListCheckMode.DEFAULE, isMqInvoice, isBigBox);
        } catch (BusinessException e) {
            throw e;
        }
    }

    /**
     * 自动生成配货批 追加是否包含大件商品 isBigBox fanht
     * 
     * @return
     * @throws JSONException
     */
    public void genPickingListNative(boolean isSpecialPackaging, String shoplist, List<String> cities, ParcelSortingMode mode, PickingMode pickingMode, Long creatorId, Integer minLimit, Integer limit, Integer count, Boolean isSkuSn, Date fromDate,
            Date toDate, String shopId, Integer isNeedInvoice, StockTransApplication sta, Sku sku, Long wh_ou_id, List<String> skuCodeList, Boolean isMqInvoice, Boolean isBigBox, Boolean isCod) {
        PickingListCheckMode checkMode = PickingListCheckMode.DEFAULE;
        if (sta != null) {
            if (sta.getSkuQty() != null) {
                checkMode = PickingListCheckMode.PICKING_CHECK;
            }
        }
        List<String> shopInnerCodes = null;
        StringUtils.hasText(shoplist);
        if (StringUtils.hasLength(shoplist)) {
            shopInnerCodes = new ArrayList<String>();
            String[] shopArrays = shoplist.split("\\|");
            for (String s : shopArrays) {
                shopInnerCodes.add(s);
            }
        }
        List<StockTransApplicationCommand> list = findSalesPendingStaList(cities, isSkuSn, fromDate, toDate, shopInnerCodes, shopId, isNeedInvoice, sta, sku, wh_ou_id, skuCodeList, new Sort[] {new Sort("id")});
        try {
            if ((limit == null || limit == 0) && (minLimit == null || minLimit == 0)) {
                // 无单据大小限制
                List<StockTransApplication> stas = new ArrayList<StockTransApplication>();
                for (StockTransApplicationCommand cmd : list) {
                    StockTransApplication cutSta = staDao.getByPrimaryKey(cmd.getId());
                    stas.add(cutSta);
                }
                createPickingListNative(isSpecialPackaging, stas, mode, pickingMode, wh_ou_id, creatorId, checkMode, isMqInvoice, isBigBox);
            } else if (limit != null || (limit != null && limit == 0)) {
                // 创建每批大小为limit、批次数量为count,多余单据不处理
                List<StockTransApplication> stas = new ArrayList<StockTransApplication>();
                int l = limit;
                for (StockTransApplicationCommand cmd : list) {
                    StockTransApplication cutSta = staDao.getByPrimaryKey(cmd.getId());
                    stas.add(cutSta);
                    if (--l <= 0) {
                        createPickingListNative(isSpecialPackaging, stas, mode, pickingMode, wh_ou_id, creatorId, checkMode, isMqInvoice, isBigBox);
                        stas = new ArrayList<StockTransApplication>();
                        l = limit;
                        if (count != null) {
                            count--;
                        }
                    }
                    if (count != null && count <= 0) {
                        break;
                    }
                }
                if (((count == null || count > 0) && l > 0) && (minLimit == null || minLimit == 0 || stas.size() >= minLimit)) {
                    createPickingListNative(isSpecialPackaging, stas, mode, pickingMode, wh_ou_id, creatorId, checkMode, isMqInvoice, isBigBox);
                }
            } else {
                if (list.size() >= minLimit) {
                    List<StockTransApplication> stas = new ArrayList<StockTransApplication>();
                    for (StockTransApplicationCommand cmd : list) {
                        StockTransApplication cutSta = staDao.getByPrimaryKey(cmd.getId());
                        stas.add(cutSta);
                    }
                    createPickingListNative(isSpecialPackaging, stas, mode, pickingMode, wh_ou_id, creatorId, checkMode, isMqInvoice, isBigBox);
                }
            }
        } catch (BusinessException e) {
            throw e;
        }
    }

    public List<PickingList> findPickingListByStatus(PickingMode pickingMode, PickingListStatus status, Long ouId, Sort[] sorts) {
        return pickingListDao.findByStatus(pickingMode, status, ouId, sorts);
    }

    public Pagination<AllocateCargoOrderCommand> queryPickingList(int start, int pageSize, AllocateCargoOrderCommand comd, Long ouId, Sort[] sorts) {
        if (comd == null) {
            comd = new AllocateCargoOrderCommand();
        }
        return pickingListDao.findPickingListAll(start, pageSize, comd.toMapSqlParamer(), ouId, sorts, new BeanPropertyRowMapperExt<AllocateCargoOrderCommand>(AllocateCargoOrderCommand.class));
    }

    @Transactional
    public void confirmPickingList(Long pickingListId, Long operatorId, Long ouid) {
        boolean isError = false;// 是否有失败sta
        PickingList pl = pickingListDao.getByPrimaryKey(pickingListId);
        if (pl == null) {
            throw new BusinessException(ErrorCode.PICKING_LIST_NOT_FOUND, new Object[] {operatorId});
        }
        User operator = userDao.getByPrimaryKey(operatorId);
        if (operator == null) {
            throw new BusinessException(ErrorCode.USER_NOT_FOUND, new Object[] {operatorId});
        }
        for (StockTransApplication sta : pl.getStaList()) {
            if (StockTransApplicationStatus.FAILED.equals(sta.getStatus())) {
                // 存在配货失败
                isError = true;
                break;
            }
        }
        if (isError) {
            // 库存占用失败
            pl.setStatus(PickingListStatus.FAILED);
        } else {
            pl.setStatus(PickingListStatus.PACKING);
        }
        wareHouseManagerCancel.setPickingListPlanQty(pl);
        pl.setOperator(operator);
        pl.setExecutedTime(new Date());
        pl.setPickingTime(new Date());
    }

    /**
     * 库存占用逻辑
     */
    public void occupyInventoryForSales(StockTransApplication sta, String wooCode, boolean isNew) {
        if (log.isInfoEnabled()) {
            log.info(wooCode + ":" + sta.getId() + " occupyInventoryForSales start..........");
        }
        if (sta.getIsMerge() != null && sta.getIsMerge()) {
            throw new BusinessException(ErrorCode.ERROR_STA_ISMERGE, new Object[] {sta.getCode()});
        }
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        List<InventoryOccupyCommand> list = new ArrayList<InventoryOccupyCommand>();
        // 根据渠道列表查询库存
        if (isNew) {
            // 新逻辑SQL
            // 获取所有订单指定区域
            // List<String> lCodeList =
            // warehouseLocationDao.findLocationIdByStaOcpLineId(sta.getId(), new
            // SingleColumnRowMapper<String>(String.class));
            list = inventoryDao.findSalesOutboundToOccupyInventoryNew(wh.getSaleOcpType() == null ? 1 : wh.getSaleOcpType().getValue(), sta.getId(), wooCode, null, new BeanPropertyRowMapperExt<InventoryOccupyCommand>(InventoryOccupyCommand.class));
        } else {
            // 老逻辑SQL
            list = inventoryDao.findSalesOutboundToOccupyInventory(wh.getSaleOcpType() == null ? 1 : wh.getSaleOcpType().getValue(), sta.getId(), wooCode, new BeanPropertyRowMapperExt<InventoryOccupyCommand>(InventoryOccupyCommand.class));
        }
        String lineKey = null;
        Long tqty = null;
        // 占用库存,按商品明细行的SKU与OWNER确认需要占用的库存
        for (InventoryOccupyCommand cmd : list) {
            // 商品是排序的，如果商品不同则说明之前商品已经占用完成
            // 切换商品，初始化待占用数
            if (lineKey == null || !lineKey.equals(cmd.getLineKey())) {
                log.debug("============change sku,from {} to {}", lineKey, cmd.getLineKey());
                lineKey = cmd.getLineKey();
                tqty = cmd.getPlanOccupyQty() == null ? 0L : cmd.getPlanOccupyQty();
            }
            log.debug("to occupy inv, sku : {},inv qty : " + cmd.getQuantity() + ", paln qty : " + cmd.getPlanOccupyQty(), cmd.getLineKey());
            log.debug("to occupy inv,owner : {} ,inv status : {}", cmd.getOrderOwner(), cmd.getStatusId());
            // 如待占用量小于0忽略该行库存
            if (tqty.longValue() <= 0L) {
                log.debug("tqty <= 0 continue");
                continue;
            }
            if (cmd.getQuantity().longValue() > tqty.longValue()) {
                // 库存数量大于待占用量拆分库存份
                inventoryDao.occupyInvById(cmd.getId(), sta.getCode(), tqty);
                log.debug("inv qty > tqty, to occupy tqty : {}", tqty);
                // 插入新库存份
                saveInventoryForOccupy(cmd, cmd.getQuantity().longValue() - tqty.longValue(), wooCode);
                // 重置待占用量
                tqty = 0L;
                log.debug("final tqty : {}", tqty);
            } else {
                // 库存数量小于等于待占用量,直接占用库存份
                inventoryDao.occupyInvById(cmd.getId(), sta.getCode(), cmd.getQuantity().longValue());
                log.debug("inv qty <= tqty, to occupy qty : {}", cmd.getQuantity().longValue());
                tqty = tqty - cmd.getQuantity().longValue();
                log.debug("final tqty : {}", tqty);
            }
        }
        inventoryDao.flush();
        log.debug("validate occupy");
        // 验证占用量
        validateOccupy(sta.getId());
        if (log.isInfoEnabled()) {
            log.info(wooCode + ":" + sta.getId() + " occupyInventoryForSales end..........");
        }
    }

    /**
     * 库存占用检查 fanht
     */
    public void validateOccupy(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        // 库存占用检查 fanht
        List<InventoryCommand> ivtList = inventoryDao.validateOccupyByStaId(staId, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
        if (ivtList != null && ivtList.size() > 0) {
            log.error(staId + ":occupy error");
            // 存在占用异常SKU
            BusinessException root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
            for (InventoryCommand cmd : ivtList) {
                if (sta.getType().equals(StockTransApplicationType.OUTBOUND_SALES) || sta.getType().equals(StockTransApplicationType.OUTBOUND_RETURN_REQUEST)) {
                    // 配货失败：插入中间表
                    StaErrorLine staErrorLine = new StaErrorLine();
                    staErrorLine.setStaId(staId);
                    staErrorLine.setSkuId(cmd.getSkuId());
                    staErrorLine.setQuantity(cmd.getQuantity());
                    optimizeManager.insertStaErrorLine(staErrorLine);
                }
                if (log.isDebugEnabled()) {
                    log.debug("not enoutht qty, sku code : {} , qty : {}", cmd.getSkuCode(), cmd.getQuantity());
                }
                setLinkedBusinessException(root, new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {cmd.getSkuName(), cmd.getSkuCode(), cmd.getBarCode(), cmd.getQuantity()}));
            }
            throw root;
        }
        log.info(staId + ":occupy success");
    }

    /**
     * 保存新库存份
     * 
     * @param cmd 占用库存
     * @param qty 库存数量
     */
    public void saveInventoryForOccupy(InventoryOccupyCommand cmd, Long qty, String wooCode) {
        Inventory inv = new Inventory();
        inv.setBatchCode(cmd.getBatchCode());
        inv.setDistrict(new WarehouseDistrict(cmd.getDistrictId()));
        inv.setInboundTime(cmd.getInboundTime());
        inv.setLocation(new WarehouseLocation(cmd.getLocationId()));
        inv.setOu(new OperationUnit(cmd.getOuId()));
        inv.setOwner(cmd.getOwner());
        inv.setQuantity(qty);
        inv.setSku(new Sku(cmd.getSkuId()));
        inv.setSkuCost(cmd.getSkuCost());
        inv.setStatus(new InventoryStatus(cmd.getStatusId()));
        inv.setExpireDate(cmd.getExpireDate());
        inv.setProductionDate(cmd.getProductionDate());
        inv.setValidDate(cmd.getValidDate());
        inv.setExpireDate(cmd.getExpireDate());
        if (wooCode != null) {
            inv.setIsOccupied(true);
            inv.setOccupationCode(wooCode);
        }
        inventoryDao.save(inv);
    }

    public void setStaOccupaidFailed(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!(StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.FAILED.equals(sta.getStatus()))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        /** 更新错误次数 ***************************/
        sta.setOcpErrorQty(sta.getOcpErrorQty() == null ? 1 : sta.getOcpErrorQty() + 1);
        sta.setOcpCode(null);
        sta.setIsNeedOccupied(true);
        sta.setWhOcpOrder(null);
        sta.setAreaOcpStatus(0);
        sta.setNextOcpTime(null);
        if (sta.getAreaOcpStatus() != null && sta.getAreaOcpStatus() >= 0) {
            staLineDao.updateStaLineOcpAreaById(staId); // 还原明细行标记
        }
        // sta.setOcpBatchCode(null);
        sta.setStatus(StockTransApplicationStatus.FAILED);
        Long ouId = sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId();
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FAILED.getValue(), null, ouId);
        sta.setLastModifyTime(new Date());
        wmsThreePLManager.createCnWmsOrderStatusUpload(sta.getId());
    }

    /**
     * 库存占用&转店 fanht
     */
    public void transChannelOcpInv(Long staId, Long creatorId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!(StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.FAILED.equals(sta.getStatus()))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 库存占用
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_sta_id", staId);
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
        Map<String, Object> result = null;
        staDao.flush();
        result = staDao.executeSp("sp_occupy_inv_for_vmi_transfer", sqlParameters, params);
        String errorSku = (String) result.get("error_sku_id");
        BusinessException root = null;
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(strs[0]);
                Long qty = Long.parseLong(strs[1]);

                if (root == null) {
                    root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                }
                BusinessException current = root;
                while (current.getLinkedException() != null) {
                    current = current.getLinkedException();
                }
                Sku sku = skuDao.getByPrimaryKey(skuId);
                BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                current.setLinkedException(be);
            }
            throw root;
        } else {
            // 更新sta状态为库存占用
            sta.setStatus(StockTransApplicationStatus.OCCUPIED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            staDao.save(sta);
            // 创建stv
            // 根据sta type查找作业类型
            int tdType = TransactionDirection.OUTBOUND.getValue();
            String code = stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>());
            // vmi转店出库占用
            TransactionType transtype = transactionTypeDao.findByCode(Constants.VMI_TRANSFER_OUT);
            if (transtype.getId() == null) {
                throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND, new Object[] {""});
            }
            stvDao.createStv(code, sta.getOwner(), sta.getId(), StockTransVoucherStatus.CREATED.getValue(), creatorId, tdType, sta.getMainWarehouse().getId(), transtype.getId());
            stvLineDao.createByStaId(sta.getId());
        }
    }

    /**
     * 销售出库库存占用 占用库存以作业单channellist为占用列表
     */
    public void createStvByStaId(Long staId, Long creatorId, String wooCode, boolean isNew) {
        if (log.isInfoEnabled()) {
            log.info(wooCode + ":" + staId + " createStvByStaId start..........");
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!((StockTransApplicationStatus.FROZEN.equals(sta.getStatus()) && sta.getOwner().contains("adidas")) || StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.FAILED.equals(sta.getStatus()))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 库存占用逻辑
        if (isNew) {
            // 新占用逻辑 基于MQ线程数据
            Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
            if (wh.getIsAreaOcpInv() == null || !wh.getIsAreaOcpInv()) {
                // 不按指定区域占用
                occupyInventoryForSales(sta, wooCode, false);
            } else {
                // 按指定区域占用
                // 判断明细行是否都有指定的区域
                boolean b = checkStaLineOcpMemo(staId);
                if (b) {
                    // 占用新逻辑
                    occupyInventoryForSales(sta, null, true);
                } else {
                    // 次出库单异常 不做处理 等待后续处理
                    return;
                }
            }
        } else {
            occupyInventoryForSales(sta, wooCode, false);
        }
        WarehouseLocation loca = warehouseLocationDao.findLocaSortAndCodeByInv(sta.getCode(), sta.getMainWarehouse().getId(), new BeanPropertyRowMapperExt<WarehouseLocation>(WarehouseLocation.class));
        if (loca != null) {
            sta.setLocalCode(loca.getCode());
            sta.setLocalSort(loca.getSort());
        }
        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        Long ouId = sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId();
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, ouId);
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        staDao.flush();
        if (log.isInfoEnabled()) {
            log.info(wooCode + ":" + staId + " ocpUpdateStatus info..........");
        }
        try {
            List<Long> zoonList = staDao.findPickZoonIdByStaCode(sta.getCode(), new SingleColumnRowMapper<Long>(Long.class));
            if (zoonList != null && zoonList.size() > 0) {
                // 拣货区域逻辑
                if (zoonList.size() == 1) {
                    sta.setZoonList(zoonList.get(0).toString());
                } else {
                    String zoonStr = "";
                    for (Long lId : zoonList) {
                        zoonStr = zoonStr + lId + "|";
                    }
                    zoonStr = zoonStr.substring(0, zoonStr.length() - 1);
                    sta.setZoonList(zoonStr);
                }
                // // 仓库区域逻辑
                List<Long> whZoonList = staDao.findWhZoonIdByPickZoon(zoonList, new SingleColumnRowMapper<Long>(Long.class));
                if (whZoonList != null && whZoonList.size() > 0) {
                    if (whZoonList.size() == 1) {
                        sta.setWhZoonList(whZoonList.get(0).toString());
                    } else {
                        String whZoonStr = "";
                        for (Long lId : whZoonList) {
                            whZoonStr = whZoonStr + lId + "|";
                        }
                        whZoonStr = whZoonStr.substring(0, whZoonStr.length() - 1);
                        sta.setWhZoonList(whZoonStr);
                    }
                }
                staDao.save(sta);
            }
        } catch (Exception e) {
            log.error("createStvByStaId update staZoonId is {}", sta.getCode());
        }

        int tdType = TransactionDirection.OUTBOUND.getValue();
        String code = stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>());
        BigDecimal ttid = null;
        // 销售出库占用
        ttid = transactionTypeDao.findByStaType(sta.getType().getValue(), new SingleColumnRowMapper<BigDecimal>());
        if (ttid == null) {
            throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND, new Object[] {""});
        }
        stvDao.createStv(code, sta.getOwner(), sta.getId(), StockTransVoucherStatus.CREATED.getValue(), creatorId, tdType, sta.getMainWarehouse().getId(), ttid.longValue());
        stvLineDao.createByStaId(sta.getId());
        if (log.isInfoEnabled()) {
            log.info(wooCode + ":" + staId + " createStvByStaId end..........");
        }
        wmsThreePLManager.createCnWmsOrderStatusUpload(sta.getId());

    }

    /**
     * 验证STALINE是否有占用库存指定区域
     * 
     * @param staid
     * @return
     */
    private boolean checkStaLineOcpMemo(Long staid) {
        boolean b = true;
        List<StaLine> staLineList = staLineDao.findByStaId(staid);
        for (StaLine staLine : staLineList) {
            if (StringUtil.isEmpty(staLine.getOcpAreaMemo())) {
                // 为空 返回false
                b = false;
                break;
            }
        }
        return b;
    }

    /**
     * 转店 fanht isVMITransfer true
     */
    public void createTransferByStaId(Long staId, Long creatorId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!(StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.FAILED.equals(sta.getStatus()))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 库存占用
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_sta_id", staId);
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
        staDao.flush();
        Map<String, Object> result = staDao.executeSp("sp_occupy_inv_for_vmi_transfer", sqlParameters, params);

        String errorSku = (String) result.get("error_sku_id");
        BusinessException root = null;
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(strs[0]);
                Long qty = Long.parseLong(strs[1]);

                if (root == null) {
                    root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                }
                BusinessException current = root;
                while (current.getLinkedException() != null) {
                    current = current.getLinkedException();
                }
                Sku sku = skuDao.getByPrimaryKey(skuId);
                BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                current.setLinkedException(be);
            }
            throw root;
        } else {
            // 更新sta状态为库存占用
            sta.setStatus(StockTransApplicationStatus.OCCUPIED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            staDao.save(sta);

            // IM
            hubWmsService.insertOccupiedAndRelease(sta.getId());

            // 创建stv
            // 根据sta type查找作业类型
            int tdType = TransactionDirection.OUTBOUND.getValue();
            String code = stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>());

            // vmi转店出库占用
            TransactionType transtype = transactionTypeDao.findByCode(Constants.VMI_TRANSFER_OUT);
            if (transtype.getId() == null) {
                throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND, new Object[] {""});
            }
            stvDao.createStv(code, sta.getOwner(), sta.getId(), StockTransVoucherStatus.CREATED.getValue(), creatorId, tdType, sta.getMainWarehouse().getId(), transtype.getId());
            stvLineDao.createByStaId(sta.getId());
        }
    }

    /***
     * 转店执行操作
     */
    public void executeVmiTransferOutBound(Long staId, Long userId, Long ouid) throws Exception {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // 创建 入库 stv
        TransactionType t = transactionTypeDao.findByCode(Constants.VMI_TRANSFER_IN);
        if (t == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_TRANSIT_CROSS_OUT_NOT_FOUND);
        }
        int tdType = TransactionDirection.INBOUND.getValue();
        String code = stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>());
        stvDao.createStv(code, sta.getAddiOwner(), sta.getId(), StockTransVoucherStatus.CREATED.getValue(), userId, tdType, sta.getMainWarehouse().getId(), t.getId());
        stvDao.flush();
        // 创建 入库 stvline
        stvLineDao.createInBoundStvLineByStaId(sta.getId(), sta.getAddiOwner(), t.getId());

        // 出库STV
        List<StockTransVoucher> stvList = stvDao.findByStaWithDirection(staId, TransactionDirection.OUTBOUND);
        if (stvList == null || stvList.size() == 0) throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        StockTransVoucher outStv = stvList.get(0);
        if (outStv == null) {
            if (log.isDebugEnabled()) {
                log.debug("**************** outStv is null **********************");
            }
        } else {
            if (log.isDebugEnabled()) {
                log.debug("**************** outStv is not null outStv code: {} id: {}**********************", outStv.getCode(), outStv.getId());
            }
        }

        stvList.clear();
        // 入库STV
        stvList = stvDao.findByStaWithDirection(staId, TransactionDirection.INBOUND);
        if (stvList == null || stvList.size() == 0) throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        StockTransVoucher inStv = stvList.get(0);
        if (inStv == null) {
            if (log.isDebugEnabled()) {
                log.debug("**************** inStv is null **********************");
            }
        } else {
            if (log.isDebugEnabled()) {
                log.debug("**************** inStv is not null inStv code: {} id: {}**********************", inStv.getCode(), inStv.getId());
            }
        }
        User user = null;
        if (userId != null) {
            user = userDao.getByPrimaryKey(userId);
        }
        isHaveException(sta, outStv, user, userId);
        // 出库
        // removeInventory(sta, stv);
        // log 记录
        List<Inventory> list = inventoryDao.findByOccupiedCode(sta.getCode());
        if (list == null || list.size() == 0) {
            throw new BusinessException(ErrorCode.NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
        }
        // inventoryDao.releaseInvAndUpdateOwnerByStaId(staId,sta.getAddiOwner());
        StockTransTxLog log = null;
        BiChannel fromShop = companyShopDao.getByCode(sta.getOwner());
        for (Inventory inv : list) {
            // 出库记录日志
            log = new StockTransTxLog();
            log.setDirection(TransactionDirection.OUTBOUND);
            log.setDistrictId(inv.getDistrict().getId());
            log.setInvStatusId(inv.getStatus().getId());
            log.setLocationId(inv.getLocation().getId());
            log.setQuantity(inv.getQuantity());
            log.setSkuId(inv.getSku().getId());
            log.setTransactionTime(new Date());

            log.setWarehouseOuId(inv.getOu().getId());
            log.setOwner(outStv.getOwner());
            log.setTransactionType(outStv.getTransactionType());
            log.setStvId(outStv.getId());
            log.setInboundTime(inv.getInboundTime());
            log.setBatchCode(inv.getBatchCode());
            log.setExpireDate(inv.getExpireDate());
            log.setValidDate(inv.getValidDate());
            log.setProductionDate(inv.getProductionDate());
            log.setOcpCode(inv.getOcpCode());
            log.setStaCode(sta.getCode());
            log.setSlipCode(sta.getRefSlipCode());
            log.setSlipCode1(sta.getSlipCode1());
            log.setSlipCode2(sta.getSlipCode2());
            if (null != user) {
                log.setOpUserName(user.getUserName());
            }
            /** -------------归档查询优化------------------ */
            stockTransTxLogDao.save(log);

            // 入库记录日志
            log = new StockTransTxLog();
            log.setDirection(TransactionDirection.INBOUND);
            log.setDistrictId(inv.getDistrict().getId());
            log.setInvStatusId(inv.getStatus().getId());
            log.setLocationId(inv.getLocation().getId());
            log.setQuantity(inv.getQuantity());
            log.setSkuId(inv.getSku().getId());
            log.setTransactionTime(new Date());
            log.setWarehouseOuId(inv.getOu().getId());

            log.setStvId(inStv.getId());
            log.setOwner(inStv.getOwner());
            log.setTransactionType(inStv.getTransactionType());
            log.setInboundTime(inv.getInboundTime());
            log.setBatchCode(inv.getBatchCode());
            log.setExpireDate(inv.getExpireDate());
            log.setValidDate(inv.getValidDate());
            log.setProductionDate(inv.getProductionDate());
            log.setOcpCode(inv.getOcpCode());
            log.setStaCode(sta.getCode());
            log.setSlipCode(sta.getRefSlipCode());
            log.setSlipCode1(sta.getSlipCode1());
            log.setSlipCode2(sta.getSlipCode2());
            if (null != user) {
                log.setOpUserName(user.getUserName());
            }
            /** -------------归档查询优化------------------ */
            stockTransTxLogDao.save(log);
            // inventoryDao.delete(inv);
            inv.setOccupationCode(null);
            inv.setIsOccupied(false);
            inv.setOwner(sta.getAddiOwner());
            inventoryDao.save(inv);
        }
        outStv.setStatus(StockTransVoucherStatus.FINISHED);
        outStv.setLastModifyTime(new Date());
        outStv.setOperator(user);
        outStv.setFinishTime(new Date());
        stvDao.save(outStv);
        whExe.validateBiChannelSupport(inStv, null);
        inStv.setStatus(StockTransVoucherStatus.FINISHED);
        inStv.setLastModifyTime(new Date());
        inStv.setOperator(user);
        inStv.setFinishTime(new Date());
        stvDao.save(inStv);
        /***** mongoDB库存变更添加逻辑 ******************************/
        try {
            eventObserver.onEvent(new TransactionalEvent(inStv));
        } catch (BusinessException e) {
            if (logger.isErrorEnabled()) {
                logger.error("executeVmiTransferOutBound Exception:" + staId, e);
            }
            throw e;
        }
        sta.setIsNeedOccupied(false);
        sta.setOutboundOperator(user);
        sta.setStatus(StockTransApplicationStatus.FINISHED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId, sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        sta.setFinishTime(new Date());
        sta.setInboundTime(new Date());
        sta.setInboundOperator(user);
        staDao.save(sta);
        updateWmsOtherOutBoundInvNoticeOms(sta.getId(), 10l, WmsOtherOutBoundInvNoticeOmsStatus.VMI_OWNER_TRANSFER);
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }

        List<StaLine> stalines = staLineDao.findByStaId(staId);
        if (stalines != null && !stalines.isEmpty()) {
            for (StaLine staline : stalines) {
                staline.setCompleteQuantity(staline.getQuantity());
            }
        }
        staLineDao.flush();
        try {
            // VM---转店反馈
            if (sta.getType().equals(StockTransApplicationType.VMI_OWNER_TRANSFER) && sta.getVmiRCStatus() != Boolean.TRUE) {
                VmiInterface vmi = vmiFactory.getBrandVmi(fromShop.getVmiCode());
                if (vmi != null) {
                    vmi.generateReceivingTransfer(sta);
                }
            }
        } catch (Exception e) {
            if (logger.isErrorEnabled()) {
                logger.error("executeVmiTransferOutBound Exception:" + staId, e);
            }
            throw e;
        }
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            if (logger.isErrorEnabled()) {
                logger.error("executeVmiTransferOutBound BusinessException:" + staId, e);
            }
            throw e;
        }
    }

    public List<StockTransApplication> findStaByPickingList(Long pickingListId, Long ouid) {
        List<StockTransApplication> staList = staDao.findStaByPickingList(pickingListId, ouid);
        List<StockTransApplication> scList = new ArrayList<StockTransApplication>();
        for (StockTransApplication sta : staList) {
            StockTransApplicationCommand stac = new StockTransApplicationCommand();
            try {
                org.springframework.beans.BeanUtils.copyProperties(sta, stac);
                if (sta.getStaDeliveryInfo() != null) {
                    StaDeliveryInfoCommand sdic = new StaDeliveryInfoCommand();
                    org.springframework.beans.BeanUtils.copyProperties(sta.getStaDeliveryInfo(), sdic);
                    sdic.setPackageInfos(null);
                    sdic.setSta(null);
                    stac.setStaDeliveryInfo(sdic);
                }

                scList.add(stac);
            } catch (Exception e) {
                log.error("Copy Bean properties error for StockTransApplication");
                log.error("", e);
                throw new RuntimeException("Copy Bean properties error for StockTransApplication");
            }
        }
        return scList;
    }

    public WarehouseLocation checkLocationByOuid(Sku sku, Long ouid, String code, Map<String, WarehouseLocation> locationCache) {
        WarehouseLocation location = null;
        if (locationCache.get(code) != null) {
            location = locationCache.get(code);
        } else {
            location = findLocationByCode(code, ouid);
            // if (location == null) throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new
            // Object[] {sku.getBarCode(), code});
            if (location == null) throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {code, code});

            locationCache.put(location.getCode(), location);
        }
        return location;
    }

    /**
     * 根据sku条码/编码+扩展属性,查询当前sta的StaLine
     * 
     * @param sku
     * @param staId
     * @return
     */
    public StaLine findStaLineByBarCodeOrCodeProps(Sku sku, Long staId) {
        StaLine stal =
                staLineDao.findStaLineByBarCodeOrCodePropsSql(StringUtils.hasLength(sku.getBarCode()) ? sku.getBarCode() : null, StringUtils.hasLength(sku.getJmCode()) ? sku.getJmCode() : null,
                        StringUtils.hasLength(sku.getKeyProperties()) ? sku.getKeyProperties() : null, staId, new BeanPropertyRowMapperExt<StaLine>(StaLine.class));
        if (stal == null) {
            stal = staLineDao.findStaLineByAddBarCodeSql(sku.getBarCode(), staId, new BeanPropertyRowMapperExt<StaLine>(StaLine.class));
        }
        return stal;
    }

    public String getExportDispatchListInvoiceFileName(Long pickingListId) {
        return staDeliveryInfoDao.findExportDispatchListInvoiceFileName(pickingListId, new SingleColumnRowMapper<String>(String.class));
    }

    public PickingList chgLpcodeByPicking(Long pickingListId, String lpcode) {
        // 转物流
        // 查询状态为 配货失败或配货中的作业单
        List<StockTransApplication> stas = staDao.findFailedSendStaByPlId(pickingListId);
        if (stas != null) {
            for (StockTransApplication sta : stas) {
                StaDeliveryInfo d = sta.getStaDeliveryInfo();
                d.setLpCode(lpcode);
                staDeliveryInfoDao.save(d);
            }
        }
        // 移除失败
        return removeTransFialedSalesSta(pickingListId);
    }


    public PickingListCommand removeTransFialedSalesSta(Long pickingListId) {
        PickingListCommand pl = pickingListDao.findById(pickingListId, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
        if (pl == null) {
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        } else if (PickingListStatus.PACKING.equals(pl.getStatus())) {
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        }
        List<StockTransApplication> stas = staDao.findStaByPickingList(pl.getId(), pl.getWhid());
        for (StockTransApplication sta : stas) {
            StaDeliveryInfo d = sta.getStaDeliveryInfo();
            // 不存在运单号的订单移出
            if (!StringUtils.hasText(d.getTrackingNo())) {
                int rsqty = staDao.staRemoveFromPickingList(sta.getId(), sta.getVersion());
                if (rsqty == 0) {
                    throw new BusinessException(ErrorCode.SYSTEM_ERROR);
                }
            }
        }
        staDao.flush();
        PickingList pl1 = pickingListDao.getByPrimaryKey(pickingListId);
        if (pl1.getStaList().size() == 0) {
            pl1.setStatus(PickingListStatus.CANCEL);
            pickingListLogDao.updatePickingListLog(pickingListId, "WareHouseManagerImpl.removeTransFialedSalesSta");
            return null;
        } else {
            wareHouseManagerCancel.setPickingListPlanQty(pl1);
            pl1.setStatus(PickingListStatus.WAITING);
            pl.setStatus(PickingListStatus.WAITING);
            pl.setPlanSkuQty(pl1.getPlanSkuQty());
            pl.setPlanBillCount(pl1.getPlanBillCount());
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(pl1.getCode(), WhInfoTimeRefBillType.STA_PICKING.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), null, null);
            return pl;
        }
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        return pickingListDao.findPickingListForVerifyByCmd(start, pageSize, plCmd.toVerifyMap(), sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd1(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (plCmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else if (plCmd.getSortingModeInt() == 0) {
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        Pagination<PickingListCommand> pickingListCommand =
                pickingListDao.findPickingListForVerifyByCmd1(start, pageSize, WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));

        List<PickingListCommand> list = pickingListCommand.getItems();
        for (PickingListCommand pickingList : list) {
            pickingList.setPackageCount(pickingListDao.queryPackageCount(pickingList.getCode(), new SingleColumnRowMapper<Integer>(Integer.class)));
        }
        return pickingListCommand;
    }

    @Override
    public Pagination<PickingListCommand> findPickingListForVerifyByCmdOtwoo(int start, int pageSize, PickingListCommand cmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (cmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (cmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else if (cmd.getSortingModeInt() == 0) {
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        Pagination<PickingListCommand> pickingListCommand =
                pickingListDao.findPickingListForVerifyByCmdOtwoo(start, pageSize, WhAddStatusMode.CHECK.getValue(), cmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));

        List<PickingListCommand> list = pickingListCommand.getItems();
        for (PickingListCommand pickingList : list) {
            pickingList.setPackageCount(pickingListDao.queryPackageCount(pickingList.getCode(), new SingleColumnRowMapper<Integer>(Integer.class)));
        }
        return pickingListCommand;
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd2(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            // checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (plCmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        return pickingListDao.findPickingListForVerifyByCmd2(start, pageSize, WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    /**
     * 多件核对(后置送货单)
     */
    @Override
    public PickingListCommand findPickingListForVerifyByCodeId(PickingListCommand plCmd, String iptPlCode) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            // checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (plCmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        return pickingListDao.findPickingListForVerifyByCodeId(WhAddStatusMode.CHECK.getValue(), iptPlCode, plCmd.toVerifyMap(), checkList, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd3(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 3) {
            checkList.add(PickingListCheckMode.PCIKING_O2OQS.getValue());
        } else if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (plCmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        return pickingListDao.findPickingListForVerifyByCmd3(start, pageSize, WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    /**
     * 配货清单Json,大件、奢侈品仓订单
     * 
     * @param start
     * @param pageSize
     * @param plCmd
     * @param sorts
     * @return
     */
    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByBig(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        checkList.add(PickingListCheckMode.PCIKING_O2OQS.getValue());
        checkList.add(PickingListCheckMode.DEFAULE.getValue());
        checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
        checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());

        if (null != plCmd.getWarehouse()) {
            Warehouse wh = warehouseDao.getByOuId(plCmd.getWarehouse().getId());
            if (null != wh) {
                if (null == wh.getIsBigLuxuryWeigh() || !wh.getIsBigLuxuryWeigh()) {
                    checkList.clear();
                }
            }
        }

        return pickingListDao.findPickingListForVerifyByCmd3(start, pageSize, WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd4(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 3) {
            checkList.add(PickingListCheckMode.PCIKING_O2OQS.getValue());
        } else if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (plCmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        return pickingListDao.findPickingListForVerifyByCmd4(start, pageSize, WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findSkuPackingPickingList(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts) {
        List<Integer> checkList = new ArrayList<Integer>();
        checkList.add(plCmd.getCheckMode().getValue());
        return pickingListDao.findPickingListForVerifyByCmd1(start, pageSize, WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd1B(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts, List<Long> wids) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        }
        return pickingListDao.findPickingListForVerifyByCmd1B(start, pageSize, plCmd.toVerifyMap(), checkList, wids, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListForVerifyByCmd1opc(int start, int pageSize, PickingListCommand plCmd, Sort[] sorts, List<Long> wids) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        }
        return pickingListDao.findPickingListForVerifyByCmd1opc(start, pageSize, plCmd.toVerifyMap(), checkList, sorts, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class), wids);
    }

    @Transactional(readOnly = true)
    public Pagination<AllocateCargoOrderCommand> findPickingListForModel(int start, int pageSize, AllocateCargoOrderCommand allocateCargoCmd, Sort[] sorts, List<Long> plList, String ouname) {
        if (plList != null) {
            if (plList.size() == 0) plList = null;
        }
        Long ouid = (Long) allocateCargoCmd.toMapSqlParamer().get("ouId");
        if (ouname.equals(OperationUnitType.OUTYPE_OPERATION_CENTER)) {
            ouid = null;
        }
        return pickingListDao.findPickingListForModel(start, pageSize, allocateCargoCmd.toMapSqlParamer(), sorts, ouid, plList, new BeanPropertyRowMapperExt<AllocateCargoOrderCommand>(AllocateCargoOrderCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<ExpressOrderCommand> findExpressOrderSta(int start, int pageSize, ExpressOrderCommand expressOrderCmd, Sort[] sorts, List<Long> plList, String ouname) {
        if (plList != null) {
            if (plList.size() == 0) plList = null;
        }
        Long ouid = (Long) expressOrderCmd.toMapSqlParamer().get("mainWarehouse");
        if (ouname.equals(OperationUnitType.OUTYPE_OPERATION_CENTER)) {
            ouid = null;
        }
        return staDao.findExpressOrderSta(start, pageSize, expressOrderCmd.toMapSqlParamer(), sorts, ouid, plList, new BeanPropertyRowMapperExt<ExpressOrderCommand>(ExpressOrderCommand.class));
    }

    @Transactional(readOnly = true)
    public PickingListCommand findPackingByBatchCode(Long id) {
        return pickingListDao.findPackingByBatchCode(id, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }



    public String checkPickingSkuByStaId(String st, Long id, Long ouId, Long userId) {
        String str = "";
        Integer count = staLineDao.checkPickingSkuByStaId(id, new SingleColumnRowMapper<Integer>(Integer.class));
        String[] s = st.split(";");
        if (null != s & s.length > 0 & null != count && count == s.length) {
            // 核对
            StockTransApplication sto = staDao.getByPrimaryKey(id);
            if (null != sto && (StockTransApplicationStatus.CANCEL_UNDO.equals(sto.getStatus()) || StockTransApplicationStatus.CANCELED.equals(sto.getStatus()))) {
                str = "cancel;" + sto.getStatus().getValue(); // 取消
            } else {
                List<PackageInfo> packageInfos = new ArrayList<PackageInfo>();
                PackageInfo packageInfo = new PackageInfo();
                packageInfo.setTrackingNo(sto.getStaDeliveryInfo().getTrackingNo());
                packageInfos.add(packageInfo);
                List<String> snlist = new ArrayList<String>();
                List<GiftLine> glList = new ArrayList<GiftLine>();
                staSortingCheck(snlist, glList, packageInfos, id, ouId, null, userId);
                packageInfo = packageInfoDao.findByTrackingNo(sto.getStaDeliveryInfo().getTrackingNo());
                str = "sucess;" + packageInfo.getId();
            }
        } else {
            str = "Picking"; // 继续核对
        }
        return str;
    }

    @Transactional(readOnly = true)
    public List<PackageInfo> findPackageInfoListByStaId(Long staId) {
        return packageInfoDao.findByStaIdSql(staId, new BeanPropertyRowMapperExt<PackageInfo>(PackageInfo.class));
    }



    public List<StockTransApplicationCommand> findStaCheckedListByPickingList(PickingMode pickingMode, Long plId, Long ouId, Sort[] sorts) {
        // status数组中存储的是sta的状态： 3，4，10，15，17分别代表sta状态为： 已核对，已转出，已完成，取消未处理，取消已处理
        Integer[] status =
                {StockTransApplicationStatus.CHECKED.getValue(), StockTransApplicationStatus.INTRANSIT.getValue(), StockTransApplicationStatus.FINISHED.getValue(), StockTransApplicationStatus.CANCEL_UNDO.getValue(),
                        StockTransApplicationStatus.CANCELED.getValue(),};
        return staDao.findStaListForVerifyByPickingList(null, plId, status, pickingMode.getValue(), null, ouId, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public List<StockTransApplicationCommand> findStaOccupiedListByPickingList(PickingMode pickingMode, Long plId, Long ouId, Sort[] sorts) {
        // status数组中存储的是sta的状态： 2 代表sta状态为:库存占用（配货中）
        Integer[] status = {StockTransApplicationStatus.OCCUPIED.getValue()};
        return staDao.findStaListForVerifyByPickingList(null, plId, status, pickingMode.getValue(), null, ouId, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public StockTransApplicationCommand findStaForVerifyByRefSlipCode(String plcode, PickingMode pickingMode, String refSlipCode, Long ouId, List<Long> wids, Integer whStatus) {
        // status数组中存储的是sta的状态： 2 代表sta状态为:库存占用（配货中），取消未处理
        Integer[] status = {Integer.valueOf(StockTransApplicationStatus.OCCUPIED.getValue()), Integer.valueOf(StockTransApplicationStatus.CANCEL_UNDO.getValue())};
        if (wids != null) {
            if (wids.size() == 0) wids = null;
        }
        List<StockTransApplicationCommand> staList =
                staDao.findStaListForVerifyByPickingListopc(plcode, null, status, pickingMode == null ? null : pickingMode.getValue(), refSlipCode, ouId, wids, null, whStatus, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class));
        if (staList != null && !staList.isEmpty()) {
            if (staList.size() > 1) {
                StockTransApplicationCommand cmd = staList.get(0);
                cmd.setHasCancelUndoSta(true);
                return cmd;
            } else {
                return staList.get(0);
            }
        }
        return null;
    }

    public StockTransApplicationCommand findStaForVerifyByBigRefSlipCode(String plcode, PickingMode pickingMode, String refSlipCode, Long ouId, List<Long> wids, Integer whStatus) {
        // status数组中存储的是sta的状态： 2 代表sta状态为:库存占用（配货中），取消未处理
        Integer[] status = {Integer.valueOf(StockTransApplicationStatus.OCCUPIED.getValue()), Integer.valueOf(StockTransApplicationStatus.CANCEL_UNDO.getValue())};
        if (wids != null) {
            if (wids.size() == 0) wids = null;
        }
        List<StockTransApplicationCommand> staList =
                staDao.findStaListForVerifyByBigPickingList(plcode, null, status, pickingMode == null ? null : pickingMode.getValue(), refSlipCode, ouId, wids, null, whStatus, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class));
        if (staList != null && !staList.isEmpty()) {
            if (staList.size() > 1) {
                StockTransApplicationCommand cmd = staList.get(0);
                cmd.setHasCancelUndoSta(true);
                return cmd;
            } else {
                return staList.get(0);
            }
        }
        return null;
    }

    public PickingListCommand findPLForVerifyByPLCode(PickingListCommand plCmd) {
        List<Integer> checkList = new ArrayList<Integer>();
        if (plCmd.getSortingModeInt() == 3) {
            checkList.add(PickingListCheckMode.PCIKING_O2OQS.getValue());
        } else if (plCmd.getSortingModeInt() == 2) {
            checkList.add(PickingListCheckMode.DEFAULE.getValue());
            checkList.add(PickingListCheckMode.PICKING_GROUP.getValue());
            checkList.add(PickingListCheckMode.PICKING_PACKAGE.getValue());
        } else if (plCmd.getSortingModeInt() == 1) {
            checkList.add(PickingListCheckMode.PICKING_CHECK.getValue());
        } else {
            checkList.add(PickingListCheckMode.PICKING_SPECIAL.getValue());
        }
        return pickingListDao.findPLForVerifyByPickingListCode(plCmd.getCode(), WhAddStatusMode.CHECK.getValue(), plCmd.toVerifyMap(), checkList, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    public void vimIdsCreateCancelOrder(String staCode) {
        MsgOutboundOrderCancel mc = msgOutboundOrderCancelDao.getByStaCode(staCode);
        // 存在取消的则不再记录
        if (mc == null) {
            mc = new MsgOutboundOrderCancel();
            Long id = warehouseMsgSkuDao.getThreePlSeq(new SingleColumnRowMapper<Long>(Long.class));
            mc.setUuid(id);
            mc.setStaCode(staCode);
            mc.setCreateTime(new Date());
            mc.setStatus(MsgOutboundOrderCancelStatus.CREATED);
            mc.setSource(Constants.VIM_WH_SOURCE_IDS);
            msgOutboundOrderCancelDao.save(mc);
        }
    }

    public List<StvLineCommand> findStvLineByStaIds(List<Long> staIds, Sort[] sorts) {
        return stvLineDao.findByStaId(staIds, sorts, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
    }

    public List<StvLineCommand> findStvLineByDirection(Long staId, Integer direction, Sort[] sorts) {
        return stvLineDao.findByDirection(staId, direction, sorts, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
    }

    public Pagination<StvLineCommand> findStvLineByDirectionByPage(int start, int pageSize, Long staId, Integer direction, Sort[] sorts) {
        return stvLineDao.findByDirectionByPage(start, pageSize, staId, direction, sorts, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
    }

    public void checkSta(Long staId, String trackingNo, String lineNo, Long userId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        List<PackageInfo> pglist = new ArrayList<PackageInfo>();
        PackageInfo pg = new PackageInfo();
        pg.setTrackingNo(trackingNo);
        pglist.add(pg);
        List<StaLine> stals = staLineDao.findByStaId(staId);
        for (StaLine stal : stals) {
            stal.setCompleteQuantity(stal.getQuantity());
        }
        checkDistributionList(sta.getPickingList().getPickingMode(), pglist, staId, stals, lineNo, userId);
    }

    /**
     * 单件核对 fanht
     * 
     * @param staId
     * @param trackingNo
     * @param lineNo
     * @param sn
     */
    public void checkSingleSta(Long staId, String trackingNo, String lineNo, String sn, Long userId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        // 星巴克 解绑无效卡
        skuSnDao.unbindInvalidCard(stv.getId());
        if (sn != null && !"".equals(sn)) {
            // 更新sn号状态
            SkuSn skusn = snDao.findSkuSnBySn(sn, sta.getMainWarehouse().getId(), SkuSnStatus.USING);
            if (skusn == null) {
                throw new BusinessException(ErrorCode.SKU_SN_NOT_FOUND, new Object[] {sta.getCode()});
            }
            skusn.setStv(stv);
            skusn.setStatus(SkuSnStatus.CHECKING);
            snDao.save(skusn);
        }

        // 核对逻辑
        List<PackageInfo> pglist = new ArrayList<PackageInfo>();
        PackageInfo pg = new PackageInfo();
        pg.setTrackingNo(trackingNo);
        pglist.add(pg);
        List<StaLine> stals = staLineDao.findByStaId(staId);
        for (StaLine stal : stals) {
            stal.setCompleteQuantity(stal.getQuantity());
        }
        checkDistributionList(sta.getPickingList().getPickingMode(), pglist, staId, stals, lineNo, userId);

    }

    @Override
    public Map<String, Object> checkSingleStaOtwoo(String slipCodes, Long whOuId, Long userId) {
        String stas[] = slipCodes.split(",");
        User user = userDao.getByPrimaryKey(userId);
        TransOrder order = new TransOrder();
        String stasn1[] = stas[0].split(":");
        StockTransApplication sta1 = staDao.getByCode(stasn1[0]);
        BiChannel shop = companyShopDao.getByCode(sta1.getOwner());// 店铺code
        if (shop == null) {
            shop = new BiChannel();
        }
        Warehouse wh = warehouseDao.getByOuId(sta1.getMainWarehouse().getId());
        order.setSenderAddress(wh.getAddress());
        order.setSenderCity(wh.getCity());
        order.setSenderProvince(wh.getProvince());
        order.setSenderTel(shop.getTelephone());
        order.setCostCenterDetail(sta1.getOwner());
        order.setOpUnit(sta1.getMainWarehouse());
        order.setTransportatorCode(sta1.getStaDeliveryInfo().getLpCode());
        order.setTimeType(sta1.getStaDeliveryInfo().getTransTimeType().getValue());
        order.setReceiver(sta1.getStaDeliveryInfo().getReceiver());
        order.setReceiverTel(sta1.getStaDeliveryInfo().getMobile());
        order.setReceiverCountry(sta1.getStaDeliveryInfo().getCountry());
        order.setReceiverProvince(sta1.getStaDeliveryInfo().getProvince());
        order.setReceiverCity(sta1.getStaDeliveryInfo().getCity());
        order.setReceiverArea(sta1.getStaDeliveryInfo().getDistrict());
        order.setReceiverAddress(sta1.getStaDeliveryInfo().getAddress());
        order.setPackageNum(1);
        order.setCreateTime(new Date());
        order.setCreateUser(user);
        order.setLastModifyTime(new Date());
        order.setInsuranceAmount(sta1.getStaDeliveryInfo().getInsuranceAmount());
        order.setStatus(5);
        Map<String, Object> map = saveTransOrder(order, slipCodes, whOuId);
        TransPackage package1 = (TransPackage) map.get("TransPackage");
        package1.setStatus(1);
        offLineTransPackageDao.save(package1);
        offLineTransPackageDao.flush();
        String trackingNo = map.get("trackingNo").toString();
        PackageInfo packageInfo = new PackageInfo();
        packageInfo.setCreateTime(new Date());
        packageInfo.setLpCode(order.getTransportatorCode());
        packageInfo.setLastModifyTime(new Date());
        packageInfo.setOpUnit(sta1.getMainWarehouse());
        packageInfo.setTrackingNo(trackingNo);
        packageInfo.setIsHandover(true);
        packageInfo.setPackAge((TransPackage) map.get("TransPackage"));
        packageInfoDao.save(packageInfo);
        packageInfoDao.flush();
        Map<String, Object> map2 = new HashMap<String, Object>();
        map2.put("orderId", packageInfo.getPackAge().getId());
        map2.put("trackingNo", trackingNo);
        String staId = "";
        for (int i = 0; i < stas.length; i++) {
            String stasn[] = stas[i].split(":");
            StockTransApplication sta = staDao.getByCode(stasn[0]);
            map2.put("quickPl", sta.getPickingList().getCode());
            if (stasn.length > 1) {
                if (stasn[1] != null && !"".equals(stasn[1])) {
                    // 更新sn号状态
                    StockTransVoucher stv = stvDao.findStvCreatedByStaId(sta.getId());
                    SkuSn skusn = snDao.findSkuSnBySn(stasn[1], sta.getMainWarehouse().getId(), SkuSnStatus.USING);
                    if (skusn == null) {
                        throw new BusinessException(ErrorCode.SKU_SN_NOT_FOUND, new Object[] {sta.getCode()});
                    }
                    skusn.setStv(stv);
                    skusn.setStatus(SkuSnStatus.CHECKING);
                    snDao.save(skusn);
                }
            }
            PackageInfo pg = new PackageInfo();
            pg.setTrackingNo(trackingNo);
            List<StaLine> stals = staLineDao.findByStaId(sta.getId());
            for (StaLine stal : stals) {
                stal.setCompleteQuantity(stal.getQuantity());
            }
            sta.getStaDeliveryInfo().setTrackingNo(trackingNo);
            sta.setTransOrder(order);
            staDao.save(sta);
            checkDistributionListOtwoo(sta.getPickingList().getPickingMode(), pg, sta.getId(), stals, null, userId);
        }
        map2.put("staIds", staId);
        return map2;
    }

    public void checkDistributionListOtwoo(PickingMode mode, PackageInfo p, Long staId, List<StaLine> staLineList, String lineNocode, Long userId) {
        if (log.isDebugEnabled()) {
            log.debug("=======begin  checkDistributionList==============");
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // sta状态检查
        if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
            if (StockTransApplicationStatus.CANCELED.equals(sta.getStatus()) || StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus())) {
                throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {sta.getCode()});
            }
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        String lpCode = sta.getStaDeliveryInfo().getLpCode();
        if (log.isDebugEnabled()) {
            log.debug("=======find lpcode {}==============", lpCode);
        }
        // if (packageInfoDao.findByTrackingNo(p.getTrackingNo()) != null) {
        // throw new BusinessException(ErrorCode.PACKAGE_INFO_IS_EXIST, new Object[] {sta.getCode(),
        // p.getTrackingNo()});
        // }
        if (log.isDebugEnabled()) {
            log.debug("=======find PackageInfo {}==============", p.getId());
        }
        p.setLpCode(lpCode);
        p.setStaDeliveryInfo(sta.getStaDeliveryInfo());
        p.setOpUnit(sta.getMainWarehouse());
        p.setLastModifyTime(new Date());
        p.setIsHandover(false);
        packageInfoDao.save(p);
        if (log.isDebugEnabled()) {
            log.debug("=========PackageInfo end=================");
        }
        // staLine 数量更新
        int num = 0;
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update=================");
        }
        if (staLineList != null) {
            for (int i = 0; i < staLineList.size(); i++) {
                StaLine s = staLineList.get(i);
                if (PickingMode.MODE2.equals(mode)) {
                    s.setCompleteQuantity(s.getQuantity());
                } else {
                    StaLine s1 = staLineDao.getByPrimaryKey(s.getId());
                    s1.setCompleteQuantity(s.getCompleteQuantity());
                    staLineDao.save(s1);
                }
                num = num + s.getCompleteQuantity().intValue();
            }
        } else {
            // 秒杀订单更新核对量=计划量
            List<StaLine> staLine = staLineDao.findByStaId(staId);
            for (StaLine sl : staLine) {
                num += sl.getQuantity();
            }
            staLineDao.updateCQEqualQByStaId(staId);
        }
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update end =================");
        }
        // PickingList 数量更新 sta数量 +1 sku 数量++
        pickingListDao.addCheckedCount(sta.getPickingList().getId(), num);
        if (log.isDebugEnabled()) {
            log.debug("=========addCheckedCount end =================");
        }
        // sta 状态
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setCheckTime(new Date());
        sta.setCheckUserId(userId);
        sta.setLastModifyTime(new Date());
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        if (wh.getIsMqInvoice() != null && wh.getIsMqInvoice() && sta.getPickingList().getIsMqInvoice() != null && sta.getPickingList().getIsMqInvoice()) {
            if (lineNocode == null) {
                if (mode == null) {
                    // mode辅助判断是否为秒杀
                } else {
                    throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
                }
            } else {
                WorkLineNo lineNo = workLineNoDao.getWorkLineNoByCode(sta.getMainWarehouse().getId(), lineNocode);
                if (lineNo == null) {
                    throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
                } else {
                    // TODO 流水开票
                }
            }
        }
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
    }

    public void checkDistributionList(PickingMode mode, List<PackageInfo> packageInfos, Long staId, List<StaLine> staLineList, String lineNocode, Long userId) {
        if (log.isDebugEnabled()) {
            log.debug("=======begin  checkDistributionList==============");
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // sta状态检查
        if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
            if (StockTransApplicationStatus.CANCELED.equals(sta.getStatus()) || StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus())) {
                throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {sta.getCode()});
            }
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        String lpCode = sta.getStaDeliveryInfo().getLpCode();
        if (log.isDebugEnabled()) {
            log.debug("=======find lpcode {}==============", lpCode);
        }
        for (int i = 0; i < packageInfos.size(); i++) {
            PackageInfo p = packageInfos.get(i);
            if (packageInfoDao.findByTrackingNo(p.getTrackingNo()) != null) {
                throw new BusinessException(ErrorCode.PACKAGE_INFO_IS_EXIST, new Object[] {sta.getCode(), p.getTrackingNo()});
            }
            if (log.isDebugEnabled()) {
                log.debug("=======find PackageInfo {}==============", p.getId());
            }
            String trackingNo = p.getTrackingNo();
            if (i == 0) {
                sta.getStaDeliveryInfo().setTrackingNo(trackingNo);
                // 是否分包 fanht
                if (packageInfos.size() > 1) {
                    sta.getStaDeliveryInfo().setIsMorePackage(true);
                } else {
                    sta.getStaDeliveryInfo().setIsMorePackage(false);
                }
            }
            p.setLpCode(lpCode);
            p.setStaDeliveryInfo(sta.getStaDeliveryInfo());
            p.setLastModifyTime(new Date());
            packageInfoDao.save(p);
            if (log.isDebugEnabled()) {
                log.debug("=========PackageInfo end=================");
            }
        }
        // staLine 数量更新
        int num = 0;
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update=================");
        }
        if (staLineList != null) {
            for (int i = 0; i < staLineList.size(); i++) {
                StaLine s = staLineList.get(i);
                if (PickingMode.MODE2.equals(mode)) {
                    s.setCompleteQuantity(s.getQuantity());
                } else {
                    StaLine s1 = staLineDao.getByPrimaryKey(s.getId());
                    s1.setCompleteQuantity(s.getCompleteQuantity());
                    staLineDao.save(s1);
                }
                num = num + s.getCompleteQuantity().intValue();
            }
        } else {
            // 秒杀订单更新核对量=计划量
            List<StaLine> staLine = staLineDao.findByStaId(staId);
            for (StaLine sl : staLine) {
                num += sl.getQuantity();
            }
            staLineDao.updateCQEqualQByStaId(staId);
        }
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update end =================");
        }
        // PickingList 数量更新 sta数量 +1 sku 数量++
        pickingListDao.addCheckedCount(sta.getPickingList().getId(), num);
        if (log.isDebugEnabled()) {
            log.debug("=========addCheckedCount end =================");
        }
        // sta 状态
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setCheckTime(new Date());
        sta.setCheckUserId(userId);
        sta.setLastModifyTime(new Date());
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        if (wh.getIsMqInvoice() != null && wh.getIsMqInvoice() && sta.getPickingList().getIsMqInvoice() != null && sta.getPickingList().getIsMqInvoice()) {
            if (lineNocode == null) {
                if (mode == null) {
                    // mode辅助判断是否为秒杀
                } else {
                    throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
                }
            } else {
                WorkLineNo lineNo = workLineNoDao.getWorkLineNoByCode(sta.getMainWarehouse().getId(), lineNocode);
                if (lineNo == null) {
                    throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
                } else {
                    // TODO 流水开票
                }
            }
        }
        /****************************** 补充单件核对小批次周转箱逻辑 *************************************************************/
        // if (sta.getPickingList().getCheckMode().equals(PickingListCheckMode.PICKING_CHECK)) {
        WhPickingBatch pb = sta.getWhPickingBatch();
        if (pb != null) {
            staDao.flush();
            // 查询当前小批次的订单是否都已核对完成,如果都核对完成，需要释放小批次绑定的周转箱
            // Integer count = staDao.getUnCheckStaByWhPB(pb.getId(), new
            // SingleColumnRowMapper<Integer>(Integer.class));
            // if (count == 0) {
            WhContainer wc = whContainerDao.getWcByPb(pb.getId());
            if (wc != null) {
                autoOutboundTurnboxManager.resetTurnoverBoxStatus(wc.getId(), userId);
            }
            // }
        } else {
            try {
                autoOutboundTurnboxManager.resetTurnoverBoxStatusByPickingList(sta.getPickingList().getId(), userId);
            } catch (Exception e) {}
        }
        // }
        /****************************** 补充单件核对小批次周转箱逻辑 *************************************************************/
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
    }

    /***
     * 包材信息 key： skuid+companyid- 商品id和公司id value： Inventory- 记录包材的sku和成本信息
     * 
     * @param skuid
     * @param companyid
     * @return
     */
    public Inventory getAddlineSkuCache(String barcode, Long companyid, Long customerId) {
        Sku sku = skuDao.getSkuByBarcode(barcode);
        if (sku != null) {
            if (sku.getSpType() == null || sku.getSpType().getValue() != 1) {
                return null;
            }
            Inventory inv = new Inventory();
            inv.setSku(sku);
            return inv;
        }
        return null;
    }

    /**
     * 初始化未交接单，check
     * 
     * @param userId
     * @param ouid
     * @return
     */
    @Override
    public Object initOutBoundPackCheck(Long userId, Long ouid) {
        List<OutBoundPack> list = outBoundPackDao.initOutBoundPackCheck(userId, ouid, new BeanPropertyRowMapperExt<OutBoundPack>(OutBoundPack.class));
        if (list.size() > 0) {
            Warehouse warehouse = warehouseDao.getByOuId(list.get(0).getOuId());
            if (warehouse == null) {
                OperationCenter oc = operationCenterDao.getByOuId(list.get(0).getOuId());
                OperationCenterCommand occ = null;
                if (oc != null) {
                    occ = new OperationCenterCommand();
                    try {
                        // org.springframework.beans.BeanUtils.copyProperties(oc, occ);
                        if (oc.getOu() != null) {
                            OperationUnitCommand ouc = new OperationUnitCommand();
                            org.springframework.beans.BeanUtils.copyProperties(oc.getOu(), ouc);
                            ouc.setChildrenUnits(null);
                            occ.setOu(ouc);
                        }
                    } catch (Exception e) {
                        log.error("Copy Bean properties error for OperationCenter");
                        log.error("", e);
                        throw new RuntimeException("Copy Bean properties error for OperationCenter");
                    }
                }
                return occ;
            } else {
                WarehouseCommand wc = new WarehouseCommand();
                try {
                    // org.springframework.beans.BeanUtils.copyProperties(warehouse, wc);
                    if (warehouse.getOu() != null) {
                        OperationUnitCommand ouc = new OperationUnitCommand();
                        org.springframework.beans.BeanUtils.copyProperties(warehouse.getOu(), ouc);
                        ouc.setChildrenUnits(null);
                        wc.setCustomer(null);
                        wc.setOu(ouc);
                    }
                } catch (Exception e) {
                    log.error("Copy Bean properties error for Warehouse");
                    log.error("", e);
                    throw new RuntimeException("Copy Bean properties error for Warehouse");
                }
                return wc;
            }
        } else {
            return null;
        }
    }

    /**
     * 出库&交接，初始化未交接单 fanht
     * 
     * @param userId
     * @param ouid
     * @return
     */
    @Override
    public List<OutBoundPack> initOutBoundPack(Long userId, Long ouid, String lpCode) {
        return outBoundPackDao.initOutBoundPack(userId, ouid, lpCode, new BeanPropertyRowMapperExt<OutBoundPack>(OutBoundPack.class));
    }

    /**
     * 出库&交接 sta转出，扣减库存，插入中间表，返回物流主键 fanht
     * 
     * @return
     * @throws JSONException
     */
    @Override
    public Map<String, Object> salesStaOutBoundHand(Long staId, Long userId, Boolean isOtwoO, Long ouid, String trackingNo, BigDecimal weight, List<StaAdditionalLine> saddlines, Boolean allOutBound, String isSkipWeight) {
        if ("1".equals(isSkipWeight)) {// 跳过称重出库
            Map<String, Object> map = new HashMap<String, Object>();
            // 查询总重量
            PackageInfo pp = packageInfoDao.findByStaIdWeight(staId, new BeanPropertyRowMapper<PackageInfo>(PackageInfo.class));
            weight = pp.getWeight();
            if (weight == null) {
                throw new BusinessException(ErrorCode.WEIGHT_IS_ZERO);
            }
            // 称重为0
            int w = weight.compareTo(BigDecimal.ZERO);
            if (0 == w) {
                throw new BusinessException(ErrorCode.WEIGHT_IS_ZERO);
            }
            boolean bool = salesStaOutBound(staId, userId, ouid, trackingNo, weight, saddlines, allOutBound, isSkipWeight);
            map.put("bool", bool);
            PackageInfo pg = packageInfoDao.findByTrackingNo(trackingNo);
            // 查询供应商平台编码
            List<TransportatorCommand> list = chooseOptionDao.findTransportator(pg.getLpCode(), new BeanPropertyRowMapper<TransportatorCommand>(TransportatorCommand.class));
            // 插入中间表
            StockTransApplication sto = staDao.getByPrimaryKey(staId);
            if (null != sto && null != sto.getIsPreSale() && "1".equals(sto.getIsPreSale())) {
                outBoundPackDao.insertOutBoundPack(list.get(0).getPlatformCode(), trackingNo, ouid, userId, pg.getId(), true);
            } else {
                outBoundPackDao.insertOutBoundPack(list.get(0).getPlatformCode(), trackingNo, ouid, userId, pg.getId(), false);

            }
            // 设置出库时间
            pg.setLastModifyTime(new Date());
            pg.setIsHandover(true);
            // 设置仓库ou_id
            OperationUnit opUnit = new OperationUnit();
            opUnit.setId(ouid);
            pg.setOpUnit(opUnit);
            // 插入耗材
            List<StaAdditionalLineCommand> add = staAdditionalLineDao.getOneAddLineByTrackingNo(pg.getStaDeliveryInfo().getId(), pg.getTrackingNo(), new BeanPropertyRowMapper<StaAdditionalLineCommand>(StaAdditionalLineCommand.class));
            if (add.size() > 0) {
                Sku s = new Sku();
                s.setId(add.get(0).getSkuId());
                pg.setSku(s);
            }
            PackageInfo info1 = new PackageInfo();
            packageInfoDao.save(pg);
            info1.setId(pg.getId());
            if (checkPreSale(info1.getId())) {
                map.put("pgId", null);

            } else {
                map.put("pgId", info1.getId());
            }
            return map;

        } else if (isOtwoO != null && isOtwoO) {
            Map<String, Object> map = new HashMap<String, Object>();
            // 称重为0
            int w = weight.compareTo(BigDecimal.ZERO);
            if (0 == w) {
                throw new BusinessException(ErrorCode.WEIGHT_IS_ZERO);
            }
            // TransOrder transOrderId = offLineTransOrderDao.getByPrimaryKey(staId);
            List<StockTransApplication> stas = staDao.findByTransOrder(staId);
            if (stas != null && stas.size() > 0) {
                for (StockTransApplication sta : stas) {
                    boolean bool = salesStaOutBound(sta.getId(), userId, ouid, trackingNo, weight, saddlines, false, null);
                    map.put("bool", bool);
                }
            } else {
                throw new BusinessException(ErrorCode.NOT_FIND_STA);
            }
            PackageInfo pg = packageInfoDao.findByTrackingNos(trackingNo);
            if (saddlines != null && saddlines.size() > 0) {
                // boolean isNeedStuff = true;

                Warehouse ware = warehouseDao.getByOuId(ouid);
                if (ware == null) {
                    throw new BusinessException(ErrorCode.WAREHOUSE_OU_NOT_FOUND);
                }
                Long customerId = null;
                if (ware != null && ware.getCustomer() != null) {
                    customerId = ware.getCustomer().getId();
                }
                String ouType = operationUnitDao.getByPrimaryKey(ouid).getOuType().getName();
                OperationUnit companyOu = null;
                if (ouType.equals("OperationCenter")) {
                    companyOu = operationUnitDao.getByPrimaryKey(ouid).getParentUnit();
                } else {
                    companyOu = operationUnitDao.getByPrimaryKey(ouid).getParentUnit().getParentUnit();
                }
                String barcode = saddlines.get(0).getSku().getBarCode();
                Inventory inv = getAddlineSkuCache(barcode, companyOu.getId(), customerId);
                if (inv == null) {
                    throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF_NOT_FOUND, new Object[] {barcode});
                }
                pg.setSku(inv.getSku());
            }
            pg.setIsChecked(true);
            pg.setWeight(weight);
            pg.setTransferCose(null);
            pg.setStatus(PackageInfoStatus.OUTBOUND);
            pg.setLastModifyTime(new Date());
            // 设置仓库ou_id
            OperationUnit opUnit = new OperationUnit();
            opUnit.setId(ouid);
            pg.setOpUnit(opUnit);
            packageInfoDao.save(pg);
            packageInfoDao.flush();
            // 查询供应商平台编码
            List<TransportatorCommand> list = chooseOptionDao.findTransportator(pg.getLpCode(), new BeanPropertyRowMapper<TransportatorCommand>(TransportatorCommand.class));
            // 插入中间表
            StockTransApplication sto = staDao.getByPrimaryKey(staId);
            if (null != sto && null != sto.getIsPreSale() && "1".equals(sto.getIsPreSale())) {
                outBoundPackDao.insertOutBoundPack(list.get(0).getPlatformCode(), trackingNo, ouid, userId, pg.getId(), true);
            } else {
                outBoundPackDao.insertOutBoundPack(list.get(0).getPlatformCode(), trackingNo, ouid, userId, pg.getId(), false);
            }
            PackageInfo info1 = new PackageInfo();
            info1.setId(pg.getId());
            if (checkPreSale(info1.getId())) {
                map.put("pgId", null);

            } else {
                map.put("pgId", info1.getId());
            }
            return map;
        } else {
            Map<String, Object> map = new HashMap<String, Object>();
            // 称重为0
            int w = weight.compareTo(BigDecimal.ZERO);
            if (0 == w) {
                throw new BusinessException(ErrorCode.WEIGHT_IS_ZERO);
            }
            boolean bool = salesStaOutBound(staId, userId, ouid, trackingNo, weight, saddlines, allOutBound, null);
            map.put("bool", bool);
            PackageInfo pg = packageInfoDao.findByTrackingNo(trackingNo);
            // 查询供应商平台编码
            List<TransportatorCommand> list = chooseOptionDao.findTransportator(pg.getLpCode(), new BeanPropertyRowMapper<TransportatorCommand>(TransportatorCommand.class));
            // 插入中间表
            StockTransApplication sto = staDao.getByPrimaryKey(staId);
            if (null != sto && null != sto.getIsPreSale() && "1".equals(sto.getIsPreSale())) {
                outBoundPackDao.insertOutBoundPack(list.get(0).getPlatformCode(), trackingNo, ouid, userId, pg.getId(), true);
            } else {
                outBoundPackDao.insertOutBoundPack(list.get(0).getPlatformCode(), trackingNo, ouid, userId, pg.getId(), false);

            }
            // 设置出库时间
            pg.setLastModifyTime(new Date());
            pg.setIsHandover(true);
            // 设置仓库ou_id
            OperationUnit opUnit = new OperationUnit();
            opUnit.setId(ouid);
            pg.setOpUnit(opUnit);
            // 插入耗材
            List<StaAdditionalLineCommand> add = staAdditionalLineDao.getOneAddLineByTrackingNo(pg.getStaDeliveryInfo().getId(), pg.getTrackingNo(), new BeanPropertyRowMapper<StaAdditionalLineCommand>(StaAdditionalLineCommand.class));
            if (add.size() > 0) {
                Sku s = new Sku();
                s.setId(add.get(0).getSkuId());
                pg.setSku(s);
            }
            PackageInfo info1 = new PackageInfo();
            packageInfoDao.save(pg);
            info1.setId(pg.getId());
            if (checkPreSale(info1.getId())) {
                map.put("pgId", null);

            } else {
                map.put("pgId", info1.getId());
            }
            return map;
        }
    }

    /**
     * 校验是否是预售订单
     */
    public boolean checkPreSale(Long id) {
        Integer num = packageInfoDao.checkPreSale(id, new SingleColumnRowMapper<Integer>(Integer.class));
        if (num > 0) {
            return true;

        }
        return false;
    }

    public boolean salesStaOutBound(Long staId, Long userId, Long ouid, String trackingNo, BigDecimal weight, List<StaAdditionalLine> saddlines, Boolean allOutBound, String isSkipWeight) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        BigDecimal weight2=BigDecimal.ZERO;
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND, new Object[] {staId});
        }
        if (!StockTransApplicationStatus.CHECKED.equals(sta.getStatus())) {
            throw new BusinessException(ErrorCode.STA_OUTBOUND_ERROR, new Object[] {sta.getCode(), sta.getStatus()});
        }
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (stv == null) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        Warehouse w = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        if (w == null) {
            throw new BusinessException(ErrorCode.WAREHOUSE_OU_NOT_FOUND);
        }
        if (w.getIsNeedWrapStuff() != null && w.getIsNeedWrapStuff() && (saddlines == null || saddlines.isEmpty())) {
            throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF);
        }
        Long customerId = null;
        if (w != null && w.getCustomer() != null) {
            customerId = w.getCustomer().getId();
        }
        User user = null;
        if (userId != null) {
            user = userDao.getByPrimaryKey(userId);
        }
        boolean isNeedStuff = false;
        if (saddlines != null && saddlines.size() > 0) {
            isNeedStuff = true;
        }
        // 耗材处理
        if (isNeedStuff) {
            staAdditionalLineDao.deleteAddLineByTrackingNo(sta.getId(), trackingNo);
            String ouType = operationUnitDao.getByPrimaryKey(ouid).getOuType().getName();
            OperationUnit companyOu = null;
            if (ouType.equals("OperationCenter")) {
                companyOu = operationUnitDao.getByPrimaryKey(ouid).getParentUnit();
            } else {
                companyOu = operationUnitDao.getByPrimaryKey(ouid).getParentUnit().getParentUnit();
            }
            /**
             * 查询耗材总重量
             */
            
            if("1".equals(isSkipWeight)){
                PackageInfo pp = packageInfoDao.findByStaIdWeightAddLine(staId, new BeanPropertyRowMapper<PackageInfo>(PackageInfo.class));
                if(pp==null || pp.getWeight()==null){
                }else{
                weight2=weight2.add(pp.getWeight());
                }
            }
            
            for (int i = 0; i < saddlines.size(); i++) {
                StaAdditionalLine addlineRaw = saddlines.get(i);
                String barcode = addlineRaw.getSku().getBarCode();
                Inventory inv = getAddlineSkuCache(barcode, companyOu.getId(), customerId);
                if (inv == null) {
                    throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF_NOT_FOUND, new Object[] {barcode});
                }
                StaAdditionalLine addline = new StaAdditionalLine();
                addline.setSku(inv.getSku());
                addline.setSta(sta);
                addline.setCreateTime(new Date());
                addline.setOwner(sta.getOwner());
                addline.setLpcode(sta.getStaDeliveryInfo().getLpCode());
                addline.setTrackingNo(trackingNo);
                addline.setQuantity(addlineRaw.getQuantity());
                addline.setSkuCost(inv.getSkuCost());
                staAdditionalLineDao.save(addline);
                if("1".equals(isSkipWeight)){
                    if(inv.getSku()==null || inv.getSku().getGrossWeight()==null){
                    }else{
                        weight2=weight2.add(inv.getSku().getGrossWeight());
                    }
                }
            }
        }
        // 查看Sta对应所有包裹是否都已检查
        StaDeliveryInfo di = sta.getStaDeliveryInfo();
        // 校验COD订单
        if (di.getIsCod()) {
            Transportator transportator = transportatorDao.findByCode(di.getLpCode());
            if (transportator.getIsSupportCod()) {} else {
                throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_TRANSPORTATOR_IS_COD);
            }
        }
        BigDecimal totalWeight = new BigDecimal(0);
        boolean isAllChecked = true;
        if (StringUtils.hasText(w.getVmiSource()) && trackingNo == null) {
            // 外包仓无快递单号处理
        } else {
            // 更新包裹 重量
            PackageInfo pg = packageInfoDao.findByTrackingNoAndStaID(trackingNo, staId);
            pg.setIsChecked(true);
            pg.setWeight(weight);
            pg.setTransferCose(null);
            pg.setStatus(PackageInfoStatus.OUTBOUND);
            pg.setLastModifyTime(new Date());
            packageInfoDao.save(pg);
            packageInfoDao.flush();

            // 自营仓处理1单多包裹,外包仓不处理
            if (!StringUtils.hasText(w.getVmiSource())) {
                List<PackageInfo> pgList = packageInfoDao.findByStaId(staId);
                if (pgList == null || pgList.size() == 0) {
                    throw new BusinessException(ErrorCode.PACKAGE_INFO_NOT_FOUND);
                }
                /************************* 如果一体化称重出库，将该单下所有已称重的包裹出库 ************************/
                if (allOutBound) {
                    StockTransApplication sto = staDao.getByPrimaryKey(staId);
                    for (PackageInfo pgInfo : pgList) {
                        if("1".equals(isSkipWeight)){
                            pgInfo.setWeight(weight.add(weight2));//暂时添加
                        }
                        if (pgInfo.getWeight() != null && !pgInfo.getTrackingNo().equals(pg.getTrackingNo())) {
                            pgInfo.setIsChecked(true);
                            pgInfo.setStatus(PackageInfoStatus.OUTBOUND);
                            if (null != sto && null != sto.getIsPreSale() && "1".equals(sto.getIsPreSale())) {
                                outBoundPackDao.insertOutBoundPack(pgInfo.getLpCode(), pgInfo.getTrackingNo(), ouid, userId, pgInfo.getId(), true);
                            } else {
                                outBoundPackDao.insertOutBoundPack(pgInfo.getLpCode(), pgInfo.getTrackingNo(), ouid, userId, pgInfo.getId(), false);

                            }
                        }
                    }
                    packageInfoDao.flush();
                }
                /************************* 如果一体化称重出库，将该单下所有已称重的包裹出库 ************************/
                for (PackageInfo pgInfo : pgList) {
                    // 计算总重量
                    totalWeight = totalWeight.add(pgInfo.getWeight() == null ? new BigDecimal(0) : pgInfo.getWeight());
                    if ((pgInfo.getIsChecked() == null || !pgInfo.getIsChecked()) && !pgInfo.getTrackingNo().equals(pg.getTrackingNo())) {
                        // 存在未检查包裹，并且非当前正检查包裹
                        isAllChecked = false;
                    }
                }
            } else {
                // 外包仓不计算总重量,重量为单包裹重量
                totalWeight = weight;
            }
        }


        // 新加逻辑 每个物流商加weight 自营仓
        if (!StringUtils.hasText(w.getVmiSource())) {
            TransportatorWeigth transportatorWeigth = transportatorWeigthDao.findTransportatorWeigth(sta.getMainWarehouse().getId(), sta.getStaDeliveryInfo().getLpCode(), new BeanPropertyRowMapper<TransportatorWeigth>(TransportatorWeigth.class));
            if (null != transportatorWeigth && !"".equals(transportatorWeigth)) {
                List<PackageInfo> list = packageInfoDao.getByStaId(staId);
                // 多包裹
                if (null != list && list.size() > 1) {
                    if (null != transportatorWeigth.getMaxWeight() && !"".equals(transportatorWeigth.getMaxWeight())) {
                        if (weight.doubleValue() > Double.parseDouble(transportatorWeigth.getMaxWeight()) - weight2.doubleValue()) {
                            throw new BusinessException(ErrorCode.LPCODE_ERROR_MAX_WEIGHT);
                        }
                    }
                    if (null != transportatorWeigth.getMinWeight() && !"".equals(transportatorWeigth.getMinWeight())) {
                        if (weight.doubleValue() < Double.parseDouble(transportatorWeigth.getMinWeight()) - weight2.doubleValue()) {
                            throw new BusinessException(ErrorCode.LPCODE_ERROR_MIN_WEIGHT);
                        }
                    }
                } else {
                    List<StvLine> stvLineList = stvLineDao.findSkuQtybystaId(staId, new BeanPropertyRowMapper<StvLine>(StvLine.class));
                    boolean flag = false;

                    BigDecimal sumQty = BigDecimal.ZERO;
                    if (null != stvLineList && stvLineList.size() > 0) {
                        for (StvLine stvLine : stvLineList) {
                            if (null != stvLine.getQuantity() && 0 != stvLine.getQuantity().longValue() && null != stvLine.getSkuCost() && !"".equals(stvLine.getSkuCost())) {
                                BigDecimal b = stvLine.getSkuCost().multiply(new BigDecimal(stvLine.getQuantity()));
                                flag = true;
                                sumQty = sumQty.add(b);
                            } else {
                                flag = false;
                                break;
                            }
                        }
                    }
                    if (null != transportatorWeigth.getWeightDifferencePercent() && !"".equals(transportatorWeigth.getWeightDifferencePercent()) && null != transportatorWeigth.getMaxWeight() && !"".equals(transportatorWeigth.getMaxWeight())) {
                        if (flag) {
                            BigDecimal qtyWeight = weight.subtract(sumQty).abs();
                            BigDecimal qtyWeightPercentage = qtyWeight.divide(sumQty, 2, RoundingMode.HALF_UP).multiply(new BigDecimal(100)).setScale(0, BigDecimal.ROUND_HALF_UP);
                            if (qtyWeightPercentage.longValue() > Long.parseLong(transportatorWeigth.getWeightDifferencePercent())) {
                                throw new BusinessException(ErrorCode.LPCODE_ERROR_WEIGHT_PERCENTAG);
                            }
                            if (weight.doubleValue() > Double.parseDouble(transportatorWeigth.getMaxWeight()) + weight2.doubleValue()) {
                                throw new BusinessException(ErrorCode.LPCODE_ERROR_MAX_WEIGHT);
                            }
                            if (null != transportatorWeigth.getMinWeight() && !"".equals(transportatorWeigth.getMinWeight())) {
                                if (weight.doubleValue() < Double.parseDouble(transportatorWeigth.getMinWeight()) - weight2.doubleValue()) {
                                    throw new BusinessException(ErrorCode.LPCODE_ERROR_MIN_WEIGHT);
                                }
                            }

                        } else {
                            if (weight.doubleValue() > Double.parseDouble(transportatorWeigth.getMaxWeight()) + weight2.doubleValue()) {
                                throw new BusinessException(ErrorCode.LPCODE_ERROR_MAX_WEIGHT);
                            }
                            if (null != transportatorWeigth.getMinWeight() && !"".equals(transportatorWeigth.getMinWeight())) {
                                if (weight.doubleValue() < Double.parseDouble(transportatorWeigth.getMinWeight()) - weight2.doubleValue()) {
                                    throw new BusinessException(ErrorCode.LPCODE_ERROR_MIN_WEIGHT);
                                }
                            }
                        }

                    }
                    if (null != transportatorWeigth.getMaxWeight() && !"".equals(transportatorWeigth.getMaxWeight()) && (null == transportatorWeigth.getWeightDifferencePercent() || "".equals(transportatorWeigth.getWeightDifferencePercent()))) {
                        if (weight.doubleValue() > Double.parseDouble(transportatorWeigth.getMaxWeight()) + weight2.doubleValue()) {
                            throw new BusinessException(ErrorCode.LPCODE_ERROR_MAX_WEIGHT);
                        }
                        if (null != transportatorWeigth.getMinWeight() && !"".equals(transportatorWeigth.getMinWeight())) {
                            if (weight.doubleValue() < Double.parseDouble(transportatorWeigth.getMinWeight()) - weight2.doubleValue()) {
                                throw new BusinessException(ErrorCode.LPCODE_ERROR_MIN_WEIGHT);
                            }
                        }
                    }
                    if (null != transportatorWeigth.getWeightDifferencePercent() && !"".equals(transportatorWeigth.getWeightDifferencePercent())) {
                        if (flag) {
                            BigDecimal qtyWeight = weight.subtract(sumQty).abs();
                            BigDecimal qtyWeightPercentage = qtyWeight.divide(sumQty, 2, RoundingMode.HALF_UP).multiply(new BigDecimal(100));
                            if (qtyWeightPercentage.longValue() > Long.parseLong(transportatorWeigth.getWeightDifferencePercent())) {
                                throw new BusinessException(ErrorCode.LPCODE_ERROR_WEIGHT_PERCENTAG);
                            }
                        }
                    }
                }
            }
        }


        if (isAllChecked) {
            // stv 完成
            stv.setStatus(StockTransVoucherStatus.FINISHED);

            stv.setOperator(user);
            stv.setFinishTime(new Date());
            stv.setLastModifyTime(new Date());
            stvDao.save(stv);
            stvDao.flush();

            di.setTrackingNo(trackingNo);
            di.setTransferCost(null);
            di.setWeight(totalWeight);
            di.setLastModifyTime(new Date());
            // 触发器移除 trg_update_lpcode_is_null
            ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey(Constants.UPDATE_DELIVERY_LPCODE, Constants.UPDATE_LPCODE_IS_OPEN);
            String flag = op == null ? "false" : (op.getOptionValue() == null ? "false" : op.getOptionValue());
            if ("true".equals(flag)) {
                if (di.getLpCode() == null) {
                    log.error("物流商编码不能为空!staCode=" + sta.getCode());
                    throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_TRANSPORTATOR_IS_NULL);
                }
            }
            staDeliveryInfoDao.save(di);

            // 是否合并单
            if (null != sta.getIsMerge() && true == sta.getIsMerge()) {// 合并单
                List<StockTransApplication> list = staDao.findGroupStaList(staId);
                if (null != list && list.size() > 0) {
                    // 子订单处理
                    dealChildSta(list, trackingNo, staId, user, totalWeight);
                } else {
                    throw new BusinessException(ErrorCode.CHILD_STA_NOT_FOUND, new Object[] {sta.getCode()});
                }
            } else {// 非合并单
                // 移除库存
                removeInventory(sta, stv);
            }
            whExe.validateBiChannelSupport(stv, null);
            // 更新库存释放数量占用
            sta.setIsNeedOccupied(false);
            sta.setStatus(StockTransApplicationStatus.INTRANSIT);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.INTRANSIT.getValue(), userId, sta.getMainWarehouse().getId());
            sta.setOutboundTime(new Date());
            sta.setLastModifyTime(new Date());
            sta.setOutboundOperator(user);


            // 处理SN号记录
            if (sta.getIsSn() != null && sta.getIsSn()) {
                // 合并订单SN号处理
                if (sta.getIsMerge() != null && sta.getIsMerge()) {
                    List<StockTransApplication> childStaList = staDao.getChildStaByGroupId(sta.getId());
                    for (StockTransApplication stas : childStaList) {
                        // 记录sn日志
                        StockTransVoucher stvs = stvDao.findStvByStaId(stas.getId());
                        if (stvs != null) {
                            List<StvLine> stvlines = stvLineDao.findStvLineListByStvId(stvs.getId());
                            for (StvLine stvLine : stvlines) {
                                if (stvLine.getSku().getChildSnQty() != null) {
                                    List<SkuSn> skusns = skuSnDao.findSkuSnListByStv(stvs.getId(), SkuSnStatus.USING);
                                    for (SkuSn skuSn : skusns) {
                                        List<SkuChildSn> childSns = childSnDao.getbySkuId(stvLine.getSku().getId(), skuSn.getSn());
                                        for (SkuChildSn skuChildSn : childSns) {
                                            SkuChildSnLog childSnLog = new SkuChildSnLog();
                                            childSnLog.setCreateTime(new Date());
                                            childSnLog.setSeedSn(skuChildSn.getSeedSn());
                                            childSnLog.setSkuId(stvLine.getSku());
                                            childSnLog.setStaCode(sta.getCode());
                                            childSnLog.setStaId(sta);
                                            childSnLog.setSn(skuChildSn.getSn());
                                            childSnLog.setStatus(skuChildSn.getStatus());
                                            childSnLogDao.save(childSnLog);
                                            childSnDao.delete(skuChildSn);
                                        }
                                    }
                                }
                            }
                            snLogDao.createOutboundByStvIdSql(stvs.getId());
                            // 删除sn号
                            snDao.deleteSNByStvIdSql(stvs.getId());
                        }
                    }
                } else {
                    // 查询明细数据
                    List<StvLine> stvlines = stvLineDao.findStvLineListByStvId(stv.getId());
                    for (StvLine stvLine : stvlines) {
                        // 判断是否是星巴克3合一商品
                        if (stvLine.getSku().getChildSnQty() != null) {
                            // 记录子sn日志
                            // 删除子sn号记录
                            List<SkuSn> skusns = skuSnDao.getbyStvIdSkuIdStatus(stv.getId(), stvLine.getSku().getId());
                            for (SkuSn skuSn : skusns) {
                                List<SkuChildSn> childSns = childSnDao.getbySkuId(stvLine.getSku().getId(), skuSn.getSn());
                                for (SkuChildSn skuChildSn : childSns) {
                                    SkuChildSnLog childSnLog = new SkuChildSnLog();
                                    childSnLog.setCreateTime(new Date());
                                    childSnLog.setSeedSn(skuChildSn.getSeedSn());
                                    childSnLog.setSkuId(stvLine.getSku());
                                    childSnLog.setStaCode(sta.getCode());
                                    childSnLog.setStaId(sta);
                                    childSnLog.setSn(skuChildSn.getSn());
                                    childSnLog.setStatus(skuChildSn.getStatus());
                                    childSnLogDao.save(childSnLog);
                                    childSnDao.delete(skuChildSn);
                                }
                            }
                        }
                    }
                    // 记录sn日志
                    snLogDao.createOutboundByStvIdSql(stv.getId());
                    // 插入sn效期出库表 （NEW）
                    staCheckLogDao.insertStaCheckLogByStvId(sta.getSlipCode1(), sta.getCode(), stv.getId());
                    // 删除sn号
                    snDao.deleteSNByStvIdSql(stv.getId());
                    // 判断是否为外包仓
                    if (w != null && StringUtils.hasText(w.getVmiSource())) {
                        snLogDao.insertOutboundByStaId(staId);
                    }
                }
            }

            // nike rfid
            List<SkuRfid> skuRfidList = skuRfidDao.findSkuRFIDByStaId(sta.getId());
            if (skuRfidList != null && skuRfidList.size() > 0) {
                for (SkuRfid skuRfid : skuRfidList) {
                    StaCheckLog staCheckLog = new StaCheckLog();
                    staCheckLog.setLogDate(new Date());
                    staCheckLog.setOrderCode(sta.getSlipCode1());
                    staCheckLog.setQty(1L);
                    staCheckLog.setSkuId(skuRfid.getSkuId());
                    staCheckLog.setStaCode(sta.getCode());
                    staCheckLogDao.save(staCheckLog);
                }
            }

            // 注册销售出库任务
            if (SlipType.SALES_ORDER.equals(stv.getSta().getRefSlipType())) {
                try {
                    if (null == sta.getIsMerge() || false == sta.getIsMerge()) {
                        eventObserver.onEvent(new TransactionalEvent(sta));
                    }
                } catch (BusinessException e) {
                    throw e;
                }
            } else if (SlipType.RETURN_REQUEST.equals(stv.getSta().getRefSlipType()) || SlipType.OUT_RETURN_REQUEST.equals(stv.getSta().getRefSlipType())) {
                // 注册换货出库
                try {
                    // raOutTaskRegister.registTask(stv);
                    if (null == sta.getIsMerge() || false == sta.getIsMerge()) {
                        eventObserver.onEvent(new TransactionalEvent(sta));
                    }
                } catch (BusinessException e) {
                    throw e;
                } catch (Exception ex) {
                    if (logger.isErrorEnabled()) {
                        logger.error("salesStaOutBound Exception:" + staId, ex);
                    }
                    throw new BusinessException(ErrorCode.OUT_OF_BOUND_FAILURE, new Object[] {sta.getCode()});
                }
            }
            // picking list更新状态
            boolean isAllOutBound = true;
            PickingList pl = sta.getPickingList();
            if (pl != null) {
                Long staStatusCount = staDao.findStaStatusByPickingListId(pl.getId(), new SingleColumnRowMapper<Long>(Long.class));
                if (null != staStatusCount && staStatusCount > 0) {
                    isAllOutBound = false;
                }
                /*
                 * for (StockTransApplication plSta : pl.getStaList()) { if
                 * (!(StockTransApplicationStatus.FINISHED.equals(plSta.getStatus()) ||
                 * StockTransApplicationStatus.INTRANSIT.equals(plSta.getStatus()) ||
                 * StockTransApplicationStatus.CANCELED.equals(plSta.getStatus()))) { isAllOutBound
                 * = false; break; } }
                 */
                if (isAllOutBound) {
                    pl.setStatus(PickingListStatus.FINISHED);
                    // 订单状态与账号关联
                    whInfoTimeRefDao.insertWhInfoTime(pl.getCode(), WhInfoTimeRefBillType.STA_PICKING.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId);

                    // 清除mgdb缓存
                    mongoOperation.remove(new Query(Criteria.where("pickingListCode").in(pl.getCode())), TwicePickingBarCode.class);
                } else {
                    pl.setStatus(PickingListStatus.PARTLY_RETURNED);
                }
            }
            return true;
        } else {
            return false;
        }
    }

    public void dealChildSta(List<StockTransApplication> list, String trackingNo, Long staId, User user, BigDecimal totalWeight) {
        for (StockTransApplication bean : list) {
            // sta状态检查
            if (!StockTransApplicationStatus.CHECKED.equals(bean.getStatus())) {
                if (StockTransApplicationStatus.CANCELED.equals(bean.getStatus()) || StockTransApplicationStatus.CANCEL_UNDO.equals(bean.getStatus())) {
                    throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {bean.getCode()});
                }
                throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {bean.getCode()});
            }
            // 子订单staLine 更新
            List<StaLineCommand> staLineList = staLineDao.findStaLineByStaId(bean.getId(), new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
            for (int i = 0; i < staLineList.size(); i++) {
                StaLine s = staLineList.get(i);
                StaLine s1 = staLineDao.getByPrimaryKey(s.getId());
                s1.setCompleteQuantity(s1.getQuantity());
                staLineDao.save(s1);
            }
            // 设置子订单 运单信息
            bean.getStaDeliveryInfo().setTrackingNo(trackingNo);
            bean.getStaDeliveryInfo().setTransferCost(null);
            bean.getStaDeliveryInfo().setWeight(totalWeight);
            List<PackageInfo> packageInfos = packageInfoDao.findByStaId(staId);
            // 是否分包 fanht
            if (packageInfos.size() > 1) {
                bean.getStaDeliveryInfo().setIsMorePackage(true);
            } else {
                bean.getStaDeliveryInfo().setIsMorePackage(false);
            }
            bean.getStaDeliveryInfo().setLastModifyTime(new Date());
            // 触发器移除 trg_update_lpcode_is_null
            ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey(Constants.UPDATE_DELIVERY_LPCODE, Constants.UPDATE_LPCODE_IS_OPEN);
            String flag = op == null ? "false" : (op.getOptionValue() == null ? "false" : op.getOptionValue());
            if ("true".equals(flag)) {
                if (bean.getStaDeliveryInfo().getLpCode() == null) {
                    log.error("物流商编码不能为空!staCode=" + bean.getCode());
                    throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_TRANSPORTATOR_IS_NULL);
                }
            }
            staDeliveryInfoDao.save(bean.getStaDeliveryInfo());
            // 设置子单状态
            bean.setIsNeedOccupied(false);
            bean.setStatus(StockTransApplicationStatus.INTRANSIT);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(bean.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.INTRANSIT.getValue(), user.getId(), bean.getMainWarehouse().getId());
            bean.setOutboundTime(new Date());
            bean.setLastModifyTime(new Date());
            bean.setOutboundOperator(user);
            staDao.save(bean);
            // 子订单stv更新
            StockTransVoucher stv = stvDao.findStvCreatedByStaId(bean.getId());
            if (stv == null) {
                throw new BusinessException(ErrorCode.STV_NOT_FOUND);
            }
            // stv 完成
            stv.setStatus(StockTransVoucherStatus.FINISHED);
            stv.setOperator(user);
            stv.setFinishTime(new Date());
            stv.setLastModifyTime(new Date());
            stvDao.save(stv);
            stvDao.flush();
            // 移除库存
            removeInventory(bean, stv);
            // 注册销售出库任务
            if (SlipType.SALES_ORDER.equals(stv.getSta().getRefSlipType())) {
                // // 销售出库K3注册
                // soTaskRegister.registTask(stv);
                // // 注册税控发票 （实票）
                // invoiceUtil.registTaxTaskAlongWithSoTask(stv);
                // // 注册税控发票 （虚票）
                // invoiceUtil.registXnTaxTaskAlongWithSoTask(stv.getSta());
                try {
                    if (null == bean.getIsMerge() || false == bean.getIsMerge()) {
                        eventObserver.onEvent(new TransactionalEvent(bean));
                    }
                } catch (BusinessException e) {
                    throw e;
                }
            } else if (SlipType.RETURN_REQUEST.equals(stv.getSta().getRefSlipType()) || SlipType.OUT_RETURN_REQUEST.equals(stv.getSta().getRefSlipType())) {
                // 注册换货出库
                try {
                    // raOutTaskRegister.registTask(stv);
                    if (null == bean.getIsMerge() || false == bean.getIsMerge()) {
                        eventObserver.onEvent(new TransactionalEvent(bean));
                    }
                } catch (BusinessException e) {
                    throw e;
                } catch (Exception ex) {
                    if (logger.isErrorEnabled()) {
                        logger.error("dealChildSta Exception:" + staId, ex);
                    }
                    throw new BusinessException(ErrorCode.OUT_OF_BOUND_FAILURE, new Object[] {bean.getCode()});
                }
            }
        }
    }

    public void findUnCheckedPackageBySta(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        Long qty = packageInfoDao.findUnCheckedPackageBySta(staId, new SingleColumnRowMapper<Long>(Long.class));
        throw new BusinessException(ErrorCode.STA_PACKAGE_INFO_NOT_ALL_CHECKED, new Object[] {sta.getCode(), qty});
    }

    public void removeInventory(StockTransApplication sta, StockTransVoucher stv) {
        sta = staDao.getByPrimaryKey(sta.getId());
        if (null == sta) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (null == stv) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        List<Inventory> list = inventoryDao.findByOccupiedCode(sta.getCode());
        if (list == null || list.size() == 0) {
            throw new BusinessException(ErrorCode.NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
        }
        User user = stv.getOperator();
        /*
         * BiChannel shop = companyShopDao.getByCode(stv.getOwner()); Map<String, BiChannel> shopMap
         * = new HashMap<String, BiChannel>(); if (shop != null) { shopMap.put(shop.getCode(),
         * shop); }
         */
        stv.setFinishTime(new Date());
        for (Inventory inv : list) {
            // 记录日志
            StockTransTxLog log = new StockTransTxLog();
            log.setDirection(stv.getDirection());
            log.setDistrictId(inv.getDistrict().getId());
            log.setInvStatusId(inv.getStatus().getId());
            log.setLocationId(inv.getLocation().getId());
            log.setOwner(inv.getOwner());
            log.setQuantity(inv.getQuantity());
            log.setSkuId(inv.getSku().getId());
            log.setTransactionTime(new Date());
            log.setTransactionType(stv.getTransactionType());
            log.setWarehouseOuId(inv.getOu().getId());
            log.setStvId(stv.getId());
            log.setInboundTime(inv.getInboundTime());
            log.setBatchCode(inv.getBatchCode());
            log.setOcpCode(inv.getOcpCode());
            /** -------------新建保质期字段---------------- */
            log.setValidDate(inv.getValidDate());
            log.setExpireDate(inv.getExpireDate());
            log.setProductionDate(inv.getProductionDate());
            /** -------------新建保质期字段---------------- */
            log.setStaCode(sta.getCode());
            log.setSlipCode(sta.getRefSlipCode());
            log.setSlipCode1(sta.getSlipCode1());
            log.setSlipCode2(sta.getSlipCode2());
            if (null != user) {
                log.setOpUserName(user.getUserName());
            }
            Sku sku = skuDao.getByPrimaryKey(log.getSkuId());
            if (sku != null && sku.getStoremode() != null && InboundStoreMode.SHELF_MANAGEMENT.equals(sku.getStoremode())
                    && (StockTransApplicationType.OUTBOUND_SALES.equals(sta.getType()) || StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType()) || StockTransApplicationType.OUTBOUND_RETURN_REQUEST.equals(sta.getType()))) {
                StaCheckLog staCheckLog = new StaCheckLog();
                staCheckLog.setExpDate(inv.getExpireDate());
                staCheckLog.setLogDate(new Date());
                if (StockTransApplicationType.INBOUND_RETURN_REQUEST.equals(sta.getType())) {
                    staCheckLog.setQty(-inv.getQuantity());
                } else {
                    staCheckLog.setQty(inv.getQuantity());
                }
                staCheckLog.setSkuId(sku.getId());
                staCheckLog.setStaCode(sta.getCode());
                staCheckLog.setOrderCode(sta.getSlipCode1());
                staCheckLogDao.save(staCheckLog);
            }

            /** -------------归档查询优化------------------ */
            stockTransTxLogDao.save(log);
            inventoryDao.delete(inv);
            stockTransTxLogDao.flush();
        }
    }

    public Boolean checkTrackingNo(String trackingNo, Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        String lpCode = sta.getStaDeliveryInfo().getLpCode();
        return checkTrackingNoByLpcode(lpCode, trackingNo);
    }

    public Boolean checkPickingisOver(String code, String slipCode, Long ouId) {
        Warehouse wh = warehouseDao.getByOuId(ouId);
        if (wh != null && wh.getIsCheckPickingStatus() != null && wh.getIsCheckPickingStatus()) {
            if (code == null || "".equals(code)) {
                PickingListCommand list = pickingListDao.findPickListBySlipCode(slipCode, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
                if (list != null) {
                    code = list.getCode();
                }
            }
            WhInfoTimeRef ref = whInfoTimeRefDao.getInfoBySlipCode(code, 14, new BeanPropertyRowMapper<WhInfoTimeRef>(WhInfoTimeRef.class));
            if (ref == null) {
                return false;
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    public Boolean checkTrackingNoByLpcode(String lpcode, String trackingNo) {
        Boolean rs = true;
        try {
            if (log.isDebugEnabled()) {
                log.debug("lpcode : {}", lpcode);
            }
            rs = ((TransCodeFormatValidator) TransCodeFormatValidatorEnum.validatorMap().get(lpcode)).validate(trackingNo);
        } catch (Exception e) {
            // 未找到匹配验证
            log.error("lpcode [{}]no validatir enum fro tracking no!!!", lpcode);
        }
        return rs;
    }

    public List<String> warehosueIsRelateShopForPrint(Long ouid) {
        if (ouid == null) return null;
        List<String> trunkNames = companyShopDao.findwarehosueIsRelateShopForPrint(ouid, new SingleColumnRowMapper<String>(String.class));
        return trunkNames;
    }

    public List<String> warehosueShopForPrintIsSame(Long ouid, String shoplist) {
        List<String> result = new ArrayList<String>();
        if (ouid == null || shoplist == null) return null;
        try {
            // 开关
            ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey(Constants.JOIN_PICKINGLIST, Constants.IS_SAME_TEMPLATE);
            String flag = op == null ? "false" : (op.getOptionValue() == null ? "false" : op.getOptionValue());
            if ("true".equals(flag)) {
                String[] shops = org.apache.commons.lang.StringUtils.split(shoplist, "|");
                if (shops == null) return null;
                List<String> list = new ArrayList<String>();
                for (String s : shops) {
                    list.add(s);
                }
                // 查询配置过个性化模板的店铺和模板【店铺名称,个性化装箱模板名称】
                List<String> trunkNames = companyShopDao.findwarehosueShopForPrintIsSame(ouid, list, new SingleColumnRowMapper<String>(String.class));
                if (trunkNames == null || trunkNames.isEmpty()) return null;
                // 遍历查询
                for (int i = 0; i < trunkNames.size() - 1; i++) {
                    String[] strs = org.apache.commons.lang.StringUtils.split(trunkNames.get(i), ",");
                    String shopName = strs[0];
                    String templateName = strs[1];
                    for (int j = i + 1; j < trunkNames.size(); j++) {
                        String[] strs2 = org.apache.commons.lang.StringUtils.split(trunkNames.get(j), ",");
                        String shopName2 = strs2[0];
                        String templateName2 = strs2[1];
                        if (!org.apache.commons.lang3.StringUtils.equals(templateName, templateName2)) {
                            result.add(shopName + "【" + templateName + "】," + shopName2 + "【" + templateName2 + "】");
                            // 找到一个不同的即返回
                            return result;
                        }
                    }
                }
                if (result.isEmpty()) return null;
            }
        } catch (Exception e) {
            log.error("查询店铺配置的装箱清单模板异常！" + shoplist, e);
        }
        return null;
    }

    public List<PickingListCommand> findPickingListByPickingId(Long plCmdId, Integer pickZoneId, Long warehouseOuid) {
        return pickingListDao.findPickingListByPickingId(plCmdId, pickZoneId, warehouseOuid, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }

    public Long warehosueIsRelateMulitShop(String shoplist, Long ouid) {
        if (!StringUtils.hasLength(shoplist)) {
            return 0L;
        }
        String[] innerCoders = shoplist.split("\\|");
        return companyShopDao.warehosueIsRelateMulitShop(innerCoders, ouid, new SingleColumnRowMapper<Long>(Long.class));
    }

    public List<String> customiztationTemplShop(Long ouid) {
        return companyShopDao.customiztationTemplShop(ouid, new SingleColumnRowMapper<String>(String.class));
    }

    public String findexpNameByPlid(Long plid) {
        return staDeliveryInfoDao.findexpNameByPlid(plid, new SingleColumnRowMapper<String>(String.class));
    }

    @Transactional(readOnly = true)
    public PickingList getPickingListByid(Long plid) {
        PickingList pl = pickingListDao.getByPrimaryKey(plid);
        PickingList plList = new PickingList();
        try {
            PropertyUtil.copyProperties(pl, plList);
        } catch (Exception e) {
            log.error("", e);
        }
        plList.setCreator(null);
        plList.setHandOverList(null);
        plList.setOperator(null);
        plList.setWarehouse(null);
        plList.setStaList(null);
        return plList;
    }


    // public JasperPrint printStaCode(Long staid) {
    // StockTransApplication sta = staDao.getByPrimaryKey(staid);
    // if (sta == null) throw new BusinessException(ErrorCode.STA_NOT_FOUND);
    // List<Object> fieldList = new ArrayList<Object>();
    // fieldList.add(new HashMap<String, Object>().put("staCode", "staCode"));
    // JRDataSource ds = new JRBeanCollectionDataSource(fieldList);
    //
    // Map<String, Object> paramMap = new HashMap<String, Object>();
    // paramMap.put("stacode", sta.getCode());
    //
    // String printTemplateFile = "jasperprint/printpdpurchasestacode.jasper";
    // JasperPrint jpJasperPrint = new JasperPrint();
    // try {
    // ClasspathJasperPrinter cjp = new ClasspathJasperPrinter(printTemplateFile);
    // cjp.initializeReport(paramMap, ds);
    // jpJasperPrint = cjp.print();
    // return jpJasperPrint;
    // } catch (JasperReportNotFoundException e) {
    // log.error("", e);
    // } catch (JasperPrintFailureException e) {
    // log.error("", e);
    // }
    // return jpJasperPrint;
    // }

    public PickingListCommand getPickingListById(Long pickingListId) {
        return pickingListDao.findById(pickingListId, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }

    public Pagination<StockTransTxLogCommand> findStTxLogPageBySku(int start, int pageSize, Date startDate, Date endDate, Long skuId, String owner, InventoryCommand inventory, Long whOuId, Sort[] sorts) {
        // 是否选择仓库条件,否,则按公司或仓库角色全部查询
        if (!StringUtils.hasLength(inventory.getWhOuId())) {
            String organiseType = operationUnitDao.getByPrimaryKey(whOuId).getOuType().getName();
            if (organiseType.equals(OperationUnitType.OUTYPE_COMPANY)) {
                List<WarehouseDataCommand> list = inventoryDao.getWarehouseDataByCompany(whOuId, new BeanPropertyRowMapper<WarehouseDataCommand>(WarehouseDataCommand.class));
                for (WarehouseDataCommand data : list)
                    inventory.addOuId(data.getValue());
                inventory.setWhOuId(null);
            } else if (organiseType.equals(OperationUnitType.OUTYPE_WAREHOUSE)) {
                inventory.setWhOuId(whOuId.toString());
            }
        }
        return stockTransTxLogDao.findSkuInvLogPageByDate(start, pageSize, startDate, endDate, skuId, owner, inventory.getWhOuId(), inventory.getOuIds(), new BeanPropertyRowMapper<StockTransTxLogCommand>(StockTransTxLogCommand.class), sorts);
    }

    public Pagination<InventoryCommand> findSnapShotPageByDate(int start, int pageSize, Date startDate, Date endDate, InventoryCommand inv, Long whOuId, Long companyid, Sort[] sorts) {
        if (inv != null) {
            inv.setQueryLikeParam();
        } else {
            inv = new InventoryCommand();
        }

        // 是否选择仓库条件,否,则按公司或仓库角色全部查询
        if (!StringUtils.hasLength(inv.getWhOuId())) {
            String organiseType = operationUnitDao.getByPrimaryKey(whOuId).getOuType().getName();
            if (organiseType.equals(OperationUnitType.OUTYPE_COMPANY)) {
                List<WarehouseDataCommand> list = inventoryDao.getWarehouseDataByCompany(whOuId, new BeanPropertyRowMapper<WarehouseDataCommand>(WarehouseDataCommand.class));
                for (WarehouseDataCommand data : list)
                    inv.addOuId(data.getValue());
                inv.setWhOuId(null);
            } else if (organiseType.equals(OperationUnitType.OUTYPE_WAREHOUSE)) {
                inv.setWhOuId(whOuId.toString());
            }
        }
        return inventoryDao.findSnapShotPageByDate(start, pageSize, startDate, endDate, inv.getBarCode(), inv.getSkuCode(), inv.getBrandName(), inv.getJmCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getInvOwner(), inv.getWhOuId(),
                inv.getOuIds(), companyid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class), sorts);
    }


    public Pagination<InventoryCommand> findSnapShotPageByPreciseTime(int start, int pageSize, Date date, InventoryCommand inv, Long whOuId, Long companyid, Sort[] sorts) {
        inv.setQueryLikeParam();
        // 是否选择仓库条件,否,则按公司或仓库角色全部查询
        if (!StringUtils.hasLength(inv.getWhOuId())) {
            String organiseType = operationUnitDao.getByPrimaryKey(whOuId).getOuType().getName();
            if (organiseType.equals(OperationUnitType.OUTYPE_COMPANY)) {
                List<WarehouseDataCommand> list = inventoryDao.getWarehouseDataByCompany(whOuId, new BeanPropertyRowMapper<WarehouseDataCommand>(WarehouseDataCommand.class));
                for (WarehouseDataCommand data : list)
                    inv.addOuId(data.getValue());
                inv.setWhOuId(null);
            } else if (organiseType.equals(OperationUnitType.OUTYPE_WAREHOUSE)) {
                inv.setWhOuId(whOuId.toString());
            }
        }
        return inventoryDao.findSnapShotPageByPreciseTime(start, pageSize, date, inv.getBarCode(), inv.getSkuCode(), inv.getBrandName(), inv.getJmCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getInvOwner(), inv.getWhOuId(), inv.getOuIds(),
                companyid, inv.getIsShowZero(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class), sorts);
    }

    public List<HandOverListLineCommand> findHoLineByHoListId(Long hoListId, Sort[] sorts) {
        return handOverListLineDao.findLineByHoListId(hoListId, null, sorts, new BeanPropertyRowMapper<HandOverListLineCommand>(HandOverListLineCommand.class));
    }

    @Transactional(readOnly = true)
    public HandOverList getHandOverListById(Long id) {
        HandOverList list = handOverListDao.getByPrimaryKey(id);
        HandOverListCommand cmdList = new HandOverListCommand();
        org.springframework.beans.BeanUtils.copyProperties(list, cmdList);
        cmdList.setOperator(null);;
        cmdList.setModifier(null);
        cmdList.setOu(null);
        cmdList.setLines(null);
        return cmdList;
    }

    @SuppressWarnings("unchecked")
    @Transactional(readOnly = true)
    public Map<String, Object> hoListCreateByHandStep1(List<String> transNo, String lpcode, Long ouid, List<Long> idList) {
        if (transNo == null || transNo.isEmpty() || lpcode == null) {
            throw new BusinessException();
        }
        List<PackageInfoCommand> pclist = new ArrayList<PackageInfoCommand>();
        Map<String, Object> rsMap = new HashMap<String, Object>();
        Map<String, Object> map1 = hoListImportCheckTrackingNo2(transNo, ouid, idList);
        pclist = (List<PackageInfoCommand>) map1.get("package");

        Map<String, Object> map2 = hoListImportCheckLpcode(pclist, lpcode);
        pclist = (List<PackageInfoCommand>) map2.get("package");
        // 过滤预售包裹
        Map<String, Object> map3 = hoListImportCheckPre(pclist, lpcode);
        pclist = (List<PackageInfoCommand>) map3.get("package");


        rsMap.put("pclist", pclist);
        if (map1.get("removeTrackingNo") != null) {
            rsMap.put("removeByTrackingNo", map1.get("removeTrackingNo"));
        }
        if (map2.get("removeTrackingNo") != null) {
            rsMap.put("removeBylpcode", map2.get("removeTrackingNo"));
        }
        if (map3.get("removeTrackingNo") != null) {
            rsMap.put("removeBylpcodePre", map3.get("removeTrackingNo"));
        }
        return rsMap;
    }

    /**
     * 过滤预售订单
     * 
     * @param pclist
     * @param lpcode
     * @return
     */
    @Transactional(readOnly = true)
    public Map<String, Object> hoListImportCheckPre(List<PackageInfoCommand> pclist, String lpcode) {
        Map<String, Object> map = new HashMap<String, Object>();
        List<PackageInfoCommand> newList = new ArrayList<PackageInfoCommand>();
        List<String> rs = new ArrayList<String>();
        // 过滤预售订单
        for (PackageInfoCommand p : pclist) {
            if ("1".equals(p.getIsPreSale())) {
                rs.add(p.getTrackingNo());
            } else {
                newList.add(p);
            }
        }
        map.put("removeTrackingNo", rs);
        map.put("package", newList);
        return map;
    }


    @Transactional(readOnly = true)
    public Map<String, Object> hoListImportCheckTrackingNo2(List<String> trackingNoList, Long ouid, List<Long> idList) {
        Map<String, Object> map = new HashMap<String, Object>();
        List<PackageInfoCommand> list = packageInfoDao.findByTrackingNoList2(trackingNoList, ouid, idList, new BeanPropertyRowMapper<PackageInfoCommand>(PackageInfoCommand.class));
        // 检查不存在快递单号
        List<String> rs = null;
        for (String tn : trackingNoList) {
            boolean isTn = false;
            for (PackageInfoCommand pg : list) {
                if (tn.equals(pg.getTrackingNo())) {
                    isTn = true;
                }
            }
            if (!isTn) {
                if (rs == null) {
                    rs = new ArrayList<String>();
                }
                rs.add(tn);
            }
        }
        map.put("package", list);
        map.put("removeTrackingNo", rs);
        return map;
    }

    @Transactional(readOnly = true)
    public Map<String, Object> hoListImportCheckTrackingNo(List<String> trackingNoList, Long ouid, List<Long> idList) {
        Map<String, Object> map = new HashMap<String, Object>();
        List<Integer> staStatusList = new ArrayList<Integer>();
        staStatusList.add(StockTransApplicationStatus.INTRANSIT.getValue());
        staStatusList.add(StockTransApplicationStatus.CHECKED.getValue());
        List<PackageInfoCommand> list = packageInfoDao.findByTrackingNoList(trackingNoList, staStatusList, ouid, idList, new BeanPropertyRowMapper<PackageInfoCommand>(PackageInfoCommand.class));
        // 检查不存在快递单号
        List<String> rs = null;
        for (String tn : trackingNoList) {
            boolean isTn = false;
            for (PackageInfoCommand pg : list) {
                if (tn.equals(pg.getTrackingNo())) {
                    isTn = true;
                }
            }
            if (!isTn) {
                if (rs == null) {
                    rs = new ArrayList<String>();
                }
                rs.add(tn);
            }
        }
        map.put("package", list);
        map.put("removeTrackingNo", rs);
        return map;
    }

    @Transactional(readOnly = true)
    public Map<String, Object> hoListImportCheckLpcode(List<PackageInfoCommand> pgList, String lpcode) {
        Map<String, Object> map = new HashMap<String, Object>();
        List<PackageInfoCommand> newList = new ArrayList<PackageInfoCommand>();
        List<String> rs = null;
        // 物流平台编码查询相关物流供应商 fanht
        List<Transportator> tsList = transportatorDao.findByPlatformCode(lpcode);
        for (int i = 0; i < pgList.size(); i++) {
            PackageInfoCommand pg = pgList.get(i);
            boolean eqLpcode = false;
            for (Transportator tp : tsList) {
                // 判断该快递单是否在物流平台列表内
                if (tp.getExpCode() != null && tp.getExpCode().equals(pg.getLpCode())) {
                    eqLpcode = true;
                    break;
                } else if (tp.getExpCode() != null) {
                    DeliveryChanngeLog cl = dliveryChanngeLogDao.getDeliveryChanngeLogByTrackingNo(pg.getTrackingNo(), new BeanPropertyRowMapper<DeliveryChanngeLog>(DeliveryChanngeLog.class));
                    if (cl != null && tp.getExpCode().equals(cl.getNewLpcode())) {
                        pg.setLpCode(cl.getNewLpcode());
                        eqLpcode = true;
                        break;
                    }
                }
            }
            if (eqLpcode) {
                newList.add(pg);
            } else {
                if (rs == null) {
                    rs = new ArrayList<String>();
                }
                rs.add(pg.getTrackingNo());
            }
        }
        map.put("removeTrackingNo", rs);
        map.put("package", newList);
        return map;
    }

    @Transactional(readOnly = true)
    public Map<String, Object> hoListImportCheckByStaStatus(List<PackageInfoCommand> pgList) {
        Map<String, Object> map = new HashMap<String, Object>();
        List<PackageInfoCommand> newList = new ArrayList<PackageInfoCommand>();
        List<String> rs = null;
        List<Long> tnList = new ArrayList<Long>();
        for (PackageInfoCommand pg : pgList) {
            tnList.add(pg.getId());
        }
        List<Long> error = packageInfoDao.findErrorPackageInfo(tnList, new SingleColumnRowMapper<Long>(Long.class));
        Map<Long, Long> errorMapId = new HashMap<Long, Long>();
        for (Long id : error) {
            errorMapId.put(id, id);
        }
        for (int i = 0; i < pgList.size(); i++) {
            if (PackageInfoStatus.OUTBOUND.getValue() != pgList.get(i).getPgStatus().intValue()) {
                if (rs == null) {
                    rs = new ArrayList<String>();
                }
                rs.add(pgList.get(i).getTrackingNo());
            } else {
                // 判断是否加入交接清单
                if (errorMapId.get(pgList.get(i).getId()) != null) {
                    if (rs == null) {
                        rs = new ArrayList<String>();
                    }
                    rs.add(pgList.get(i).getTrackingNo());
                } else {
                    newList.add(pgList.get(i));
                }
            }
        }
        map.put("removeTrackingNo", rs);
        map.put("package", newList);
        return map;
    }

    public List<TransactionType> findTransactionListByOu(Long ouid) {
        return transactionTypeDao.findTransactionListByOu(ouid);
    }


    public List<StockTransApplicationCommand> importStaByOwner(Long id) {
        // Map<String, Object> beans = new HashMap<String, Object>();
        // String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);

        /*
         * if (0 == zdhPici.getStatus()) { msg = "unavailable"; return msg; } if (5 !=
         * zdhPici.getMoveStatus()) { msg = "statusError"; return msg; }
         */
        List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));
        Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();
        List<String> ouList = null;
        List<StockTransApplicationCommand> staList = null;
        List<StockTransApplicationCommand> staCommand = new ArrayList<StockTransApplicationCommand>();
        if (null != ZdhList && ZdhList.size() > 0) {
            for (ZdhPiciLineCommand zdh : ZdhList) {
                if (ownerMap.containsKey(zdh.getShopName())) {
                    ouList = (List) ownerMap.get(zdh.getShopName());
                    ouList.add(zdh.getOuName());
                } else {
                    ouList = new ArrayList<String>();
                    ouList.add(zdh.getOuName());
                    ownerMap.put(zdh.getShopName(), ouList);
                }

            }
            for (Map.Entry<String, List<String>> map : ownerMap.entrySet()) {
                staList = staDao.importStaByOwnerAndOu(map.getKey(), map.getValue(), new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
                if (null != staList && staList.size() > 0) {
                    staCommand.addAll(staList);

                }
            }
        }
        zdhPici.setMoveStatus(6);
        return staCommand;
    }

    public String backUpSta(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            if (3 != zdhPici.getMoveStatus()) {
                msg = "statusError";
                return msg;
            }
            List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));
            Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();
            List<String> ouList = null;
            if (null != ZdhList && ZdhList.size() > 0) {
                for (ZdhPiciLineCommand zdh : ZdhList) {
                    if (ownerMap.containsKey(zdh.getShopName())) {
                        ouList = (List) ownerMap.get(zdh.getShopName());
                        ouList.add(zdh.getOuName());
                    } else {
                        ouList = new ArrayList<String>();
                        ouList.add(zdh.getOuName());
                        ownerMap.put(zdh.getShopName(), ouList);
                    }

                }

                for (Map.Entry<String, List<String>> entry : ownerMap.entrySet()) {

                    inventoryDao.backUpSta(zdhPici.getCode(), entry.getKey(), entry.getValue());
                }
                msg = "success";
                zdhPici.setMoveStatus(4);
            }

        }
        return msg;
    }

    public String cleanInvByCode(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            if (4 != zdhPici.getMoveStatus()) {
                msg = "statusError";
                return msg;
            }
            List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));
            Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();

            if (null != ZdhList && ZdhList.size() > 0) {
                List<String> ouList = null;
                for (ZdhPiciLineCommand zdh : ZdhList) {
                    if (ownerMap.containsKey(zdh.getShopName())) {
                        ouList = (List) ownerMap.get(zdh.getShopName());
                        ouList.add(zdh.getOuName());
                    } else {
                        ouList = new ArrayList<String>();
                        ouList.add(zdh.getOuName());
                        ownerMap.put(zdh.getShopName(), ouList);
                    }

                }

                // 清理库存
                for (Map.Entry<String, List<String>> entry : ownerMap.entrySet()) {
                    List<String> ouNameList = entry.getValue();
                    for (String ou : ouNameList) {
                        Map<String, Object> params = new HashMap<String, Object>();
                        params.put("owner", entry.getKey());
                        params.put("warehouselist", ou);
                        SqlOutParameter s = new SqlOutParameter("errcode", Types.VARCHAR);
                        SqlParameter[] sqlParameters = {new SqlParameter("owner", Types.VARCHAR), new SqlParameter("warehouselist", Types.VARCHAR), s};
                        Map<String, Object> result = null;
                        result = staDao.executeSp("clearInv", sqlParameters, params);
                        String errorSku = (String) result.get("errcode");
                        if (null != errorSku && !"".equals(errorSku)) {
                            throw new BusinessException(ErrorCode.CLEAR_INV_ERRORCODE, new Object[] {errorSku});
                        }
                    }
                }
                msg = "success";
                zdhPici.setMoveStatus(5);

            }

        }
        return msg;
    }

    public String backUpInv(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            if (2 != zdhPici.getMoveStatus()) {
                msg = "statusError";
                return msg;
            }
            List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));
            Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();
            List<String> ouList = null;
            if (null != ZdhList && ZdhList.size() > 0) {

                for (ZdhPiciLineCommand zdh : ZdhList) {
                    if (ownerMap.containsKey(zdh.getShopName())) {
                        ouList = (List) ownerMap.get(zdh.getShopName());
                        ouList.add(zdh.getOuName());
                    } else {
                        ouList = new ArrayList<String>();
                        ouList.add(zdh.getOuName());
                        ownerMap.put(zdh.getShopName(), ouList);
                    }

                }
                for (Entry<String, List<String>> entry : ownerMap.entrySet()) {
                    inventoryDao.backUpInv(zdhPici.getCode(), entry.getKey(), entry.getValue());
                }
            }
            msg = "success";
            zdhPici.setMoveStatus(3);

        }
        return msg;
    }

    public String createInvTxt(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            if (1 != zdhPici.getMoveStatus()) {
                msg = "statusError";
                return msg;
            }


            List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));
            Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();
            List<String> ouList = null;
            for (ZdhPiciLineCommand zdh : ZdhList) {
                if (ownerMap.containsKey(zdh.getShopName())) {
                    ouList = (List) ownerMap.get(zdh.getShopName());
                    ouList.add(zdh.getOuName());
                } else {
                    ouList = new ArrayList<String>();
                    ouList.add(zdh.getOuName());
                    ownerMap.put(zdh.getShopName(), ouList);
                }

            }
            StringBuilder sb = new StringBuilder();
            Boolean b = false;
            for (Map.Entry<String, List<String>> entry : ownerMap.entrySet()) {
                b = inventoryDao.findInvByOwnerAndOuIdIsOccupied(entry.getKey(), entry.getValue(), new SingleColumnRowMapper<Boolean>(Boolean.class));
                if (b) {
                    msg = "occupied";
                    return msg;
                }
            }
            for (Map.Entry<String, List<String>> entry : ownerMap.entrySet()) {
                List<InventoryCommand> inventoryCommandList = inventoryDao.findInvByOwnerAndOuId(entry.getKey(), entry.getValue(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
                if (null != inventoryCommandList && inventoryCommandList.size() > 0) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String time = sdf.format(new Date());
                    for (InventoryCommand list : inventoryCommandList) {
                        sb.append(list.getSkuCode()).append("\t").append(list.getLocationCode()).append("\t").append(list.getCustomerCode()).append("\t").append(list.getInvOwner()).append("\t").append(time).append("\t").append(list.getInitQty())
                                .append("\t").append(list.getInventoryStatusName());

                        sb.append("\r\n");
                    }
                }
            }

            Map<String, String> cfg = configManager.getZdhInvFTPConfig();
            boolean flag = false;
            String localDir = cfg.get(Constants.ZHDINV_LOCAL_PATH);
            File dir = new File(localDir);
            if (!dir.exists() && !dir.isDirectory()) {
                dir.mkdirs(); // 创建备份目录
            }

            String fileName = localDir + "//" + zdhPici.getCode() + ".txt";
            if (null != sb && null != sb.toString() && sb.toString().length() > 0) {
                File file = new File(fileName);
                if (file.exists()) {
                    file.delete();
                }
                writeDataToFile(file, sb.toString());
                flag = sendFile(cfg.get(Constants.ZHDINV_FTP_URL), cfg.get(Constants.ZHDINV_FTP_PORT), cfg.get(Constants.ZHDINV_FTP_USERNAME), cfg.get(Constants.ZHDINV_FTP_PASSWORD), cfg.get(Constants.ZHDINV_FTP_UPPATH), fileName, "GBK");
                if (flag) {
                    msg = "success";
                    zdhPici.setMoveStatus(2);
                } else {
                    msg = "uploadError";
                }
            } else {
                msg = "txtError";
            }

        } else {
            msg = "error";
        }

        return msg;

    }

    public static boolean sendFile(String serverName, String port, String username, String password, String path, String localFileName, String ENcoding) {
        boolean success = false;
        // 得到文件名称
        if (localFileName == null || "".equals(localFileName)) {
            return success;
        }
        // 如果路径是\\转化成/
        if (localFileName.indexOf("/") == -1) {
            localFileName = localFileName.replace("\\\\", "\\");
            localFileName = localFileName.replace("\\", "/");
        }
        log.debug("remote path :" + path + ":localFileName:" + localFileName);
        String toFileName = localFileName.substring(localFileName.lastIndexOf("/") == -1 ? 0 : localFileName.lastIndexOf("/") + 1, localFileName.length());
        log.debug("remote path :" + path + ":toFileName:" + toFileName);
        // 连接SFTP
        ChannelSftp sftp = SFTPUtil.connect(serverName, Integer.parseInt(port), username, password);
        try {
            log.debug("ready to send file!");
            if (sftp != null && sftp.isConnected()) {
                // 上传文件
                boolean flag = SFTPUtil.sendFile(path, localFileName, sftp);
                log.debug("send file :" + flag);
                success = flag;
            }
        } catch (Exception e) {
            log.error("", e);
            success = false;
        } finally {
            SFTPUtil.disconnect(sftp);
        }
        return success;
    }


    public String downloadBackUpInv(Long id) {
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        // int downloadStatus = 0;
        try {
            Map<String, String> cfg = configManager.getZdhInvFTPConfig();
            String localPath = cfg.get(Constants.ZHDINV_DOWNLOAD_LOCAL_PATH);
            return localPath + File.separator + zdhPici.getCode() + ".txt";
            /*
             * Map<String, String> cfg = configManager.getZdhInvFTPConfig(); String localPath =
             * cfg.get(Constants.ZHDINV_DOWNLOAD_LOCAL_PATH); File localDir = new File(localPath);
             * if (!localDir.exists()) { localDir.mkdirs(); } if (!localDir.isDirectory()) {
             * localDir.mkdirs(); }
             * 
             * downloadStatus = SFTPUtil.readFile(cfg.get(Constants.ZHDINV_FTP_URL),
             * cfg.get(Constants.ZHDINV_FTP_PORT), cfg.get(Constants.ZHDINV_FTP_USERNAME),
             * cfg.get(Constants.ZHDINV_FTP_PASSWORD), cfg.get(Constants.ZHDINV_FTP_UPPATH),
             * cfg.get(Constants.ZHDINV_DOWNLOAD_LOCAL_PATH), null, false, zdhPici.getCode() +
             * Constants.FILE_EXTENSION_TXT); if (downloadStatus == 0) { return
             * cfg.get(Constants.ZHDINV_DOWNLOAD_LOCAL_PATH) + File.separator + zdhPici.getCode() +
             * Constants.FILE_EXTENSION_TXT; }
             */

        } catch (Exception e) {
            log.error("", e);
        }
        return null;
    }


    public String checkStatusById(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            if (5 != zdhPici.getMoveStatus()) {
                msg = "statusError";
                return msg;
            }
            msg = "success";
        }
        return msg;
    }

    public String backUpStaStatus(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            if (6 != zdhPici.getMoveStatus()) {
                msg = "statusError";
                return msg;
            }
            List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));

            if (null != ZdhList && ZdhList.size() > 0) {
                Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();
                List<String> ouList = null;
                for (ZdhPiciLineCommand zdh : ZdhList) {
                    if (ownerMap.containsKey(zdh.getShopName())) {
                        ouList = (List) ownerMap.get(zdh.getShopName());
                        ouList.add(zdh.getOuName());
                    } else {
                        ouList = new ArrayList<String>();
                        ouList.add(zdh.getOuName());
                        ownerMap.put(zdh.getShopName(), ouList);
                    }

                }

                for (Map.Entry<String, List<String>> map : ownerMap.entrySet()) {
                    staDao.closeSta(map.getKey(), map.getValue());
                }
                zdhPici.setMoveStatus(7);
                msg = "success";
            }
        }
        return msg;
    }

    public String insertToIMById(Long id) {
        String msg = null;
        ZdhPici zdhPici = zdhPiciDao.getByPrimaryKey(id);
        if (null != zdhPici) {
            if (0 == zdhPici.getStatus()) {
                msg = "unavailable";
                return msg;
            }
            List<ZdhPiciLineCommand> ZdhList = zdhPiciLineDao.getWmsZdhPiciLineCommand(id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));

            if (null != ZdhList && ZdhList.size() > 0) {
                Map<String, List<String>> ownerMap = new HashMap<String, List<String>>();
                List<String> ouList = null;
                for (ZdhPiciLineCommand zdh : ZdhList) {
                    if (ownerMap.containsKey(zdh.getShopName())) {
                        ouList = (List) ownerMap.get(zdh.getShopName());
                        ouList.add(zdh.getOuName());
                    } else {
                        ouList = new ArrayList<String>();
                        ouList.add(zdh.getOuName());
                        ownerMap.put(zdh.getShopName(), ouList);
                    }

                }
                for (Map.Entry<String, List<String>> map : ownerMap.entrySet()) {
                    wmsIMOccupiedAndReleaseDao.deleteIMByOwnerAndouId(map.getKey(), map.getValue());

                }
                // 查询
                Boolean falg = false;
                for (Map.Entry<String, List<String>> map : ownerMap.entrySet()) {
                    falg = wmsIMOccupiedAndReleaseDao.findWmsOccupiedAndRelease(map.getKey(), map.getValue(), new SingleColumnRowMapper<Boolean>(Boolean.class));
                    if (null != falg && falg) {
                        msg = "job";
                        return msg;
                    }
                }

                if (!falg) {
                    for (Map.Entry<String, List<String>> map : ownerMap.entrySet()) {
                        wmsIMOccupiedAndReleaseDao.insertWmsOccupiedAndRelease(map.getKey(), map.getValue());
                    }
                    msg = "success";
                    zdhPici.setStatus(0);
                }
            }

        } else {
            msg = "error";
        }

        return msg;
    }


    /**
     * 根据快递单号查询sta
     * 
     * @param trackingNo
     * @return
     */
    public List<StockTransApplicationCommand> findStaListByTrackingNo(Long whId, List<Long> idList, String trackingNo, Sort[] sorts) {
        StaDeliveryInfo info = new StaDeliveryInfo();
        List<Integer> statusList = new ArrayList<Integer>();
        // statusList.add(StockTransApplicationStatus.CHECKED.getValue());
        statusList.add(StockTransApplicationStatus.INTRANSIT.getValue());
        info.setTrackingNo(trackingNo);
        List<Integer> typeList = new ArrayList<Integer>();
        typeList.add(StockTransApplicationType.OUTBOUND_SALES.getValue());
        typeList.add(StockTransApplicationType.OUT_SALES_ORDER_OUTBOUND_SALES.getValue());
        typeList.add(StockTransApplicationType.OUTBOUND_RETURN_REQUEST.getValue());
        List<StockTransApplicationCommand> list = staDao.findSalesStaList(null, null, null, true, null, null, null, whId, idList, statusList, null, null, null, null, typeList, null, null, null, // 16
                null, null, null, trackingNo, false, false, false, null, null, null, null, sorts, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        return list;
    }

    /**
     * 根据作业单查询关联快递单号
     * 
     * @param stacode
     * @return
     */
    public List<String> findRelevanceTrackingno(String stacode) {
        List<String> trackingnos = staDao.findRelevanceTrackingno(stacode, new SingleColumnRowMapper<String>(String.class));
        return trackingnos;
    }

    /**
     * 物流交接单打印-打印状态为有效的交接清单明细
     * 
     * @param handOverList
     * @param ouid
     * @return
     */
    // public JasperPrint printHandOverList(Long holid, Long ouid) {
    // Map<String, Object> parameterMap = new HashMap<String, Object>();
    // List<Object> fieldList = new ArrayList<Object>();
    // List<HandOverListLineCommand> hollist = handOverListLineDao.findLineDetailByHoListId(holid,
    // new BeanPropertyRowMapper<HandOverListLineCommand>(HandOverListLineCommand.class));
    // OperationUnit warehouse = operationUnitDao.getByPrimaryKey(ouid);
    // HandOverList hol = handOverListDao.getByPrimaryKey(holid);
    // if (hol == null) throw new BusinessException(ErrorCode.HAND_OVER_NOT_FOUND);
    // Integer totoalSkuCount = staLineDao.findTotalSkuCountByHoId(hol.getId(), new
    // SingleColumnRowMapper<Integer>(Integer.class));
    // String expName = staDeliveryInfoDao.findExpNameByLpcode(hol.getLpcode(), new
    // SingleColumnRowMapper<String>(String.class));
    // parameterMap = setHandOverListHead(hol, expName, warehouse.getName(), totoalSkuCount);
    // if (!hollist.isEmpty() && hollist.size() != 0) {
    // fieldList = setHandOverListDetail(hollist);
    // JRDataSource ds = new JRBeanCollectionDataSource(fieldList);
    // try {
    // ClasspathJasperPrinter cjp = new ClasspathJasperPrinter(Constants.PRINT_TEMPLATE_FLIENAME +
    // "handOverMenu.jasper");
    // cjp.initializeReport(parameterMap, ds);
    // JasperPrint jpJasperPrint;
    // jpJasperPrint = cjp.print();
    // // JasperPrintManager.printReport(jpJasperPrint, true);
    // return jpJasperPrint;
    // } catch (JasperReportNotFoundException e) {
    // log.debug("handOverMenu.jasper file not found");
    // log.error("", e);
    // return null;
    // } catch (JasperPrintFailureException e) {
    // log.error("", e);
    // }
    // } else {
    // return null;
    // }
    // return null;
    // }

    // 物流交接1
    // private Map<String, Object> setHandOverListHead(HandOverList hol, String expName, String
    // warehouseName, Integer totalCount) {
    // Map<String, Object> map = new HashMap<String, Object>();
    // map.put("sender", hol.getSender());
    // map.put("receiver", expName);
    // map.put("warehouse", warehouseName);
    // map.put("partyAOperator", hol.getPartyAOperator());
    // map.put("partyBOperator", hol.getPartyBOperator());
    // map.put("packageCount", hol.getPackageCount().toString() + " 件");
    // map.put("totalWeight", hol.getTotalWeight().toString() + " kg");
    // map.put("code", hol.getCode());
    // map.put("partyAMobile", hol.getPaytyAMobile());
    // map.put("partyBMobile", hol.getPaytyBMobile());
    // map.put("totalSkuCount", totalCount.toString() + " 件");
    // return map;
    // }

    // 物流交接2
    // private List<Object> setHandOverListDetail(List<HandOverListLineCommand> hollist) {
    // List<Object> list = new ArrayList<Object>();
    // Map<String, Object> map;
    // HandOverListLineCommand h = new HandOverListLineCommand();
    // for (int i = 0; i < hollist.size(); i++) {
    // h = hollist.get(i);
    // map = new HashMap<String, Object>();
    // map.put("column_count", i + 1);
    // map.put("trackingNo", h.getTrackingNo());
    // map.put("barcode", h.getBarcode());
    // map.put("refCode", h.getRefSlipCode());
    // map.put("receiveUser", h.getReceiver());
    // map.put("weight", h.getWeight().toString());
    // map.put("operatorTime", h.getOutboundTime() == null ? null : h.getOutboundTime().toString());
    // map.put("skuCount", h.getQuantity().toString());
    // list.add(map);
    // }
    // return list;
    // }

    public HandOverList handoverListhandOver(HandOverList handOverList, Long userId) {
        HandOverList ho = handOverListDao.getByPrimaryKey(handOverList.getId());
        User user = userDao.getByPrimaryKey(userId);
        if (user == null) {
            throw new BusinessException(ErrorCode.USER_NOT_FOUND);
        }
        if (ho == null) {
            throw new BusinessException(ErrorCode.HAND_OVER_NOT_FOUND);
        }
        if (DefaultStatus.FINISHED.getValue() == ho.getStatus().getValue()) {
            throw new BusinessException(ErrorCode.HAND_OVER_LIST_IS_FINISHED, new Object[] {ho.getId()});
        }

        ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey("handOverCheckStatus", "isTrue");
        if (op != null) {// 开关
            if ("YES".equals(op.getOptionValue())) {
                // 根据hoId查询所有的PackageInfoCommand
                List<PackageInfoCommand> lines = packageInfoDao.findPgCommandByHoIdOrStaId(ho.getId(), null, new BeanPropertyRowMapperExt<PackageInfoCommand>(PackageInfoCommand.class));
                for (PackageInfoCommand packageInfoCommand : lines) {
                    Set<Integer> set = new HashSet<Integer>();
                    List<PackageInfoCommand> ps = packageInfoDao.findPgCommandByStaId(packageInfoCommand.getStaId(), new BeanPropertyRowMapperExt<PackageInfoCommand>(PackageInfoCommand.class));
                    for (PackageInfoCommand p : ps) {
                        if (5 == p.getPgStatus() || 10 == p.getPgStatus()) {
                            set.add(1);
                        } else {
                            set.add(2);
                        }
                    }
                    if (set.size() == 1) {
                        StockTransApplication sta = staDao.getByPrimaryKey(packageInfoCommand.getStaId());
                        if (3 == sta.getStatus().getValue()) {// 已核对
                            log.error("交接 error staid=" + packageInfoCommand.getStaId());
                            throw new BusinessException("");
                        }
                    }
                }
                // ////
            }
        }

        ho.setHandOverTime(new Date());
        ho.setLastModifyTime(new Date());
        ho.setOperator(user);
        ho.setStatus(HandOverListStatus.FINISHED);
        ho.setPartyAOperator(handOverList.getPartyAOperator());
        ho.setPartyBOperator(handOverList.getPartyBOperator());
        ho.setPaytyBPassPort(handOverList.getPaytyBPassPort());
        ho.setPaytyAMobile(handOverList.getPaytyAMobile());
        ho.setPaytyBMobile(handOverList.getPaytyBMobile());
        handOverListDao.save(ho);
        // 更新当前交接清单里面关联的pagckageInfo 状态 为完成 原始
        packageInfoDao.updateStatusByHandOverListId2(ho.getId(), PackageInfoStatus.FINISHED.getValue());
        // 更新当前交接清单里面关联的pagckageInfo 状态 为完成
        packageInfoDao.updateStatusByHandOverListId(ho.getId(), PackageInfoStatus.FINISHED.getValue());
        packageInfoDao.flush();
        Set<Long> set = new HashSet<Long>();
        // 查询该交接单中全部完成的作业单(原始逻辑)
        List<StockTransApplication> finishStaList3 = staDao.findAllHandStaByHandList2(ho.getId(), PackageInfoStatus.FINISHED.getValue(), new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        // 查询该交接单中全部完成的作业单
        List<StockTransApplication> finishStaList = staDao.findAllHandStaByHandList(ho.getId(), PackageInfoStatus.FINISHED.getValue(), new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        // o2o查询出关联的staId
        List<StockTransApplication> finishStaList2 = staDao.findAllHandStaByHandListO2O(ho.getId(), PackageInfoStatus.FINISHED.getValue(), new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        for (StockTransApplication stockTransApplication : finishStaList) {
            set.add(stockTransApplication.getId());
        }
        for (StockTransApplication stockTransApplication2 : finishStaList2) {
            set.add(stockTransApplication2.getId());
        }
        for (StockTransApplication stockTransApplication3 : finishStaList3) {
            set.add(stockTransApplication3.getId());
        }
        for (Long id : set) {
            // }
            // for (StockTransApplication sta : finishStaList) {
            StockTransApplication sta1 = staDao.getByPrimaryKey(id);
            sta1.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta1.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId, sta1.getMainWarehouse().getId());
            sta1.setFinishTime(new Date());
            sta1.setLastModifyTime(new Date());
            staDao.save(sta1);
            // 是否合并单
            if (null != sta1.getIsMerge() && true == sta1.getIsMerge()) {
                // 设置合单情况下，子单状态
                List<StockTransApplication> list = staDao.findGroupStaList(sta1.getId());
                if (list != null && list.size() > 0) {
                    for (StockTransApplication bean : list) {
                        bean.setStatus(StockTransApplicationStatus.FINISHED);
                        // 订单状态与账号关联
                        whInfoTimeRefDao.insertWhInfoTime2(bean.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId, bean.getMainWarehouse().getId());
                        bean.setFinishTime(new Date());
                        bean.setLastModifyTime(new Date());
                        staDao.save(bean);
                    }
                } else {
                    throw new BusinessException(ErrorCode.CHILD_STA_NOT_FOUND, new Object[] {sta1.getCode()});
                }
            }
        }
        HandOverListCommand cmdHo = new HandOverListCommand();
        org.springframework.beans.BeanUtils.copyProperties(ho, cmdHo);
        cmdHo.setModifier(null);
        cmdHo.setOu(null);
        cmdHo.setLines(null);
        return cmdHo;
    }

    /**
     * 自动化仓完成交接
     */
    public HandOverList autoWhHandoverListhandOver(HandOverList handOverList, Long userId) {
        HandOverList ho = handOverListDao.getByPrimaryKey(handOverList.getId());
        User user = userDao.getByPrimaryKey(userId);
        if (user == null) {
            throw new BusinessException(ErrorCode.USER_NOT_FOUND);
        }
        if (ho == null) {
            throw new BusinessException(ErrorCode.HAND_OVER_NOT_FOUND);
        }
        if (DefaultStatus.FINISHED.getValue() == ho.getStatus().getValue()) {
            throw new BusinessException(ErrorCode.HAND_OVER_LIST_IS_FINISHED, new Object[] {ho.getId()});
        }

        ho.setHandOverTime(new Date());
        ho.setLastModifyTime(new Date());
        ho.setOperator(user);
        ho.setStatus(HandOverListStatus.FINISHED);
        ho.setPartyAOperator(handOverList.getPartyAOperator());
        ho.setPartyBOperator(handOverList.getPartyBOperator());
        ho.setPaytyBPassPort(handOverList.getPaytyBPassPort());
        ho.setPaytyAMobile(handOverList.getPaytyAMobile());
        ho.setPaytyBMobile(handOverList.getPaytyBMobile());
        handOverListDao.save(ho);
        // 更新当前交接清单里面关联的pagckageInfo 状态 为完成
        packageInfoDao.updateStatusByHandOverListId(ho.getId(), PackageInfoStatus.FINISHED.getValue());
        // packageInfoDao.flush();

        // 自动化仓交接，作业单状态刷完成
        outBoundPackDao.updateStaFinishByHoList(ho.getId());
        // 自动化仓记录 订单触发时间
        outBoundPackDao.insertTimeRefByHoList(ho.getId(), user.getId());
        // 自动化仓交接，合并订单状态刷完成
        outBoundPackDao.updateMergeStaFinishByHoList(ho.getId());
        // 自动化仓记录 合并订单触发时间
        outBoundPackDao.insertMergeTimeRefByHoList(ho.getId(), user.getId());

        HandOverListCommand cmdHo = new HandOverListCommand();
        org.springframework.beans.BeanUtils.copyProperties(ho, cmdHo);
        cmdHo.setModifier(null);
        cmdHo.setOu(null);
        cmdHo.setLines(null);
        return cmdHo;
    }

    public List<WarehouseDataCommand> getWarehouseData(Long ouId) {
        List<WarehouseDataCommand> list = null;
        // 获取登陆组织类型
        String organiseType = operationUnitDao.getByPrimaryKey(ouId).getOuType().getName();
        if (organiseType.equals(OperationUnitType.OUTYPE_COMPANY)) {
            list = inventoryDao.getWarehouseDataByCompany(ouId, new BeanPropertyRowMapper<WarehouseDataCommand>(WarehouseDataCommand.class));
        } else if (organiseType.equals(OperationUnitType.OUTYPE_WAREHOUSE)) {
            list = inventoryDao.getWarehouseDataByWarehouse(ouId, new BeanPropertyRowMapper<WarehouseDataCommand>(WarehouseDataCommand.class));
        }
        return list;
    }

    /**
     * 物流交接清单查询
     */
    public Pagination<HandOverListCommand> findHandOverListByPage(int start, int pageSize, Long ouid, HandOverListCommand hol, Sort[] sorts) {
        if (hol != null) {
            hol.setQueryLikeParam();
        } else {
            hol = new HandOverListCommand();
        }
        return handOverListDao.findHoList(start, pageSize, ouid, hol.getTrackingNo(), hol.getCode(), hol.getHoIntStatus(), hol.getLpcode(), hol.getPartyAOperator(), hol.getPaytyBPassPort(), hol.getPartyBOperator(), hol.getPaytyAMobile(),
                hol.getCreateStratTime(), hol.getCreateEndTime(), hol.getHandOverStartTime(), hol.getHandOverEndTime(), sorts, new BeanPropertyRowMapper<HandOverListCommand>(HandOverListCommand.class));
    }

    @Transactional(readOnly = true)
    public OperationUnit findCompanyOUByOperationsCenterId(Long opId) {
        return operationUnitDao.getByPrimaryKey(opId).getParentUnit();
    }

    @Transactional(readOnly = true)
    public OperationUnit findCompanyOUByWarehouseId(Long whId) {
        return operationUnitDao.getByPrimaryKey(whId).getParentUnit().getParentUnit();
    }

    public List<InventoryStatus> findInvStatusByOuid(Long ouid) {
        List<InventoryStatus> list = inventoryStatusDao.findInvStatusByOuid(ouid);
        List<InventoryStatus> result = new ArrayList<InventoryStatus>();
        for (InventoryStatus each : list) {
            InventoryStatusCommand coc = new InventoryStatusCommand();
            try {
                org.springframework.beans.BeanUtils.copyProperties(each, coc);
                result.add(coc);
            } catch (Exception e) {
                log.error("Copy Bean properties error for InventoryStatus");
                log.error("", e);
                throw new RuntimeException("Copy Bean properties error for InventoryStatus");
            }
        }
        return result;

    }

    public List<StaLineCommand> findOccpiedStaLineForSkuPackageByPlId(Long plid, Long skuId, Sort[] sorts) {
        return staLineDao.findOccpiedStaLineForPgSkuByPlId(plid, skuId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class), sorts);
    }

    /**
     * 获取SKU数量
     * 
     * @param barcode
     * @param jmcode
     * @param keyProperties
     * @return
     */
    public int findCountSkuByParameter(String barcode, String jmcode, String keyProperties, Long customerId) {
        List<Sku> list = skuDao.findCountSkuByParameter(barcode, jmcode, keyProperties, customerId);
        return list.size();
    }


    public List<InventoryStatus> findInvStatusByInventory(Long ttId, Long ouid, String locationCode, Long skuId, String owner) {
        // 库位是否存在
        WarehouseLocation loc = warehouseLocationDao.findLocationByCode(locationCode, ouid);
        if (loc == null) {
            throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {locationCode});
        }
        // 作业类型是否存在
        TransactionType tt = transactionTypeDao.getByPrimaryKey(ttId);
        if (tt == null) {
            throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND);
        }
        // 库位不支持作业类型
        loc = warehouseLocationDao.findByTransactionType(locationCode, ouid, ttId);
        if (loc == null) {
            throw new BusinessException(ErrorCode.WH_LOCATION_NO_TRANSACTION_TYPE, new Object[] {locationCode, tt.getName()});
        }
        List<InventoryStatus> list = inventoryStatusDao.findListByInventory(ttId, ouid, skuId, loc.getId(), owner, new BeanPropertyRowMapper<InventoryStatus>(InventoryStatus.class));
        if (list == null || list.size() == 0) {
            Sku sku = skuDao.getByPrimaryKey(skuId);
            throw new BusinessException(ErrorCode.WH_LOCATION_NO_SKU_FOUND, new Object[] {loc.getCode(), sku.getBarCode()});
        }
        return list;
    }

    public StockTransApplication createOthersInOrOutBoundSta(String slipCode, boolean isExcel, Long ttId, User user, StaDeliveryInfo stadelivery, OperationUnit ou, String owner, String memo, List<StvLineCommand> stvLineCmd, boolean execute, String sns)
            throws Exception {
        TransactionType transactionType = createOthersInOrOutBoundStaTransTypeValidate(ttId);
        // create sta
        whExe.validateBiChannelSupport(null, owner);
        StockTransApplication sta = new StockTransApplication();
        sta.setMainWarehouse(ou);
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        sta.setCreateTime(new Date());
        sta.setLastModifyTime(new Date());
        sta.setStatus(StockTransApplicationStatus.CREATED);
        if (TransactionDirection.INBOUND.getValue() == transactionType.getDirection().getValue()) {
            sta.setType(StockTransApplicationType.INBOUND_OTHERS);
            sta.setIsNeedOccupied(false);
        } else {
            sta.setType(StockTransApplicationType.OUTBOUND_OTHERS);
            sta.setIsNeedOccupied(true);
        }
        sta.setCreator(user);
        sta.setOwner(owner);
        sta.setMemo(memo);
        log.debug("sta slip code is : {}", slipCode);
        sta.setRefSlipCode(slipCode);
        sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));
        sta.setIsNotPacsomsOrder(true);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), user.getId(), ou.getId());
        // create stv
        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        stv.setCreator(user);
        stv.setCreateTime(new Date());
        stv.setDirection(transactionType.getDirection());
        stv.setOwner(owner);
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setLastModifyTime(new Date());
        stv.setWarehouse(ou);
        stv.setCode(sta.getCode() + "01");
        stv.setTransactionType(transactionType);
        stv.setSta(sta);
        staDao.save(sta);
        if (sta.getType().equals(StockTransApplicationType.OUTBOUND_OTHERS) && stadelivery != null) {
            StaDeliveryInfo staDeliveryInfo = new StaDeliveryInfo();
            staDeliveryInfo.setId(sta.getId());
            staDeliveryInfo.setCountry("中国");
            staDeliveryInfo.setProvince(stadelivery.getProvince());
            staDeliveryInfo.setCity(stadelivery.getCity());
            staDeliveryInfo.setDistrict(stadelivery.getDistrict());
            staDeliveryInfo.setAddress(stadelivery.getAddress());
            staDeliveryInfo.setReceiver(stadelivery.getReceiver());
            staDeliveryInfo.setTelephone(stadelivery.getTelephone());
            staDeliveryInfo.setMobile(stadelivery.getTelephone());
            staDeliveryInfo.setLastModifyTime(new Date());
            staDeliveryInfoDao.save(staDeliveryInfo);
        }
        stvDao.save(stv);
        // create sta line and stv line
        List<StvLine> stvLineList = new ArrayList<StvLine>();
        List<StaLine> staLineList = new ArrayList<StaLine>();
        Map<String, StaLine> listMap = new HashMap<String, StaLine>();
        String batchCode = Long.valueOf(new Date().getTime()).toString();
        for (StvLineCommand cmd : stvLineCmd) {
            Sku sku = null;
            WarehouseLocation loc = null;
            InventoryStatus status = null;
            if (isExcel) {
                sku = cmd.getSku();
                loc = cmd.getLocation();
                status = cmd.getInvStatus();
            } else {
                sku = skuDao.getByPrimaryKey(cmd.getSkuId());
                if (sku == null) {
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {""});
                }
                loc = warehouseLocationDao.findLocationByCode(cmd.getLocationCode(), ou.getId());
                if (loc == null) {
                    throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {cmd.getLocationCode()});
                }
                status = inventoryStatusDao.getByPrimaryKey(cmd.getInvStatus().getId());
                if (status == null) {
                    throw new BusinessException(ErrorCode.INVENTORY_STATUS_NOT_FOUND);
                }
            }
            // create sta line
            StaLine staLine = null;
            String key = sku.getId() + "_" + status.getId();
            if (listMap.containsKey(key)) {
                staLine = listMap.get(key);
                staLine.setQuantity(staLine.getQuantity() + cmd.getQuantity());
                staLineDao.save(staLine);
            } else {
                staLine = new StaLine();
                staLine.setInvStatus(status);
                staLine.setOwner(owner);
                staLine.setQuantity(cmd.getQuantity());
                staLine.setSku(sku);
                staLine.setSkuCost(cmd.getSkuCost() == null ? new BigDecimal(0) : cmd.getSkuCost());
                staLine.setSta(sta);
                staLineList.add(staLine);
                staLine = staLineDao.save(staLine);
                listMap.put(key, staLine);
            }

            // create stv line
            StvLine stvLine = new StvLine();
            stvLine.setBatchCode(batchCode);
            stvLine.setDirection(transactionType.getDirection());
            stvLine.setDistrict(loc.getDistrict());
            stvLine.setLocation(loc);
            stvLine.setOwner(owner);
            stvLine.setQuantity(cmd.getQuantity());
            stvLine.setSku(sku);
            stvLine.setSkuCost(cmd.getSkuCost() == null ? new BigDecimal(0) : cmd.getSkuCost());
            stvLine.setTransactionType(transactionType);
            stvLine.setWarehouse(ou);
            stvLine.setInvStatus(status);
            stvLine.setStv(stv);
            stvLine.setStaLine(staLine);
            stvLine.setProductionDate(cmd.getProductionDate());
            stvLine.setValidDate(cmd.getValidDate());
            stvLine.setExpireDate(cmd.getExpireDate());
            stvLineList.add(stvLine);
        }
        stv.setStvLines(stvLineList);
        // 出库占用库存
        if (TransactionDirection.OUTBOUND.getValue() == transactionType.getDirection().getValue()) {
            // 占用库存之前 判断库存是否足够
            staDao.flush();
            wmExecute.valdateOutBoundLocationIsGI(stv);
            isInventoryNumber(sta.getId());
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("in_sta_id", sta.getId());
            SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
            SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
            Map<String, Object> result = staDao.executeSp("sp_occ_inv_for_others_out", sqlParameters, params);
            String errorSku = (String) result.get("error_sku_id");
            BusinessException root = null;
            if (StringUtils.hasText(errorSku)) {
                String[] skus = errorSku.split(",");
                for (String str : skus) {
                    String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                    Long skuId = Long.parseLong(strs[0]);
                    Long qty = Long.parseLong(strs[1]);
                    if (root == null) {
                        root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                    }
                    BusinessException current = root;
                    while (current.getLinkedException() != null) {
                        current = current.getLinkedException();
                    }
                    Sku sku = skuDao.getByPrimaryKey(skuId);
                    BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                    current.setLinkedException(be);
                }
                throw root;
            }
            // 新增其他出库占用明细记录中间表通知oms/pac,定时任务通知
            createWmsOtherOutBoundInvNoticeOms(sta.getId(), 2l, WmsOtherOutBoundInvNoticeOmsStatus.OTHER_OUTBOUND);

            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), user.getId(), sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            staDao.flush();
            staDao.updateSkuQtyById(sta.getId());
            stvLineDao.deleteByStvId(stv.getId());
            stvLineDao.createForCrossByStaId(sta.getId());
            /***** mongoDB库存变更添加逻辑 ******************************/
            try {
                eventObserver.onEvent(new TransactionalEvent(sta));
            } catch (BusinessException e) {
                throw e;
            }
            sta.setStatus(StockTransApplicationStatus.OCCUPIED);

            /***** mongoDB库存变更添加逻辑 ******************************/

        }
        if (execute) {
            othersStaInOutbound(sta.getId(), user.getId(), ou.getId(), sns);
        }
        staDao.flush();
        staDao.updateSkuQtyById(sta.getId());
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return sta;
    }

    public StockTransApplication createPredefinedIn(boolean isExcel, Long type, User user, OperationUnit ou, String owner, String memo, List<StaLineCommand> staLineCmd) throws Exception {
        // create sta
        log.debug("===========createPredefinedIn=============");
        if (type == null
                || (StockTransApplicationType.INBOUND_CONSIGNMENT.getValue() != type && StockTransApplicationType.INBOUND_GIFT.getValue() != type && StockTransApplicationType.INBOUND_MOBILE.getValue() != type && StockTransApplicationType.INBOUND_SETTLEMENT
                        .getValue() != type)) {
            throw new BusinessException(ErrorCode.PREDEFINED_STA_TYPE_INCORRECT);
        }
        whExe.validateBiChannelSupport(null, owner);
        StockTransApplication sta = new StockTransApplication();
        TransactionType transactionType = null;
        if (StockTransApplicationType.INBOUND_CONSIGNMENT.getValue() == type) {
            sta.setType(StockTransApplicationType.INBOUND_CONSIGNMENT);
            transactionType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CONSIGNMENT_INBOUND);
        } else if (StockTransApplicationType.INBOUND_SETTLEMENT.getValue() == type) {
            sta.setType(StockTransApplicationType.INBOUND_SETTLEMENT);
            transactionType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_SETTLEMENT_INBOUND);
        } else if (StockTransApplicationType.INBOUND_MOBILE.getValue() == type) {
            sta.setType(StockTransApplicationType.INBOUND_MOBILE);
            transactionType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_MOBILE_INBOUND);
        } else if (StockTransApplicationType.INBOUND_GIFT.getValue() == type) {
            sta.setType(StockTransApplicationType.INBOUND_GIFT);
            transactionType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_GIFT_INBOUND);
        }
        if (transactionType == null) {
            throw new BusinessException(ErrorCode.PREDEFINED_TRANSACTION_TYPE_INCORRECT);
        }
        sta.setMainWarehouse(ou);
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        sta.setCreateTime(new Date());
        sta.setLastModifyTime(new Date());
        sta.setStatus(StockTransApplicationStatus.CREATED);
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), user.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), user.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        }
        sta.setIsNeedOccupied(false);
        sta.setCreator(user);
        sta.setOwner(owner);
        sta.setMemo(memo);
        if (StockTransApplicationType.INBOUND_SETTLEMENT == sta.getType() || StockTransApplicationType.INBOUND_CONSIGNMENT == sta.getType() || StockTransApplicationType.INBOUND_MOBILE == sta.getType()) {
            sta.setIsNotPacsomsOrder(true);
        }

        sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));
        staDao.save(sta);
        List<StaLine> staLineList = new ArrayList<StaLine>();
        for (StaLineCommand cmd : staLineCmd) {
            Sku sku = null;
            InventoryStatus status = null;
            if (isExcel) {
                sku = cmd.getSku();
                status = cmd.getInvStatus();
            } else {
                sku = skuDao.getByPrimaryKey(cmd.getSkuId());
                if (sku == null) {
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {""});
                }
                status = inventoryStatusDao.getByPrimaryKey(cmd.getInvStatus().getId());
                if (status == null) {
                    throw new BusinessException(ErrorCode.INVENTORY_STATUS_NOT_FOUND);
                }
            }
            // create sta line
            StaLine staLine = new StaLine();
            staLine.setInvStatus(status);
            staLine.setOwner(owner);
            staLine.setQuantity(cmd.getQuantity());
            staLine.setCompleteQuantity(0L);
            staLine.setSku(sku);
            staLine.setSkuCost(cmd.getSkuCost() == null ? new BigDecimal(0) : cmd.getSkuCost());
            staLine.setSta(sta);
            staLineList.add(staLine);
            staLine = staLineDao.save(staLine);
            // create stv line
        }
        staDao.flush();
        staDao.updateSkuQtyById(sta.getId());
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return sta;
    }

    /**
     * Validate TransactionType
     * 
     * @param typeId
     * @return
     */
    private TransactionType createOthersInOrOutBoundStaTransTypeValidate(Long typeId) {
        TransactionType transactionType = transactionTypeDao.getByPrimaryKey(typeId);
        if (transactionType == null) {
            throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND);
        }
        if (transactionType.getIsSystem()) {
            throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_IS_SYSTEM, new Object[] {transactionType.getName()});
        }
        return transactionType;
    }

    public Long findSnSkuQtyByStaId(Long staID, Long ouid) {
        return snDao.findSnSkuQtyByStaId(staID, ouid, new SingleColumnRowMapper<Long>(Long.class));
    }

    public void othersStaInOutbound(Long staId, Long userId, Long ouid, String sns) throws Exception {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (null == stv) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        if (sta.getType().equals(StockTransApplicationType.INBOUND_OTHERS)) {
            List<StvLine> list = stv.getStvLines();
            for (StvLine s : list) {
                // 判断库位是否支持作业另类型
                WarehouseLocation loc = s.getLocation();
                // 判断批次混放的商品是否在库位上已经存在
                Sku sku = s.getSku();
                if (sku.getSalesMode().equals(SkuSalesModel.PAYMENT)) {
                    throw new BusinessException(ErrorCode.EXCEL_IMPORT_SALE_MODE_ERROR, new Object[] {sku.getCode(), sku.getBarCode()});
                }
                if (sku.getStoremode() != null && sku.getStoremode().equals(InboundStoreMode.RESPECTIVE)) {
                    Long l = skuDao.findSkuOnLoaction(s.getSku().getId(), loc.getId(), new SingleColumnRowMapper<Long>(Long.class));
                    if (l != null) {
                        throw new BusinessException(ErrorCode.EXE_SKU_TOGETHER_LOC_IS_SKU, new Object[] {s.getSku().getCode(), loc.getCode(), s.getSku().getCode()});
                    }
                }
            }
        } else if (sta.getType().equals(StockTransApplicationType.OUTBOUND_OTHERS)) {
            Warehouse wh = warehouseDao.getByOuId(ouid);
            if (wh.getIsNeedWrapStuff() != null && wh.getIsNeedWrapStuff()) {
                List<StaAdditionalLine> temp = staAdditionalLineDao.findByStaId(sta.getId());
                if (temp == null || temp.size() == 0) {
                    throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF);
                }
            }
        }
        User user = userId == null ? null : userDao.getByPrimaryKey(userId);
        stv.setOperator(user);
        stvDao.save(stv);
        stvDao.flush();
        Map<String, Long> staLineskuQtyMap = staLineDao.findIsSnSkuQtyByStaId(staId, ouid, new MapRowMapper());
        isHaveException(sta, stv, user, userId);
        if (staLineskuQtyMap == null) staLineskuQtyMap = new HashMap<String, Long>();
        if ((!staLineskuQtyMap.isEmpty()) && staLineskuQtyMap.size() > 0) { // 含SN号SKU
            Map<String, Long> SNskuQtyMap = snDao.findIsSnSkuQtyByStvId(stv.getId(), ouid, new MapRowMapper());
            if (SNskuQtyMap == null) SNskuQtyMap = new HashMap<String, Long>();
            if ((!SNskuQtyMap.isEmpty()) && SNskuQtyMap.size() > 0) {
                Set<String> skucodes = staLineskuQtyMap.keySet();
                List<String> errorSku = new ArrayList<String>();
                for (String codes : skucodes) {
                    if (!(staLineskuQtyMap.get(codes)).equals(SNskuQtyMap.get(codes))) errorSku.add(codes);
                }
                if (!errorSku.isEmpty() && errorSku.size() > 0) throw new BusinessException(ErrorCode.SNSKU_QTY_NOTEQUAL_LINESKU_QTY, new Object[] {errorSku.toString()});
            }
            if (TransactionDirection.INBOUND.getValue() == stv.getTransactionType().getDirection().getValue()) {
                // 入库
                String batchCode = snDao.findBatchCodeByStv(stv.getId(), new SingleColumnRowMapper<String>(String.class));
                snLogDao.createInboundLogByStvIdSql(stv.getId(), batchCode);
                snDao.updateInboundByStvIdSql(stv.getId(), SkuSnStatus.USING.getValue(), batchCode);
                othersStaInbound(stv, user);
            } else {
                // 出库
                snLogDao.createOutboundByStvIdSql(stv.getId());
                snDao.deleteSNByStvIdSql(stv.getId());
                othersStaOutbound(sta, stv, user);
            }
        } else { // 不含SN号SKU
            if (TransactionDirection.INBOUND.getValue() == stv.getTransactionType().getDirection().getValue()) {
                // 入库
                othersStaInbound(stv, user);
            } else {
                // 出库
                othersStaOutbound(sta, stv, user);
            }
        }
    }

    public void isHaveException(StockTransApplication sta, StockTransVoucher stv, User user, Long userId) throws Exception {
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (StockTransApplicationType.INBOUND_OTHERS.getValue() == sta.getType().getValue()) {
            if (sta.getStatus().getValue() != StockTransApplicationStatus.CREATED.getValue()) {
                throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
            }
        } else if (sta.getStatus().getValue() != StockTransApplicationStatus.OCCUPIED.getValue()) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        if (stv == null) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        // if (user == null) {
        // throw new BusinessException(ErrorCode.USER_NOT_FOUND, new Object[] {
        // userId });
        // }
    }

    private void othersStaInbound(StockTransVoucher stv, User user) throws Exception {
        // business_exception_stv_10101=作业明细单的状态错误,已被其他用户修改
        if (!StockTransVoucherStatus.CREATED.equals(stv.getStatus())) {
            throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
        }
        List<StvLine> stvLine = stvLineDao.findStvLineListByStvId(stv.getId());
        Date date = new Date();
        String batchCode = Long.valueOf(date.getTime()).toString();
        for (int i = 0; i < stvLine.size(); i++) {
            StvLine line = stvLine.get(i);
            line.setBatchCode(batchCode);
            line.setInBoundTime(date);
            stvLineDao.save(line);
        }
        stvLineDao.flush();
        // 校验商品库位存放规则
        volidateInboundLocation(stv, stvLine, false, true);
        whExe.validateBiChannelSupport(stv, null);
        stv.setStatus(StockTransVoucherStatus.FINISHED);
        stv.setLastModifyTime(new Date());
        stv.setFinishTime(new Date());
        stv.setOperator(user);
        stvDao.save(stv);
        stvDao.flush();
        // 调用存储过程
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_ou_id", stv.getWarehouse().getId());
        params.put("in_stv_id", stv.getId());
        params.put("in_com_id", findCompanyOUByWarehouseId(stv.getWarehouse().getId()).getId());
        params.put("is_in_cost", stv.getTransactionType().getIsInCost() ? 1 : 0);
        SqlParameter[] sqlParameters = {new SqlParameter("in_ou_id", Types.NUMERIC), new SqlParameter("in_stv_id", Types.NUMERIC), new SqlParameter("in_com_id", Types.NUMERIC), new SqlParameter("is_in_cost", Types.NUMERIC)};
        inventoryDao.executeSp("sp_insert_inventory", sqlParameters, params);
        staLineDao.updateCompleteQuantityByStaId(stv.getSta().getId());
        updateSTAForPurchase(stv.getSta().getId(), user, true);
        // inboundNoticePAC
        StockTransApplication sta = stv.getSta();
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        createWmsOtherOutBoundInvNoticeOms(sta.getId(), 10l, WmsOtherOutBoundInvNoticeOmsStatus.OTHER_INBOUND);// 2为占用、10为完成、17为取消、20为作废
        /***** mongoDB库存变更添加逻辑 ******************************/
        try {
            eventObserver.onEvent(new TransactionalEvent(stv));
        } catch (BusinessException e) {
            throw e;
        }
    }

    private void othersStaOutbound(StockTransApplication sta, StockTransVoucher stv, User user) {
        removeInventory(sta, stv);
        whExe.validateBiChannelSupport(stv, null);
        stv.setStatus(StockTransVoucherStatus.FINISHED);
        stv.setLastModifyTime(new Date());
        stv.setOperator(user);
        stvDao.save(stv);
        sta.setIsNeedOccupied(false);
        sta.setOutboundOperator(user);
        sta.setStatus(StockTransApplicationStatus.FINISHED);
        // 订单状态与账号关联
        if (user != null) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode() == null ? sta.getCode() : sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), user.getId(), sta.getMainWarehouse() == null ? null : sta
                    .getMainWarehouse().getId());
        }
        sta.setFinishTime(new Date());
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        // 其他出库更新中间表，传递明细给oms/pac
        WmsOtherOutBoundInvNoticeOms wto = wmsOtherOutBoundInvNoticeOmsDao.findOtherOutInvNoticeOmsByStaCode(sta.getCode());
        if (wto != null) {
            wmsOtherOutBoundInvNoticeOmsDao.updateOtherOutBoundInvNoticeOmsByStaCode(sta.getCode(), 10l);
        }
        // // 同步 k3
        // soTaskRegister.registTask(stv);
    }

    /***
     * 库存日志查询
     */
    public Pagination<StockTransTxLogCommand> findStockTransTxLogByPage(int start, int pageSize, StockTransTxLogCommand stock, Long whouid, Long companyid, Sort[] sorts) {
        if (stock != null) {
            stock.setQueryLikeParam();
        } else {
            stock = new StockTransTxLogCommand();
        }
        // Date startTime = stock.getStockStartTime();
        // Date endTime = stock.getStockEndTime();
        // if (null != startTime && null != endTime) {
        // if (endTime.getTime() > startTime.getTime()) {
        // Long days = ((endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60 * 24L));
        // if (186 <= days) {
        // throw new BusinessException(ErrorCode.QUERY_INVENTORY_LOG_MUST_IN_ONE_MONTH);
        // }
        // }
        // }
        if ("".equals(stock.getInvStatus())) stock.setInvStatus(null);
        return stockTransTxLogDao.findStockTransTxLogList(start, pageSize, stock.getInventoryCheckCode(), stock.getDistrictCode(), stock.getLocationCode(), stock.getStockStartTime(), stock.getStockEndTime(), stock.getTransactionTypeid(),
                stock.getStaCode(), stock.getOperator(), stock.getBarCode(), stock.getJmCode(), stock.getSkuCode(), stock.getSkuName(), stock.getOwner(), whouid, companyid, stock.getRefSlipCode(), stock.getSupplierCode(), stock.getInvStatus(), sorts,
                new BeanPropertyRowMapper<StockTransTxLogCommand>(StockTransTxLogCommand.class));
    }

    public Pagination<StockTransApplicationCommand> findElseComeInAndGoOut(int start, int pageSize, Long whOuId, Date createDate, Date endCreateDate, Date startDate, Date offStartDate, StockTransApplicationCommand staCommand, Sort[] sorts) {
        String code = null;
        String owner = null;
        Integer status = null;
        Integer transaction = null;
        String slipCode = null;
        if (staCommand != null) {
            if (StringUtils.hasText(staCommand.getCode())) {
                code = staCommand.getCode() + "%";
            }
            if (StringUtils.hasText(staCommand.getOwner())) {
                owner = staCommand.getOwner() + "%";
            }
            if (staCommand.getStatus() != null) {
                status = staCommand.getStatus().getValue();
            }
            if (staCommand.getTransaction() != null && staCommand.getTransaction() != 0) {
                transaction = staCommand.getTransaction();
            }
            if (StringUtils.hasText(staCommand.getRefSlipCode())) {
                slipCode = "%" + staCommand.getRefSlipCode() + "%";
            }
        }
        return staDao.findElseComeInAndGoOut(start, pageSize, slipCode, whOuId, createDate, endCreateDate, startDate, offStartDate, code, owner, status, transaction, new BeanPropertyRowMapper<StockTransApplicationCommand>(
                StockTransApplicationCommand.class), sorts);
    }

    // vmi 转店
    public Pagination<StockTransApplicationCommand> findVMITransferStaPage(int start, int pagesize, Long whOuId, Long companyid, Date createDate, Date endCreateDate, Date startDate, Date offStartDate, StockTransApplicationCommand staCommand, Sort[] sorts) {
        String code = null;
        String owner = null;
        String creater = null;
        String operator = null;
        Integer status = null;
        if (staCommand != null) {
            if (StringUtils.hasText(staCommand.getCode())) {
                code = staCommand.getCode() + "%";
            }
            if (StringUtils.hasText(staCommand.getOwner())) {
                owner = staCommand.getOwner() + "%";
            }
            if (StringUtils.hasText(staCommand.getCreater())) {
                creater = "%" + staCommand.getCreater() + "%";
            }
            if (StringUtils.hasText(staCommand.getOperator())) {
                operator = "%" + staCommand.getOperator() + "%";
            }
            if (staCommand.getStatus() != null) {
                status = staCommand.getStatus().getValue();
            }
        }
        return staDao.findVMITransferStaPage(start, pagesize, whOuId, companyid, createDate, endCreateDate, startDate, offStartDate, code, owner, creater, operator, status, StockTransApplicationType.VMI_OWNER_TRANSFER.getValue(),
                new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    public Pagination<StockTransApplicationCommand> findVMIReturnSta(int start, int pageSize, Long ouid, Date startTime, Date endTime, StockTransApplicationCommand staCommand, Sort[] sorts) {
        Integer status = null;
        String code = null;
        String owner = null;
        String refSlipCode = null;
        String slipCode2 = null;
        if (staCommand != null) {
            if (staCommand.getStatus() != null) {
                status = staCommand.getStatus().getValue();
            }
            if (StringUtils.hasText(staCommand.getCode())) {
                code = staCommand.getCode() + "%";
            }
            if (StringUtils.hasText(staCommand.getOwner())) {
                owner = staCommand.getOwner() + "%";
            }
            if (StringUtils.hasText(staCommand.getRefSlipCode())) {
                refSlipCode = staCommand.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(staCommand.getSlipCode2())) {
                slipCode2 = staCommand.getSlipCode2() + "%";
            }
        }
        return staDao.findVMIReturnSta(start, pageSize, ouid, startTime, endTime, code, owner, status,
        // StockTransApplicationType.VMI_RETURN.getValue(),
                refSlipCode, slipCode2, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);

    }

    public WarehouseLocation findLocationByCode(String locationCode, Long ouid) {
        WarehouseLocation wl = warehouseLocationDao.findLocationByCode(locationCode, ouid);
        WarehouseLocation w = new WarehouseLocation();
        if (null == wl) return null;
        BeanUtils.copyProperties(wl, w);
        WarehouseDistrict d = wl.getDistrict();
        WarehouseDistrict dis = new WarehouseDistrict();
        if (null != d) {
            dis.setId(d.getId());
        }
        w.setDistrict(dis);
        w.setOu(null);
        w.setStaLine(null);
        w.setTransactionTypes(null);
        return w;
    }

    public List<WarehouseLocation> findAvailLocations(Long ouId, String locationCode) {
        return warehouseLocationDao.findAllAvailLocations(ouId, locationCode + "%", new BeanPropertyRowMapper<WarehouseLocation>(WarehouseLocation.class));
    }

    public List<WarehouseLocation> findMateWLListbyCode(Long ouId, Long tractiontype, String locationCode) {
        return warehouseLocationDao.findMateWLListbyCode(ouId, tractiontype, locationCode + "%", new BeanPropertyRowMapper<WarehouseLocation>(WarehouseLocation.class));
    }

    public List<WarehouseLocation> findMateWLListbyOwnerCode(Long ouId, Long tractiontype, String locationCode, String owner) {
        return warehouseLocationDao.findMateWLListbyOwnerCode(ouId, tractiontype, locationCode + "%", owner, new BeanPropertyRowMapper<WarehouseLocation>(WarehouseLocation.class));
    }

    public Pagination<StaLineCommand> findStaLineOthersOperate(int start, int pageSize, Long staId, Sort[] sorts) {
        return staLineDao.findStaLineOthersOperate(start, pageSize, staId, sorts, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
    }

    public List<StaLineCommand> findVmiTransDetails(Long staId) {
        return staLineDao.findStaLinesVmiTransDetails(staId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
    }

    public List<StaLineCommand> findVmiReturnDetails(Long staId) {
        return staLineDao.findStaLinesVmiReturnDetails(staId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
    }

    public StockTransApplication findStaByCode(String code) {
        return staDao.findStaByCode(code);
    }

    /**
     * 
     * 根据条件查询历史作业单
     */
    public Pagination<StockTransApplicationCommand> findStaList(int start, int size, Long ouId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, Date orderCreateTime, Date toOrderCreateTime, StockTransApplicationCommand sta,
            Sort[] sorts) {
        String code = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        Integer status = null;
        Integer intType = null;
        String trackingNo = null;
        String lpcode = null;
        String operator = null;
        String barcode = null;
        String jmcode = null;
        String skucode = null;
        String supplierCode = null;
        String isCod = null;
        // 是否分包
        String isMorePackage = null;
        String isQs = null;
        String o2oShop = null;
        String pickingTypeString = null;
        String transTimeType = null;
        String skuCategoriesName = null;
        // 是否合并订单
        Integer isMerge = null;
        String groupStaCode = null;
        // 批次号
        String pickingListCode = null;
        // 是否加入配货清单
        String isPickingList = null;
        if (sta != null) {
            lpcode = StringUtils.hasText(sta.getLpcode()) ? sta.getLpcode() : null;
            status = sta.getIntStaStatus();
            intType = sta.getIntStaType();
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode1())) {
                slipCode1 = sta.getSlipCode1() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode2())) {
                slipCode2 = sta.getSlipCode2() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getOperator())) {
                operator = sta.getOperator() + "%";
            }
            if (StringUtils.hasText(sta.getTrackingNo())) {
                trackingNo = sta.getTrackingNo() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getBarCode())) {
                barcode = sta.getBarCode() + "%";
            }
            if (StringUtils.hasText(sta.getJmCode())) {
                jmcode = sta.getJmCode() + "%";
            }
            if (StringUtils.hasText(sta.getSkuCode())) {
                skucode = sta.getSkuCode() + "%";
            }
            if (StringUtils.hasText(sta.getSupplierCode())) {
                supplierCode = sta.getSupplierCode() + "%";
            }
            if ("0".equals(sta.getIsMorePackage())) {
                isMorePackage = null;
            } else {
                isMorePackage = sta.getIsMorePackage();
            }

            if (StringUtils.hasText(sta.getIsCod())) {
                isCod = sta.getIsCod();
            }
            if (StringUtils.hasText(sta.getIsQs())) {
                isQs = sta.getIsQs();
            }
            if (StringUtils.hasText(sta.getO2oShop())) {
                o2oShop = sta.getO2oShop();
            }
            if (StringUtils.hasText(sta.getPickingTypeString())) {
                pickingTypeString = sta.getPickingTypeString();
            }
            if (StringUtils.hasText(sta.getTransTimeType())) {
                transTimeType = sta.getTransTimeType();
            }
            if (StringUtils.hasText(sta.getSkuCategoriesName())) {
                skuCategoriesName = sta.getSkuCategoriesName();
            }
            if (StringUtils.hasText(sta.getGroupStaCode())) {
                groupStaCode = sta.getGroupStaCode() + "%";
            }
            if (sta.getIsMergeInt() != null && (1 == sta.getIsMergeInt().intValue() || 0 == sta.getIsMergeInt().intValue())) {
                isMerge = sta.getIsMergeInt();
            }
            if (StringUtils.hasText(sta.getPickingCode())) {
                pickingListCode = sta.getPickingCode() + "%";
            }

            if (StringUtils.hasText(sta.getIsPickingList())) {
                isPickingList = sta.getIsPickingList();
            }

        }
        return staDao.findStaLists(start, size, ouId, createTime, endCreateTime, finishTime, endFinishTime, orderCreateTime, toOrderCreateTime, code, refSlipCode, slipCode1, slipCode2, owner, status, intType, lpcode, operator, trackingNo, supplierCode,
                skucode, barcode, jmcode, null, isMorePackage, isCod, isQs, o2oShop, pickingTypeString, transTimeType, skuCategoriesName, isMerge, groupStaCode, pickingListCode, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class), sorts, isPickingList);
    }

    public Pagination<ZdhPiciCommand> getHistoricalCodeList(int start, int size, Sort[] sorts) {
        return zdhPiciDao.getHistoricalCodeList(start, size, sorts, new BeanPropertyRowMapper<ZdhPiciCommand>(ZdhPiciCommand.class));
    }

    public Pagination<ZdhPiciLineCommand> getHistoricalCodeListLine(int start, int size, Sort[] sorts, Long id) {
        return zdhPiciLineDao.getHistoricalCodeListLine(start, size, sorts, id, new BeanPropertyRowMapper<ZdhPiciLineCommand>(ZdhPiciLineCommand.class));

    }

    /**
     * 根据条件查询历史作业单
     */
    @Override
    public Pagination<StockTransApplicationCommand> findHistoricalOrderList(int start, int size, Long ouId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, Date orderCreateTime, Date toOrderCreateTime,
            StockTransApplicationCommand sta, Sort[] sorts, Boolean noLike, List<String> cityList, List<String> priorityList) {
        String code = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        Integer status = null;
        Integer intType = null;
        String trackingNo = null;
        String lpcode = null;
        String operator = null;
        String barcode = null;
        String jmcode = null;
        String skucode = null;
        String supplierCode = null;
        String isCod = null;
        // 是否分包
        String isMorePackage = null;
        String isQs = null;
        String o2oShop = null;
        String pickingTypeString = null;
        String transTimeType = null;
        String skuCategoriesName = null;
        // 是否合并订单
        Integer isMerge = null;
        String groupStaCode = null;
        // 批次号
        String pickingListCode = null;
        // 是否加入配货清单
        String isPickingList = null;
        // 是否显示合并订单主订单
        String isShowMerge = null;
        if (sta != null) {
            lpcode = StringUtils.hasText(sta.getLpcode()) ? sta.getLpcode() : null;
            status = sta.getIntStaStatus();
            intType = sta.getIntStaType();
            if (!noLike) {

                if (StringUtils.hasText(sta.getCode())) {
                    code = sta.getCode() + "%";
                }
                if (StringUtils.hasText(sta.getSlipCode1())) {
                    slipCode1 = sta.getSlipCode1() + "%";
                }
                if (StringUtils.hasText(sta.getSlipCode2())) {
                    slipCode2 = sta.getSlipCode2() + "%";
                }
                if (StringUtils.hasText(sta.getOwner())) {
                    owner = sta.getOwner() + "%";
                }
                if (StringUtils.hasText(sta.getOperator())) {
                    operator = sta.getOperator() + "%";
                }
                if (StringUtils.hasText(sta.getTrackingNo())) {
                    trackingNo = sta.getTrackingNo() + "%";
                }
                if (StringUtils.hasText(sta.getRefSlipCode())) {
                    refSlipCode = sta.getRefSlipCode() + "%";
                }
                if (StringUtils.hasText(sta.getBarCode())) {
                    barcode = sta.getBarCode() + "%";
                }
                if (StringUtils.hasText(sta.getJmCode())) {
                    jmcode = sta.getJmCode() + "%";
                }
                if (StringUtils.hasText(sta.getSkuCode())) {
                    skucode = sta.getSkuCode() + "%";
                }
                if (StringUtils.hasText(sta.getSupplierCode())) {
                    supplierCode = sta.getSupplierCode() + "%";
                }
                if (StringUtils.hasText(sta.getGroupStaCode())) {
                    groupStaCode = sta.getGroupStaCode() + "%";
                }
                if (StringUtils.hasText(sta.getPickingCode())) {
                    pickingListCode = sta.getPickingCode() + "%";
                }
            } else {
                if (StringUtils.hasText(sta.getCode())) {
                    code = sta.getCode();
                }
                if (StringUtils.hasText(sta.getSlipCode1())) {
                    slipCode1 = sta.getSlipCode1();
                }
                if (StringUtils.hasText(sta.getSlipCode2())) {
                    slipCode2 = sta.getSlipCode2();
                }
                if (StringUtils.hasText(sta.getOwner())) {
                    owner = sta.getOwner();
                }
                if (StringUtils.hasText(sta.getOperator())) {
                    operator = sta.getOperator();
                }
                if (StringUtils.hasText(sta.getTrackingNo())) {
                    trackingNo = sta.getTrackingNo();
                }
                if (StringUtils.hasText(sta.getRefSlipCode())) {
                    refSlipCode = sta.getRefSlipCode();
                }
                if (StringUtils.hasText(sta.getBarCode())) {
                    barcode = sta.getBarCode();
                }
                if (StringUtils.hasText(sta.getJmCode())) {
                    jmcode = sta.getJmCode();
                }
                if (StringUtils.hasText(sta.getSkuCode())) {
                    skucode = sta.getSkuCode();
                }
                if (StringUtils.hasText(sta.getSupplierCode())) {
                    supplierCode = sta.getSupplierCode();
                }
                if (StringUtils.hasText(sta.getGroupStaCode())) {
                    groupStaCode = sta.getGroupStaCode();
                }
                if (StringUtils.hasText(sta.getPickingCode())) {
                    pickingListCode = sta.getPickingCode();
                }
            }
            if ("0".equals(sta.getIsMorePackage())) {
                isMorePackage = null;
            } else {
                isMorePackage = sta.getIsMorePackage();
            }

            if (StringUtils.hasText(sta.getIsCod())) {
                isCod = sta.getIsCod();
            }
            if (StringUtils.hasText(sta.getIsQs())) {
                isQs = sta.getIsQs();
            }
            if (StringUtils.hasText(sta.getO2oShop())) {
                o2oShop = sta.getO2oShop();
            }
            if (StringUtils.hasText(sta.getPickingTypeString())) {
                pickingTypeString = sta.getPickingTypeString();
            }
            if (StringUtils.hasText(sta.getTransTimeType())) {
                transTimeType = sta.getTransTimeType();
            }
            if (StringUtils.hasText(sta.getSkuCategoriesName())) {
                skuCategoriesName = sta.getSkuCategoriesName();
            }
            if (sta.getIsMergeInt() != null && (1 == sta.getIsMergeInt().intValue() || 0 == sta.getIsMergeInt().intValue())) {
                isMerge = sta.getIsMergeInt();
            }

            if (StringUtils.hasText(sta.getIsPickingList())) {
                isPickingList = sta.getIsPickingList();
            }
            if (StringUtils.hasText(sta.getIsShowMerge())) {
                isShowMerge = sta.getIsShowMerge();
            }

        }

        if (null == createTime && null == endCreateTime && null == finishTime && null == endFinishTime) {
            // 如果时间为空则，默认只能查询90天内数据
            endCreateTime = new Date();
            createTime = new Date((endCreateTime.getTime() - 1000 * 60 * 60 * 24 * 90L));
        }
        // dropDown 优先发货城市标志位
        Boolean flag = true;
        if (null != cityList && cityList.size() > 0) {
            if (cityList.contains("opposite")) {
                flag = false;
            }
        }
        Boolean msg = true;
        if (null != priorityList && priorityList.size() > 0) {
            if (priorityList.contains("opposite")) {
                msg = false;
            }
        }

        return staDao.findHistoricalStaLists(start, size, ouId, createTime, endCreateTime, finishTime, endFinishTime, orderCreateTime, toOrderCreateTime, code, refSlipCode, slipCode1, slipCode2, owner, status, intType, lpcode, operator, trackingNo,
                supplierCode, skucode, barcode, jmcode, null, isMorePackage, isCod, isQs, o2oShop, pickingTypeString, transTimeType, skuCategoriesName, isMerge, groupStaCode, pickingListCode, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class), sorts, isPickingList, isShowMerge, cityList, priorityList, flag, msg);
    }



    /**
     * 根据条件查询历史作业单2
     */
    @Override
    public Pagination<StockTransApplicationCommand> findHistoricalOrderList2(int start, int size, Long ouId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, Date orderCreateTime, Date toOrderCreateTime,
            StockTransApplicationCommand sta, List<String> cityList, List<String> priorityList, Sort[] sorts) {
        String code = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        Integer status = null;
        Integer intType = null;
        String trackingNo = null;
        String lpcode = null;
        String operator = null;
        String barcode = null;
        String jmcode = null;
        String skucode = null;
        String supplierCode = null;
        String isCod = null;
        // 是否分包
        String isMorePackage = null;
        String isQs = null;
        String o2oShop = null;
        String pickingTypeString = null;
        String transTimeType = null;
        String skuCategoriesName = null;
        // 是否合并订单
        Integer isMerge = null;
        String groupStaCode = null;
        // 批次号
        String pickingListCode = null;
        // 是否加入配货清单
        String isPickingList = null;
        //
        String isShowMerge = null;

        String isPreSale = null;
        if (sta != null) {
            lpcode = StringUtils.hasText(sta.getLpcode()) ? sta.getLpcode() : null;
            status = sta.getIntStaStatus();
            intType = sta.getIntStaType();
            if (StringUtils.hasText(sta.getIsPreSale())) {
                isPreSale = sta.getIsPreSale();
            }
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode1())) {
                slipCode1 = sta.getSlipCode1() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode2())) {
                slipCode2 = sta.getSlipCode2() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getOperator())) {
                operator = sta.getOperator() + "%";
            }
            if (StringUtils.hasText(sta.getTrackingNo())) {
                trackingNo = sta.getTrackingNo() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getBarCode())) {
                barcode = sta.getBarCode() + "%";
            }
            if (StringUtils.hasText(sta.getJmCode())) {
                jmcode = sta.getJmCode() + "%";
            }
            if (StringUtils.hasText(sta.getSkuCode())) {
                skucode = sta.getSkuCode() + "%";
            }
            if (StringUtils.hasText(sta.getSupplierCode())) {
                supplierCode = sta.getSupplierCode() + "%";
            }
            if ("0".equals(sta.getIsMorePackage())) {
                isMorePackage = null;
            } else {
                isMorePackage = sta.getIsMorePackage();
            }

            if (StringUtils.hasText(sta.getIsCod())) {
                isCod = sta.getIsCod();
            }
            if (StringUtils.hasText(sta.getIsQs())) {
                isQs = sta.getIsQs();
            }
            if (StringUtils.hasText(sta.getO2oShop())) {
                o2oShop = sta.getO2oShop();
            }
            if (StringUtils.hasText(sta.getPickingTypeString())) {
                pickingTypeString = sta.getPickingTypeString();
            }
            if (StringUtils.hasText(sta.getTransTimeType())) {
                transTimeType = sta.getTransTimeType();
            }
            if (StringUtils.hasText(sta.getSkuCategoriesName())) {
                skuCategoriesName = sta.getSkuCategoriesName();
            }
            if (StringUtils.hasText(sta.getGroupStaCode())) {
                groupStaCode = sta.getGroupStaCode() + "%";
            }
            if (sta.getIsMergeInt() != null && (1 == sta.getIsMergeInt().intValue() || 0 == sta.getIsMergeInt().intValue())) {
                isMerge = sta.getIsMergeInt();
            }
            if (StringUtils.hasText(sta.getPickingCode())) {
                pickingListCode = sta.getPickingCode() + "%";
            }

            if (StringUtils.hasText(sta.getIsPickingList())) {
                isPickingList = sta.getIsPickingList();
            }
            if (StringUtils.hasText(sta.getIsShowMerge())) {
                isShowMerge = sta.getIsShowMerge();
            }
        }
        if (null == createTime && null == endCreateTime && null == finishTime && null == endFinishTime) {
            // 如果时间为空则，默认只能查询90天内数据
            endCreateTime = new Date();
            createTime = new Date((endCreateTime.getTime() - 1000 * 60 * 60 * 24 * 90L));
        }

        // dropDown 优先发货城市标志位
        Boolean flag = true;
        if (null != cityList && cityList.size() > 0) {
            if (cityList.contains("opposite")) {
                flag = false;
            }
        }
        Boolean msg = true;
        if (null != priorityList && priorityList.size() > 0) {
            if (priorityList.contains("opposite")) {
                msg = false;
            }
        }

        return staDao.findHistoricalStaLists2(start, size, ouId, createTime, endCreateTime, finishTime, endFinishTime, orderCreateTime, toOrderCreateTime, code, refSlipCode, slipCode1, slipCode2, owner, status, intType, lpcode, operator, trackingNo,
                supplierCode, skucode, barcode, jmcode, null, isMorePackage, isCod, isQs, o2oShop, pickingTypeString, transTimeType, skuCategoriesName, isMerge, groupStaCode, pickingListCode, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class), sorts, isPickingList, isShowMerge, isPreSale, cityList, priorityList, flag, msg);
    }

    public Pagination<PackageInfoCommand> findByTrackingNoAndLpCode(int start, int pageSize, String trackingNo, String lpCode, Sort[] sorts) {
        String trackingNo1 = null;
        String lpCode1 = null;
        if (StringUtils.hasText(trackingNo)) {
            trackingNo1 = trackingNo;
        }
        if (StringUtils.hasText(lpCode)) {
            lpCode1 = lpCode;
        }
        return packageInfoDao.findByTrackingNoAndLpCode(start, pageSize, trackingNo1, lpCode1, new BeanPropertyRowMapperExt<PackageInfoCommand>(PackageInfoCommand.class), sorts);
    };

    public Pagination<PackageInfo> findByTrackingNoAndLpCode1(int start, int pageSize, String trackingNo, String lpCode, Long ouId, Sort[] sorts) {
        String trackingNo1 = null;
        String lpCode1 = null;
        if (StringUtils.hasText(trackingNo)) {
            trackingNo1 = trackingNo;
        }
        if (StringUtils.hasText(lpCode)) {
            lpCode1 = lpCode;
        }
        return packageInfoDao.findPreByTrackingNoAndLpCode(start, pageSize, trackingNo1, lpCode1, ouId, new BeanPropertyRowMapperExt<PackageInfo>(PackageInfo.class), sorts);
    };

    /**
     * 
     * 根据条件查询特殊处理作业单
     */
    public Pagination<StockTransApplicationCommand> findEspStaList(int start, int size, Date createTime, Date endCreateTime, Long ouId, StockTransApplicationCommand sta, Sort[] sorts) {
        String code = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        Integer status = null;
        if (sta != null) {
            status = sta.getIntStaStatus();
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode1())) {
                slipCode1 = sta.getSlipCode1() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode2())) {
                slipCode2 = sta.getSlipCode2() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
        }
        return staDao.findEspStaLists(start, size, createTime, endCreateTime, code, refSlipCode, slipCode1, slipCode2, owner, status, ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    /**
     * 
     * 根据条件查询历史作业单
     */
    public Pagination<StockTransApplicationCommand> findCreateOutOrder(int start, int size, Long ouId, Date createTime, Date endCreateTime, StockTransApplicationCommand sta, Sort[] sorts, List<Long> lists) {
        String code = null;
        String refSlipCode = null;
        String lpcode = null;
        String owner = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getLpcode())) {
                lpcode = sta.getLpcode().trim();
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner().trim();
            }
        }
        if (lists.size() == 0) {
            lists = null;
        }
        return staDao.findCreateOutOrder(start, size, ouId, createTime, endCreateTime, code, refSlipCode, lpcode, owner, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts, lists);
    }



    public Integer findLocationTranstype(Long locationId, Long transtypeId) {
        return warehouseLocationDao.findLocationTranstype(locationId, transtypeId, new SingleColumnRowMapper<Integer>(Integer.class));
    }

    public WarehouseLocationCommand checkLocationTranstypeByCode(String locationCode, Long stvid, Long ouid) {
        WarehouseLocationCommand loc = warehouseLocationDao.findLocationTranstypeByCode(locationCode, ouid, stvid, new BeanPropertyRowMapperExt<WarehouseLocationCommand>(WarehouseLocationCommand.class));
        if (loc == null) {
            throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {locationCode});
        } else if (loc.getIsLocked()) {
            throw new BusinessException(ErrorCode.LOCATION_IS_LOCKED_OR_OCCUPAID, new Object[] {locationCode});
        } /*
           * else if (loc.getTranstype_id() == null) { StockTransVoucher stv = findStvById(stvid);
           * String tranTypeName = stv.getTransactionType().getName(); throw new
           * BusinessException(ErrorCode.WH_LOCATION_NO_TRANSACTION_TYPE, new Object[] {locationCode
           * == null ? "" : locationCode, tranTypeName == null ? "" : tranTypeName}); }
           */
        return loc;
    }

    public WarehouseLocationCommand checkLocationTranstypeByCode(String locationCode, Long ouid) {
        WarehouseLocationCommand loc = warehouseLocationDao.findLocationTranstypeByCode(locationCode, ouid, -1l, new BeanPropertyRowMapperExt<WarehouseLocationCommand>(WarehouseLocationCommand.class));
        if (loc == null) {
            throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND, new Object[] {locationCode});
        } else if (loc.getIsLocked()) {
            throw new BusinessException(ErrorCode.LOCATION_IS_LOCKED_OR_OCCUPAID, new Object[] {locationCode});
        }
        return loc;
    }

    public List<StockTransApplicationCommand> findExecuteTransitInnerSta(StockTransApplicationCommand staCom, Long ouId, Boolean isExpIn, Sort[] sort) {
        String code = null;
        String creater = null;
        if (StringUtils.hasText(staCom.getCode())) {
            code = staCom.getCode() + "%";
        }
        if (StringUtils.hasText(staCom.getCreater())) {
            creater = "%" + staCom.getCreater() + "%";
        }
        return staDao.findExecuteTransitInnerSta(staCom.getCreateTime(), staCom.getFinishTime(), code, creater, ouId, isExpIn, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class), sort);
    }

    public Pagination<StockTransApplicationCommand> findExecuteTransitInnerStaByPage(int start, int pageSize, StockTransApplicationCommand staCom, Long ouId, Boolean isExpIn, Sort[] sort) {
        String code = null;
        String creater = null;
        if (StringUtils.hasText(staCom.getCode())) {
            code = staCom.getCode() + "%";
        }
        if (StringUtils.hasText(staCom.getCreater())) {
            creater = "%" + staCom.getCreater() + "%";
        }
        return staDao.findExecuteTransitInnerStaByPage(start, pageSize, staCom.getCreateTime(), staCom.getFinishTime(), code, staCom.getFileStatus(), creater, ouId, isExpIn, new BeanPropertyRowMapper<StockTransApplicationCommand>(
                StockTransApplicationCommand.class), sort);
    }

    public List<StockTransApplicationCommand> findExecuteInvStatusChangeSta(StockTransApplicationCommand staCom, Long ouId, Sort[] sort) {
        String code = null;
        String creater = null;
        if (StringUtils.hasText(staCom.getCode())) {
            code = staCom.getCode() + "%";
        }
        if (StringUtils.hasText(staCom.getCreater())) {
            creater = "%" + staCom.getCreater() + "%";
        }
        return staDao.findExecuteInvStatusChangeSta(staCom.getCreateTime(), staCom.getFinishTime(), code, creater, ouId, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class), sort);
    }

    public List<StockTransApplicationCommand> findExecuteMoveSta(StockTransApplicationCommand staCom, Integer type, Long ouId, Sort[] sort) {
        String code = null;
        String creater = null;
        if (StringUtils.hasText(staCom.getCode())) {
            code = staCom.getCode() + "%";
        }
        if (StringUtils.hasText(staCom.getCreater())) {
            creater = "%" + staCom.getCreater() + "%";
        }
        return staDao.findExecutMoveStaWithInStv(staCom.getCreateTime(), staCom.getFinishTime(), type, code, creater, ouId, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class), sort);
    }

    public StockTransApplication createTransitInnerSta(boolean isExcelImport, String slipCode, String memo, Long userId, Long ouid, List<StvLine> list) {
        if (list == null || list.size() == 0) {
            throw new BusinessException(ErrorCode.TRANIST_INNER_LINE_EMPTY);
        }
        TransactionType type = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_INNER_OUT);
        if (type == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_TRANIST_INNER_NOT_FOUND);
        }
        User user = userId == null ? null : userDao.getByPrimaryKey(userId);
        OperationUnit ou = operationUnitDao.getByPrimaryKey(ouid);
        StockTransApplication sta = new StockTransApplication();
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        sta.setCreateTime(new Date());
        if (slipCode != null) sta.setRefSlipCode(slipCode);
        sta.setCreator(user);
        sta.setIsNeedOccupied(false);
        sta.setMainWarehouse(ou);
        sta.setMemo(memo);
        sta.setLastModifyTime(new Date());
        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), userId, sta.getMainWarehouse().getId());
        sta.setType(StockTransApplicationType.TRANSIT_INNER);
        sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));

        sta.setIsNotPacsomsOrder(true);
        staDao.save(sta);
        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).longValue());
        stv.setCode(sta.getCode() + "01");
        stv.setCreateTime(new Date());
        stv.setLastModifyTime(new Date());
        stv.setCreator(user);
        stv.setDirection(TransactionDirection.OUTBOUND);
        stv.setSta(sta);
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setTransactionType(type);
        stv.setWarehouse(ou);
        Warehouse wh = warehouseDao.getByOuId(ouid);
        Long customerId = null;
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        // 合并行，并交验
        List<StvLine> lineList = new ArrayList<StvLine>();
        for (StvLine stvl : list) {
            if (!isExcelImport) {
                Sku sku = skuDao.getByPrimaryKey(stvl.getSku().getId());
                if (sku == null) {
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {stvl.getSku().getBarCode()});
                } else {
                    if (!sku.getCustomer().getId().equals(customerId)) {
                        throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {sku.getBarCode()});
                    }
                }
                WarehouseLocation loc = warehouseLocationDao.getByPrimaryKey(stvl.getLocation().getId());
                if (loc == null) {
                    throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND);
                }
                // 判断库位是否支持作业类型
                // Integer ct
                // =warehouseLocationDao.findLocationTranstype(loc.getId(),
                // type.getId(),new SingleColumnRowMapper<Integer>());
                // if(ct == null || ct == 0){
                // throw new
                // BusinessException(ErrorCode.WH_LOCATION_NO_TRANSACTION_TYPE,new
                // Object[]{loc.getCode(),type.getName()});
                // }
                InventoryStatus sts = inventoryStatusDao.getByPrimaryKey(stvl.getInvStatus().getId());
                if (sts == null) {
                    throw new BusinessException(ErrorCode.INVENTORY_STATUS_NOT_FOUND);
                }
                if (!StringUtils.hasText(stvl.getOwner())) {
                    throw new BusinessException(ErrorCode.OWNER_IS_NULL);
                }
                stvl.setLocation(loc);
                stvl.setSku(sku);
                stvl.setInvStatus(sts);
            }
            stvl.setDistrict(stvl.getLocation().getDistrict());
            stvl.setId(null);
            stvl.setDirection(TransactionDirection.OUTBOUND);
            stvl.setStv(stv);
            stvl.setTransactionType(type);
            stvl.setWarehouse(ou);
            boolean exist = false;
            for (StvLine l : lineList) {
                if (stvl.getSku().getId().equals(l.getSku().getId()) && stvl.getLocation().getId().equals(l.getLocation().getId()) && stvl.getInvStatus().getId().equals(l.getInvStatus().getId())) {
                    if ((stvl.getOwner() == null && l.getOwner() == null) || (stvl.getOwner() != null && stvl.getOwner().equals(l.getOwner()))) {
                        l.setQuantity(stvl.getQuantity() + l.getQuantity());
                        exist = true;
                    }
                }
            }
            if (!exist) {
                lineList.add(stvl);
            }
        }
        Map<String, StaLine> mapStaLine = new HashMap<String, StaLine>();
        for (StvLine line : lineList) {
            String key = line.getOwner() + "_" + line.getSku().getId() + "_" + line.getInvStatus().getId();
            StaLine stal = null;
            if (mapStaLine.containsKey(key)) {
                stal = mapStaLine.get(key);
                stal.setQuantity(stal.getQuantity() + line.getQuantity());
            } else {
                stal = new StaLine();
                stal.setInvStatus(line.getInvStatus());
                stal.setOwner(line.getOwner());
                stal.setQuantity(line.getQuantity());
                stal.setSku(line.getSku());
                stal.setSta(sta);
                line.setStaLine(stal);
                mapStaLine.put(key, stal);
            }
            staLineDao.save(stal);
        }
        stv.setStvLines(lineList);
        stvDao.save(stv);
        staDao.flush();
        staDao.updateSkuQtyById(sta.getId());
        Map<String, Object> params = new HashMap<String, Object>();
        // 检验是否存在暂存区的商品
        // wmExecute.valdateOutBoundLocationIsGI(stv);
        params.put("in_sta_id", sta.getId());
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
        ChooseOption ch = chooseOptionDao.findByCategoryCodeAndKey("sp_occ_inv_for_transit_inner2", "1");
        Map<String, Object> result = null;
        if (ch != null && ch.getOptionValue() != null) {
            result = staDao.executeSp("sp_occ_inv_for_transit_inner2", sqlParameters, params);
        } else {
            result = staDao.executeSp("sp_occ_inv_for_transit_inner", sqlParameters, params);
        }
        String errorSku = (String) result.get("error_sku_id");
        BusinessException root = null;
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(strs[0]);
                Long qty = Long.parseLong(strs[1]);
                String locationCode = null;
                if (ch != null && ch.getOptionValue() != null) {
                    locationCode = strs[2];
                }
                if (root == null) {
                    root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                }
                BusinessException current = root;
                while (current.getLinkedException() != null) {
                    current = current.getLinkedException();
                }
                Sku sku = skuDao.getByPrimaryKey(skuId);
                BusinessException be = null;
                if (ch != null && ch.getOptionValue() != null) {
                    be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY_2, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty, locationCode});
                } else {
                    be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                }
                current.setLinkedException(be);
            }
            throw root;
        }
        stv.getStvLines().clear();
        stvDao.save(stv);
        stvDao.flush();
        // 重建stv line
        stvLineDao.createTIOutByStaId(sta.getId(), stv.getId());
        /***** mongoDB库存变更添加逻辑 ******************************/
        sta.setStatus(StockTransApplicationStatus.CREATED);
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }

        StockTransApplicationCommand stac = new StockTransApplicationCommand();

        stac.setId(sta.getId());
        stac.setCode(sta.getCode());


        return stac;
    }

    public StockTransApplication createInvStatusChangeSta(boolean isExcelImport, String memo, Long userId, Long ouid, List<StvLine> list) {
        if (list == null || list.size() == 0) {
            throw new BusinessException(ErrorCode.INVENTORY_STATUS_CHANGE_LINE_EMPTY);
        }
        TransactionType type = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_INVENTORY_STATUS_CHANGE_OUT);
        if (type == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_INVENTORY_STATUS_CHANGE_OUT_NOT_FOUND);
        }
        User user = userDao.getByPrimaryKey(userId);
        OperationUnit ou = operationUnitDao.getByPrimaryKey(ouid);
        StockTransApplication sta = new StockTransApplication();
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        sta.setCreateTime(new Date());
        sta.setCreator(user);
        sta.setIsNeedOccupied(false);
        sta.setMainWarehouse(ou);
        sta.setMemo(memo);
        // 锁定作业单
        // 库存状态修改优化，屏蔽所有店铺锁定等待PAC，直接可以操作
        // BiChannel shop = companyShopDao.getByCode(list.get(0).getOwner());
        // if (shop.getCustomer().getCode().equals("adidas")) {
        // sta.setIsLocked(false);
        // } else {
        // sta.setIsLocked(true);
        // }

        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), userId, sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        sta.setType(StockTransApplicationType.INVENTORY_STATUS_CHANGE);
        sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));
        sta.setIsNotPacsomsOrder(true);
        staDao.save(sta);
        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).longValue());
        stv.setCode(sta.getCode() + "01");
        stv.setCreateTime(new Date());
        stv.setCreator(user);
        stv.setDirection(TransactionDirection.OUTBOUND);
        stv.setSta(sta);
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setLastModifyTime(new Date());
        stv.setTransactionType(type);
        stv.setWarehouse(ou);
        // 合并行，并交验
        List<StvLine> lineList = new ArrayList<StvLine>();
        Map<String, StvLine> map = new HashMap<String, StvLine>();
        for (StvLine stvl : list) {
            if (!isExcelImport) {
                // 界面操作时查询相关数据，EXCEL导入不处理
                Sku sku = skuDao.getByPrimaryKey(stvl.getSku().getId());
                if (sku == null) {
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {""});
                }
                WarehouseLocation loc = warehouseLocationDao.getByPrimaryKey(stvl.getLocation().getId());
                if (loc == null) {
                    throw new BusinessException(ErrorCode.LOCATION_NOT_FOUND);
                }
                InventoryStatus sts = inventoryStatusDao.getByPrimaryKey(stvl.getInvStatus().getId());
                if (sts == null) {
                    throw new BusinessException(ErrorCode.INVENTORY_STATUS_NOT_FOUND);
                }
                stvl.setLocation(loc);
                stvl.setSku(sku);
                stvl.setInvStatus(sts);
            }
            WarehouseDistrict dis = stvl.getLocation().getDistrict();
            stvl.setDistrict(dis);
            stvl.setId(null);
            stvl.setDirection(TransactionDirection.OUTBOUND);
            stvl.setStv(stv);
            stvl.setTransactionType(type);
            stvl.setWarehouse(ou);
            String key = stvl.getSku().getId() + ":" + stvl.getLocation().getId() + ":" + stvl.getInvStatus().getId();
            StvLine l = map.get(key);
            if (l == null) {
                map.put(key, l);
                lineList.add(stvl);
            } else {
                l.setQuantity(stvl.getQuantity() + l.getQuantity());
            }
        }
        for (StvLine line : lineList) {
            StaLine stal = new StaLine();
            stal.setInvStatus(line.getInvStatus());
            stal.setOwner(line.getOwner());
            stal.setQuantity(line.getQuantity());
            stal.setSku(line.getSku());
            stal.setOwner(line.getOwner());
            stal.setSta(sta);
            staLineDao.save(stal);
            line.setStaLine(stal);
        }
        stv.setStvLines(lineList);
        stvDao.save(stv);
        staDao.flush();
        // wmExecute.valdateOutBoundLocationIsGI(stv);
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_sta_id", sta.getId());
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
        Map<String, Object> result = staDao.executeSp("sp_occ_inv_for_inv_sts_change", sqlParameters, params);
        String errorSku = (String) result.get("error_sku_id");
        BusinessException root = null;
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(strs[0]);
                Long qty = Long.parseLong(strs[1]);
                if (root == null) {
                    root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                }
                BusinessException current = root;
                while (current.getLinkedException() != null) {
                    current = current.getLinkedException();
                }
                Sku sku = skuDao.getByPrimaryKey(skuId);
                BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                current.setLinkedException(be);
            }
            throw root;
        }
        stv.getStvLines().clear();
        stvDao.save(stv);
        stvDao.flush();
        // 重建sta line
        staLineDao.deleteStaLineByStaId(sta.getId());
        staLineDao.createByStaId(sta.getId());
        // 重建stv line
        stvLineDao.createTIOutByStaId(sta.getId(), stv.getId());
        stvLineDao.flush();
        staDao.updateSkuQtyById(sta.getId());
        sta.setStatus(StockTransApplicationStatus.CREATED);
        /***** mongoDB库存变更添加逻辑 ******************************/
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return sta;
    }

    public List<InventoryCommand> findByLocationCode(String locationCode, Long shopId, Long ouid) {
        return inventoryDao.findByLocationCode(locationCode, shopId, ouid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }

    public List<InventoryCommand> findBySkuCode(String skuCode, Long shopId, Long ouid) {
        return inventoryDao.findBySkuCode(skuCode, shopId, ouid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }

    public List<InventoryCommand> findByLocationAdnSku(String locationCode, String skuCode, Long skuId, Long statusId, Long shopId, Long qty, Long ouid) {
        skuCode = StringUtils.hasText(skuCode) ? skuCode : null;
        return inventoryDao.findByLocationAdnSku(locationCode, skuCode, skuId, shopId, statusId, ouid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }

    public List<InventoryCommand> findByLocationAdnSku(String locationCode, String skuCode, Long skuId, Long statusId, Long qty, Long ouid) {
        skuCode = StringUtils.hasText(skuCode) ? skuCode : null;
        return inventoryDao.findByLocationAdnSkuWithoutOwner(locationCode, skuCode, skuId, statusId, ouid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }


    public List<InventoryCommand> querySkuQtyByShop(String locationCode, String skuCode, Long skuId, Long shopId, Long statusId, Long qty, Long ouid) {
        skuCode = StringUtils.hasText(skuCode) ? skuCode : null;
        return inventoryDao.findByLocationAdnSku(locationCode, skuCode, skuId, shopId, statusId, ouid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }



    public Boolean checkTransitInnerQty(String locationCode, Long shopId, Long skuId, Long statusId, Long qty, Long ouid) {
        return false;
    }

    // 库内移动获取sta信息
    public StockTransApplicationCommand findStaByStaId(Long staId) {
        return staDao.findStaByStaId(staId, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    // 库内移动 获取staline信息
    public List<StvLineCommand> findStvLineByStaId(Long staId) {
        return stvLineDao.findStvLineByStaId(staId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public List<WarehouseLocation> findLocationByLikeCode(String code, Long ouId) {
        return warehouseLocationDao.findLocationByLikeCode(code + "%", ouId, new BeanPropertyRowMapper<WarehouseLocation>(WarehouseLocation.class));
    }

    public List<Sku> findSkuByLikeCode(String code, Long ouId) {
        return skuDao.findSkuByLikeCode(code + "%", ouId, new BeanPropertyRowMapper<Sku>(Sku.class));
    }

    public WarehouseLocationCommand findLocationByLocationCode(String locationCode, Long ouId) {
        return warehouseLocationDao.findLocationByLocationCode(locationCode, ouId, new BeanPropertyRowMapper<WarehouseLocationCommand>(WarehouseLocationCommand.class));
    }

    public List<InventoryCommand> findByLocAndSku(String locationCode, String skuCode, Long shopId, Long skuId, Long ouid, Long inventoryStatusId, String productionDate, String expireDate) {
        return inventoryDao.findByLocAndSku(locationCode, skuCode, shopId, skuId, ouid, inventoryStatusId, productionDate, expireDate, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }



    public List<String> validateIsSameBatch(StvLineCommand cmd) {
        int smode = cmd.getSku().getStoremode().getValue();
        if (smode == InboundStoreMode.TOGETHER.getValue()) return null;
        Map<String, String> map = new HashMap<String, String>();
        List<String> error = new ArrayList<String>();
        WarehouseLocation loc = warehouseLocationDao.getByPrimaryKey(cmd.getLocationId());
        Sku sku = skuDao.getByPrimaryKey(cmd.getSku().getId());
        String key = sku.getBarCode() + ":" + loc.getCode();
        if (map.get(key) == null) {
            map.put(key, cmd.getBatchCode());
            log.debug("cmd.getBatchCode() is  {}", cmd.getBatchCode());
            List<String> bcodeList = inventoryDao.findBatchCodeBySkuIdLocationId(cmd.getSku().getId(), cmd.getLocationId(), new SingleColumnRowMapper<String>(String.class));
            if (bcodeList != null && bcodeList.size() > 0) {
                if (!bcodeList.contains(cmd.getBatchCode())) {
                    error.add("[ " + sku.getBarCode() + " ] '" + sku.getName() + "' 在库位：[" + loc.getCode() + " ]");
                }
            }
        } else {
            if (cmd.getBatchCode() == null || cmd.getBatchCode().equals("")) {
                return null;
            } else if (!cmd.getBatchCode().equals(map.get(key))) {
                error.add("[ " + sku.getBarCode() + " ] '" + sku.getName() + "' 在库位：[" + loc.getCode() + " ]");
            }
        }
        return error;
    }

    public void saveMsgInboundForBatchCode(String staCode) {
        MsgInboundOrder msg = msgInboundOrderDao.findByStaCode(staCode);
        MsgInboundOrder newMsg = new MsgInboundOrder();
        try {
            PropertyUtil.copyProperties(msg, newMsg);
            newMsg.setId(null);
            newMsg.setStatus(DefaultStatus.CREATED);
            newMsg.setBatchId(null);
            newMsg.setBatchCode(msgInboundOrderDao.findCountByStaCode(staCode, new SingleColumnRowMapper<Long>(Long.class)) + 1 + "");
            msgInboundOrderDao.save(newMsg);
            msgInboundOrderDao.flush();
            Long msgId = newMsg.getId();
            msgInboundOrderDao.createLineForBatchCode(staCode, msgId);
        } catch (BusinessException e) {
            log.error("saveMsgInboundForBatchCode error InBound", e.getErrorCode());
        } catch (IllegalAccessException e) {
            log.error("", e);
        } catch (InvocationTargetException e) {
            log.error("", e);
        } catch (NoSuchMethodException e) {
            log.error("", e);
        }
    }



    public void vmiReturnFeedback(StockTransApplication sta) {
        idsFeedbackDao.saveInBoundORDInfo(sta.getId());
    }

    public void vmiReturnFeedbackPf(StockTransApplication sta) {
        idsFeedbackDao.saveInBoundORDInfoPf(sta.getId());
    }

    @Override
    public void vmiReturnFeedbackNike(StockTransApplication sta, String source) {
        idsFeedbackDao.saveInBoundORDInfoNike(sta.getId(), source);

    }

    @Override
    public void vmiReturnFeedbackConverse(StockTransApplication sta, String source) {
        idsFeedbackDao.saveInBoundORDInfoConverse(sta.getId(), source);

    }

    // vmi 退仓-占用库存 - 根据库位占用库存（没有库存状态）
    public void occupyInventoryByStaId(Long staId, Long creatorId, BiChannel bi) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!(StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.FAILED.equals(sta.getStatus()))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 库存占用
        wmExecute.valdateOutBoundLocationIsGI(stvDao.findStvCreatedByStaId(staId));
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_sta_id", staId);
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
        Map<String, Object> result = null;
        result = staDao.executeSp("sp_occupy_inv_for_vmi_return", sqlParameters, params);
        String errorSku = (String) result.get("error_sku_id");
        log.debug("errorsku msg : {}", errorSku);
        BusinessException root = null;
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(strs[0]);
                Long qty = Long.parseLong(strs[1]);
                if (root == null) {
                    root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                }
                BusinessException current = root;
                while (current.getLinkedException() != null) {
                    current = current.getLinkedException();
                }
                Sku sku = skuDao.getByPrimaryKey(skuId);
                BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                current.setLinkedException(be);
            }
            throw root;
        } else {
            // 更新sta状态为库存占用
            stvLineDao.flush();
            stvLineDao.deleteLineById(sta.getId());
            stvLineDao.flush();
            stvLineDao.createForCrossByStaId(sta.getId());
            sta.setStatus(StockTransApplicationStatus.OCCUPIED);
            Long ouId = sta.getMainWarehouse().getId();
            // 订单状态与账号关联
            if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, ouId);
            } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
                whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, ouId);
            }

            if (bi != null) {
                if (bi.getIsReturnNeedPackage() != null) {
                    // 判断VMI退仓店铺是否允许强制装箱
                    if (bi.getIsReturnNeedPackage()) {
                        // 允许强制装箱 状态为装箱中
                        sta.setStatus(StockTransApplicationStatus.PACKING);
                    }
                }
            }
            sta.setLastModifyTime(new Date());
            // staDao.save(sta);
        }
    }

    // vmi 退仓-占用库存 - 根据库位占用库存（没有库存状态）支持部分占用
    public void occupyInventoryByStaIdPartial(Long staId, Long creatorId, BiChannel bi, OperationUnit ou, TransactionType transactionType, StockTransVoucher stv, boolean isPartial) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (!(StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.FAILED.equals(sta.getStatus()))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 库存占用
        wmExecute.valdateOutBoundLocationIsGI(stvDao.findStvCreatedByStaId(staId));
        // 获取STVLINE信息
        Map<String, Inventory> stvLineMap = new HashMap<String, Inventory>();
        List<StvLine> stvlines = stvLineDao.findAllByStaId(sta.getId(), new BeanPropertyRowMapperExt<StvLine>(StvLine.class));
        boolean b = false;
        for (StvLine line : stvlines) {
            // 计划量
            Long qty = line.getQuantity();
            // 逐条占用库存
            // 查询库存列表并行锁定
            List<Long> invList = inventoryDao.findOccupyInventoryByStaIdPartial(sta.getId(), line.getSku().getId(), new SingleColumnRowMapper<Long>(Long.class));
            for (Long id : invList) {
                Inventory inv = inventoryDao.getByPrimaryKey(id);
                // 库存数量小于计划量
                if (inv.getQuantity() < qty) {
                    // 直接修改库存表occupation_code和is_occupied
                    inv.setIsOccupied(true);
                    inv.setOccupationCode(sta.getCode());
                    inventoryDao.save(inv);
                    qty = qty - inv.getQuantity();
                    b = true;
                    mergeStvLine(stvLineMap, inv, inv.getQuantity());
                    continue;
                }
                // 库存数量大于计划量
                if (inv.getQuantity() > qty) {
                    // 插入新库存记录
                    Inventory i = new Inventory();
                    BeanUtils.copyProperties(inv, i);
                    i.setId(null);
                    i.setIsOccupied(true);
                    i.setOccupationCode(sta.getCode());
                    i.setQuantity(qty);
                    inventoryDao.save(i);
                    // 更新原始库存数量
                    inv.setQuantity(inv.getQuantity() - qty);
                    inventoryDao.save(inv);
                    b = true;
                    mergeStvLine(stvLineMap, inv, qty);
                    break;
                }
                // 库存数量等于计划量
                if (inv.getQuantity().longValue() == qty.longValue()) {
                    // 直接占用对应库存明细
                    inv.setIsOccupied(true);
                    inv.setOccupationCode(sta.getCode());
                    inventoryDao.save(inv);
                    b = true;
                    mergeStvLine(stvLineMap, inv, qty);
                    break;
                }
            }
            inventoryDao.flush();
        }
        if (!b) {
            // 没有任何库存
            throw new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY, new Object[] {sta.getCode()});
        }
        // 如果店铺不允许部分出库 判断占用量是否=计划量
        if (!isPartial) {
            validateOccupy(sta.getId());
        }
        // 更新sta状态为库存占用
        stvLineDao.flush();
        stvLineDao.deleteLineById(sta.getId());
        stvLineDao.flush();
        // stvLineDao.createForCrossByStaId(sta.getId());
        // 重新添加stvLine
        for (String key : stvLineMap.keySet()) {
            Inventory value = stvLineMap.get(key);
            StvLine stvLine = new StvLine();
            stvLine.setBatchCode(value.getBatchCode());
            stvLine.setDirection(TransactionDirection.valueOf(2));
            stvLine.setOwner(sta.getOwner());
            stvLine.setQuantity(value.getQuantity());
            stvLine.setSku(value.getSku());
            stvLine.setInvStatus(value.getStatus());
            stvLine.setLocation(value.getLocation());
            stvLine.setInBoundTime(value.getInboundTime());
            if (value.getSkuCost() != null) {
                stvLine.setSkuCost(value.getSkuCost());
            } else {
                BigDecimal bigDecimal = new BigDecimal(0);
                stvLine.setSkuCost(bigDecimal);
            }
            stvLine.setTransactionType(transactionType);
            stvLine.setWarehouse(ou);
            stvLine.setStv(stv);
            stvLineDao.save(stvLine);
        }
        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        Long ouId = sta.getMainWarehouse().getId();
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, ouId);
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), creatorId, ouId);
        }
        if (bi != null) {
            if (bi.getIsReturnNeedPackage() != null) {
                // 判断VMI退仓店铺是否允许强制装箱
                if (bi.getIsReturnNeedPackage()) {
                    // 允许强制装箱 状态为装箱中
                    sta.setStatus(StockTransApplicationStatus.PACKING);
                }
            }
            sta.setLastModifyTime(new Date());
            // staDao.save(sta);
        }
    }

    /**
     * 合并STVLINE
     * 
     * @param stvLineMap
     * @param inv
     * @param qty
     */
    private void mergeStvLine(Map<String, Inventory> stvLineMap, Inventory inv, Long qty) {
        String key = inv.getBatchCode() + "-" + inv.getOwner() + "-" + inv.getLocation().getId() + "-" + inv.getSku().getId() + "-" + inv.getStatus().getId();
        if (stvLineMap.containsKey(key)) {
            Inventory i = stvLineMap.get(key);
            i.setQuantity(i.getQuantity() + qty);
            stvLineMap.put(key, i);
        } else {
            Inventory i = new Inventory();
            BeanUtils.copyProperties(inv, i);
            i.setQuantity(qty);
            stvLineMap.put(key, i);
        }
    }

    /**
     * 外包仓出库反馈VMI退大仓，VMI转店退仓修改允许部分退IDS除外 KJL
     */
    public void executeVmiReturnOutBoundAllAndPart(Long staId, Long ouId, Long msgId) {
        // Step1:校验反馈数据,不允许多出，不匹配出,校验完成标识部分出还是全部出;
        Boolean flag = false;
        List<Sku> skuList = skuDao.findErrorSkuVmiReturn(staId, msgId, new BeanPropertyRowMapper<Sku>(Sku.class));
        if (skuList != null && skuList.size() > 0) {
            for (Sku sku : skuList) {
                if (sku.getId().compareTo(0L) > 0) {
                    log.error("Vmi return outbound detail has error,more than plan or not in plan");
                    throw new BusinessException("");
                }
            }
        } else {
            flag = true;
        }
        // Step2:根据标识进行部分出和全部出逻辑
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        /*************** 原始校验 ************************************************/
        if (sta.getStatus().equals(StockTransApplicationStatus.CREATED)) {
            occupyInventoryByStaId(sta.getId(), null, null);
            staDao.flush();
        }
        List<Inventory> inventorys = inventoryDao.findByOccupiedCode(sta.getCode());
        if (inventorys == null || inventorys.isEmpty()) {
            throw new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
        }
        StockTransVoucher outStv = stvDao.findStvCreatedByStaId(staId);
        if (outStv == null) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        TransactionType transType = transactionTypeDao.findByCode(Constants.VMI_RETURN_OUT);
        if (transType == null) {
            throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND);
        }
        /*************** 原始校验 ************************************************/
        if (flag) {
            sta.setStatus(StockTransApplicationStatus.OCCUPIED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), null, sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            staDao.flush();
            // 执行出库
            predefinedOutExecution(staId, null);
        } else {
            /*
             * // 创建取消STV StockTransVoucher stv = new StockTransVoucher(); BigDecimal bn =
             * stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
             * stv.setBusinessSeqNo(bn.longValue()); stv.setCode(stvDao.getCode(staId, new
             * SingleColumnRowMapper<String>(String.class))); stv.setCreateTime(new Date());
             * stv.setDirection(TransactionDirection.OUTBOUND); stv.setOwner(sta.getOwner());
             * stv.setSta(sta); stv.setStatus(StockTransVoucherStatus.CANCELED);
             * stv.setLastModifyTime(new Date());
             * stv.setTransactionType(outStv.getTransactionType());
             * stv.setWarehouse(outStv.getWarehouse()); stvDao.save(stv); stvDao.flush(); // 调用SP
             * 修改库存占用 Map<String, Object> params = new HashMap<String, Object>();
             * params.put("in_sta_id", staId); params.put("in_stv_id", stv.getId());
             * params.put("in_transtype_id", stv.getTransactionType().getId()); SqlOutParameter s =
             * new SqlOutParameter("error_sku_id", Types.VARCHAR); SqlParameter[] sqlParameters =
             * {new SqlParameter("in_sta_id", Types.NUMERIC), new SqlParameter("in_stv_id",
             * Types.NUMERIC), new SqlParameter("in_transtype_id", Types.NUMERIC), s}; Map<String,
             * Object> result = staDao.executeSp("sp_rocc_inv_for_outvmi", sqlParameters, params);
             * String errorSku = (String) result.get("error_sku_id"); BusinessException root = null;
             * if (StringUtils.hasText(errorSku)) { String[] skus = errorSku.split(","); for (String
             * str : skus) { String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR); Long skuId =
             * Long.parseLong(strs[0]); Long qty = Long.parseLong(strs[1]); if (root == null) { root
             * = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY); }
             * BusinessException current = root; while (current.getLinkedException() != null) {
             * current = current.getLinkedException(); } Sku sku = skuDao.getByPrimaryKey(skuId);
             * BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new
             * Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
             * current.setLinkedException(be); } throw root; } else {
             */
            // 执行出库
            // 重建原出库stv line
            // stvLineDao.deleteStvLineByStvId(outStv.getId());
            // stvLineDao.createByStaId(staId);

            // for (Inventory inv : inventorys) {
            // inv.setOccupationCode(null);
            // inv.setIsOccupied(false);
            // inventoryDao.save(inv);
            // }

            inventoryDao.flush();
            // vmiPartOccInv(staId, ouId, msgId, outStv.getId());
            releaseUnnecessaryOcpQty(skuList, outStv.getId(), staId, inventorys);
            // 校验部分占用是否正确
            vailReturnOcpQty(sta.getCode(), msgId);

            // 完成 stv
            outStv.setLastModifyTime(new Date());
            outStv.setStatus(StockTransVoucherStatus.FINISHED);
            outStv.setFinishTime(new Date());
            // stvDao.save(stv);
            sta.setIsNeedOccupied(false);
            sta.setOutboundTime(new Date());
            sta.setFinishTime(new Date());
            sta.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null, sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            staDao.save(sta);
            if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
                if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                    vmi.generateReceivingWhenFinished(sta);
                }
            }
            staDao.flush();
            staLineDao.updateCompleteQuantityByStaId(sta.getId());
            // 计算成本
            staLineDao.updateSkuCostBySta(staId, sta.getMainWarehouse().getParentUnit().getParentUnit().getId());
            // 记录SN日志
            snLogDao.createTransitCrossLogByStvIdSql(outStv.getId());
            // 删除sn号
            snDao.deleteSNByStvIdSql(outStv.getId());
            // 移除占用库存
            removeInventory(sta, outStv);
            // 判断前置单据状态是否正确
            eventObserver.onEvent(new TransactionalEvent(sta));
            // 删除多余包裹
            cartonDao.deleteCreatedCartonBySta(sta.getId());

            // 部分出库的单据 未执行量插入取消占用表给IM
            hubWmsService.insertOccupiedAndReleaseUnDeal(sta.getId());

            // }
        }
        // VMI退仓反馈
        BiChannel sh = companyShopDao.getByCode(sta.getOwner());
        if (sh != null && sh.getVmiCode() != null && StringUtil.isEmpty(sta.getDataSource())) {
            VmiInterface vf = vmiFactory.getBrandVmi(sh.getVmiCode());
            vf.generateRtnWh(sta);
        }
    }

    /**
     * 释放多余的库存
     * 
     * @param skuList
     * @param stvId
     * @param staId
     * @param inventorys
     */
    public void releaseUnnecessaryOcpQty(List<Sku> skuList, Long stvId, Long staId, List<Inventory> inventorys) {
        StockTransVoucher stvOld = stockTransVoucherDao.getByPrimaryKey(stvId);
        StockTransVoucher stv = new StockTransVoucher();
        BigDecimal bn = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
        stv.setBusinessSeqNo(bn.longValue());
        stv.setCode(stvDao.getCode(staId, new SingleColumnRowMapper<String>(String.class)));
        stv.setCreateTime(new Date());
        stv.setDirection(TransactionDirection.OUTBOUND);
        stv.setOwner(stvOld.getOwner());
        stv.setSta(stvOld.getSta());
        stv.setStatus(StockTransVoucherStatus.CANCELED);
        stv.setLastModifyTime(new Date());
        stv.setTransactionType(stvOld.getTransactionType());
        stv.setWarehouse(stvOld.getWarehouse());
        // stvDao.save(stv);
        // stvDao.flush();
        Map<String, StvLine> cancelStvLineMap = new HashMap<String, StvLine>();
        // 释放库存
        for (Sku skuC : skuList) {
            Long cancelQty = skuC.getId();
            Long residueQty = cancelQty;
            Sku sku = skuDao.getByCode(skuC.getCode());
            for (Inventory inv : inventorys) {
                if (inv.getSku().getId().equals(sku.getId()) && inv.getQuantity().longValue() != 0) {
                    String key = inv.getOwner() + "-" + inv.getLocation().getId() + "-" + inv.getSku().getId().longValue();
                    StvLine stvLine = cancelStvLineMap.get(key);
                    if (stvLine == null) {
                        stvLine = new StvLine();
                        stvLine.setDirection(TransactionDirection.valueOf(2));
                        stvLine.setOwner(inv.getOwner());
                        stvLine.setSku(inv.getSku());
                        stvLine.setInvStatus(inv.getStatus());
                        stvLine.setLocation(inv.getLocation());
                        stvLine.setTransactionType(stvOld.getTransactionType());
                        stvLine.setWarehouse(stvOld.getWarehouse());
                        // stvLine.setStv(stv);
                        cancelStvLineMap.put(key, stvLine);
                    }
                    Long stvLQty = stvLine.getQuantity() == null ? 0 : stvLine.getQuantity();
                    residueQty = inv.getQuantity() + residueQty;
                    if (residueQty.longValue() < 0) {
                        inv.setOccupationCode(null);
                        inv.setIsOccupied(false);
                        stvLine.setQuantity(stvLQty + inv.getQuantity());
                        inventoryDao.save(inv);
                    } else if (residueQty.longValue() == 0) {
                        inv.setOccupationCode(null);
                        inv.setIsOccupied(false);
                        stvLine.setQuantity(stvLQty + inv.getQuantity());
                        inventoryDao.save(inv);
                        break;
                    } else {
                        Inventory i = new Inventory();
                        BeanUtils.copyProperties(inv, i);
                        i.setId(null);
                        i.setOccupationCode(null);
                        i.setIsOccupied(false);
                        i.setQuantity(inv.getQuantity() - residueQty);
                        stvLine.setQuantity(stvLQty + i.getQuantity());
                        inventoryDao.save(i);

                        inv.setQuantity(residueQty);
                        inventoryDao.save(inv);

                        break;
                    }
                }
            }
        }
        stvLineDao.flush();
        stvLineDao.deleteByStvId(stvId);
        stvLineDao.createForCrossByStaId(staId);

        stvDao.save(stv);
        // 保存
        for (StvLine sl : cancelStvLineMap.values()) {
            sl.setStv(stv);
            stvLineDao.save(sl);
        }
        stvDao.flush();

    }

    public void vailReturnOcpQty(String staCode, Long msgId) {
        List<StaLineCommand> sheet = msgRtnOutboundDao.findRtnOutBoudLineQty(msgId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
        // List<StaLineCommand> sheet = new ArrayList<StaLineCommand>();
        // sku 合并重复行
        Map<Long, Long> cache = new HashMap<Long, Long>();
        Long key = null;
        for (StaLineCommand cmd : sheet) {
            if (cmd == null) {
                continue;
            }
            key = cmd.getSkuId();
            if (cache.get(key) == null) {
                cache.put(key, cmd.getQuantity());
            } else {
                Long qty = cache.get(key);
                // qty = qty + cmd.getQuantity();
                cache.put(key, qty + cmd.getQuantity());
            }
        }
        Map<Long, Long> cache2 = new HashMap<Long, Long>();
        List<Inventory> list = inventoryDao.findByOccupiedCode(staCode);
        for (Inventory inv : list) {
            key = inv.getSku().getId();
            if (cache2.get(key) == null) {
                cache2.put(key, inv.getQuantity());
            } else {
                Long qty = cache2.get(key);
                // qty = qty + inv.getQuantity();
                cache2.put(key, qty + inv.getQuantity());
            }
        }

        for (Long skuId : cache.keySet()) {
            Long rtnQty = cache.get(skuId);
            Long ocpQty = cache2.get(skuId);
            if (ocpQty != null) {
                if (ocpQty.longValue() > rtnQty.longValue()) {
                    logger.error("占用数量大于反馈的数量！stacode：" + staCode);
                    throw new BusinessException(ErrorCode.DELETE_OCP_INV_ERROR);
                }
            }
        }

    }

    /**
     * VMI退仓部分库存占用
     */
    public void vmiPartOccInv(Long staId, Long ouId, Long msgId, Long stvId) {

        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        BigDecimal transactionid = transactionTypeDao.findByStaType(sta.getType().getValue(), new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
        // BiChannel shop = companyShopDao.getByCode(sta.getOwner());
        if (transactionid == null) {
            throw new BusinessException(ErrorCode.TRANSTACTION_TYPE_NOT_FOUND, new Object[] {""});
        }
        TransactionType transactionType = transactionTypeDao.getByPrimaryKey(transactionid.longValue());
        if (transactionType == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_NOT_FOUND);
        }
        List<StaLineCommand> sheet = msgRtnOutboundDao.findRtnOutBoudLineQty(msgId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
        // List<StaLineCommand> sheet = new ArrayList<StaLineCommand>();
        // sku 合并重复行
        Map<String, StaLineCommand> cache = new HashMap<String, StaLineCommand>();
        String key = null;
        for (StaLineCommand cmd : sheet) {
            if (cmd == null) {
                continue;
            }
            key = new StringBuilder(cmd.getBarCode() + "_" + cmd.getInvInvstatusId()).toString();
            if (cache.get(key) == null) {
                cache.put(key, cmd);
            } else {
                StaLineCommand stalineCmd = cache.get(key);
                stalineCmd.setQuantity(stalineCmd.getQuantity() + cmd.getQuantity()); // ??
            }
        }

        sheet.clear();
        sheet.addAll(cache.values());

        OperationUnit ou = operationUnitDao.getByPrimaryKey(ouId);
        OperationUnit parOu = operationUnitDao.getByPrimaryKey(ou.getParentUnit().getId());
        Long cmpOuid = parOu.getParentUnit().getId();

        stvLineDao.deleteStvLineByStvId(stvId);
        inventoryDao.updateOccupyByCode(sta.getCode());
        // inventoryDao.flush();
        // 拆分库位占用库存
        for (int i = sheet.size() - 1; i >= 0; i--) {
            Long zQty = sheet.get(i).getQuantity();
            Sku sku = skuDao.getByPrimaryKey(sheet.get(i).getSkuId());
            InventoryStatus inventoryStatus = inventoryStatusDao.getByPrimaryKey(sheet.get(i).getInvInvstatusId());
            Long qty = inventoryDao.checkVmiReturnSkuQty(sta.getOwner(), sku.getId(), ouId, inventoryStatus.getId(), new SingleColumnRowMapper<Long>(Long.class));
            if (qty == null) {
                throw new BusinessException(ErrorCode.EXCEL_SKU_INVENTORY_ERROR, new Object[] {SHEET_0, sheet.get(i).getSkuCode(), sheet.get(i).getQuantity()});
            }
            if (sheet.get(i).getQuantity() > qty) {
                Long cy = sheet.get(i).getQuantity() - qty;
                throw new BusinessException(ErrorCode.EXCEL_SKU_INVENTORY_ERROR, new Object[] {SHEET_0, sheet.get(i).getSkuCode(), cy});
            }
            Long qtyOcp = inventoryDao.findQtyOccpInv(sta.getOwner(), sku.getId(), ouId, new SingleColumnRowMapper<Long>(Long.class));// 数量占用的库存
            Long locationid = inventoryDao.getVmiReturnLoaction(sta.getOwner(), sku.getId(), ouId, sheet.get(i).getQuantity(), inventoryStatus.getId(), transactionType.getId(), new SingleColumnRowMapper<Long>(Long.class));
            if (locationid != null) {
                // 有足够库存直接分配库位
                WarehouseLocation location = warehouseLocationDao.getByPrimaryKey(locationid);
                sheet.get(i).setWarehouseLocation(location);
                sheet.get(i).setSku(sku);
                sheet.get(i).setInvStatus(inventoryStatus);
                // locationmap.put(location.getCode(), location);
            } else {
                String name = sheet.get(i).getIntInvstatusName();
                sheet.remove(i);
                // 没有单个足够库存库位拆分不同库位
                List<InventoryCommand> iList = inventoryDao.findVmiReturnSkuQtyLocation(sta.getOwner(), sku.getId(), ouId, inventoryStatus.getId(), transactionType.getId(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));

                if (inventoryStatus.getIsForSale() != null && inventoryStatus.getIsForSale() && qtyOcp != null && qtyOcp != 0 && iList != null && iList.size() > 0) {

                    Iterator<InventoryCommand> it = iList.iterator();
                    while (it.hasNext()) {
                        InventoryCommand x = it.next();
                        qtyOcp = qtyOcp - x.getQuantity();

                        if (qtyOcp > 0) {
                            it.remove();
                        } else if (qtyOcp == 0) {
                            it.remove();
                            break;
                        } else {
                            x.setQuantity(-qtyOcp);
                            break;
                        }
                    }
                }
                // 拆分库位
                for (InventoryCommand inv : iList) {
                    if (zQty <= 0) {
                        break;
                    }
                    WarehouseLocation location1 = warehouseLocationDao.getByPrimaryKey(inv.getLocationId());
                    StaLineCommand sl = new StaLineCommand();
                    sl.setSku(sku);
                    sl.setWarehouseLocation(location1);
                    if (inv.getQuantity() > zQty) {
                        sl.setQuantity(zQty);
                    } else {
                        sl.setQuantity(inv.getQuantity());
                    }
                    sl.setInvStatus(inventoryStatus);
                    sl.setIntInvstatusName(name);
                    // invmap.put(name, inventoryStatus);
                    // locationmap.put(location1.getCode(), location1);
                    zQty = zQty - inv.getQuantity();
                    sheet.add(sl);
                }
                if (zQty > 0) {
                    throw new BusinessException(ErrorCode.EXCEL_SKU_INVENTORY_ERROR, new Object[] {SHEET_0, sku.getBarCode(), zQty});

                }
            }
        }

        for (StaLineCommand cmd : sheet) {
            InventoryStatus instatus = inventoryStatusDao.getByPrimaryKey(cmd.getInvStatus().getId());
            StvLine stvLine = new StvLine();
            stvLine.setDirection(TransactionDirection.valueOf(2));
            stvLine.setOwner(sta.getOwner());
            stvLine.setQuantity(cmd.getQuantity());
            stvLine.setSku(cmd.getSku());
            stvLine.setInvStatus(instatus);
            stvLine.setLocation(cmd.getWarehouseLocation());
            stvLine.setTransactionType(transactionType);
            stvLine.setWarehouse(ou);
            stvLine.setStv(new StockTransVoucher(stvId));
            stvLineDao.save(stvLine);
        }
        sta.setStatus(StockTransApplicationStatus.CREATED);
        stvLineDao.flush();
        occupyInventoryByStaId(sta.getId(), null, null);

        // 部分出库的单据 未执行量插入取消占用表给IM
        hubWmsService.insertOccupiedAndReleaseUnDeal(sta.getId());
    }

    /**
     * vmi 作业单解冻
     */
    @Transactional(readOnly = true)
    public Pagination<StockTransApplicationCommand> findVMIFlittingStas(StockTransApplication sta, int start, int pageSize, Long ouid, int type, int status, Sort[] sorts) {

        String code = null;
        String refcode = null;
        String owner = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner();
            }
        }
        return staDao.findVMIFlittingStas(start, pageSize, code, refcode, owner, ouid, type, status, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    /**
     * 作业单明细
     */
    public List<StaLineCommand> findVmiUnfreezeDetails(Long staid) {
        return staLineDao.findVmiUnfreezeDetails(staid, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
    }



    public void createInventoryCheckLineNative(Collection<Long> locList, InventoryCheck invCk) {
        for (Long locId : locList) {
            if (locId != null) {
                inventoryCheckLineDao.insertLineByIc(invCk.getId(), locId);
            }
        }
        // 锁库位
        inventoryCheckLineDao.updateDistrictByInvCheck(invCk.getId());
        warehouseLocationDao.lockByInvCheck(invCk.getId());
    }

    public InventoryCheck createInventoryCheck(User user, OperationUnit ou, String remork, Boolean daily) {
        InventoryCheck invCk = new InventoryCheck();
        invCk.setCreateTime(new Date());
        invCk.setCreator(user);
        invCk.setOu(ou);
        invCk.setRemork(remork);
        invCk.setStatus(InventoryCheckStatus.CREATED);
        if (daily != null && daily) {
            invCk.setType(InventoryCheckType.DAILY);
        }
        invCk.setCode(sequenceManager.getCode(InventoryCheck.class.getName(), invCk));
        inventoryCheckDao.save(invCk);
        inventoryCheckDao.flush();
        return invCk;
    }



    public StockTransApplication createStaForOutSalesOrder(StockTransApplication sta, List<StaLine> stalines) {
        staDao.save(sta);
        sta.getStaDeliveryInfo().setId(sta.getId());
        staDeliveryInfoDao.save(sta.getStaDeliveryInfo());
        Long skuQty = 0L;
        for (StaLine l : stalines) {
            l.setOwner(sta.getOwner());
            l.setSta(sta);
            staLineDao.save(l);
            skuQty += l.getQuantity() == null ? 0 : l.getQuantity();
        }
        sta.setSkuQty(skuQty);
        staDao.flush();
        staDao.updateStaSkus(Constants.STA_SKUS_SLIPT_STR, sta.getId());
        staDao.updateSkuQtyById(sta.getId());
        staDao.updateIsSnSta(sta.getId());
        // 计算库存是否足够
        // 检查是否有足够销售库存
        List<StaLineCommand> lines = staLineDao.findNotEnoughtSalesAvailInvBySta(sta.getId(), new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
        if (lines != null && lines.size() != 0) {
            BusinessException root = new BusinessException(ErrorCode.EXCEL_IMPORT_STA_CREATE_NOT_ENOUNGT_INVENTORY, new Object[] {sta.getRefSlipCode()});
            for (StaLineCommand l : lines) {
                BusinessException current = new BusinessException(ErrorCode.SKU_NOT_ENOUGHT_INVNENTORY, new Object[] {l.getBarCode(), l.getJmcode(), l.getKeyProperties() == null ? "" : l.getKeyProperties(), l.getQuantity()});
                root.setLinkedException(current);
            }
            throw root;
        }
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return sta;
    }

    public Pagination<InventoryCheckDifferenceLineCommand> findInvCkDifLineByInvCkId(int start, int pageSize, Long invCkId, Sort[] sort) {
        return inventoryCheckDifferenceLineDao.findInvCkDifLineByInvCkId(start, pageSize, invCkId, sort, new BeanPropertyRowMapper<InventoryCheckDifferenceLineCommand>(InventoryCheckDifferenceLineCommand.class));
    }



    /**
     * EBS盘点确认
     * 
     * @throws Exception
     */
    public void confirmInventoryCheckEbs(String confirmUser, Long invCkId, User user, boolean checkUser) throws Exception {
        // 更新盘点批状态
        InventoryCheck ic = inventoryCheckDao.getByPrimaryKey(invCkId);
        if (ic == null) {
            throw new BusinessException(ErrorCode.INVENTORY_CHECK_NOT_FOUND);
        }
        if (!InventoryCheckStatus.CONFIRMOMS.equals(ic.getStatus())) {
            throw new BusinessException(ErrorCode.INVENTORY_CHECK_STATUS_NOT_UNEXECUTE, new Object[] {ic.getCode()});
        }
        if (checkUser) {
            if (ic.getStatus().equals(InventoryCheckStatus.CONFIRMOMS)) {
                if (!StringUtils.hasText(confirmUser)) {
                    throw new BusinessException(ErrorCode.INVENTORY_CHECK_CONFIRM_USER_EMPTY, new Object[] {ic.getCode()});
                }
            }
        }
        TransactionType inType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_INVENTORY_CHECK_IN);
        if (inType == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_INVENTORY_CHECK_IN_NOT_FOUND);
        }
        TransactionType outType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_INVENTORY_CHECK_OUT);
        if (outType == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_INVENTORY_CHECK_OUT_NOT_FOUND);
        }
        List<InventoryCheckDifferenceLine> list = inventoryCheckDifferenceLineDao.findCheckOverageIsNullByIcid(invCkId);
        if (list != null && list.size() > 0) {
            throw new BusinessException(ErrorCode.INV_CHECK_IS_UNTREATED);
        }
        if (checkUser) {
            if (!ic.getStatus().equals(InventoryCheckStatus.CHECKWHMANAGER)) {
                ic.setConfirmUser(confirmUser);
            }
        }
        ic.setStatus(InventoryCheckStatus.FINISHED);
        inventoryCheckDao.save(ic);
        // 解锁库位
        warehouseLocationDao.unLockByInvCheck(ic.getId());
        warehouseLocationDao.flush();
        // 执行调整数据
        whExe.exeAdjustingSta(ic.getId(), user);
        String batchCode = Long.valueOf(new Date().getTime()).toString();
        // 更新库存
        Map<String, Object> invparams = new HashMap<String, Object>();
        invparams.put("in_ic_id", ic.getId());
        invparams.put("in_batch_code", batchCode);
        invparams.put("in_cmp_id", ic.getOu().getParentUnit().getParentUnit().getId());
        invparams.put("in_out_transtype_id", outType.getId());
        invparams.put("in_in_transtype_id", inType.getId());
        SqlParameter[] invSqlP =
                {new SqlParameter("in_ic_id", Types.NUMERIC), new SqlParameter("in_batch_code", Types.VARCHAR), new SqlParameter("in_cmp_id", Types.NUMERIC), new SqlParameter("in_out_transtype_id", Types.NUMERIC),
                        new SqlParameter("in_in_transtype_id", Types.NUMERIC)};
        staDao.executeSp("sp_inventory_check_execute_ebs", invSqlP, invparams);
        // 更新SN号
        snLogDao.createLogByIc(ic.getId(), batchCode);
        snDao.deleteByIc(ic.getId());
        snDao.createByIc(ic.getId(), batchCode);

        // 新增通知品牌
        BiChannel sh = ic.getShop();
        if (sh != null && sh.getVmiCode() != null) {
            VmiInterface vf = vmiFactory.getBrandVmi(sh.getVmiCode());
            vf.generateVMIReceiveInfoByInvCk(ic);
        }


        if (checkUser) {
            inventoryCheckListenerManager.inventoryCheckFinished(ic);
            try {
                eventObserver.onEvent(new TransactionalEvent(ic));
            } catch (BusinessException e) {
                throw e;
            }
        }
    }

    /**
     * 盘点批列表（新建和差异未处理状态的）
     * 
     * @param id
     * @param sorts
     * @return
     */
    public List<InventoryCheck> findInventoryCheckList(Long ouid, Sort[] sorts) {
        return inventoryCheckDao.findInventoryCheckList(ouid, sorts);
    }

    public List<InventoryCheckCommand> findInventoryCheckListByType(Long ouid, Integer type, Sort[] sorts) {
        return inventoryCheckDao.findInventoryCheckCommandListByType(ouid, type, new BeanPropertyRowMapper<InventoryCheckCommand>(InventoryCheckCommand.class));
    }

    public List<InventoryCheck> findInventoryCheckListByTypes(Long ouid, Sort[] sorts) {
        return inventoryCheckDao.findInventoryCheckListByTypes(ouid, sorts);
    }

    /**
     * 盘点批列表（盘点库存已确认）
     * 
     * @param id
     * @param sorts
     * @return
     */
    public List<InventoryCheck> findInventoryCheckListManager(Long ouid, InventoryCheck invCk, Sort[] sorts) {

        return inventoryCheckDao.findInventoryCheckListManager(ouid, invCk.getStatus(), sorts);
    }

    public Pagination<InventoryCheckDifferenceSnLineCommand> findSnDiffLineByIC(int start, int pageSize, Long icid, Sort[] sorts) {
        return inventoryCheckDifferenceSnLineDao.findSnDiffLineByIc(start, pageSize, icid, new BeanPropertyRowMapperExt<InventoryCheckDifferenceSnLineCommand>(InventoryCheckDifferenceSnLineCommand.class), sorts);
    }

    public Pagination<InventoryCheckDifferenceSnLineCommand> findSnDiffLineSkuChangeByIc(int start, int pageSize, Long icid, Sort[] sorts) {
        return inventoryCheckDifferenceSnLineDao.findSnDiffLineSkuChangeByIc(start, pageSize, icid, new BeanPropertyRowMapperExt<InventoryCheckDifferenceSnLineCommand>(InventoryCheckDifferenceSnLineCommand.class), sorts);
    }

    public void releaseLibaryInventoryByStaId(Long staId, Long userId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.BETWENLIBARY_STA_NOT_FOUND);
        }
        // sta状态检查
        if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
            throw new BusinessException(ErrorCode.BETWENLIBARY_STA_OCCUPIED_ERROR, new Object[] {sta.getCode()});
        }

        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (stv == null) {
            throw new BusinessException(ErrorCode.BETWENLIBARY_STV_NOT_FOUND);
        }
        List<Inventory> invList = inventoryDao.findByOccupiedCode(sta.getCode());
        if (invList.size() == 0) {
            throw new BusinessException(ErrorCode.BETWENLIBARY_NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
        }

        // 释放占用库存
        inventoryDao.releaseInventoryByStaId(staId);

        // 删除stvLine,stv
        stvLineDao.deleteStvLineByStvId(stv.getId());
        stvDao.delete(stv);
        // 申请库间移动时STV未选择货主,清空staline货主
        if (StringUtils.hasText(sta.getOwner())) {
            staLineDao.updateStvLineOwnerBySta(sta.getId());
        }
        // 更新sta状态
        sta.setStatus(StockTransApplicationStatus.CREATED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setInboundTime(new Date());
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
    }



    /***
     * staline 完成数量更新
     * 
     * @param staId
     */
    private void updateStaLineCompleteQtyBySta(Long staId) {
        List<StaLine> stalines = staLineDao.findByStaId(staId);
        Map<Long, Long> stvlines = stvLineDao.findCompleteStvLineByStaId(staId, new BaseRowMapper<Map<Long, Long>>() {
            private Map<Long, Long> result = new HashMap<Long, Long>();

            public Map<Long, Long> mapRow(ResultSet rs, int rowNum) throws SQLException {
                Long id = getResultFromRs(rs, "id", Long.class);
                Long quantity = getResultFromRs(rs, "quantity", Long.class);
                result.put(id, quantity);
                return result;
            }
        });
        for (StaLine l : stalines) {
            staLineDao.updateCompleteQuantity(l.getId(), stvlines.get(l.getSku().getId()));
        }
    }

    /**
     * 合并数据添加对应SKU名称,编码扩展属性
     * 
     * @param result
     * @param skuMap
     * @return
     */
    @SuppressWarnings({"rawtypes"})
    public List<BetweenLabaryMoveCommand> mergeEqualsMoveSku(List<BetweenLabaryMoveCommand> result, Map<String, Sku> skuMap) {
        List<BetweenLabaryMoveCommand> list = new ArrayList<BetweenLabaryMoveCommand>();
        MultiValueMap poHeadLineMap = new MultiValueMap(); // 合并相同sku
        for (BetweenLabaryMoveCommand moveSku : result) {
            Sku sku = skuMap.get(moveSku.getCode());
            poHeadLineMap.put(sku.getId().toString(), moveSku);
        }

        for (Object id : poHeadLineMap.keySet().toArray()) { // 合并相同SKu移动数量求和
            String skuId = id.toString();
            Collection lines = poHeadLineMap.getCollection(skuId);
            if (!lines.isEmpty()) {
                int quantity = 0;
                BetweenLabaryMoveCommand moveSku = null;
                for (Object lineObj : lines) {
                    moveSku = (BetweenLabaryMoveCommand) lineObj;
                    quantity += moveSku.getMoveQuantity();
                }
                moveSku.setMoveQuantity(Long.valueOf(quantity));
                list.add(moveSku);
            }
        }

        for (BetweenLabaryMoveCommand moveSku : list) { // 添加对应sku相关数据名称，扩展属性
            String code = moveSku.getCode();
            if (skuMap.containsKey(code)) {
                Sku sku = skuMap.get(code);
                moveSku.setId(sku.getId());
                moveSku.setBarCode(sku.getBarCode());
                moveSku.setJmCode(sku.getJmCode());
                moveSku.setKeyProperties(sku.getKeyProperties());
                moveSku.setName(sku.getName());
                moveSku.setCode(sku.getCode());
            }
        }
        return list;
    }

    /**
     * 根据作业单插入包裹信息
     */
    public String insertPackageBySta(StockTransApplication sta) {
        PackageInfo info = new PackageInfo();
        info.setIsChecked(false);
        if (sta.getStaDeliveryInfo() != null) {
            // 不支持SF、JD
            if (sta.getStaDeliveryInfo().getLpCode().equals(Transportator.JD)) {
                throw new BusinessException(ErrorCode.ERROR_DELIINFO_LOCODE);
            }
            // 只支持TTK、ZTO、STO、EMS WX、YTO、CNP
            if (!sta.getStaDeliveryInfo().getLpCode().equals(Transportator.SF) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.SFDSTH) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.TTKDEX)
                    && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.ZTO) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.STO) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.EMS)
                    && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.WX) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.YTO) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.CXC)
                    && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.RFD) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.MDM) && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.CNP)
                    && !sta.getStaDeliveryInfo().getLpCode().equals(Transportator.CS100) && !sta.getStaDeliveryInfo().getLpCode().startsWith("YL_")) {
                throw new BusinessException(ErrorCode.ERROR_DELIINFO_LOCODE2);
            }
            info.setLpCode(sta.getStaDeliveryInfo().getLpCode());
            info.setStaDeliveryInfo(sta.getStaDeliveryInfo());
        } else {
            throw new BusinessException(ErrorCode.ERROR_DELIINFO_ISNULL);
        }
        info.setVersion(0);
        info.setStatus(PackageInfoStatus.CREATED);
        info.setCreateTime(new Date());
        info.setLastModifyTime(new Date());
        info.setOpUnit(sta.getMainWarehouse());
        packageInfoDao.save(info);
        packageInfoDao.flush();
        StaDeliveryInfo sd = null;
        // 菜鸟云栈
        if (caiNiaoLpCodeCache.get("reset") == null) {
            List<ChooseOption> option = chooseOptionDao.findAllOptionListByCategoryCode(Constants.ALI_WAYBILL);
            for (ChooseOption co : option) {
                if (Constants.ALI_WAYBILL_SWITCH_ON.equals(co.getOptionValue())) {
                    caiNiaoLpCodeCache.put(co.getOptionKey(), "1");
                }
            }
            caiNiaoLpCodeCache.put("reset", "1");
        }
        String transOlCaiNiao = caiNiaoLpCodeCache.get(info.getLpCode());
        if (transOlCaiNiao != null) {
            sd = cnyz.matchingTransNoByPackId(info.getId(), null);
            // sd= transAliWaybill.waybillGetByPackage(info.getId());
        }
        // 菜鸟云栈 end
        // 快递服务逻辑
        TransOlInterface transOlLogis = transLpCodeCache.get(info.getLpCode());
        if (transOlLogis == null) {
            List<ChooseOption> ChooseOptionList = chooseOptionDao.findListByCategoryCodeAndKey("logisticsCode", "1"); // 1是开，0是关
            for (ChooseOption choose : ChooseOptionList) {
                transLpCodeCache.put(choose.getOptionValue(), logistics);
            }
            transOlLogis = transLpCodeCache.get(info.getLpCode());
            if (transOlLogis != null) {
                logistics.matchingTransNoByPackId(info.getId(), null);
                return info.getTrackingNo() + "," + info.getId().toString();
            }
        } else {
            transOlLogis = transLpCodeCache.get(info.getLpCode());
            if (transOlLogis != null) {
                logistics.matchingTransNoByPackId(info.getId(), null);
                return info.getTrackingNo() + "," + info.getId().toString();

            }
        }
        // 快递服务逻辑 end
        if (sd != null) {

        } else if (info.getLpCode().endsWith(Transportator.ZTO)) {
            zto.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.STO)) {
            sto.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.EMS)) {
            ems.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.TTKDEX)) {
            ttk.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.SF) || info.getLpCode().endsWith(Transportator.SFDSTH)) {
            sf.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.YTO)) {
            yto.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.CXC)) {
            cxc.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.RFD)) {
            rfd.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().startsWith("YL_") || info.getLpCode().endsWith(Transportator.WX) || info.getLpCode().endsWith(Transportator.MDM) || info.getLpCode().endsWith(Transportator.CS100)) {
            def.matchingTransNoByPackId(info.getId(), null);
        } else if (info.getLpCode().endsWith(Transportator.CNP)) {
            cnp.matchingTransNoByPackId(info.getId(), null);
        }
        return info.getTrackingNo() + "," + info.getId().toString();
    }

    public void staInboundBySlipCode(String slipCode, String locationCode) {
        List<StockTransApplication> stas = staDao.findBySlipCodeAndStatus(slipCode);
        staInboundByStaId(stas.get(0), locationCode);
    }

    /**
     * 作业单入库至同一库位不做任何校验
     * 
     * @param staId
     * @param locationCode
     */
    public void staInboundByStaId(StockTransApplication sta, String locationCode) {
        WarehouseLocation loc = warehouseLocationDao.findByLocationCode(locationCode, sta.getMainWarehouse().getId());
        if (!StockTransApplicationStatus.CREATED.equals(sta.getStatus())) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        if (loc == null) {
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        }
        List<StaLine> stals = staLineDao.findByStaId(sta.getId());
        List<StvLine> stvls = new ArrayList<StvLine>();
        for (StaLine stal : stals) {
            StvLine stvl = new StvLine();
            stvl.setStaLine(stal);
            stvl.setSku(stal.getSku());
            stvl.setLocation(loc);
            stvl.setQuantity(stal.getQuantity());
            stvls.add(stvl);
        }
        StockTransVoucher stvCreated = purchaseReceiveStep1(sta, stvls, null, null, null, null, false);
        purchaseReceiveStep2(stvCreated.getId(), stvls, false, null, false, true);
    }

    public StockTransApplication createVMIFlittingSta(StockTransApplication stacode, VMIFlittingCommand comd, User user, OperationUnit ou, List<VMIFlittingCommand> staLineCmd) throws Exception {
        // create sta
        log.debug("start create trans cross sta : {}", stacode.getCode());
        StockTransApplication sta = new StockTransApplication();
        OperationUnit ou1 = operationUnitDao.getByPrimaryKey(comd.getStartWarehouseId());// 源头出库
        if (ou1 == null) {
            throw new BusinessException(ErrorCode.START_OPERATION_UNIT_NOT_FOUNT);
        }
        OperationUnit ou2 = operationUnitDao.getByPrimaryKey(comd.getEndWarehouseId());// 目标出库
        if (ou2 == null) {
            throw new BusinessException(ErrorCode.END_OPERATION_UNIT_NOT_FOUNT);
        }
        if (!StringUtils.hasLength(comd.getOwner())) {
            throw new BusinessException(ErrorCode.START_OWNER_NOT_FOUNT, new Object[] {comd.getOwner()});
        }
        whExe.validateBiChannelSupport(null, comd.getOwner());
        if (!StringUtils.hasLength(comd.getAddOwner())) {
            throw new BusinessException(ErrorCode.END_OWNER_NOT_FOUNT, new Object[] {comd.getAddOwner()});
        }
        whExe.validateBiChannelSupport(null, comd.getAddOwner());
        InventoryStatus invStatus = inventoryStatusDao.getByPrimaryKey(comd.getInvStatusId());
        if (invStatus == null) {
            throw new BusinessException(ErrorCode.INVENTORY_STATUS_NOT_FOUND);
        }
        List<OperationUnitCommand> list = operationUnitDao.findWarehouseByCompanyList(ou1.getId(), comd.getOwner(), new BeanPropertyRowMapper<OperationUnitCommand>(OperationUnitCommand.class));
        if (list == null || list.size() == 0) {
            throw new BusinessException(ErrorCode.VMI_FLITTING_OUT_SHOP_REF, new Object[] {ou1.getName(), comd.getOwner()});
        }
        List<OperationUnitCommand> list2 = operationUnitDao.findWarehouseByCompanyList(ou2.getId(), comd.getAddOwner(), new BeanPropertyRowMapper<OperationUnitCommand>(OperationUnitCommand.class));
        if (list2 == null || list2.size() == 0) {
            throw new BusinessException(ErrorCode.VMI_FLITTING_OUT_SHOP_REF, new Object[] {ou2.getName(), comd.getAddOwner()});
        }
        sta.setMainWarehouse(ou1);
        sta.setAddiWarehouse(ou2);
        sta.setOwner(comd.getOwner());
        sta.setAddiOwner(comd.getAddOwner());
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        Date d = new Date();
        sta.setCreateTime(d);
        // sta.setInboundTime(d);
        sta.setMainStatus(invStatus);
        sta.setAddiStatus(invStatus);
        sta.setType(StockTransApplicationType.SAME_COMPANY_TRANSFER);
        sta.setIsNeedOccupied(true);
        sta.setStatus(StockTransApplicationStatus.CREATED);
        sta.setLastModifyTime(new Date());
        sta.setCreator(user);
        sta.setCode(stacode.getCode());
        // VMI退仓反馈
        BiChannel shop = companyShopDao.getByCode(comd.getAddOwner());
        if (shop != null && shop.getVmiCode() != null) {
            VmiInterface vf = vmiFactory.getBrandVmi(shop.getVmiCode());
            String slipCode = vf.generateRtnStaSlipCode(shop.getVmiCode(), sta.getType());
            sta.setRefSlipCode(slipCode);
        }
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), user.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        log.debug("create trans cross sta line : {}", stacode.getCode());
        for (VMIFlittingCommand cmd : staLineCmd) {
            Sku sku = skuDao.getByPrimaryKey(cmd.getId());
            if (sku == null) {
                throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {""});
            }
            // create sta line
            StaLine staLine = new StaLine();
            staLine.setQuantity(cmd.getMoveQuantity());
            staLine.setOwner(sta.getOwner());
            staLine.setSku(sku);
            staLine.setSta(sta);
            staLine.setInvStatus(invStatus);
            staLineDao.save(staLine);
        }
        log.debug("create trans cross sta line end : {}", stacode.getCode());
        staDao.save(sta);
        staDao.flush();
        staDao.updateSkuQtyById(sta.getId());
        log.debug("sta dao flush : {}", stacode.getCode());
        Long staId = sta.getId();
        if (staId != null) {
            if (StringUtils.hasText(sta.getOwner())) {
                log.debug("check sta inventroy : {}", stacode.getCode());
                // 检查是否有足够销售库存
                List<StaLineCommand> lines = staLineDao.findNotFoundSalesAvailInvBySta(staId.longValue(), sta.getOwner(), true, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
                log.debug("check sta inventroy query end : {}", stacode.getCode());
                if (lines.size() > 0) {
                    BusinessException root = new BusinessException(ErrorCode.BETWEENLIBARYMOVE_STA_CREATE_ERROR);
                    BusinessException parent = root;
                    int i = 0;
                    for (StaLineCommand l : lines) {
                        Sku sku = skuDao.getByPrimaryKey(l.getSkuId());
                        BusinessException current = new BusinessException(ErrorCode.SKU_NOT_ENOUGHT_INVNENTORY, new Object[] {sku.getBarCode(), sku.getJmCode(), sku.getKeyProperties(), l.getQuantity()});
                        parent.setLinkedException(current);
                        parent = current;
                        if (i >= 10) {
                            break;
                        }
                        i++;
                    }
                    throw root;
                }
            }
        } else {
            throw new BusinessException(ErrorCode.BETWENLIBARY_STA_CREATE_ERROR);
        }
        log.debug("create trans cross sta end : {}", stacode.getCode());
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return sta;
    }

    public SkuSnCommand findSn(String sn, SkuSnStatus status, Long ouid) {
        return snDao.findBySn(sn, ouid, status.getValue(), new BeanPropertyRowMapper<SkuSnCommand>(SkuSnCommand.class));
    }

    public BiChannelSkuSupplies findpaperSkuByBarCode(String barCode, Long staId, Long ouId) {
        return biChannelSkuSuppliesDao.findpaperSkuByBarCode(barCode, staId, ouId, new BeanPropertyRowMapper<BiChannelSkuSupplies>(BiChannelSkuSupplies.class));
    }

    public String findSkuById(Long skuId) {
        return skuDao.getByPrimaryKey(skuId).getBarCode();
    }

    public List<StockTransApplicationCommand> findOutOfCossStaNotFinishedListByType(StockTransApplicationType type, OperationUnit wh, Sort[] sorts) {
        return staDao.findOutOfCossStaNotFinishedListByType(type.getValue(), wh.getId(), sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public List<StvLine> findStvLineListByStaId(Long staId) {
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        return stvLineDao.findStvLineListByStvId(stv.getId());
    }

    public List<StvLineCommand> findStvLinesListByStaId(Long staId) {
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        return stvLineDao.findStvLinesListByStvId(stv.getId(), new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public List<StaLineCommand> findStaLineDetailByStaId(Long staId, Sort[] sorts) {
        return staLineDao.findStaLineDetailByStaId(staId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public void disableLocations(List<WarehouseLocation> locations) {
        System.out.println(OMS_SF_OUTBOUND);
        if (locations == null || locations.isEmpty()) return;
        List<BusinessException> errors = new ArrayList<BusinessException>();
        for (WarehouseLocation location : locations) {
            location = warehouseLocationDao.getByPrimaryKey(location.getId());
            if (wareHouseLocationManager.checkInventoryByDistrictOrLocation(null, location.getId())) {
                log.debug("......The location is not available, but there is inventory,");
                errors.add(new BusinessException(ErrorCode.WH_LOCATION_HAS_INVENTORY, new Object[] {location.getCode(), location.getBarCode()}));
            } else {
                location.setLastModifyTime(new Date());
                location.setIsAvailable(false);
            }
        }
        businessExceptionPost(errors);
    }

    /**
     * 盘点库位列表
     * 
     * @param invcheckid
     * @return
     */
    public Pagination<InventoryCheckLineCommand> findinvCheckLineDetial(int start, int pageSize, Long invcheckid, Sort[] sorts) {
        return inventoryCheckLineDao.findinvCheckLineDetialByInvCheckId(start, pageSize, invcheckid, new BeanPropertyRowMapper<InventoryCheckLineCommand>(InventoryCheckLineCommand.class), sorts);
    }

    public Pagination<InventoryCheckDifTotalLineCommand> findVMIinvCheckLineDetial(int start, int pageSize, Long invcheckid, Sort[] sorts) {
        return vmiinvCheckLineDao.findvmiicLineByInvCheckId(start, pageSize, invcheckid, new BeanPropertyRowMapper<InventoryCheckDifTotalLineCommand>(InventoryCheckDifTotalLineCommand.class), sorts);
    }

    public Pagination<InventoryCheckDifferenceLineCommand> findInvCheckCountNoLocation(int start, int pageSize, Long invCkId, Sort[] sort) {
        return inventoryCheckDifferenceLineDao.findInvCheckCountNoLocationByInvCheckId(start, pageSize, invCkId, sort, new BeanPropertyRowMapper<InventoryCheckDifferenceLineCommand>(InventoryCheckDifferenceLineCommand.class));
    }

    public StockTransVoucher findStvById(Long stvid) {
        return stvDao.getByPrimaryKey(stvid);
    }

    /**
     * 
     * @param invcheckid
     * @return
     */
    public InventoryCheckCommand findInventoryCheckById(Long invcheckid) {
        return inventoryCheckDao.findInventoryCheck(invcheckid, new BeanPropertyRowMapper<InventoryCheckCommand>(InventoryCheckCommand.class));
    }

    public InventoryCheckCommand findVMIICById(Long invcheckid) {
        return inventoryCheckDao.findICById(invcheckid, new BeanPropertyRowMapper<InventoryCheckCommand>(InventoryCheckCommand.class));
    }

    public Pagination<StockTransApplicationCommand> findStaForTransitCrossByModel(int start, int pageSize, StockTransApplication sta, Sort[] sorts) {
        Map<String, Object> params = new HashMap<String, Object>();
        if (sta != null) {
            params.put("comId", sta.getId());
            if (null != sta.getCreateTime()) {
                params.put("createTimeFrom", sta.getCreateTime());
            }
            if (null != sta.getFinishTime()) {
                params.put("createTimeTo", sta.getFinishTime());
            }
            if (null != sta.getStatus()) {
                params.put("status", sta.getIntStatus());
            }
            if (StringUtils.hasLength(sta.getCode())) {
                params.put("code", sta.getCode() + "%");
            }
            if (null != sta.getCreator() && StringUtils.hasLength(sta.getCreator().getUserName())) {
                params.put("userName", "%" + sta.getCreator().getUserName() + "%");
            }
            if (null != sta.getMainWarehouse() && null != sta.getMainWarehouse().getId()) {
                params.put("mainWhId", sta.getMainWarehouse().getId());
            }
            if (null != sta.getAddiWarehouse() && null != sta.getAddiWarehouse().getId()) {
                params.put("addiWhId", sta.getAddiWarehouse().getId());
            }
            if (StringUtils.hasLength(sta.getOwner())) {
                params.put("owner", sta.getOwner());
            }
            if (StringUtils.hasLength(sta.getAddiOwner())) {
                params.put("addiOwner", sta.getAddiOwner());
            }

        }
        if (sta != null && StockTransApplicationType.TRANSIT_CROSS.equals(sta.getType())) {
            params.put("type", StockTransApplicationType.TRANSIT_CROSS.getValue());
        } else if (sta != null && StockTransApplicationType.SAME_COMPANY_TRANSFER.equals(sta.getType())) {
            params.put("type", StockTransApplicationType.SAME_COMPANY_TRANSFER.getValue());
        }
        return staDao.findStaForTransitCrossByModelSql(start, pageSize, params, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    public Pagination<StockTransApplicationCommand> queryStaExport(int start, int pageSize, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, StockTransApplicationCommand sta, Long ouId, Sort[] sorts) {
        sta.setQueryLikeParam();
        List<Integer> list = new ArrayList<Integer>();
        list.add(StockTransApplicationStatus.OCCUPIED.getValue());
        list.add(StockTransApplicationStatus.CHECKED.getValue());
        list.add(StockTransApplicationStatus.INTRANSIT.getValue());
        list.add(StockTransApplicationStatus.FINISHED.getValue());
        return staDao.findStaList(start, pageSize, ouId, createTime, endCreateTime, finishTime, endFinishTime, sta.getCode(), sta.getRefSlipCode(), sta.getOwner(), sta.getStatus1(), sta.getIntType(), sta.getLpcode(), sta.getOperator(),
                sta.getTrackingNo(), list, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    public boolean staIsExport(Long staId) {
        List<StaInvoice> sivList = staInvoiceDao.getBySta(staId);
        for (StaInvoice siv : sivList) {
            if (siv.getExecutecount() != null && siv.getExecutecount() > 0) {
                return false;
            }
        }
        return true;
    }

    public Pagination<StockTransApplicationCommand> queryExcStaExport(int start, int pageSize, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, StockTransApplicationCommand sta, Long ouId, Sort[] sorts) {
        Map<String, Object> map = sta.setQueryLikeParam();
        List<Integer> list = new ArrayList<Integer>();
        list.add(StockTransApplicationStatus.CREATED.getValue());
        list.add(StockTransApplicationStatus.OCCUPIED.getValue());
        list.add(StockTransApplicationStatus.CHECKED.getValue());
        list.add(StockTransApplicationStatus.INTRANSIT.getValue());
        list.add(StockTransApplicationStatus.FINISHED.getValue());
        map.put("statusList", list);
        map.put("ouId", ouId);
        if (createTime != null) {
            map.put("createTime", createTime);
        }
        if (createTime != null) {
            map.put("endCreateTime", endCreateTime);
        }
        if (createTime != null) {
            map.put("finishTime", finishTime);
        }
        if (createTime != null) {
            map.put("endFinishTime", endFinishTime);
        }
        return staDao.findExcStaList(start, pageSize, map, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    public String findExportFileNameBySta(Long staId) {
        return staDao.findExportFileNameBySta(staId, new SingleColumnRowMapper<String>(String.class));
    }

    public List<InventoryCommand> findOwnerListByInv(Long ouid) {
        return inventoryDao.findOwnerByInv(ouid, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }

    public List<InventoryCommand> findBrandListByInv(Long ouid) {
        return inventoryDao.findBrandByInv(ouid, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }

    public List<HandOverListCommand> findHandOverListTotal(Long ouid, Sort[] sorts) {
        // new Sort[] { new Sort("m.name asc") }
        return handOverListDao.findCurrHandOverListTotal(ouid, new BeanPropertyRowMapperExt<HandOverListCommand>(HandOverListCommand.class), sorts);
    }

    public List<HandOverListCommand> queryCheckHandOverList(int start, int pageSize, Long ouid, Sort[] sorts) {
        return handOverListDao.queryCheckHandOverList(start, pageSize, ouid, new BeanPropertyRowMapperExt<HandOverListCommand>(HandOverListCommand.class), sorts);
    }

    public Sku findSkuBySkuId(Long skuId) {
        Sku sku = skuDao.getByPrimaryKey(skuId);
        SkuCommand sc = null;
        if (sku != null) {
            sc = new SkuCommand();
            try {
                org.springframework.beans.BeanUtils.copyProperties(sku, sc);
            } catch (Exception e) {
                log.error("Copy Bean properties error for Sku");
                log.error("", e);
                throw new RuntimeException("Copy Bean properties error for Sku");
            }
        }
        return sc;
    }

    public Sku updateSkuBarCode(Long skuId, String barCode) {
        Sku sku = skuDao.getByPrimaryKey(skuId);
        if (sku == null) {
            throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {""});
        }
        // if (skuDao.findSkuByBarCode(barCode) != null) {
        // throw new BusinessException(ErrorCode.SKU_BAR_CODE_NOT_NULL, new Object[] {barCode});
        // }
        sku.setBarCode(barCode);
        sku.setLastModifyTime(new Date());
        skuDao.save(sku);


        SkuModifyLog smf = refreshSkuModifyLog(sku);

        if (smf != null) {
            skuModifyLogDao.save(smf);// 将新建或修改后的SKU保存进变更日志表

        }


        return sku;
    }

    public void updateSkuBarCodes(Long skuId, List<SkuBarcode> barCodes) {
        ChooseOption chooseOption = chooseOptionDao.findByCategoryCodeAndKey("isOpenTriggers", "isOpenTriggers");
        Sku sku = skuDao.getByPrimaryKey(skuId);
        if (sku == null) {
            throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {""});
        }
        skuBarcodeDao.deleteBySkuId(skuId);
        if (barCodes != null && barCodes.size() > 0) {
            for (SkuBarcode sb : barCodes) {
                if (sku.getBarCode().toUpperCase().equals(sb.getBarcode().toUpperCase())) {
                    throw new BusinessException(ErrorCode.SON_SKU_BAR_SIMILAR, new Object[] {sb.getBarcode()});
                }
                sb.setSku(sku);
                sb.setCustomer(sku.getCustomer());
                sb.setLastModifyTime(new Date());
                skuBarcodeDao.save(sb);
                if ("0".equals(chooseOption.getOptionValue())) {
                    skuManager.insertMsgSkuSyncByBarCode(sb);
                }
            }
        }
        skuBarcodeDao.flush();
    }

    public StockTransVoucher createTransCrossInboundStv(Long staId, Long userId, StockTransVoucher stvBean, Long ouId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        User user = userDao.getByPrimaryKey(userId);
        // 校验出库是否已经完成
        if (!sta.getStatus().equals(StockTransApplicationStatus.INTRANSIT)) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getStatus()});
        }
        if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
            List<OperationUnitCommand> list2 = operationUnitDao.findWarehouseByCompanyList(sta.getAddiWarehouse().getId(), sta.getAddiOwner(), new BeanPropertyRowMapper<OperationUnitCommand>(OperationUnitCommand.class));
            if (list2 == null || list2.size() == 0) {
                throw new BusinessException(ErrorCode.VMI_FLITTING_OUT_SHOP_REF, new Object[] {sta.getAddiWarehouse().getName(), sta.getAddiOwner()});
            }
        }
        List<StockTransVoucher> stvs = stvDao.findStvFinishListByStaId(staId);
        if (stvs == null || stvs.size() != 1 || !stvs.get(0).getStatus().equals(StockTransVoucherStatus.FINISHED)) {
            if (log.isDebugEnabled()) {
                if (stvs == null) {
                    log.debug("stv is null");
                } else if (stvs.size() != 1) {
                    log.debug("stvs size error");
                } else if (!stvs.get(0).getStatus().equals(StockTransVoucherStatus.FINISHED)) {
                    log.debug("stv status error {}", stvs.get(0).getStatus());
                }
            }
            throw new BusinessException(ErrorCode.BETWENLIBARY_STV_OUTBOUND_NO_FINISH, new Object[] {sta.getCode()});
        }
        // 创建入库stv
        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        stv.setCode(stvDao.getCode(staId, new SingleColumnRowMapper<String>()));
        stv.setCreateTime(new Date());
        stv.setCreator(user);
        stv.setDirection(TransactionDirection.INBOUND);
        TransactionType t = null;
        if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
            stv.setOwner(sta.getAddiOwner());
            t = transactionTypeDao.findByCode(Constants.VMI_FLITTING_IN);
        } else {
            stv.setOwner(sta.getOwner());
            t = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_CROSS_IN);
        }
        stv.setSta(sta);
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setLastModifyTime(new Date());
        stv.setTransactionType(t);
        stv.setWarehouse(sta.getAddiWarehouse());
        List<StvLine> stvls = new ArrayList<StvLine>();
        // 创建入库stv line
        for (StvLine l : stvs.get(0).getStvLines()) {
            try {
                StvLine newstvl = l.clone();
                newstvl.setDirection(TransactionDirection.INBOUND);
                newstvl.setTransactionType(t);
                newstvl.setWarehouse(sta.getAddiWarehouse());
                newstvl.setStv(stv);
                if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
                    newstvl.setOwner(sta.getAddiOwner());
                }
                newstvl.setQuantity(l.getQuantity());
                newstvl.setSkuCost(l.getSkuCost());
                stvLineDao.save(newstvl);
            } catch (CloneNotSupportedException e) {
                log.error("", e);
                log.error(e.getMessage());
                throw new BusinessException(ErrorCode.SYSTEM_ERROR);
            }
        }
        List<SkuSnLogCommand> snList = snLogDao.findOutboundSnBySta(sta.getId(), new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
        Map<String, String> map = new HashMap<String, String>();
        if (snList != null && snList.size() > 0) {
            for (SkuSnLogCommand snC : snList) {
                map.put(snC.getSn(), snC.getBarcode());
            }
            for (int i = 0; i < stvBean.getStvLines().size(); i++) {
                StvLine sl = stvBean.getStvLines().get(i);
                if (sl.getSns() != null) {
                    String[] sns = sl.getSns().split(",");
                    sl.setQuantity(0L);
                    if (sns != null && sns.length > 0) {
                        for (int j = 0; j < sns.length; j++) {
                            String barcode = map.get(sns[j]);
                            if (barcode != null) {
                                if (barcode.equals(sl.getSku().getBarCode())) {
                                    sl.setQuantity(sl.getQuantity() + 1);
                                    map.remove(sns[j]);
                                } else {
                                    throw new BusinessException(ErrorCode.SN_IS_NOT_OUT_SN, new Object[] {sl.getSku().getBarCode(), sns[j]});
                                }
                            } else {
                                throw new BusinessException(ErrorCode.SN_IS_NOT_OUT_SN, new Object[] {sl.getSku().getBarCode(), sns[j]});
                            }
                        }
                    }
                }
            }
            if (map.size() != 0) {
                throw new BusinessException(ErrorCode.IN_SN_COUNT_IS_NOT_OUT_SN_COUNT);
            }
        }
        sta.setInboundTime(new Date());
        staDao.save(sta);
        stv.setStvLines(stvls);
        stvDao.save(stv);
        stvDao.flush();
        snDao.createInSnByOutStv(sta.getId(), ouId, stv.getId());
        return stv;
    }

    public List<SkuBarcodeCommand> findSkuBarcodeBySkuId(Long skuId) {
        List<SkuBarcodeCommand> result = new ArrayList<SkuBarcodeCommand>();
        List<SkuBarcode> beanList = skuBarcodeDao.findBySkuId(skuId);
        for (SkuBarcode bean : beanList) {
            SkuBarcodeCommand cmd = new SkuBarcodeCommand();
            cmd.setId(bean.getId());
            cmd.setBarcode(bean.getBarcode());
            result.add(cmd);
        }
        return result;
    }

    public Pagination<SkuCommand> findSkuAll(int start, int pageSize, SkuCommand skuCom, Sort[] sorts) {

        Pagination<SkuCommand> a = skuDao.findSkuAll(start, pageSize, skuCom.getSkuInfoMap(), new BeanPropertyRowMapperExt<SkuCommand>(SkuCommand.class), sorts);
        return a;
    }

    public Integer findInventoryCountByStatusId(Long invStatusId) {
        return inventoryDao.findInventoryCountByStatusIdSql(invStatusId, new SingleColumnRowMapper<Integer>(Integer.class));
    }

    public List<SkuSnLogCommand> findOutboundSnBySta(Long staid) {
        // 改造点sn
        List<SkuSnLogCommand> list = new ArrayList<SkuSnLogCommand>();
        // ChooseOption ch = chooseOptionDao.findByCategoryCodeAndKey("snOrExpDate", "1");
        ChooseOption ch = getChooseOptionCache("snOrExpDate");
        StockTransApplication sta = staDao.getByPrimaryKey(staid);
        if (sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_REQUEST)) {
            // 查询sn号
            if (ch != null && ch.getOptionValue().equals("1")) {
                List<StaCheckDetialCommand> staCheckDetailList = staCheckDetialDao.findSnAllByStaId(sta.getId(), new BeanPropertyRowMapper<StaCheckDetialCommand>(StaCheckDetialCommand.class));
                if (staCheckDetailList != null && staCheckDetailList.size() > 0) {
                    for (StaCheckDetialCommand sn : staCheckDetailList) {
                        SkuSnLogCommand skuSnLogCommand = new SkuSnLogCommand();
                        skuSnLogCommand.setBarcode(sn.getBarCode());
                        skuSnLogCommand.setStaId(sta.getId());
                        skuSnLogCommand.setSkuId(sn.getSkuId());
                        skuSnLogCommand.setSn(sn.getSn());
                        list.add(skuSnLogCommand);
                    }
                }
            } else {
                // 退换货查询出库SN
                List<StockTransVoucher> stvList = null;
                if (!StringUtil.isEmpty(sta.getSlipCode1())) {
                    stvList = stvDao.findStvByStaSlipCode1(sta.getSlipCode1(), new BeanPropertyRowMapper<StockTransVoucher>(StockTransVoucher.class));
                }
                if (stvList != null && stvList.size() > 0) {
                    List<Long> outStv = new ArrayList<Long>();
                    List<Long> inStv = new ArrayList<Long>();
                    for (StockTransVoucher stv : stvList) {
                        if (TransactionDirection.INBOUND.equals(stv.getDirection())) {
                            inStv.add(stv.getId());
                        } else {
                            outStv.add(stv.getId());
                        }
                    }
                    list = snLogDao.findToInboundSn(outStv, (inStv.size() == 0 ? null : inStv), new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
                    if (list == null || list.size() == 0) {
                        // 合并订单找子订单
                        stvList = stvDao.findStvsByStaSlipCode1(sta.getSlipCode1(), new BeanPropertyRowMapper<StockTransVoucher>(StockTransVoucher.class));
                        if (stvList != null && stvList.size() > 0) {
                            List<Long> outStvs = new ArrayList<Long>();
                            List<Long> inStvs = new ArrayList<Long>();
                            for (StockTransVoucher stv : stvList) {
                                if (TransactionDirection.INBOUND.equals(stv.getDirection())) {
                                    inStvs.add(stv.getId());
                                } else {
                                    outStvs.add(stv.getId());
                                }
                            }
                            list = snLogDao.findToInboundSn(outStvs, (inStvs.size() == 0 ? null : inStvs), new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
                        } else {
                            list = new ArrayList<SkuSnLogCommand>();
                        }
                    }
                } else {
                    list = new ArrayList<SkuSnLogCommand>();
                }
                for (SkuSnLogCommand sn : list) {
                    sn.setStaId(staid);
                }
            }
            return list;
        } else if (!SlipType.OUT_RETURN_REQUEST.equals(sta.getRefSlipType()) && sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_PURCHASE)) {
            // 退换货查询出库SN
            List<StockTransVoucher> stvList = null;
            if (!StringUtil.isEmpty(sta.getSlipCode1())) {
                stvList = stvDao.findStvByStaSlipCode1(sta.getSlipCode1(), new BeanPropertyRowMapper<StockTransVoucher>(StockTransVoucher.class));
            }
            if (sta.getType().equals(StockTransApplicationType.INBOUND_RETURN_PURCHASE)) {
                stvList = stvDao.findOutboundStvByStaSlipCode(sta.getSlipCode2(), new BeanPropertyRowMapper<StockTransVoucher>(StockTransVoucher.class));
            }
            if (stvList != null && stvList.size() > 0) {
                List<Long> outStv = new ArrayList<Long>();
                List<Long> inStv = new ArrayList<Long>();
                for (StockTransVoucher stv : stvList) {
                    if (TransactionDirection.INBOUND.equals(stv.getDirection())) {
                        inStv.add(stv.getId());
                    } else {
                        outStv.add(stv.getId());
                    }
                }
                list = snLogDao.findToInboundSn(outStv, (inStv.size() == 0 ? null : inStv), new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
                if (list == null || list.size() == 0) {
                    // 合并订单找子订单
                    stvList = stvDao.findStvsByStaSlipCode1(sta.getSlipCode1(), new BeanPropertyRowMapper<StockTransVoucher>(StockTransVoucher.class));
                    if (stvList != null && stvList.size() > 0) {
                        List<Long> outStvs = new ArrayList<Long>();
                        List<Long> inStvs = new ArrayList<Long>();
                        for (StockTransVoucher stv : stvList) {
                            if (TransactionDirection.INBOUND.equals(stv.getDirection())) {
                                inStvs.add(stv.getId());
                            } else {
                                outStvs.add(stv.getId());
                            }
                        }
                        list = snLogDao.findToInboundSn(outStvs, (inStvs.size() == 0 ? null : inStvs), new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
                    } else {
                        list = new ArrayList<SkuSnLogCommand>();
                    }
                }
            } else {
                list = new ArrayList<SkuSnLogCommand>();
            }
            for (SkuSnLogCommand sn : list) {
                sn.setStaId(staid);
            }
            return list;
        } else {
            // 库间移动查询出库SN
            return snLogDao.findOutboundSnBySta(staid, new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
        }
    }

    /**
     * 根据staid 查询当前作业单需要sn的sku数量
     */
    public Integer findIsNeedSnByStaId(Long staid, Long ouid) {
        return staDao.findIsNeedSnByStaId(staid, ouid, new SingleColumnRowMapper<Integer>(Integer.class));
    }

    public boolean isImportSnByStv(Long staId) {
        List<StockTransVoucher> stvs = stvDao.findByStaWithDirection(staId, TransactionDirection.OUTBOUND);
        if (stvs == null || stvs.size() != 1) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        StockTransVoucher stv = stvs.get(0);
        Long qty = snDao.findSnImpCountByStv(stv.getId(), new SingleColumnRowMapper<Long>(Long.class));
        if (qty == null || qty == 0) {
            return false;
        } else {
            return true;
        }
    }

    public Pagination<SkuSnLogCommand> findSnPoSoLog(int start, int page, SkuSnLogCommand cmd, Long ouid) {
        String barcode = null;
        String skuName = null;
        String sn = null;
        String jmskucode = null;
        Integer cardStatus = null;
        if (cmd != null) {
            cardStatus = cmd.getIntCardStatus();
            if (StringUtils.hasText(cmd.getSkuCode())) {
                jmskucode = cmd.getSkuCode() + "%";
            }
            if (StringUtils.hasText(cmd.getBarcode())) {
                barcode = cmd.getBarcode() + "%";
            }
            if (StringUtils.hasText(cmd.getSkuName())) {
                skuName = cmd.getSkuName() + "%";
            }
            if (StringUtils.hasText(cmd.getSn())) {
                sn = cmd.getSn() + "%";
            }
        }
        return snLogDao.findSnPoSoLog(start, page, jmskucode, barcode, skuName, sn, ouid, cardStatus, new BeanPropertyRowMapper<SkuSnLogCommand>(SkuSnLogCommand.class));
    }

    public Pagination<SkuSnLogCommand> findSnLog(int start, int page, SkuSnLogCommand cmd, Long ouid) {
        String staCode = null;
        Integer direction = null;
        String skuCode = null;
        String barcode = null;
        String skuName = null;
        String sn = null;
        if (cmd != null) {
            if (StringUtils.hasText(cmd.getStaCode())) {
                staCode = cmd.getStaCode() + "%";
            }
            if (cmd.getDirectionInt() != null) {
                direction = cmd.getDirectionInt();
            }
            if (StringUtils.hasText(cmd.getBarcode())) {
                barcode = cmd.getBarcode() + "%";
            }
            if (StringUtils.hasText(cmd.getSkuName())) {
                skuName = cmd.getSkuName() + "%";
            }
            if (StringUtils.hasText(cmd.getSkuCode())) {
                skuCode = cmd.getSkuCode() + "%";
            }
            if (StringUtils.hasText(cmd.getSn())) {
                sn = cmd.getSn() + "%";
            }
        }
        return snLogDao.findSnLog(start, page, staCode, direction, skuCode, barcode, skuName, sn, ouid, new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
    }

    public List<TransDeliveryCfgCommand> findPredefinedStaByType(Long whouid) {
        return transDeliveryCfgDao.findTransCfgByWhOuId(whouid, new BeanPropertyRowMapperExt<TransDeliveryCfgCommand>(TransDeliveryCfgCommand.class));
    }

    public void updateTransDeliveryCfg(Long whOuId, Long transId, Long qty) {
        if (qty == null || qty < 0) {
            throw new BusinessException(ErrorCode.TRANS_DELIVERY_CFG_INCORRECT);
        }
        TransDeliveryCfg tdc = transDeliveryCfgDao.findByWhOuAndTrans(whOuId, transId);
        if (tdc == null) {
            transDeliveryCfgDao.updateTransDeliveryCfg(whOuId, transId, qty);
        } else {
            tdc.setQuantity(qty);
            transDeliveryCfgDao.save(tdc);
        }
    }

    public Pagination<PdaPostLogCommand> findPdaPostLogBySta(int start, int pageSize, Long staId, PdaPostLogCommand cmd, Sort[] sorts) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        Map<String, Object> param = new HashMap<String, Object>();
        if (cmd != null) {
            if (StringUtils.hasText(cmd.getLocCode())) {
                param.put("locCode", cmd.getLocCode());
            }
            if (StringUtils.hasText(cmd.getSkuName())) {
                param.put("skuName", cmd.getSkuName());
            }
            if (StringUtils.hasText(cmd.getSkuBarcode())) {
                param.put("skuBarcode", cmd.getSkuBarcode());
            }
            if (StringUtils.hasText(cmd.getSkuCode())) {
                param.put("skuCode", cmd.getSkuCode());
            }
            if (StringUtils.hasText(cmd.getInvStatusName())) {
                param.put("invStatusName", cmd.getInvStatusName());
            }
            if (StringUtils.hasText(cmd.getSkuSupplierCode())) {
                param.put("skuSupplierCode", cmd.getSkuSupplierCode());
            }
            if (StringUtils.hasText(cmd.getPdaCode())) {
                param.put("pdaCode", cmd.getPdaCode());
            }
            if (cmd.getFromDate() != null) {
                param.put("fromDate", cmd.getFromDate());
            }
            if (cmd.getFromDate() != null) {
                param.put("toDate", cmd.getToDate());
            }
            if (cmd.getToDate() != null) {
                param.put("toTime", cmd.getToDate());
            }
        }
        return pdaPostLogDao.findByStaCode(start, pageSize, sta.getCode(), param, sorts, new BeanPropertyRowMapper<PdaPostLogCommand>(PdaPostLogCommand.class));
    }

    public StockTransApplication pdaFindByCode(String code) {
        if (StringUtils.hasLength(code)) {
            StockTransApplication sta = staDao.findStaByCode(code);
            if (sta == null) {
                List<StockTransApplication> list = staDao.findBySlipCodeAndStatus(code);
                if (list == null || list.size() == 0 || list.get(0) == null) {
                    throw new BusinessException(ErrorCode.PDA_CODE_NOT_FOUND, new Object[] {code});
                } else {
                    for (StockTransApplication s : list) {
                        sta = s;
                        if (StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.PARTLY_RETURNED.equals(sta.getStatus())) {
                            if ((sta.getIsPDA() != null && sta.getIsPDA()) || stvDao.findPdaStv(sta.getId()) != null) {
                                return sta;
                            } else {
                                throw new BusinessException(ErrorCode.PDA_EXECUTE_ERROR, new Object[] {code});
                            }
                        }
                    }
                    throw new BusinessException(ErrorCode.PDA_EXECUTE_ERROR, new Object[] {code});
                }
            } else {
                if (StockTransApplicationStatus.CREATED.equals(sta.getStatus()) || StockTransApplicationStatus.PARTLY_RETURNED.equals(sta.getStatus())) {
                    if ((sta.getIsPDA() != null && sta.getIsPDA()) || stvDao.findPdaStv(sta.getId()) != null) {
                        return sta;
                    } else {
                        throw new BusinessException(ErrorCode.PDA_EXECUTE_ERROR, new Object[] {code});
                    }
                } else {
                    throw new BusinessException(ErrorCode.PDA_EXECUTE_ERROR, new Object[] {code});
                }
            }

        } else {
            throw new BusinessException(ErrorCode.PDA_CODE_NOT_FOUND, new Object[] {code});
        }
    }

    public String pdaFindBySku(String code, String skuBarcode) {
        Object obj = pdaFindByCode(code);
        if (obj instanceof StockTransApplication) {
            StockTransApplication sta = (StockTransApplication) obj;
            // 查询推荐库位
            StvLine stvl = stvLineDao.findBySkuBarcode(sta.getId(), skuBarcode);
            if (stvl == null) {
                // 判断是否多条码
                SkuBarcode addCode = skuBarcodeDao.findByBarCode(skuBarcode, null);
                if (addCode != null) {
                    skuBarcode = addCode.getSku().getBarCode();
                    if (log.isErrorEnabled()) {
                        log.debug("code is barcode :{} ; sku is {}", addCode.getBarcode(), skuBarcode);
                    }
                } else {
                    // 判断条码是否是SN
                    SkuSn sn = snDao.findSkuSnBySn(skuBarcode, sta.getMainWarehouse().getId(), SkuSnStatus.CHECKING);
                    if (sn != null) {
                        skuBarcode = sn.getSku().getBarCode();
                        if (log.isErrorEnabled()) {
                            log.debug("code is sn :{} ; sku is {}", sn.getSn(), skuBarcode);
                        }
                    }
                }
                stvl = stvLineDao.findBySkuBarcode(sta.getId(), skuBarcode);
                if (stvl != null) {
                    return stvl.getLocation().getCode();
                } else {

                }
                throw new BusinessException(ErrorCode.PDA_SKU_NOT_IN_ORDER, new Object[] {code, skuBarcode});

            } else {
                if (stvl.getLocation() == null) {
                    return "";
                } else if (stvl.getLocation().getCode() == null) {
                    return "";
                } else {
                    return stvl.getLocation().getCode();
                }
            }
        } else {
            return "";
        }
    }

    private void createPdaPostLogBySta(StockTransApplication sta, String skuBarcode, String locCode, Date createTime, String pdaCode, Long qty) {
        if (!StringUtils.hasText(locCode)) {
            throw new BusinessException(ErrorCode.PDA_LOCATION_NOT_FOUND, new Object[] {locCode});
        }
        if (!StringUtils.hasText(skuBarcode)) {
            throw new BusinessException(ErrorCode.PDA_SKU_NOT_IN_ORDER, new Object[] {sta.getCode(), skuBarcode});
        }
        if (!StringUtils.hasText(pdaCode)) {
            throw new BusinessException(ErrorCode.PDA_CODE_NOT_FOUND, new Object[] {pdaCode});
        }
        if (qty == null) {
            throw new BusinessException(ErrorCode.PDA_SYS_ERROR);
        }
        PdaPostLog lg = new PdaPostLog();
        lg.setPostCode(skuBarcode);
        lg.setLocationCode(locCode);
        lg.setQty(qty);
        lg.setCode(sta.getCode());
        lg.setPdaCode(pdaCode);
        lg.setCreateTime(createTime);
        lg.setStatus(DefaultStatus.CREATED);
        lg.setType(PdaPostLogType.PO);
        pdaPostLogDao.save(lg);
    }

    public void createPdaPostLog(String locationCode, String skuBarCode, String code, String pdaCode, Date createTime, PdaPostLogType type, Long qty) {
        PdaPostLog savedLg = pdaPostLogDao.findSavedLog(code, pdaCode, locationCode, skuBarCode, createTime);
        if (savedLg != null) {
            return;
        }
        Object obj = pdaFindByCode(code);
        if (obj instanceof StockTransApplication) {
            createPdaPostLogBySta((StockTransApplication) obj, skuBarCode, locationCode, createTime, pdaCode, qty);
        } else {}
    }

    public void deleteAllPdaPostLog(String code, Long userid) {
        pdaPostLogDao.deleteAllLogByCode(code, userid);
    }

    // 查询配货批by id
    @Transactional(readOnly = true)
    public PickingList findPackinglistById(Long id) {
        return pickingListDao.getByPrimaryKey(id);
    }

    public PickingListCommand findPackinglistByCode(PickingListCommand pl) {
        return pickingListDao.findPackinglistByCode(WhAddStatusMode.CHECK.getValue(), pl.toVerifyMap(), new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    public void pdaInbound(Long staId, Long userId, boolean isFinish) {
        User user = userDao.getByPrimaryKey(userId);
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (!stv.getStatus().equals(StockTransVoucherStatus.CREATED)) {
            throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
        }
        List<StvLineCommand> list = stvLineDao.findByPdaLog(staId, stv.getId(), sta.getCode(), null, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (list == null || list.isEmpty()) {
            log.debug("error : no log");
            throw new BusinessException(ErrorCode.PDA_NO_LOG, new Object[] {sta.getCode()});
        }
        // 核对计划量与执行量
        List<StvLineCommand> errList = stvLineDao.findErrorSkuQty(stv.getId(), sta.getCode(), null, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (errList != null && !errList.isEmpty()) {
            BusinessException root = new BusinessException(ErrorCode.STA_NOT_EXECUTE, new Object[] {sta.getCode()});
            for (StvLineCommand cmd : errList) {
                setLinkedBusinessException(root, new BusinessException(ErrorCode.INBOUND_PLAN_NOT_EQ_EXEQTY, new Object[] {cmd.getSkuCode(), cmd.getPlanQty(), cmd.getQuantity()}));
            }
            throw root;
        }
        log.debug("cons stv line");
        List<StvLine> stvlineList = new ArrayList<StvLine>();
        Map<Long, WarehouseLocation> locmap = new HashMap<Long, WarehouseLocation>();
        Map<Long, Sku> skumap = new HashMap<Long, Sku>();
        Map<Long, InventoryStatus> stsmap = new HashMap<Long, InventoryStatus>();
        Map<Long, StaLine> stalmap = new HashMap<Long, StaLine>();
        // 构建入库stv line
        for (StvLineCommand cmd : list) {
            StvLine l = new StvLine();
            WarehouseLocation loc = locmap.get(cmd.getLocationId());
            if (loc == null) {
                loc = warehouseLocationDao.getByPrimaryKey(cmd.getLocationId());
                locmap.put(cmd.getLocationId(), loc);
            }
            l.setLocation(loc);
            InventoryStatus invs = stsmap.get(cmd.getIntInvstatus());
            if (invs == null) {
                invs = inventoryStatusDao.getByPrimaryKey(cmd.getIntInvstatus());
                stsmap.put(cmd.getIntInvstatus(), invs);
            }
            l.setInvStatus(invs);
            Sku sku = skumap.get(cmd.getSkuId());
            if (sku == null) {
                sku = skuDao.getByPrimaryKey(cmd.getSkuId());
                skumap.put(cmd.getSkuId(), sku);
            }
            l.setSku(sku);
            l.setTransactionType(stv.getTransactionType());
            l.setDirection(stv.getDirection());
            l.setSkuCost(cmd.getSkuCost());
            StaLine stal = stalmap.get(cmd.getStalineId());
            if (stal == null) {
                stal = staLineDao.getByPrimaryKey(cmd.getStalineId());
                stalmap.put(cmd.getStalineId(), stal);
            }
            l.setStaLine(stal);
            l.setWarehouse(stv.getWarehouse());
            l.setStv(stv);
            l.setOwner(stv.getOwner());
            l.setQuantity(cmd.getQuantity());
            stvlineList.add(l);
        }
        if (log.isDebugEnabled()) {
            log.debug("start inbound stv line size {}", stvlineList.size());
            log.debug("is finish  {}", isFinish);
        }
        // 入库
        purchaseReceiveStep2(stv.getId(), stvlineList, isFinish, user, false, true);
        // 完成pda日志
        pdaPostLogDao.finishLogByCode(sta.getCode(), null);
    }

    // 配货批完成
    public void updatePickinglistToFinish(Long plid, Long ouid, Long userId) {
        List<StockTransApplication> stalist = new ArrayList<StockTransApplication>();
        stalist = staDao.findStaByPickingListPartyFinish(plid, ouid, new BeanPropertyRowMapperExt<StockTransApplication>(StockTransApplication.class));

        if (stalist.size() == 0) {
            throw new BusinessException(ErrorCode.STA_IS_NULL);
        }
        List<StockTransApplication> nofinishStalist = new ArrayList<StockTransApplication>();
        for (StockTransApplication sta : stalist) {// 2 3 4 15
            if (sta.getStatus().getValue() == 2 || sta.getStatus().getValue() == 3 || sta.getStatus().getValue() == 15) {
                nofinishStalist.add(sta);
            }
        }
        if (nofinishStalist.size() > 0) {
            throw new BusinessException(ErrorCode.NO_FINISH_STA);
        }
        PickingList pickinglist = pickingListDao.getByPrimaryKey(plid);
        pickinglist.setStatus(PickingListStatus.FINISHED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime(pickinglist.getCode(), WhInfoTimeRefBillType.STA_PICKING.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId);
        pickingListDao.save(pickinglist);
        // 清除mgdb缓存
        mongoOperation.remove(new Query(Criteria.where("pickingListCode").in(pickinglist.getCode())), TwicePickingBarCode.class);
    }

    // 配货批完成
    public void updatePickinglistToFinish2(Long staid, Long plid, Long ouid) {
        if (plid == 0 || ouid == 0) {
            return;
        }
        List<StockTransApplication> stalist = new ArrayList<StockTransApplication>();
        stalist = staDao.findStaByPickingListPartyFinish(plid, ouid, new BeanPropertyRowMapperExt<StockTransApplication>(StockTransApplication.class));

        if (stalist.size() == 0) {
            return;
        }
        List<StockTransApplication> finishStalist = new ArrayList<StockTransApplication>();
        for (StockTransApplication sta : stalist) {// 状态为已转出,已完成,取消已处理,updatePickinglist
            // 过滤本单
            if (staid.equals(sta.getId())) {
                continue;
            }
            if (sta.getStatus() == StockTransApplicationStatus.INTRANSIT || sta.getStatus() == StockTransApplicationStatus.FINISHED || sta.getStatus() == StockTransApplicationStatus.CANCELED) {
                finishStalist.add(sta);
            }
        }
        if (finishStalist.size() == stalist.size() - 1) {
            PickingList pickinglist = pickingListDao.getByPrimaryKey(plid);
            pickinglist.setStatus(PickingListStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime(pickinglist.getCode(), WhInfoTimeRefBillType.STA_PICKING.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null);
            // 清除mgdb缓存
            mongoOperation.remove(new Query(Criteria.where("pickingListCode").in(pickinglist.getCode())), TwicePickingBarCode.class);
        }
    }

    /**
     * 如果路径文件夹不存在，创建文件夹
     * 
     * @param dir
     * @return
     */
    public boolean createDir(String dir) {
        boolean flag = true;
        if (!dir.endsWith("/")) {
            dir += "/";
        }
        File file = new File(dir);
        try {
            if (!file.exists()) {
                flag = file.mkdirs();
                if (flag == true) {
                    log.debug("---create it path SUCCESS---");
                } else {
                    log.debug("---create it path ERROR---");
                }
            } else {
                log.debug("---it path is exist---");
            }

        } catch (Exception e) {
            flag = false;
            log.error("---create it path Exception---", e);
        }
        return flag;
    }

    public void exportDailyClosingStock(Long ouID, boolean isShowZero, String station, Date date, String dir, String locko) {
        List<InventoryCommand> inventotyList = inventoryDao.findCurrentInventory(null, null, null, null, null, null, null, ouID, null, isShowZero, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
        if (dir == null || dir.equals("")) {
            log.debug("--itdata path not exist---");
            return;
        }
        if (!createDir(dir)) {
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyMMddHHmmss");
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
        String d = sdf.format(date);
        String d1 = sdf1.format(date);
        String d2 = sdf2.format(date);

        String dailycsFileName = d + station + "_dailycs.del";
        File dailycsFile = new File(dir + "/" + dailycsFileName);
        if (dailycsFile.exists()) {
            dailycsFile.delete();
        }
        FileWriter dailycsFW = null;
        StringBuilder line;
        try {
            dailycsFW = new FileWriter(dailycsFile, true);
            line = new StringBuilder();
            for (InventoryCommand ic : inventotyList) {
                line.append("\"" + locko + "\",").append(d2).append(",\"" + station + "\",").append("\"" + d1 + "\",").append("\"" + ic.getSupplierSkuCode() + "\",").append(ic.getAvailQty()).append(",").append(ic.getLockQty()).append(",")
                        .append(ic.getQuantity()).append(",").append(0).append("\r\n");
            }
            dailycsFW.write(line.toString());

        } catch (IOException e) {
            log.error("", e);
            log.error(e.getMessage());
        } finally {
            try {
                if (dailycsFW != null) {
                    dailycsFW.close();
                }
            } catch (IOException e) {
                log.error("", e);
            }
        }
    }

    // VMI确认调整
    public void confirmVMIInvCKAdjustment(InventoryCheck invckComm) {
        // 更新盘点批状态
        InventoryCheck ic = inventoryCheckDao.getByPrimaryKey(invckComm.getId());
        if (ic == null) {
            throw new BusinessException(ErrorCode.INVENTORY_CHECK_NOT_FOUND);
        }
        if (!InventoryCheckStatus.UNEXECUTE.equals(ic.getStatus())) {
            throw new BusinessException(ErrorCode.INVENTORY_CHECK_STATUS_NOT_UNEXECUTE, new Object[] {ic.getCode()});
        }
        TransactionType inType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_VMI_ADJUSTMENT_INBOUND_CONSIGNMENT);
        if (inType == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_VMI_INVENTORY_CHECK_IN_NOT_FOUND);
        }
        TransactionType outType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_VMI_ADJUSTMENT_OUTBOUND_CONSIGNMENT);
        if (outType == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_VMI_INVENTORY_CHECK_OUT_NOT_FOUND);
        }

        ic.setInvoiceNumber(invckComm.getInvoiceNumber());
        ic.setDutyPercentage(invckComm.getDutyPercentage());
        ic.setMiscFeePercentage(invckComm.getMiscFeePercentage());
        ic.setStatus(InventoryCheckStatus.FINISHED);
        // inventoryCheckDao.save(ic);

        String batchCode = Long.valueOf(new Date().getTime()).toString();
        // 更新库存
        Map<String, Object> invparams = new HashMap<String, Object>();
        invparams.put("in_ic_id", ic.getId());
        invparams.put("in_batch_code", batchCode);
        invparams.put("in_cmp_id", ic.getOu().getParentUnit().getParentUnit().getId());
        invparams.put("in_out_transtype_id", outType.getId());
        invparams.put("in_in_transtype_id", inType.getId());
        SqlOutParameter s = new SqlOutParameter("rst", Types.NUMERIC);
        SqlParameter[] invSqlP =
                {new SqlParameter("in_ic_id", Types.NUMERIC), new SqlParameter("in_batch_code", Types.VARCHAR), new SqlParameter("in_cmp_id", Types.NUMERIC), new SqlParameter("in_out_transtype_id", Types.NUMERIC),
                        new SqlParameter("in_in_transtype_id", Types.NUMERIC), s};
        Map<String, Object> result = staDao.executeSp("sp_vmi_adj_inv_ck_execute", invSqlP, invparams);
        BigDecimal rst = (BigDecimal) result.get("rst");
        if (rst != null && !rst.equals(BigDecimal.ZERO)) {
            throw new BusinessException(ErrorCode.VMI_INV_CHECK_CONFIRM_NUM_NOT_SAME);
        }
        BiChannel sh = ic.getShop();
        if (sh != null && sh.getVmiCode() != null) {
            System.out.print(sh.getVmiCode());
            VmiInterface vf = vmiFactory.getBrandVmi(sh.getVmiCode());
            vf.generateVMIReceiveInfoByInvCk(ic);
        }
        /***** mongoDB库存变更添加逻辑 ******************************/
        try {
            eventObserver.onEvent(new TransactionalEvent(ic));
        } catch (BusinessException e) {
            throw e;
        }
    }



    public List<ChooseOption> queryPadcodeOperate(String code) {
        return chooseOptionDao.queryPadcodeOperate(StringUtils.hasLength(code) ? code + "%" : null, new BeanPropertyRowMapperExt<ChooseOption>(ChooseOption.class));
    }

    public void deletePadcodeOperate(List<Long> ids) {
        if (ids != null && ids.size() != 0) {
            for (Long id : ids) {
                chooseOptionDao.deleteByPrimaryKey(id);
            }
        }
    }

    public void savePadcodeOperate(String code) {
        ChooseOption bean = chooseOptionDao.findByCategoryCodeAndKey(ChooseOption.CATEGORY_CODE_PDA_MACHINE_CODE, code);
        if (bean != null) {
            throw new BusinessException(ErrorCode.PDA_KEY_IS_PRESENCE, new Object[] {code});
        }
        bean = new ChooseOption();
        bean.setCategoryCode(ChooseOption.CATEGORY_CODE_PDA_MACHINE_CODE);
        bean.setOptionKey(code);
        bean.setOptionValue(code);
        bean.setCategoryName("PDA机器编码");
        bean.setIsAvailable(true);
        bean.setSortNo(1);
        chooseOptionDao.save(bean);
    }

    // 处理
    public void executePostPdaLog(Long staid, Long ouid) {
        StockTransApplication sta = staDao.getByPrimaryKey(staid);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        String code = sta.getCode();
        pdaPostLogDao.updateLocationPostPdaLog(code, ouid);
        pdaPostLogDao.updateSkuPostPdaLog(code);
        pdaPostLogDao.updateAddSkuBarCodePostPdaLog(code);
        pdaPostLogDao.updateSkuBySNPostPdaLog(code);
    }

    // 删除
    public void deletePostPdaErrorLog(Long staid, Long ouid, Long userid) {
        StockTransApplication sta = staDao.getByPrimaryKey(staid);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        pdaPostLogDao.deletePostPdaErrorLog(sta.getCode());
    }

    public JmsTemplate getTaxMqJmsTemplate() {
        return taxMqJmsTemplate;
    }

    public void setTaxMqJmsTemplate(JmsTemplate taxMqJmsTemplate) {
        this.taxMqJmsTemplate = taxMqJmsTemplate;
    }

    // /**
    // * 通过店铺获取店铺关联仓库的默认收货仓库
    // *
    // * @param shop
    // * @return
    // */
    // public Warehouse getVMIDefaultWarehouseByShop(CompanyShop shop) {
    // OperationUnit whou = operationUnitDao.getDefaultInboundWhByShopId(shop.getId());
    //
    // Warehouse wh = null;
    // // 查询默认仓库
    // wh = warehouseDao.getConverseVMIWHByShop(shop.getId());
    // if (wh == null) {
    // List<Warehouse> list = warehouseDao.getVMIWHByShop(shop.getId());
    // if (list != null && list.size() > 0) {
    // wh = list.get(0);
    // }
    // }
    // return wh;
    // }

    // /**
    // * 通过shop寻找VMIWH
    // *
    // * @param shop
    // * @return
    // */
    // public Warehouse getVMIWarehouseByShop(CompanyShop shop) {
    // Warehouse wh = null;
    // List<Warehouse> list = warehouseDao.getVMIWHByShop(shop.getId());
    // if (list != null && list.size() > 0) {
    // wh = list.get(0);
    // }
    // return wh;
    // }

    // pad收货作业单查询
    public Pagination<StockTransApplicationCommand> findPdaPurchaseStas(int start, int pageSize, Long ouid, Date createDate, Date endCreateDate, StockTransApplicationCommand staCommand, Sort[] sorts) {
        String code = null;
        String refCode = null;
        if (staCommand != null) {
            if (StringUtils.hasText(staCommand.getCode())) {
                code = staCommand.getCode() + "%";
            }
            if (StringUtils.hasText(staCommand.getRefSlipCode())) {
                refCode = staCommand.getRefSlipCode() + "%";
            }
        }
        return staDao.findPdaPurchaseStas(start, pageSize, ouid, createDate, endCreateDate, code, refCode, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }

    // pad收货作业单-明细
    public Pagination<StaLineCommand> findPdaPurchaseDetailByStaId(int start, int pageSize, Long staId, Sort[] sorts) {
        Pagination<StaLineCommand> page = staLineDao.findStaLinePageListByStaId(start, pageSize, staId, null, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
        return page;
    }



    // pda 上架
    public Long pdaInboundPurchase(Long staId, String invoiceNumber, Double dutyPercentage, Double miscFeePercentage, String pdaCode, Long userId, Long comId, boolean isFinish) {
        User user = userDao.getByPrimaryKey(userId);
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (!stv.getStatus().equals(StockTransVoucherStatus.CREATED)) {
            throw new BusinessException(ErrorCode.STV_STATUS_ERROR);
        }
        log.info("Esp t3 po:" + sta.getRefSlipCode() + " set invoiceNumber:" + invoiceNumber + " dutyPercentage:" + miscFeePercentage + " miscFeePercentage" + dutyPercentage);
        stv.setInvoiceNumber(invoiceNumber);
        stv.setDutyPercentage(dutyPercentage);
        stv.setMiscFeePercentage(miscFeePercentage);
        pdaCode = StringUtils.hasText(pdaCode) ? pdaCode : null;
        StockTransVoucher newStv = pdaCode == null ? stv : byStvNewStv(stv);
        List<StvLineCommand> list = stvLineDao.findStvLineByPdaPostLog(newStv.getId(), sta.getCode(), pdaCode, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (list == null || list.isEmpty()) {
            log.debug("error : no log");
            throw new BusinessException(ErrorCode.PDA_NO_LOG, new Object[] {sta.getCode()});
        }
        // 核对计划量与执行量
        List<StvLineCommand> errList = stvLineDao.findErrorSkuQty(newStv.getId(), sta.getCode(), pdaCode, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (errList != null && !errList.isEmpty()) {
            BusinessException root = new BusinessException(ErrorCode.STA_NOT_EXECUTE, new Object[] {sta.getCode()});
            boolean isError = false;
            for (StvLineCommand cmd : errList) {
                if (cmd.getQuantity() < 0 || cmd.getQuantity() > cmd.getPlanQty().longValue()) {
                    isError = true;
                    setLinkedBusinessException(root, new BusinessException(ErrorCode.INBOUND_PLAN_NOT_EQ_EXEQTY, new Object[] {cmd.getSkuCode(), cmd.getPlanQty(), cmd.getQuantity()}));
                }
            }
            if (isError) {
                throw root;
            }
        }
        // 核对sn 号商品数量
        List<StvLineCommand> errSnList = stvLineDao.findErrorSnSkuQty(newStv.getId(), sta.getCode(), pdaCode, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (errSnList != null && !errSnList.isEmpty()) {
            BusinessException root = new BusinessException(ErrorCode.STA_NOT_EXECUTE, new Object[] {sta.getCode()});
            for (StvLineCommand cmd : errSnList) {
                setLinkedBusinessException(root, new BusinessException(ErrorCode.INBOUND_SN_PLAN_NOT_EQ_EXEQTY, new Object[] {cmd.getSkuCode(), cmd.getPlanQty(), cmd.getQuantity()}));
            }
            throw root;
        }

        InventoryStatus invStatus = null;
        // 如果是采购如需 须要获取库存状态
        if (sta.getType().equals(StockTransApplicationType.INBOUND_PURCHASE)) {
            invStatus = inventoryStatusDao.findXSInvStatusByCompany(comId);
            if (invStatus == null) {
                throw new BusinessException(ErrorCode.INBOUND_PDA_NOT_INV_STATUS);
            }
        }
        log.debug("cons stv line");
        List<StvLine> stvlineList = new ArrayList<StvLine>();
        Map<Long, InventoryStatus> stsmap = new HashMap<Long, InventoryStatus>();
        Map<Long, StaLine> stalmap = new HashMap<Long, StaLine>();
        List<Long> invList = new ArrayList<Long>();
        Map<Long, Long> qty = new HashMap<Long, Long>();
        // 构建入库stv line
        List<PdaPostLog> pdaLGList = pdaPostLogDao.findPdaPostLogByCode(sta.getCode(), pdaCode);
        for (PdaPostLog lg : pdaLGList) {
            for (int i = 0; i < list.size(); i++) {
                StvLineCommand cmd = list.get(i);
                if (cmd.getSkuId() != null && cmd.getSkuId().equals(lg.getSku().getId())) {
                    StvLine l = new StvLine();
                    if (lg.getLoc() == null) {
                        throw new BusinessException(ErrorCode.INBOUND_PDA_NOT_CLERROR);
                    }
                    l.setLocation(lg.getLoc());
                    InventoryStatus invs = stsmap.get(cmd.getIntInvstatus());
                    if (invs == null && !sta.getType().equals(StockTransApplicationType.INBOUND_PURCHASE)) {
                        if (cmd.getIntInvstatus() == null) {
                            throw new BusinessException(ErrorCode.INBOUND_PDA_NOT_CLERROR);
                        }
                        invs = inventoryStatusDao.getByPrimaryKey(cmd.getIntInvstatus());
                        stsmap.put(cmd.getIntInvstatus(), invs);
                        if (invs == null) {
                            throw new BusinessException(ErrorCode.INBOUND_PDA_NOT_CLERROR);
                        }
                    } else {
                        invs = invStatus;
                        invList.add(cmd.getId());
                    }
                    l.setInvStatus(invs);
                    l.setSku(lg.getSku());
                    l.setTransactionType(newStv.getTransactionType());
                    l.setDirection(newStv.getDirection());
                    l.setSkuCost(cmd.getSkuCost());
                    StaLine stal = stalmap.get(cmd.getStalineId());
                    if (stal == null) {
                        stal = staLineDao.getByPrimaryKey(cmd.getStalineId());
                        stalmap.put(cmd.getStalineId(), stal);
                    }
                    l.setStaLine(stal);
                    l.setWarehouse(newStv.getWarehouse());
                    l.setStv(newStv);
                    l.setOwner(newStv.getOwner());
                    stvlineList.add(l);
                    boolean isBreak = false;
                    if (cmd.getQuantity() > lg.getQty()) {
                        l.setQuantity(lg.getQty());
                        cmd.setQuantity(cmd.getQuantity() - lg.getQty());
                        isBreak = true;
                    } else if (cmd.getQuantity().equals(lg.getQty())) {
                        l.setQuantity(cmd.getQuantity());
                        list.remove(i);
                        isBreak = true;
                    } else {
                        l.setQuantity(cmd.getQuantity());
                        lg.setQty(lg.getQty() - cmd.getQuantity());
                        list.remove(i--);
                    }
                    if (qty.containsKey(stal.getId())) {
                        qty.put(stal.getId(), qty.get(stal.getId()) + l.getQuantity());
                    } else {
                        qty.put(stal.getId(), l.getQuantity());
                    }
                    if (isBreak) break;
                }
            }
        }

        // 判断上架数量是否在计划量范围内
        List<StaLineCommand> slList = staLineDao.findStaLinesQtyByStaId(sta.getId(), new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
        BusinessException root = new BusinessException(ErrorCode.STA_NOT_EXECUTE, new Object[] {sta.getCode()});
        boolean isErroy = false;
        for (StaLineCommand cmd : slList) {
            Long key = cmd.getId();
            if (qty.containsKey(key)) {
                if (cmd.getQuantity() - cmd.getCompleteQuantity() < qty.get(key)) {
                    isErroy = true;
                    setLinkedBusinessException(root, new BusinessException(ErrorCode.INBOUND_PDA_QTY_ERROR, new Object[] {cmd.getSkuCode(), qty.get(key), cmd.getQuantity() - cmd.getCompleteQuantity()}));
                }
            }
        }
        if (isErroy) {
            throw root;
        }

        if (sta.getType().equals(StockTransApplicationType.INBOUND_PURCHASE)) {
            if (!invList.isEmpty()) {
                stvLineDao.updateStvInvStruts(invList, invStatus.getId());
            }
        }

        if (log.isDebugEnabled()) {
            log.debug("start inbound stv line size {}", stvlineList.size());
            log.debug("is finish  {}", true);
        }
        newStv.setCode(stvDao.getCode(newStv.getSta().getId(), new SingleColumnRowMapper<String>()));
        stvDao.save(newStv);
        stvDao.flush();
        // 入库
        purchaseReceiveStep2(newStv.getId(), stvlineList, isFinish, user, false, true);
        // 完成pda日志
        pdaPostLogDao.finishLogByCode(sta.getCode(), pdaCode);
        // 正对根据pdacode入库完成后的数据做更新
        if (!stv.getId().equals(newStv.getId())) {
            if (sta.getStatus().equals(StockTransApplicationStatus.FINISHED)) {
                sta.setIsPDA(false);
                staDao.save(sta);
                stvLineDao.deleteByStvId(stv.getId());
                stvDao.deleteByPrimaryKey(stv.getId());
                return null;
            }
            stvLineDao.deleteStvLineOver(stv.getId(), sta.getId());
            return stv.getId();
        } else {
            sta.setIsPDA(false);
            staDao.save(sta);
            return null;
        }
    }

    public StockTransVoucher byStvNewStv(StockTransVoucher stv) {
        StockTransVoucher newStv = new StockTransVoucher();
        newStv.setCreateTime(new Date());
        newStv.setCreator(stv.getCreator());
        newStv.setDirection(stv.getDirection());
        newStv.setFinishTime(stv.getFinishTime());
        newStv.setMemo(stv.getMemo());
        newStv.setIsPda(stv.getIsPda());
        newStv.setMode(stv.getMode());
        newStv.setOperator(stv.getOperator());
        newStv.setOwner(stv.getOwner());
        newStv.setSta(stv.getSta());
        newStv.setStatus(stv.getStatus());
        newStv.setLastModifyTime(new Date());
        newStv.setTransactionType(stv.getTransactionType());
        newStv.setWarehouse(stv.getWarehouse());
        newStv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());

        stvDao.save(newStv);
        List<StvLine> list = stvLineDao.findStvLineListByStvId(stv.getId());
        if (list == null || list.isEmpty()) {
            log.debug("error : no log");
            throw new BusinessException(ErrorCode.PDA_NO_LOG, new Object[] {stv.getSta().getCode()});
        }
        for (StvLine stvl : list) {
            StvLine newStvl = new StvLine();
            newStvl.setBatchCode(stvl.getBatchCode());
            newStvl.setDirection(stvl.getDirection());
            newStvl.setInvStatus(stvl.getInvStatus() != null ? stvl.getInvStatus() : newStvl.getInvStatus());
            newStvl.setLocation(stvl.getLocation());
            newStvl.setOwner(stvl.getOwner());
            newStvl.setQuantity(stvl.getQuantity());
            newStvl.setSku(stvl.getSku());
            newStvl.setSkuCost(stvl.getSkuCost());
            newStvl.setSns(stvl.getSns());
            newStvl.setStaLine(stvl.getStaLine());
            newStvl.setStv(newStv);
            newStvl.setTransactionType(stvl.getTransactionType());
            newStvl.setWarehouse(stvl.getWarehouse());
            stvLineDao.save(newStvl);
        }
        stvLineDao.flush();
        snDao.updateSNStvIdByStvId(stv.getId(), newStv.getId());
        return newStv;
    }

    public List<PdaPostLogCommand> queryPdaCodeByStaId(Long staId) {
        return pdaPostLogDao.queryPdaCodeByStaId(staId, new BeanPropertyRowMapperExt<PdaPostLogCommand>(PdaPostLogCommand.class));
    }

    public void sfCancelOrderAddCount(SfOrderCancelQueue q) {
        SfOrderCancelQueue sq = sfOrderCancelQueueDao.getByPrimaryKey(q.getId());
        sq.setCount(q.getCount());
    }

    /**
     * 外包仓销售出库
     */
    public void vmiSalesCreatePage(Long ouid, String trackingNo, BigDecimal weight, Long staId, Long creatorId, String lpCode, MsgRtnOutboundCommand msg) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        Long customerId = null;
        Warehouse wh = warehouseDao.getByOuId(ouid);
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        if (!sta.getStatus().equals(StockTransApplicationStatus.OCCUPIED)) {
            // 库存占用
            // occupyInventoryForSales(sta);
            createStvByStaId(sta.getId(), null, null, false);
            // createStvForSalesByStaId(staId, creatorId, false);
            // 库存占用 销售出库 false fanht
            // createStvByStaId(staId, creatorId);
        }
        // 创包裹
        if ("null".equals(trackingNo) || !StringUtils.hasText(trackingNo)) {
            StaDeliveryInfo di = sta.getStaDeliveryInfo();
            di.setSta(sta);
            di.setLpCode(lpCode);
            if (msg.getLpCode() != null && msg.getLpCode().equals(Transportator.KERRY)) {
                di.setLpCode(Transportator.OTHER);
            }
            di.setLastModifyTime(new Date());
            // 触发器移除 trg_update_lpcode_is_null
            ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey(Constants.UPDATE_DELIVERY_LPCODE, Constants.UPDATE_LPCODE_IS_OPEN);
            String flag = op == null ? "false" : (op.getOptionValue() == null ? "false" : op.getOptionValue());
            if ("true".equals(flag)) {
                if (di.getLpCode() == null) {
                    log.error("物流商编码不能为空!staCode=" + sta.getCode());
                    throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_TRANSPORTATOR_IS_NULL);
                }
            }
            staDeliveryInfoDao.save(di);
            if (msg.getLpCode() != null && msg.getLpCode().equals(Transportator.KERRY)) {
                PackageInfo pg = new PackageInfo();
                pg.setIsChecked(true);
                pg.setStatus(PackageInfoStatus.OUTBOUND);
                pg.setTrackingNo("");
                pg.setLpCode(Transportator.OTHER);
                pg.setWeight(new BigDecimal(0));
                pg.setLastModifyTime(new Date());
                pg.setStaDeliveryInfo(di);
                packageInfoDao.save(pg);
            }
            sta.setStatus(StockTransApplicationStatus.CHECKED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), creatorId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            sta.setCheckUserId(creatorId);
            staDao.save(sta);
            packageInfoDao.flush();
            trackingNo = null;
        } else {
            PackageInfo pg = new PackageInfo();
            pg.setTrackingNo(trackingNo);
            pg.setLpCode(lpCode);
            pg.setWeight(weight);
            pg.setLastModifyTime(new Date());
            StaDeliveryInfo di = sta.getStaDeliveryInfo();
            di.setSta(sta);
            di.setLpCode(lpCode);
            di.setLastModifyTime(new Date());
            staDeliveryInfoDao.save(di);
            pg.setStaDeliveryInfo(di);
            packageInfoDao.save(pg);
            sta.setStatus(StockTransApplicationStatus.CHECKED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), creatorId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
            sta.setLastModifyTime(new Date());
            sta.setCheckUserId(creatorId);
            staDao.save(sta);
            packageInfoDao.flush();
        }
        List<StaAdditionalLine> saddlines = null;
        if (msg != null && msg.getId() != null && wh.getIsNeedWrapStuff()) {
            List<MsgRtnOutAdditionalLine> list = msgRtnOutAdditionalLineDao.getLineListByMsgRtnOutbound(msg.getId());
            if (list != null && list.size() > 0) {
                saddlines = new ArrayList<StaAdditionalLine>();
                for (MsgRtnOutAdditionalLine l : list) {
                    if (l.getQty() == null || l.getQty() < 1) {
                        throw new BusinessException(ErrorCode.SKU_QTY_IS_ERROR, new Object[] {l.getSkuCode() == null ? l.getBarCode() : l.getSkuCode(), l.getQty()});
                    }
                    Sku sku = null;
                    if (!StringUtil.isEmpty(l.getSkuCode())) {
                        sku = skuDao.getByCode(l.getSkuCode());
                    }
                    if (sku == null && !StringUtil.isEmpty(l.getBarCode())) {
                        sku = skuDao.getByBarcode(l.getBarCode(), customerId);
                        if (sku == null) {
                            SkuBarcode sb = skuBarcodeDao.findByBarCode(l.getBarCode(), customerId);
                            if (sb != null) {
                                sku = sb.getSku();
                            }
                        }
                    }
                    if (sku == null) {
                        throw new BusinessException(ErrorCode.IMPORT_SKU_ISNOT_MEET_REGULATION, new Object[] {l.getSkuCode() == null ? l.getBarCode() : l.getSkuCode()});
                    }
                    StaAdditionalLine stal = new StaAdditionalLine();
                    stal.setSta(sta);
                    stal.setSku(sku);
                    stal.setQuantity(l.getQty());
                    saddlines.add(stal);
                }
            }
        }
        /**************************** SF外包仓新加SN逻辑 ***********************************/

        snOccupiedForRtnOutbound(sta.getId());

        /**************************** SF外包仓新加SN逻辑 ***********************************/
        // 出库
        salesStaOutBound(staId, -1L, ouid, trackingNo, weight, saddlines, false, null);
    }

    public void snOccupiedForRtnOutbound(Long id) {
        Boolean b = staDao.getIsSnById(id, new SingleColumnRowMapper<Boolean>(Boolean.class));
        StockTransApplication sta = staDao.getByPrimaryKey(id);
        if (b) {
            sta.setIsSn(b);
            Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
            if (wh.getVmiSource() != null && wh.getVmiSource().equals("SF")) {
                List<SkuSn> snList = skuSnDao.getErrorSn(id, new BeanPropertyRowMapper<SkuSn>(SkuSn.class));
                if (snList != null && snList.size() > 0) {
                    List<String> errorString = new ArrayList<String>();
                    for (SkuSn ss : snList) {
                        errorString.add("商品:" + ss.getBatchCode() + "SN号:" + ss.getSn());
                    }
                    // {0}在系统中不存在或者不可用。
                    throw new BusinessException(ErrorCode.SF_RTN_SN_NOT_EXISTS, new Object[] {errorString});
                }
                List<Sku> skuList = skuDao.getErrorSkuSfRtn(id, new BeanPropertyRowMapper<Sku>(Sku.class));
                if (skuList != null && skuList.size() > 0) {
                    // 反馈SN与要求不符!
                    throw new BusinessException(ErrorCode.SF_RTN_SN_NOT_REQUIRE);
                } else {
                    skuSnDao.batchUpdateSn(id);
                }
            }
        }
    }

    public void transactionsalesStaOutBound(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        // 出库完成则更新sta为已完成
        sta.setStatus(StockTransApplicationStatus.FINISHED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), null, sta.getMainWarehouse().getId());
        sta.setFinishTime(new Date());
        sta.setLastModifyTime(new Date());

        initOwnerCode();
        if (vmiOwnerCodeCache.get(sta.getOwner()) != null) {
            MsgRtnOutbound mro = msgRtnOutboundDao.findByStaCode(sta.getCode());
            if (mro != null) {
                sta.setOutboundTime(mro.getOutboundTime());
            }
        }



        staDao.save(sta);
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }
    }

    public void generateSkuByPo(String poNum, Long shopId) {
        BiChannel shop = companyShopDao.getByPrimaryKey(shopId);
        if (shop.getVmiCode() == null) {
            throw new BusinessException(ErrorCode.VMI_NEED_NOT_CREATE_SKU);
        }
        VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
        if (vmi != null) {
            vmi.generateSkuByOrder(poNum, shop.getVmiCode());
        }
    }

    /**
     * 标杆物流出库返回
     */
    public MsgRtnOutbound saveMsgRtnOutbound(MsgRtnOutbound rtnOutBound) {
        MsgRtnOutbound rtn = msgRtnOutboundDao.save(rtnOutBound);
        return rtn;
    }

    /**
     * 标杆物流出库返回更新状态
     */
    public void updateMsgRtnOutbound(Long id, int status) {
        msgRtnOutboundDao.updateStatusByID(id, status);

    }


    /**
     * 更新错误次数
     * 
     * @param msgId
     */
    public void updateMsgRtnOutBoundErrorCount(Long msgId) {
        MsgRtnOutbound mrob = msgRtnOutboundDao.getByPrimaryKey(msgId);
        Long ec = mrob.getErrorCount();
        if (ec == null) {
            ec = 0L;
        }
        mrob.setErrorCount(ec + 1);
        msgRtnOutboundDao.save(mrob);
    }

    public void updateMsgRtnOutboundMq(Long id, int status) {
        msgRtnOutboundDao.updateStatusByIDMq(id, status);

    }



    public List<MsgRtnOutbound> findVmiMsgOutboundByStaCode(String staCode) {
        return msgRtnOutboundDao.findVmiMsgOutboundByStaCode(staCode, new BeanPropertyRowMapper<MsgRtnOutbound>(MsgRtnOutbound.class));
    }

    public MsgRtnOutboundLine saveMsgRtnOutboundLine(MsgRtnOutboundLine rtnOutBound) {
        return msgRtnOutboundLineDao.save(rtnOutBound);
    }

    public int predefinedOutExecution(Long staId, User user) {

        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        if (sta.getIsLocked() != null && sta.getIsLocked()) {
            throw new BusinessException(ErrorCode.STA_NOT_USING);
        }
        if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        if (wh.getIsNeedWrapStuff() != null && wh.getIsNeedWrapStuff()) {
            List<StaAdditionalLine> temp = staAdditionalLineDao.findByStaId(sta.getId());
            if (temp == null || temp.size() == 0) {
                throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF);
            }
        }
        List<StockTransVoucher> stvList = stvDao.findByStaWithDirection(sta.getId(), TransactionDirection.OUTBOUND);
        if (stvList.size() != 1) {
            throw new BusinessException(ErrorCode.TRANIST_CROSS_STV_LINE_EMPTY);
        }
        Date temp = new Date();
        StockTransVoucher stv = stvList.get(0);
        whExe.validateBiChannelSupport(stv, null);
        stv.setStatus(StockTransVoucherStatus.FINISHED);
        stv.setLastModifyTime(new Date());
        stv.setFinishTime(temp);
        stv.setOperator(user);
        stvDao.save(stv);
        stvDao.flush();
        sta.setIsNeedOccupied(false);
        sta.setOutboundOperator(user);
        sta.setOutboundTime(temp);
        sta.setFinishTime(temp);
        if (sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS) || sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER) || sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
            sta.setStatus(StockTransApplicationStatus.INTRANSIT);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.INTRANSIT.getValue(), user == null ? null : user.getId(), sta.getMainWarehouse().getId());
        } else {
            sta.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), user == null ? null : user.getId(), sta.getMainWarehouse().getId());
        }
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }
        staDao.flush();
        BiChannel sh = biChannelDao.getByCode(sta.getOwner());
        if (sh != null && sh.getVmiCode() != null && ("4690".equals(sh.getVmiCode()) || "4691".equals(sh.getVmiCode()))) {
            converReceiveManager.generateVMIReceiveInfoBySample(sta);
        }
        if (sta.getType().getValue() != StockTransApplicationType.TRANSIT_CROSS.getValue() && sta.getType().getValue() != StockTransApplicationType.SAME_COMPANY_TRANSFER.getValue()
                && sta.getType().getValue() != StockTransApplicationType.DIFF_COMPANY_TRANSFER.getValue()) {
            staLineDao.updateCompleteQuantityByStaId(sta.getId());
        }
        // 计算成本
        // staLineDao.updateSkuCostBySta(staId,
        // sta.getMainWarehouse().getParentUnit().getParentUnit().getId());

        // 记录SN日志
        snLogDao.createTransitCrossLogByStvIdSql(stv.getId());
        // 删除sn号
        snDao.deleteSNByStvIdSql(stv.getId());
        // 移除占用库存
        removeInventory(sta, stv);
        /** 添加用于删除多余的箱 **/
        // 判断前置单据状态是否正确
        if (sta.getType().getValue() == StockTransApplicationType.SERIAL_NUMBER_OUTBOUND.getValue() || sta.getType().getValue() == StockTransApplicationType.SERIAL_NUMBER_GROUP_OUTBOUND.getValue()) {
            com.jumbo.rmi.warehouse.BaseResult bs = rmiService.unlockOrder(sta.getRefSlipCode());
            if (bs.getStatus() == 0) {
                throw new BusinessException(ErrorCode.ERROR_STA_NOT_USING);
            }
        }

        /*
         * List<SkuCommand> skuLists = skuDao.findSkuByStaId(staId, new
         * BeanPropertyRowMapperExt<SkuCommand>(SkuCommand.class)); for (SkuCommand skulist :
         * skuLists) { Long num = skuDao.findQtyByStLog(skulist.getId(), wh.getOu().getId(), new
         * SingleColumnRowMapper<Long>(Long.class)); Long qty =
         * inventoryDao.findQuantityBySkuAndOuid(skulist.getId(), wh.getOu().getId(), new
         * SingleColumnRowMapper<Long>(Long.class)); if (num.longValue() != qty.longValue()) { throw
         * new BusinessException(ErrorCode.CHECK_INV_ERROR); } }
         */
        // if (sta.getType().getValue() != StockTransApplicationType.TRANSIT_CROSS.getValue()) {
        // 唯品会 run
        // 反馈给pasc
        eventObserver.onEvent(new TransactionalEvent(stv));
        // }
        eventObserver.onEvent(new TransactionalEvent(sta));

        // if (StockTransApplicationType.OUTBOUND_PURCHASE.equals(sta.getType())
        // &&
        // StockTransApplicationStatus.FINISHED.equals(sta.getStatus())) {
        // // 注册k3任务
        // poOutTaskRegister.registTask(stv);
        // }
        log.debug(sta.getCode(), stv.getId(), sta.getOutboundTime());
        inventoryDao.flush();
        List<Inventory> list = inventoryDao.findByOccupiedCode(sta.getCode());
        if (list.size() > 0) {
            throw new BusinessException(ErrorCode.DELETE_OCP_INV_ERROR);
        }



        return sta.getStatus().getValue();
    }

    public void predefinedOutOccupation(Long staId, User user) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (!sta.getStatus().equals(StockTransApplicationStatus.CREATED) && !(sta.getType().equals(StockTransApplicationType.OUTBOUND_PURCHASE) && sta.getStatus().equals(StockTransApplicationStatus.FROZEN))) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        stv.setCode(stvDao.getCode(staId, new SingleColumnRowMapper<String>()));
        TransactionType transactionType = null;
        // 包材领用、样品领用、库间移动、不懂公司调拨、同公司调拨、报废出库、福利领用、固定资产领用、促销领用、低值易耗品、商品置换出库、送修出库、串号拆分出库、串号组合出库
        if (sta.getType().equals(StockTransApplicationType.OUTBOUND_PACKAGING_MATERIALS)) {
            transactionType = transactionTypeDao.findByCode(Constants.PACKAGING_MATERIALS_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SAMPLE_OUTBOUND)) {
            transactionType = transactionTypeDao.findByCode(Constants.SAMPLE_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS)) {
            transactionType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_CROSS_IN);
        } else if (sta.getType().equals(StockTransApplicationType.DIFF_COMPANY_TRANSFER)) {
            transactionType = transactionTypeDao.findByCode(Constants.DIFF_COMPANY_TRANSFER_OUT);
        } else if (sta.getType().equals(StockTransApplicationType.SAME_COMPANY_TRANSFER)) {
            transactionType = transactionTypeDao.findByCode(Constants.VMI_FLITTING_IN);
        } else if (sta.getType().equals(StockTransApplicationType.SCARP_OUTBOUND)) {
            transactionType = transactionTypeDao.findByCode(Constants.SCARP_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.WELFARE_USE)) {
            transactionType = transactionTypeDao.findByCode(Constants.WELFARE_USE);
        } else if (sta.getType().equals(StockTransApplicationType.FIXED_ASSETS_USE)) {
            transactionType = transactionTypeDao.findByCode(Constants.FIXED_ASSETS_USE);
        } else if (sta.getType().equals(StockTransApplicationType.SALES_PROMOTION_USE)) {
            transactionType = transactionTypeDao.findByCode(Constants.SALES_PROMOTION_USE);
        } else if (sta.getType().equals(StockTransApplicationType.LOW_VALUE_CONSUMABLE_USE)) {
            transactionType = transactionTypeDao.findByCode(Constants.LOW_VALUE_CONSUMABLE_USE);
        } else if (sta.getType().equals(StockTransApplicationType.SKU_EXCHANGE_OUTBOUND)) {
            transactionType = transactionTypeDao.findByCode(Constants.SKU_EXCHANGE_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.REAPAIR_OUTBOUND)) {
            transactionType = transactionTypeDao.findByCode(Constants.REAPAIR_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SERIAL_NUMBER_OUTBOUND)) {
            transactionType = transactionTypeDao.findByCode(Constants.SERIAL_NUMBER_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SERIAL_NUMBER_GROUP_OUTBOUND)) {
            transactionType = transactionTypeDao.findByCode(Constants.SERIAL_NUMBER_GROUP_OUTBOUND);
        }

        stv.setCreator(user);
        stv.setCreateTime(new Date());
        stv.setDirection(transactionType.getDirection());
        stv.setOwner(sta.getOwner());
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setDirection(TransactionDirection.OUTBOUND);
        stv.setWarehouse(sta.getAddiWarehouse());
        stv.setCode(sta.getCode());
        stv.setTransactionType(transactionType);
        stv.setSta(sta);
        stv.setLastModifyTime(new Date());
        stvDao.save(stv);
        predefinedOutOccupationInv(sta, stv, true);
    }

    /**
     * 库存占用
     * 
     * @param sta
     * @param stv
     * @param isAuto 是否自动占用
     */
    public void predefinedOutOccupationInv(StockTransApplication sta, StockTransVoucher stv, boolean isAuto) {
        Map<String, Object> params = new HashMap<String, Object>();
        staDao.flush();
        params.put("in_sta_id", sta.getId());
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
        Map<String, Object> result = null;
        if (isAuto) {
            result = staDao.executeSp("SP_OCC_INV_FOR_PRE_OUT_AUTO", sqlParameters, params);
        } else {
            result = staDao.executeSp("SP_OCC_FOR_INV_PRE_OUT_MANUAL", sqlParameters, params);
        }
        String errorSku = (String) result.get("error_sku_id");
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            BusinessException root = new BusinessException(ErrorCode.STA_CREATE_ERROR);
            BusinessException temp = root;
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                String[] skuAndInvS = strs[0].split(Constants.STA_INV_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(skuAndInvS[0]);
                Long invStatusId = Long.parseLong(skuAndInvS[1]);
                Long qty = Long.parseLong(strs[1]);

                Sku sku = skuDao.getByPrimaryKey(skuId);
                InventoryStatus invStatus = inventoryStatusDao.getByPrimaryKey(invStatusId);
                BusinessException current = new BusinessException(ErrorCode.PREDEFINED_OUT_CREATE_INV_ERROR, new Object[] {sku.getBarCode(), sku.getCode(), sku.getKeyProperties(), invStatus.getName(), qty});
                log.debug(sku.getBarCode() + "  " + qty);
                temp.setLinkedException(current);
                temp = current;
            }
            throw root;
        }
        if (!isAuto) {
            stv.getStvLines().clear();
        }
        staDao.flush();
        sta.setStatus(StockTransApplicationStatus.OCCUPIED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), null, sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        // 重建stv line
        stvLineDao.createPurchaseOutByStaId(sta.getId());
        wmExecute.valdateOutBoundLocationIsGI(stv);
        // 跟新staLine 的 执行数量
        staLineDao.updateCompleteQuantityByStaId(sta.getId());

    }

    public Pagination<StockTransApplicationCommand> queryPredefinedOutStaList(int start, int size, Long ouId, StockTransApplicationCommand sta, Sort[] sorts) {
        Map<String, Object> params = sta.setQueryLikeParam();
        params.put("ouId", ouId);
        return staDao.queryPredefinedOutStaList(start, size, params, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }
    
    public Pagination<CustomsDeclarationDto> queryBaoShuiOutStaList(int start, int size, Long ouId, StockTransApplicationCommand sta, Sort[] sorts) {
        Map<String, Object> params = sta.setQueryLikeParam();
        params.put("ouId", ouId);
        if(sta.getBaoShuiType() !=null && !"".equals(sta.getBaoShuiType()) ){
            params.put("baoShuiType", sta.getBaoShuiType());
        }else{
            params.put("baoShuiType",null);
        }
        if(sta.getLicensePlateNumber() !=null   && !"".equals(sta.getLicensePlateNumber()) ){
            params.put("licensePlateNumber", sta.getLicensePlateNumber());
        }else{
            params.put("licensePlateNumber",null);
        }
        if(sta.getPrestowageNo() !=null  && !"".equals(sta.getPrestowageNo())){
            params.put("prestowageNo", sta.getPrestowageNo());
        }else{
            params.put("prestowageNo",null);
        }
        if(sta.getWmsType() !=null   && !"".equals(sta.getWmsType())){
            params.put("wmsType", sta.getWmsType());
        }else{
            params.put("wmsType",null);
        }
        if(sta.getBaoShuiStatus() !=null   && !"".equals(sta.getBaoShuiStatus()) ){
            params.put("baoShuiStatus", sta.getBaoShuiStatus());
        }else{
            params.put("baoShuiStatus",null);
        }
        if(sta.getWmsStatus() !=null   && !"".equals(sta.getWmsStatus()) ){
            params.put("wmsStatus", sta.getWmsStatus());
        }else{
            params.put("wmsStatus",null);
        }
        return customsDeclarationDao.queryBaoShuiOutStaList(start, size, params, new BeanPropertyRowMapperExt<CustomsDeclarationDto>(CustomsDeclarationDto.class), sorts);
    }

    // 查询库存销售可用量
    public void isInventoryNumber(Long staId) {
        List<StaLineCommand> errors = staLineDao.findPredefinedOutCreateInv(staId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
        if (errors != null && errors.size() > 0) {
            BusinessException root = new BusinessException(ErrorCode.STA_CREATE_ERROR);
            BusinessException temp = root;
            for (StaLineCommand l : errors) {
                BusinessException current =
                        new BusinessException(ErrorCode.PREDEFINED_OUT_CREATE_INV_ERROR, new Object[] {l.getBarCode(), l.getSkuCode(), l.getKeyProperties() == null ? "" : l.getKeyProperties(), l.getIntInvstatusName(), l.getQuantity()});
                log.debug(l.getBarCode() + "  " + l.getQuantity());
                temp.setLinkedException(current);
                temp = current;
            }
            throw root;
        }
    }

    /**
     * VMI
     */
    public void vmiSalesStaOutBound(Long ouid, String trackingNo, BigDecimal weight, Long staId, Long creatorId, String lpCode, MsgRtnOutboundCommand msg) {
        // createStvForSalesByStaId(staId, creatorId, false);
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        // occupyInventoryForSales(sta);
        createStvByStaId(sta.getId(), null, null, false);
        // 库存占用 销售出库 false fanht
        // createStvByStaId(staId, creatorId);
        PackageInfo pg = new PackageInfo();
        pg.setTrackingNo(trackingNo);
        pg.setLpCode(lpCode);
        pg.setWeight(weight);
        pg.setLastModifyTime(new Date());
        StaDeliveryInfo di = sta.getStaDeliveryInfo();
        di.setSta(sta);
        di.setLpCode(lpCode);
        di.setLastModifyTime(new Date());
        // 触发器移除 trg_update_lpcode_is_null
        ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey(Constants.UPDATE_DELIVERY_LPCODE, Constants.UPDATE_LPCODE_IS_OPEN);
        String flag = op == null ? "false" : (op.getOptionValue() == null ? "false" : op.getOptionValue());
        if ("true".equals(flag)) {
            if (di.getLpCode() == null) {
                log.error("物流商编码不能为空!staCode=" + sta.getCode());
                throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_TRANSPORTATOR_IS_NULL);
            }
        }
        staDeliveryInfoDao.save(di);
        pg.setStaDeliveryInfo(di);
        packageInfoDao.save(pg);
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), creatorId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        sta.setCheckUserId(creatorId);
        staDao.save(sta);
        packageInfoDao.flush();
        salesStaOutBound(staId, -1L, ouid, trackingNo, weight, null, false, null);
        sta.setStatus(StockTransApplicationStatus.FINISHED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), creatorId, sta.getMainWarehouse().getId());
        staDao.save(sta);
        if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
            BiChannel shop = companyShopDao.getByCode(sta.getOwner());
            VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                vmi.generateReceivingWhenFinished(sta);
            }
        }
    }

    public void saveVmiWhRtnOutboundMsg(MsgRtnOutbound msg, String source) {
        MsgRtnOutbound oldMsg = msgRtnOutboundDao.findByStaCode(msg.getStaCode());
        if (oldMsg == null) {
            // 保存记录
            if (!StringUtils.hasText(msg.getStaCode()) && !StringUtils.hasText(msg.getTrackingNo())) {
                throw new BusinessException(ErrorCode.VMI_WH_RTN_OUTBOUND_MISS_MSG);
            }
            msg.setSource(source);
            msgRtnOutboundDao.save(msg);
        }
    }

    public Warehouse getWareHouseByVmiSource(String vmiSouce) {
        return warehouseDao.getWareHouseByVmiSource(vmiSouce);
    }

    @Transactional(readOnly = true)
    public Pagination<MsgOutboundOrderCancelCommand> findOutboundOrderCancelList(Long ouid, MsgOutboundOrderCancelCommand recs, int start, int pageSize, Sort[] sorts) {
        Warehouse warehouse = warehouseDao.getByOuId(ouid);
        String StaCodeStr = null, slipCode = null;
        int status = 66;
        Date starteDate = null, endDate = null;
        if (recs != null && warehouse != null) {
            if (recs.getStaCode() != null && !recs.getStaCode().equals("")) {
                StaCodeStr = "%" + recs.getStaCode() + "%";
            }
            if (recs.getSlipCode() != null && !recs.getSlipCode().equals("")) {
                slipCode = "%" + recs.getSlipCode() + "%";
            }
            if (recs.getStarteDate() != null) {
                starteDate = recs.getStarteDate();
            }
            if (recs.getEndDate() != null) {
                endDate = recs.getEndDate();
            }
            status = recs.getStatusId();
        }
        return msgOutboundOrderCancelDao.findOutboundOrderCancelListInfo(start, pageSize, warehouse.getVmiSource(), StaCodeStr, starteDate, endDate, slipCode, status, new BeanPropertyRowMapperExt<MsgOutboundOrderCancelCommand>(
                MsgOutboundOrderCancelCommand.class), sorts);
    }

    @Transactional(readOnly = true)
    public Pagination<MsgOutboundOrderCancelCommand> findOutboundOrderCancelListRoot(Long ouId, MsgOutboundOrderCancelCommand recs, int start, int pageSize, Sort[] sorts) {
        Warehouse warehouse = warehouseDao.getByOuId(ouId);
        String StaCodeStr = null, slipCode = null;
        int status = 66;
        Date starteDate = null, endDate = null;
        if (recs != null && warehouse != null) {
            if (recs.getStaCode() != null && !recs.getStaCode().equals("")) {
                StaCodeStr = "%" + recs.getStaCode() + "%";
            }
            if (recs.getSlipCode() != null && !recs.getSlipCode().equals("")) {
                slipCode = "%" + recs.getSlipCode() + "%";
            }
            if (recs.getStarteDate() != null) {
                starteDate = recs.getStarteDate();
            }
            if (recs.getEndDate() != null) {
                endDate = recs.getEndDate();
            }
            status = recs.getStatusId();
        }
        return msgOutboundOrderCancelDao.findOutboundOrderCancelListInfoRoot(start, pageSize, warehouse.getVmiSource(), StaCodeStr, starteDate, endDate, slipCode, status, new BeanPropertyRowMapperExt<MsgOutboundOrderCancelCommand>(
                MsgOutboundOrderCancelCommand.class), sorts);
    }

    public Pagination<MsgOutboundOrderCommand> findCurrentMsgOutboundOrderByPage(int start, int pageSize, MsgOutboundOrderCommand msg, Long whId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
            if (StringUtils.hasText(msg.getProvince())) {
                msg.setProvince(msg.getProvince() + "%");
            } else {
                msg.setProvince(null);
            }
            if (StringUtils.hasText(msg.getCity())) {
                msg.setCity(msg.getCity() + "%");
            } else {
                msg.setCity(null);
            }
        } else {
            msg = new MsgOutboundOrderCommand();
        }
        return msgOutboundOrderDao.findMsgOutboundOrderByPage(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getProvince(), msg.getCity(), msg.getStartDate(), msg.getEndDate(), whId,
                new BeanPropertyRowMapper<MsgOutboundOrderCommand>(MsgOutboundOrderCommand.class), sorts);
    }

    public Pagination<MsgOutboundOrderCommand> findCurrentMsgOutboundOrderByPageRoot(int start, int pageSize, MsgOutboundOrderCommand msg, Long ouId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
            if (StringUtils.hasText(msg.getProvince())) {
                msg.setProvince(msg.getProvince() + "%");
            } else {
                msg.setProvince(null);
            }
            if (StringUtils.hasText(msg.getCity())) {
                msg.setCity(msg.getCity() + "%");
            } else {
                msg.setCity(null);
            }
        } else {
            msg = new MsgOutboundOrderCommand();
        }
        return msgOutboundOrderDao.findMsgOutboundOrderByPageRoot(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getProvince(), msg.getCity(), msg.getStartDate(), msg.getEndDate(), ouId,
                new BeanPropertyRowMapper<MsgOutboundOrderCommand>(MsgOutboundOrderCommand.class), sorts);
    }

    public Pagination<MsgRtnOutboundCommand2> findCurrentMsgRtnOutboundByPage(int start, int pageSize, MsgRtnOutboundCommand2 msg, Long whId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
        } else {
            msg = new MsgRtnOutboundCommand2();
        }
        return msgRtnOutboundDao.findMsgRtnOutboundByPage(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getStartDate(), msg.getEndDate(), whId,
                new BeanPropertyRowMapper<MsgRtnOutboundCommand2>(MsgRtnOutboundCommand2.class), sorts);
    }

    public Pagination<MsgRtnOutboundCommand2> findCurrentMsgRtnOutboundByPageRoot(int start, int pageSize, MsgRtnOutboundCommand2 msg, Long ouId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
        } else {
            msg = new MsgRtnOutboundCommand2();
        }
        return msgRtnOutboundDao.findMsgRtnOutboundByPageRoot(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getStartDate(), msg.getEndDate(), ouId, new BeanPropertyRowMapper<MsgRtnOutboundCommand2>(
                MsgRtnOutboundCommand2.class), sorts);
    }

    public Pagination<MsgInboundOrderCommand> findCurrentMsgInboundOrderByPage(int start, int pageSize, MsgInboundOrderCommand msg, Long whId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
        } else {
            msg = new MsgInboundOrderCommand();
        }
        return msgInDao
                .findMsgInboundOrderByPage(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getStartDate(), msg.getEndDate(), whId, new BeanPropertyRowMapper<MsgInboundOrderCommand>(MsgInboundOrderCommand.class), sorts);

    }

    public Pagination<MsgInboundOrderCommand> findCurrentMsgInboundOrderByPageRoot(int start, int pageSize, MsgInboundOrderCommand msg, Long ouId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
        } else {
            msg = new MsgInboundOrderCommand();
        }
        return msgInDao.findMsgInboundOrderByPageRoot(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getStartDate(), msg.getEndDate(), ouId, new BeanPropertyRowMapper<MsgInboundOrderCommand>(MsgInboundOrderCommand.class),
                sorts);

    }

    public Pagination<MsgRtnInboundOrderCommand> findCurrentMsgRtnInboundByPage(int start, int pageSize, MsgRtnInboundOrderCommand msg, Long whId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
        } else {
            msg = new MsgRtnInboundOrderCommand();
        }
        return msgRtnInboundOrderDao.findMsgRtnInboundByPage(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getStartDate(), msg.getEndDate(), whId, new BeanPropertyRowMapper<MsgRtnInboundOrderCommand>(
                MsgRtnInboundOrderCommand.class), sorts);
    }

    public Pagination<MsgRtnInboundOrderCommand> findCurrentMsgRtnInboundByPageRoot(int start, int pageSize, MsgRtnInboundOrderCommand msg, Long ouId, Sort[] sorts) {
        if (msg != null) {
            if (StringUtils.hasText(msg.getStaCode())) {
                msg.setStaCode(msg.getStaCode() + "%");
            } else {
                msg.setStaCode(null);
            }
            if (StringUtils.hasText(msg.getSlipCode())) {
                msg.setSlipCode(msg.getSlipCode() + "%");
            } else {
                msg.setSlipCode(null);
            }
        } else {
            msg = new MsgRtnInboundOrderCommand();
        }
        return msgRtnInboundOrderDao.findMsgRtnInboundByPageRoot(start, pageSize, msg.getStaCode(), msg.getSlipCode(), msg.getIntStatus(), msg.getStartDate(), msg.getEndDate(), ouId, new BeanPropertyRowMapper<MsgRtnInboundOrderCommand>(
                MsgRtnInboundOrderCommand.class), sorts);
    }

    public void updateCartonPacking(Long cartonId) {
        Carton carton = cartonDao.getByPrimaryKey(cartonId);
        if (carton == null) {
            throw new BusinessException(ErrorCode.CARTON_NOT_FOUND);
        }
        if (carton.getStatus().equals(CartonStatus.FINISH)) {
            throw new BusinessException(ErrorCode.CARTON_IS_FINISHED, new Object[] {carton.getCode()});
        }
        if (carton.getStatus().equals(CartonStatus.CREATED)) {
            carton.setStatus(CartonStatus.DOING);
            cartonDao.save(carton);
        }
    }

    public void updateCartonCreate(Long cartonId) {
        Carton carton = cartonDao.getByPrimaryKey(cartonId);
        if (carton == null) {
            throw new BusinessException(ErrorCode.CARTON_NOT_FOUND);
        }
        if (carton.getStatus().equals(CartonStatus.FINISH)) {
            throw new BusinessException(ErrorCode.CARTON_IS_FINISHED, new Object[] {carton.getCode()});
        }
        if (carton.getStatus().equals(CartonStatus.DOING)) {
            carton.setStatus(CartonStatus.CREATED);
            cartonDao.save(carton);
        }
    }

    public synchronized Carton packageCartonLine(Long cartonId, List<CartonLineCommand> lines, List<StaAdditionalLine> addls, BigDecimal weight, Long whouid) {
        Carton carton = cartonDao.getByPrimaryKey(cartonId);
        if (carton == null) {
            throw new BusinessException(ErrorCode.CARTON_NOT_FOUND);
        }
        if (carton.getStatus().equals(CartonStatus.FINISH)) {
            throw new BusinessException(ErrorCode.CARTON_IS_FINISHED, new Object[] {carton.getCode()});
        }
        StockTransApplication sta = carton.getSta();
        Long cmpid = sta.getMainWarehouse().getParentUnit().getParentUnit().getId();
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        Long customerId = null;
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        // 保存包材
        if (addls != null && addls.size() > 0) {
            log.debug("addl size : {}", addls.size());
            for (StaAdditionalLine l : addls) {
                log.debug("sku : {}, qty : {}", l.getSku().getBarCode(), l.getQuantity());
                Inventory inv = getAddlineSkuCache(l.getSku().getBarCode(), cmpid, customerId);
                if (inv == null) {
                    throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF_NOT_FOUND, new Object[] {l.getSku().getBarCode()});
                }
                StaAdditionalLine addline = new StaAdditionalLine();
                addline.setSku(inv.getSku());
                addline.setSta(sta);
                addline.setCreateTime(new Date());
                addline.setOwner(sta.getOwner());
                addline.setLpcode(sta.getStaDeliveryInfo().getLpCode());
                addline.setQuantity(l.getQuantity());
                addline.setSkuCost(inv.getSkuCost());
                addline.setcId(cartonId);
                staAdditionalLineDao.save(addline);
            }
        }
        // 打包
        for (CartonLineCommand cmd : lines) {
            log.debug("sku : {}, qty : {}", cmd.getSkuBarcode(), cmd.getQty());
            Sku sku = skuDao.getByBarcode(cmd.getSkuBarcode(), customerId);
            if (sku == null) {
                SkuBarcode addsku = skuBarcodeDao.findByBarCode(cmd.getSkuBarcode(), customerId);
                if (addsku == null) {
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {cmd.getSkuBarcode()});
                } else {
                    sku = addsku.getSku();
                }
            }
            if (cmd.getQty() == null || cmd.getQty() <= 0) {
                continue;
            }
            CartonLine l = new CartonLine();
            l.setCarton(carton);
            l.setQty(cmd.getQty());
            l.setSku(sku);
            cartonLineDao.save(l);
        }
        // 保存重量
        carton.setWeight(weight);
        // 更新箱执行信息
        carton.setFinishTime(new Date());
        carton.setStatus(CartonStatus.FINISH);
        if (null == carton.getSeqNo() || !"1".equals(carton.getSeqNo())) {
            if (null != sta.getStaDeliveryInfo()) {

                StaDeliveryInfo sdi = sta.getStaDeliveryInfo();
                sdi.setTrackingNo(null);
                // 获取新的快递单号
                try {
                    transOlManager.matchingTransNo(sta.getId(), sta.getStaDeliveryInfo().getLpCode(), sta.getMainWarehouse().getId());
                } catch (Exception e) {
                    throw new BusinessException(ErrorCode.TRANS_CAN_NOT_SEND, new Object[] {sta.getCode()});
                }
            }
        }
        // 快递单号
        carton.setTrackingNo(sta.getStaDeliveryInfo().getTrackingNo());
        // 判断是否超出计划量
        cartonLineDao.flush();
        List<CartonLineCommand> errorList = cartonLineDao.findErrorSku(sta.getId(), carton.getId(), new BeanPropertyRowMapperExt<CartonLineCommand>(CartonLineCommand.class));
        if (errorList != null && errorList.size() > 0) {
            BusinessException root = new BusinessException(ErrorCode.CARTON_SKU_ERROR);
            for (CartonLineCommand cmd : errorList) {
                Sku sku = skuDao.getByPrimaryKey(cmd.getSkuId());
                BusinessException be = new BusinessException(ErrorCode.CARTON_SKU_NOT_IN_PLAN, new Object[] {sku.getBarCode(), sku.getCode(), sku.getName(), cmd.getQty()});
                setLinkedBusinessException(root, be);
            }
            throw root;
        }
        return generateCartonByStaId(carton.getSta().getId());
    }

    @Override
    public Carton packageCartonLine(Long cartonId, String defectCode, List<CartonLineCommand> lines, List<StaAdditionalLine> addls, BigDecimal weight, Long whouid) {
        String defectCodes[] = defectCode.split(",");
        List<String[]> barCodes = new ArrayList<String[]>();
        for (int i = 0; i < defectCodes.length; i++) {
            String barcode[] = defectCodes[i].split("-");
            barCodes.add(barcode);
        }
        Carton carton = cartonDao.getByPrimaryKey(cartonId);
        if (carton == null) {
            throw new BusinessException(ErrorCode.CARTON_NOT_FOUND);
        }
        if (carton.getStatus().equals(CartonStatus.FINISH)) {
            throw new BusinessException(ErrorCode.CARTON_IS_FINISHED, new Object[] {carton.getCode()});
        }
        StockTransApplication sta = carton.getSta();
        Long cmpid = sta.getMainWarehouse().getParentUnit().getParentUnit().getId();
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        Long customerId = null;
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        // 保存包材
        if (addls != null && addls.size() > 0) {
            log.debug("addl size : {}", addls.size());
            for (StaAdditionalLine l : addls) {
                log.debug("sku : {}, qty : {}", l.getSku().getBarCode(), l.getQuantity());
                Inventory inv = getAddlineSkuCache(l.getSku().getBarCode(), cmpid, customerId);
                if (inv == null) {
                    throw new BusinessException(ErrorCode.OUT_BOUND_NEED_WRAP_STUFF_NOT_FOUND, new Object[] {l.getSku().getBarCode()});
                }
                StaAdditionalLine addline = new StaAdditionalLine();
                addline.setSku(inv.getSku());
                addline.setSta(sta);
                addline.setCreateTime(new Date());
                addline.setOwner(sta.getOwner());
                addline.setLpcode(sta.getStaDeliveryInfo().getLpCode());
                addline.setQuantity(l.getQuantity());
                addline.setSkuCost(inv.getSkuCost());
                addline.setcId(carton.getId());
                staAdditionalLineDao.save(addline);
            }
        }
        // 打包
        for (CartonLineCommand cmd : lines) {
            log.debug("sku : {}, qty : {}", cmd.getSkuBarcode(), cmd.getQty());
            Sku sku = skuDao.getByBarcode(cmd.getSkuBarcode(), customerId);
            if (sku == null) {
                SkuBarcode addsku = skuBarcodeDao.findByBarCode(cmd.getSkuBarcode(), customerId);
                if (addsku == null) {
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND, new Object[] {cmd.getSkuBarcode()});
                } else {
                    sku = addsku.getSku();
                }
            }
            if (cmd.getQty() == null || cmd.getQty() <= 0) {
                continue;
            }
            CartonLine l = new CartonLine();
            l.setCarton(carton);
            l.setQty(cmd.getQty());
            l.setSku(sku);
            cartonLineDao.save(l);
            for (String[] bar : barCodes) {
                if (bar[0].equals(sku.getBarCode())) {
                    SkuImperfect imperfect = imperfectDao.getSkuImperfectSkuId(bar[1], sku.getId());
                    ImperfectCartonLine cartonLine = new ImperfectCartonLine();
                    cartonLine.setCarton(carton);
                    cartonLine.setImperfect(imperfect);
                    cartonLine.setCartonLine(l);
                    cartonLine.setSku(sku);
                    imperfectCartonLineDao.save(cartonLine);
                }

            }
        }
        // 保存重量
        carton.setWeight(weight);
        // 更新箱执行信息
        carton.setFinishTime(new Date());
        carton.setStatus(CartonStatus.FINISH);
        if (null == carton.getSeqNo() || !"1".equals(carton.getSeqNo())) {
            if (null != sta.getStaDeliveryInfo()) {

                StaDeliveryInfo sdi = sta.getStaDeliveryInfo();
                sdi.setTrackingNo(null);
                // 获取新的快递单号
                try {
                    transOlManager.matchingTransNo(sta.getId(), sta.getStaDeliveryInfo().getLpCode(), sta.getMainWarehouse().getId());
                } catch (Exception e) {
                    throw new BusinessException(ErrorCode.TRANS_CAN_NOT_SEND, new Object[] {sta.getCode()});
                }
            }
        }
        // 快递单号
        carton.setTrackingNo(sta.getStaDeliveryInfo().getTrackingNo());
        // 判断是否超出计划量
        cartonLineDao.flush();
        List<CartonLineCommand> errorList = cartonLineDao.findErrorSku(sta.getId(), carton.getId(), new BeanPropertyRowMapperExt<CartonLineCommand>(CartonLineCommand.class));
        if (errorList != null && errorList.size() > 0) {
            BusinessException root = new BusinessException(ErrorCode.CARTON_SKU_ERROR);
            for (CartonLineCommand cmd : errorList) {
                Sku sku = skuDao.getByPrimaryKey(cmd.getSkuId());
                BusinessException be = new BusinessException(ErrorCode.CARTON_SKU_NOT_IN_PLAN, new Object[] {sku.getBarCode(), sku.getCode(), sku.getName(), cmd.getQty()});
                setLinkedBusinessException(root, be);
            }
            throw root;
        }
        return generateCartonByStaId(carton.getSta().getId());
    }

    public SkuCommand findSkuCostByCode(String code, Long cmpId) {
        log.debug("code : {}", code);
        log.debug("cmpid : {}", cmpId);
        return skuDao.findSkuCostByCode(code, cmpId, new BeanPropertyRowMapperExt<SkuCommand>(SkuCommand.class));
    }

    public InventoryCheck createSkuGroup(String skuCode, Long qty, Long shopId, Long invStatusId, String locCode, BigDecimal skuCost, List<SkuCommand> skuList, User user, Long ouId, boolean isGroup) {
        Warehouse wh = warehouseDao.getByOuId(ouId);
        if (wh == null) {
            log.error("createSkuGroup error ! Warehouse is null");
            throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_WAREHOUSE_IS_NULL);
        }

        BiChannel companyShop = companyShopDao.getByPrimaryKey(shopId);
        if (companyShop == null) {
            log.error("createSkuGroup error ! Shop is null");
            throw new BusinessException(ErrorCode.TRANSPORTATOR_REF_SHOP_IS_NULL);
        }
        whExe.validateBiChannelSupport(null, companyShop.getCode());
        InventoryStatus invStatus = inventoryStatusDao.getByPrimaryKey(invStatusId);
        if (invStatus == null) {
            log.error("createSkuGroup error ! invStatus is null");
            throw new BusinessException(ErrorCode.INBOUND_PDA_NOT_INV_STATUS);
        }
        // 判断库位
        WarehouseLocation loc = null;
        if (!isGroup) {
            loc = warehouseLocationDao.findByLocationCode(locCode, ouId);
            if (loc == null) {
                throw new BusinessException(ErrorCode.WAREHOUSELOCATION_IS_NULL);
            }
        }
        InventoryCheck ic = new InventoryCheck();
        ic.setCreateTime(new Date());
        ic.setStatus(InventoryCheckStatus.CREATED);
        long qtyTemp = 1;
        if (isGroup) {
            ic.setType(InventoryCheckType.SKU_SPLIT);
        } else {
            ic.setType(InventoryCheckType.SKU_MERGER);
            qtyTemp = -1;
        }
        ic.setCreator(user);
        ic.setCode(sequenceManager.getCode(InventoryCheck.class.getName(), ic));
        // ic.setSlipCode(null);
        ic.setOu(wh.getOu());
        ic.setShop(companyShop);
        inventoryCheckDao.save(ic);
        InventoryCheckDifTotalLine line = null;
        Map<String, Sku> skuMap = new HashMap<String, Sku>();
        for (SkuCommand skuInfo : skuList) {
            if (skuInfo != null) {
                Sku sku = null;
                if (skuMap.containsKey(skuInfo.getCode())) {
                    sku = skuMap.get(skuInfo.getCode());
                } else {
                    sku = skuDao.getByCode(skuInfo.getCode());
                    if (sku == null) {
                        throw new BusinessException(ErrorCode.IMPORT_SKU_ISNOT_MEET_REGULATION, new Object[] {skuInfo.getCode()});
                    }
                    skuMap.put(sku.getCode(), sku);
                }

                line = new InventoryCheckDifTotalLine();
                line.setInventoryCheck(ic);
                line.setSku(sku);
                line.setStatus(invStatus);
                line.setSkuCost(skuInfo.getSkuCost());
                line.setQuantity(qty * qtyTemp);
                vmiinvCheckLineDao.save(line);
            }
        }
        line = new InventoryCheckDifTotalLine();
        line.setInventoryCheck(ic);
        line.setSku(skuDao.getByCode(skuCode));
        line.setStatus(invStatus);
        line.setQuantity(-qty * qtyTemp);
        vmiinvCheckLineDao.save(line);
        vmiinvCheckLineDao.flush();
        // 占用库存
        occupySkuGroup(ic);

        if (!isGroup) {
            InventoryCheckDifferenceLine differenceLine = new InventoryCheckDifferenceLine();
            differenceLine.setSku(line.getSku());
            differenceLine.setQuantity(line.getQuantity());
            differenceLine.setInventoryCheck(ic);
            differenceLine.setDistrict(loc.getDistrict());
            differenceLine.setLocation(loc);
            differenceLine.setStatus(invStatus);
            differenceLine.setOwner(companyShop.getCode());
            differenceLine.setSkuCost(skuCost);
            inventoryCheckDifferenceLineDao.save(differenceLine);
        } else {
            List<Inventory> invList = inventoryDao.findByOccupiedCode(ic.getCode());

            for (SkuCommand skuInfo : skuList) {
                for (Inventory inv : invList) {
                    Sku sku = null;
                    if (skuMap.containsKey(skuInfo.getCode())) {
                        sku = skuMap.get(skuInfo.getCode());
                    } else {
                        sku = skuDao.getByCode(skuInfo.getCode());
                        if (sku == null) {
                            throw new BusinessException();
                        }
                        skuMap.put(sku.getCode(), sku);
                    }
                    InventoryCheckDifferenceLine differenceLine = new InventoryCheckDifferenceLine();
                    differenceLine.setSku(sku);
                    differenceLine.setQuantity(inv.getQuantity());
                    differenceLine.setInventoryCheck(ic);
                    differenceLine.setDistrict(inv.getDistrict());
                    differenceLine.setLocation(inv.getLocation());
                    differenceLine.setStatus(invStatus);
                    differenceLine.setOwner(companyShop.getCode());
                    differenceLine.setSkuCost(skuInfo.getSkuCost());
                    inventoryCheckDifferenceLineDao.save(differenceLine);
                }
            }
        }
        return ic;
    }

    // 商品组拆 占用库存
    private void occupySkuGroup(InventoryCheck ic) {
        vmiinvCheckLineDao.flush();
        if (!InventoryCheckStatus.CREATED.equals(ic.getStatus())) {
            log.error("Occupy sku group error! Adjustment execution ,Status is error!");
            throw new BusinessException();
        }
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("in_ic_id", ic.getId());
        SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
        SqlParameter[] sqlParameters = {new SqlParameter("in_ic_id", Types.NUMERIC), s};
        Map<String, Object> result = null;
        result = staDao.executeSp("SP_OCC_INV_FOR_SKU_GROUP", sqlParameters, params);
        String errorSku = (String) result.get("error_sku_id");
        if (StringUtils.hasText(errorSku)) {
            String[] skus = errorSku.split(",");
            BusinessException root = new BusinessException(ErrorCode.STA_CREATE_ERROR);
            BusinessException temp = root;
            for (String str : skus) {
                String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                String[] skuAndInvS = strs[0].split(Constants.STA_INV_SKUS_SLIPT_STR);
                Long skuId = Long.parseLong(skuAndInvS[0]);
                Long invStatusId = Long.parseLong(skuAndInvS[1]);
                Long qty = Long.parseLong(strs[1]);

                Sku sku = skuDao.getByPrimaryKey(skuId);
                InventoryStatus invStatus = inventoryStatusDao.getByPrimaryKey(invStatusId);
                BusinessException current = new BusinessException(ErrorCode.PREDEFINED_OUT_CREATE_INV_ERROR, new Object[] {sku.getBarCode(), sku.getCode(), sku.getKeyProperties(), invStatus.getName(), qty});
                log.debug(sku.getBarCode() + "  " + qty);
                temp.setLinkedException(current);
                temp = current;
            }
            throw root;
        }
        // 根据库存 创建明细数据
        inventoryCheckDifferenceLineDao.createByInnentory(ic.getCode());
        // 修改状态
        ic.setStatus(InventoryCheckStatus.UNEXECUTE);
        inventoryCheckDao.save(ic);
    }

    public void sfCancelOrder(SfOrderCancelQueue q, TransSfInfo t, Long ouid) {
        q.setCheckword(t.getCheckword());
        q.setCustid(t.getjCustid());
        SfOrderCancelResponse rs = SfWebserviceClient.cancelSfOrder(q);
        if (SfOrderCancelResponse.RESULT_SUEECEE.endsWith(rs.getResult())) {
            SfOrderCancelQueueLog lg = new SfOrderCancelQueueLog();
            lg.setCheckword(q.getCheckword());
            lg.setCmpOuId(ouid);
            lg.setCreateTime(q.getCreateTime());
            lg.setCustid(q.getCustid());
            lg.setFinishTime(new Date());
            lg.setOrderId(q.getOrderId());
            lg.setSendtype(lg.getSendtype());
            lg.setStaCode(q.getStaCode());
            sfOrderCancelQueueLogDao.save(lg);
            sfOrderCancelQueueDao.deleteByPrimaryKey(q.getId());
        } else {
            SfOrderCancelQueue sq = sfOrderCancelQueueDao.getByPrimaryKey(q.getId());
            sq.setCount(sq.getCount() + 1);
        }
    }

    public Pagination<CartonCommand> findPackingStaCartonList(int start, int pageSize, Long ouId, CartonCommand cmd, Sort[] sorts) {
        Map<String, Object> param = null;
        if (cmd != null) {
            param = cmd.getQueryParam();
        }
        List<Integer> staStatus = new ArrayList<Integer>();
        staStatus.add(StockTransApplicationStatus.PACKING.getValue());
        List<Integer> statusList = new ArrayList<Integer>();
        if (cmd != null && cmd.getIntStatus() == null) {
            statusList.add(CartonStatus.CREATED.getValue());
            statusList.add(CartonStatus.DOING.getValue());
        } else {
            if (cmd != null) {
                statusList.add(cmd.getIntStatus());
            }
        }
        return cartonDao.findRtnStaCartonList(start, pageSize, ouId, statusList, staStatus, param, sorts, new BeanPropertyRowMapperExt<CartonCommand>(CartonCommand.class));
    }

    public List<String> pdaFindLocationListBySku(String code, String skuBarcode) {
        Object obj = pdaFindByCode(code);
        if (obj instanceof StockTransApplication) {
            StockTransApplication sta = (StockTransApplication) obj;
            // 查询推荐库位
            List<String> locationList = pdaSkuLocationDao.findLocationByBarcode(code, skuBarcode, new SingleColumnRowMapper<String>(String.class));
            if (null == locationList || locationList.size() == 0) {
                // 判断是否多条码
                SkuBarcode addCode = skuBarcodeDao.findByBarCode(skuBarcode, null);
                if (addCode != null) {
                    skuBarcode = addCode.getSku().getBarCode();
                    if (log.isErrorEnabled()) {
                        log.debug("code is barcode :{} ; sku is {}", addCode.getBarcode(), skuBarcode);
                    }
                } else {
                    // 判断条码是否是SN
                    SkuSn sn = snDao.findSkuSnBySn(skuBarcode, sta.getMainWarehouse().getId(), SkuSnStatus.CHECKING);
                    if (sn != null) {
                        skuBarcode = sn.getSku().getBarCode();
                        if (log.isErrorEnabled()) {
                            log.debug("code is sn :{} ; sku is {}", sn.getSn(), skuBarcode);
                        }
                    }
                }
                locationList = pdaSkuLocationDao.findLocationByBarcode(code, skuBarcode, new SingleColumnRowMapper<String>(String.class));
            }
            return locationList;

        } else {
            return null;
        }
    }

    public MsgRtnInboundOrderCommand getMsgRtnInboundOrder(Long id) {
        return msgRtnInboundOrderDao.getMsgRtnInboundDetailById(id, new BeanPropertyRowMapper<MsgRtnInboundOrderCommand>(MsgRtnInboundOrderCommand.class));
    }

    public List<MsgRtnInboundOrderLine> findRtnLineByRtnListId(Long rtnListId, Sort[] sorts) {
        return msgRtnLineDao.findrtnLinByRtnInId(rtnListId, sorts, new BeanPropertyRowMapper<MsgRtnInboundOrderLine>(MsgRtnInboundOrderLine.class));
    }

    public Pagination<WarehouseLocation> findLocationsListByOuId(int start, int pageSize, Long ouid, String locationCode, String districtCode, Sort[] sorts) {
        String locationCodestr = null;
        String districtCodestr = null;
        if (StringUtils.hasText(locationCode)) {
            locationCodestr = "%" + locationCode + "%";
        }
        if (StringUtils.hasText(districtCode)) {
            districtCodestr = "%" + districtCode + "%";
        }
        return warehouseLocationDao.findLocationsListByOuId(start, pageSize, ouid, locationCodestr, districtCodestr, sorts, new BeanPropertyRowMapper<WarehouseLocation>(WarehouseLocation.class));
    }


    @SingleTaskLock(timeout = TASK_LOCK_TIMEOUT, value = TASK_LOCK_VALUE)
    public void whReplenishmentTask() {

        TransactionType type = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_INNER_OUT);
        if (type == null) {
            throw new BusinessException(ErrorCode.EXCEL_IMPORT_TRANSIT_INNER_TRANSATION_TYPE_NOT_FOUND);
        }
        // 查询需要补货的仓库
        List<Long> ouList = warehouseLocationDao.findwhLocationOuid(new SingleColumnRowMapper<Long>(Long.class));
        for (Long ouid : ouList) {
            try {

                // 根据仓库查询需要补货的库位
                List<WarehouseLocationCommand> whList = warehouseLocationDao.findReplenishmentWhLocation(ouid, new BeanPropertyRowMapper<WarehouseLocationCommand>(WarehouseLocationCommand.class));
                if (whList.size() == 0) {
                    continue;
                }

                OperationUnit ou = operationUnitDao.getByPrimaryKey(ouid);
                StockTransApplication sta = new StockTransApplication();
                sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
                sta.setCreateTime(new Date());
                sta.setIsNeedOccupied(false);
                sta.setMainWarehouse(ou);
                sta.setLastModifyTime(new Date());
                sta.setStatus(StockTransApplicationStatus.OCCUPIED);
                // 订单状态与账号关联
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), null, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
                sta.setType(StockTransApplicationType.TRANSIT_INNER);
                sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));
                sta.setIsNotPacsomsOrder(true);
                staDao.save(sta);

                // 创建出库单
                StockTransVoucher outstv = new StockTransVoucher();
                outstv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).longValue());
                outstv.setCode(sta.getCode() + "01");
                outstv.setCreateTime(new Date());
                outstv.setDirection(TransactionDirection.OUTBOUND);
                outstv.setSta(sta);
                outstv.setLastModifyTime(new Date());
                outstv.setStatus(StockTransVoucherStatus.CREATED);
                outstv.setTransactionType(type);
                outstv.setWarehouse(ou);
                List<StvLine> list = new ArrayList<StvLine>();
                List<StvLine> savlist = new ArrayList<StvLine>();
                Map<Long, Long> dMap = new HashMap<Long, Long>();

                for (WarehouseLocationCommand whlocation : whList) {

                    if (whlocation.getSkuId() == null) {
                        continue;
                    }
                    // 验证
                    Long lid = whlocation.getId();
                    Long whlid = dMap.get(lid);

                    if (whlid == null) {
                        dMap.put(lid, whlocation.getId());
                    } else {
                        continue;
                    }

                    Long locationidnum = 0l;
                    for (WarehouseLocationCommand whlocationinfo : whList) {
                        if (whlocationinfo.getId().equals(whlocation.getId())) {
                            locationidnum = locationidnum + whlocationinfo.getQty();
                        }
                    }

                    // 查询满足补货的所有商品
                    List<WarehouseLocationCommand> whMoveList =
                            warehouseLocationDao.findMoveWhLocation(whlocation.getSkuId(), whlocation.getOuid(), whlocation.getOwner(), new BeanPropertyRowMapper<WarehouseLocationCommand>(WarehouseLocationCommand.class));
                    if (whMoveList.size() == 0) {
                        continue;
                    }

                    // 判断补货数量
                    long A = whlocation.getCapacity() * whlocation.getCapaRatio() / 100 - locationidnum;

                    Long whMoveSum = 0l;
                    for (WarehouseLocationCommand wh : whMoveList) {
                        whMoveSum += wh.getQty();
                    }

                    // 移出
                    if (A > whMoveSum) {
                        for (WarehouseLocationCommand wh : whMoveList) {
                            StvLine l = new StvLine();
                            Sku sku = skuDao.getByPrimaryKey(whlocation.getSkuId());
                            l.setSku(sku);
                            l.setLocation(warehouseLocationDao.getByPrimaryKey(wh.getId()));
                            l.setOwner(wh.getOwner());
                            l.setInvStatus(inventoryStatusDao.getByPrimaryKey(wh.getInvStatusId()));
                            l.setQuantity(wh.getQty());
                            l.setDirection(TransactionDirection.OUTBOUND);
                            l.setStv(outstv);
                            l.setTransactionType(type);
                            l.setWarehouse(ou);
                            list.add(l);

                            StvLine inl = new StvLine();
                            inl.setSku(sku);
                            inl.setLocation(warehouseLocationDao.getByPrimaryKey(whlocation.getId()));
                            inl.setOwner(wh.getOwner());
                            inl.setInvStatus(inventoryStatusDao.getByPrimaryKey(wh.getInvStatusId()));
                            inl.setQuantity(wh.getQty());
                            inl.setDirection(TransactionDirection.OUTBOUND);
                            inl.setStv(outstv);
                            inl.setTransactionType(type);
                            inl.setWarehouse(ou);
                            savlist.add(inl);

                        }
                    } else {
                        Long inNum = 0l;
                        for (WarehouseLocationCommand wh : whMoveList) {

                            Long whQuantity = 0l;
                            boolean exist = false;
                            for (StvLine l : list) {
                                if (whlocation.getSkuId().equals(l.getSku().getId()) && wh.getId().equals(l.getLocation().getId()) && wh.getInvStatusId().equals(l.getInvStatus().getId())) {
                                    if ((wh.getOwner() == null && l.getOwner() == null) || (wh.getOwner() != null && wh.getOwner().equals(l.getOwner()))) {
                                        whQuantity += l.getQuantity();
                                        exist = true;
                                    }
                                }
                            }
                            if (exist) {
                                Long leavingNum = wh.getQty() - whQuantity;
                                if (leavingNum.equals(0l)) continue;
                            }

                            StvLine l = new StvLine();
                            Sku sku = skuDao.getByPrimaryKey(whlocation.getSkuId());
                            l.setSku(sku);

                            l.setLocation(warehouseLocationDao.getByPrimaryKey(wh.getId()));
                            l.setOwner(wh.getOwner());
                            l.setInvStatus(inventoryStatusDao.getByPrimaryKey(wh.getInvStatusId()));
                            l.setDirection(TransactionDirection.OUTBOUND);
                            l.setStv(outstv);
                            l.setTransactionType(type);
                            l.setWarehouse(ou);

                            StvLine inl = new StvLine();
                            inl.setSku(sku);
                            inl.setLocation(warehouseLocationDao.getByPrimaryKey(whlocation.getId()));
                            inl.setOwner(wh.getOwner());
                            inl.setInvStatus(inventoryStatusDao.getByPrimaryKey(wh.getInvStatusId()));
                            inl.setQuantity(wh.getQty());
                            inl.setDirection(TransactionDirection.OUTBOUND);
                            inl.setStv(outstv);
                            inl.setTransactionType(type);
                            inl.setWarehouse(ou);

                            if (wh.getQty() >= A && inNum == 0l) {
                                l.setQuantity(A);
                                inl.setQuantity(A);
                                savlist.add(inl);
                                list.add(l);
                                break;
                            } else {
                                if (inNum == 0l) {
                                    inNum = A - wh.getQty();
                                    inl.setQuantity(wh.getQty());
                                    l.setQuantity(wh.getQty());
                                } else if (wh.getQty() < inNum) {
                                    l.setQuantity(inNum);
                                    inl.setQuantity(inNum);
                                    inNum = inNum - wh.getQty();
                                    if (inNum == 0) savlist.add(inl);
                                    list.add(l);
                                    break;
                                } else if (wh.getQty() >= inNum) {
                                    l.setQuantity(inNum);
                                    inl.setQuantity(inNum);
                                    list.add(l);
                                    savlist.add(inl);
                                    break;
                                }

                            }
                            list.add(l);
                            savlist.add(inl);
                        }
                    }
                }
                List<StvLine> newStvline = new ArrayList<StvLine>();
                Map<String, StvLine> mapStvLine = new HashMap<String, StvLine>();
                for (StvLine line : list) {
                    String key = line.getOwner() + "_" + line.getSku().getId() + "_" + line.getInvStatus().getId() + "_" + line.getLocation().getId();
                    StvLine stvl = null;
                    if (mapStvLine.containsKey(key)) {
                        stvl = mapStvLine.get(key);
                        stvl.setQuantity(stvl.getQuantity() + line.getQuantity());
                    } else {
                        stvl = new StvLine();
                        stvl.setSku(line.getSku());
                        stvl.setLocation(line.getLocation());
                        stvl.setOwner(line.getOwner());
                        stvl.setInvStatus(line.getInvStatus());
                        stvl.setDirection(TransactionDirection.OUTBOUND);
                        stvl.setQuantity(line.getQuantity());
                        stvl.setStv(outstv);
                        stvl.setTransactionType(type);
                        stvl.setWarehouse(ou);
                        mapStvLine.put(key, stvl);
                        newStvline.add(stvl);
                    }
                }

                List<StvLine> newinvStvline = new ArrayList<StvLine>();
                Map<String, StvLine> mapinvStvLine = new HashMap<String, StvLine>();
                for (StvLine line : savlist) {
                    String key = line.getOwner() + "_" + line.getSku().getId() + "_" + line.getInvStatus().getId() + "_" + line.getLocation().getId();
                    StvLine stvl = null;
                    if (mapinvStvLine.containsKey(key)) {
                        stvl = mapinvStvLine.get(key);
                        stvl.setQuantity(stvl.getQuantity() + line.getQuantity());
                    } else {
                        stvl = new StvLine();
                        stvl.setSku(line.getSku());
                        stvl.setLocation(line.getLocation());
                        stvl.setOwner(line.getOwner());
                        stvl.setInvStatus(line.getInvStatus());
                        stvl.setDirection(TransactionDirection.OUTBOUND);
                        stvl.setQuantity(line.getQuantity());
                        stvl.setStv(outstv);
                        stvl.setTransactionType(type);
                        stvl.setWarehouse(ou);
                        mapinvStvLine.put(key, stvl);
                        newinvStvline.add(stvl);
                    }
                }

                Map<String, StaLine> mapStaLine = new HashMap<String, StaLine>();
                for (StvLine line : newStvline) {
                    String key = line.getOwner() + "_" + line.getSku().getId() + "_" + line.getInvStatus().getId() + "_" + line.getLocation().getId();
                    StaLine stal = null;
                    if (mapStaLine.containsKey(key)) {
                        stal = mapStaLine.get(key);
                        stal.setQuantity(stal.getQuantity() + line.getQuantity());
                    } else {
                        stal = new StaLine();
                        stal.setInvStatus(line.getInvStatus());
                        stal.setOwner(line.getOwner());
                        stal.setQuantity(line.getQuantity());
                        stal.setSku(line.getSku());
                        stal.setSta(sta);
                        line.setStaLine(stal);
                        mapStaLine.put(key, stal);
                    }
                    staLineDao.save(stal);
                }

                if (list.size() > 0 && newStvline.size() > 0) {
                    outstv.setStvLines(newStvline);
                    stvDao.save(outstv);
                    staDao.flush();
                    Map<String, Object> params = new HashMap<String, Object>();
                    params.put("in_sta_id", sta.getId());
                    SqlOutParameter s = new SqlOutParameter("error_sku_id", Types.VARCHAR);
                    SqlParameter[] sqlParameters = {new SqlParameter("in_sta_id", Types.NUMERIC), s};
                    Map<String, Object> result = staDao.executeSp("sp_occupy_inventory_for_out", sqlParameters, params);
                    String errorSku = (String) result.get("error_sku_id");
                    log.debug("errorSku:" + errorSku);

                    BusinessException root = null;
                    if (StringUtils.hasText(errorSku)) {
                        String[] skus = errorSku.split(",");
                        for (String str : skus) {
                            String[] strs = str.split(Constants.STA_SKUS_SLIPT_STR);
                            Long skuId = Long.parseLong(strs[0]);
                            Long qty = Long.parseLong(strs[1]);
                            if (root == null) {
                                root = new BusinessException(ErrorCode.OCCPUAID_INVENTORY_ERROR_NO_ENOUGHT_QTY);
                            }
                            BusinessException current = root;
                            while (current.getLinkedException() != null) {
                                current = current.getLinkedException();
                            }
                            Sku sku = skuDao.getByPrimaryKey(skuId);
                            BusinessException be = new BusinessException(ErrorCode.SKU_NO_INVENTORY_QTY, new Object[] {sku.getName(), sku.getCode(), sku.getBarCode(), qty});
                            current.setLinkedException(be);
                        }
                        throw root;
                    }
                    outstv.getStvLines().clear();
                    stvDao.save(outstv);
                    stvDao.flush();
                    // 重建sta line

                    stvLineDao.createTIOutByStaId(sta.getId(), outstv.getId());
                    try {
                        eventObserver.onEvent(new TransactionalEvent(sta));
                    } catch (BusinessException e) {
                        throw e;
                    }
                    createoutsta(sta, newinvStvline);
                } else {
                    staDao.delete(sta);
                }
            } catch (Exception ex) {
                log.debug("CREATE TRANSIT_CROSS ERROR ");
                if (logger.isErrorEnabled()) {
                    logger.error("whReplenishmentTask Exception:", ex);
                }
            }
        }
    }

    public void createoutsta(StockTransApplication sta, List<StvLine> stvList) {

        TransactionType type = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_INVENTORY_STATUS_CHANGE_IN);
        if (type == null) {
            throw new BusinessException(ErrorCode.TRANSACTION_TYPE_INVENTORY_STATUS_CHANGE_IN_NOT_FOUND);
        }
        // 创建入库单
        StockTransVoucher instv = new StockTransVoucher();
        instv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>()));
        instv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).longValue());
        instv.setCreateTime(new Date());
        instv.setLastModifyTime(new Date());
        instv.setDirection(TransactionDirection.INBOUND);
        instv.setMode(InboundStoreMode.TOGETHER);
        instv.setSta(sta);
        instv.setStatus(StockTransVoucherStatus.CREATED);
        instv.setTransactionType(type);
        instv.setWarehouse(sta.getMainWarehouse());
        List<InventoryCommand> list = new ArrayList<InventoryCommand>();

        for (StvLine stvline : stvList) {
            InventoryCommand l = new InventoryCommand();
            l.setBatchCode(stvline.getBatchCode());
            // l.setSkuCost(whlocation.getSkuCost());
            l.setLocation(stvline.getLocation());
            l.setDistrict(stvline.getDistrict());
            l.setOwner(stvline.getOwner());
            l.setStatus(stvline.getInvStatus());
            l.setInvOwner(stvline.getOwner());
            l.setQuantity(stvline.getQuantity());
            l.setSku(stvline.getSku());
            // 匹配sta line
            for (StaLine line : staLineDao.findByStaId(sta.getId())) {
                if (line.getSku().getId().equals(l.getSku().getId()) && line.getOwner().equals(l.getOwner())) {
                    l.setStaLine(line);
                    break;
                }

            }
            list.add(l);
        }
        List<StvLine> stvlineList = new ArrayList<StvLine>();
        List<StvLineCommand> outStvLine = stvLineDao.findStvLineByStaIdAndDirection(sta.getId(), TransactionDirection.OUTBOUND.getValue(), new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));

        Map<String, List<StvLineCommand>> tmpMap = new HashMap<String, List<StvLineCommand>>();
        for (StvLineCommand cmd : outStvLine) {
            String key = cmd.getOwner() + ",-," + cmd.getSkuId() + ",-," + cmd.getIntInvstatus();
            List<StvLineCommand> val = tmpMap.get(key);
            if (val == null) {
                val = new ArrayList<StvLineCommand>();
            }
            val.add(cmd);
            tmpMap.put(key, val);
        }
        for (InventoryCommand cmd : list) {
            String key = cmd.getInvOwner() + ",-," + cmd.getSku().getId() + ",-," + cmd.getStatus().getId();
            List<StvLineCommand> val = tmpMap.get(key);
            if (val == null) {
                throw new BusinessException();
            }

            for (int i = 0; i < val.size(); i++) {

                if (cmd.getQuantity() == 0) {
                    break;
                }
                StvLineCommand stvl = val.get(i);
                if (stvl.getQuantity() != null && stvl.getQuantity() != 0 && stvl.getQuantity() >= cmd.getQuantity()) {
                    StvLine l = new StvLine();
                    l.setDirection(TransactionDirection.INBOUND);
                    l.setBatchCode(stvl.getBatchCode());
                    l.setSkuCost(stvl.getSkuCost());
                    l.setDistrict(cmd.getLocation().getDistrict());
                    l.setInvStatus(cmd.getStatus());
                    l.setLocation(cmd.getLocation());
                    l.setQuantity(cmd.getQuantity());
                    l.setOwner(cmd.getOwner());
                    l.setSku(cmd.getSku());
                    l.setStaLine(staLineDao.getByPrimaryKey(stvl.getStalineId()));
                    l.setStv(instv);
                    l.setTransactionType(type);
                    l.setInBoundTime(stvl.getInBoundTime());
                    l.setWarehouse(sta.getMainWarehouse());
                    stvlineList.add(l);
                    stvl.setQuantity(stvl.getQuantity() - cmd.getQuantity());
                    cmd.setQuantity(0L);
                    break;
                } else if (stvl.getQuantity() != null && stvl.getQuantity() != 0) {
                    StvLineCommand l = new StvLineCommand();
                    l.setDirection(TransactionDirection.INBOUND);
                    l.setBatchCode(stvl.getBatchCode());
                    l.setSkuCost(stvl.getSkuCost());
                    l.setQuantity(stvl.getQuantity());
                    l.setStaLine(staLineDao.getByPrimaryKey(stvl.getStalineId()));
                    l.setDistrict(cmd.getLocation().getDistrict());
                    l.setInvStatus(cmd.getStatus());
                    l.setLocation(cmd.getLocation());
                    l.setOwner(cmd.getOwner());
                    l.setInBoundTime(stvl.getInBoundTime());
                    l.setSku(cmd.getSku());
                    l.setStv(instv);
                    l.setTransactionType(type);
                    l.setWarehouse(sta.getMainWarehouse());
                    stvlineList.add(l);
                    cmd.setQuantity(cmd.getQuantity() - stvl.getQuantity());
                    val.remove(i--);
                } else {
                    val.remove(i--);
                }
            }
        }
        instv.setStvLines(stvlineList);
        stvDao.save(instv);
    }

    @Transactional(readOnly = true)
    public Pagination<StockTransApplicationCommand> findOutboundPackageStaList(int start, int pageSize, StockTransApplicationCommand staCmd, Long ouid, Sort[] sorts) {
        Date startCreateTime = null;
        Date endCreateTime = null;
        Integer intStatus = null;
        String code = null;
        String refSlipCode = null;
        String slipCode2 = null;
        List<Integer> staTypeList = new ArrayList<Integer>();
        staTypeList.add(StockTransApplicationType.OUTBOUND_PURCHASE.getValue());
        staTypeList.add(StockTransApplicationType.VMI_RETURN.getValue());
        staTypeList.add(StockTransApplicationType.VMI_TRANSFER_RETURN.getValue());
        staTypeList.add(StockTransApplicationType.OUTBOUND_SETTLEMENT.getValue());
        staTypeList.add(StockTransApplicationType.OUTBOUND_CONSIGNMENT.getValue());
        if (staCmd != null) {
            if (staCmd.getStartCreateTime() != null) {
                startCreateTime = staCmd.getStartCreateTime();
            }
            if (staCmd.getEndCreateTime() != null) {
                endCreateTime = staCmd.getEndCreateTime();
            }
            if (staCmd.getIntStaStatus() != null) {
                intStatus = staCmd.getIntStaStatus();
            }
            if (StringUtils.hasLength(staCmd.getCode())) {
                code = staCmd.getCode() + "%";
            }
            if (StringUtils.hasLength(staCmd.getRefSlipCode())) {
                refSlipCode = staCmd.getRefSlipCode() + "%";
            }
            if (StringUtils.hasLength(staCmd.getSlipCode2())) {
                slipCode2 = staCmd.getSlipCode2() + "%";
            }
        }
        return staDao.findOutboundPackageStaListPage(start, pageSize, startCreateTime, endCreateTime, intStatus, code, refSlipCode, slipCode2, staTypeList, ouid, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }



    @Transactional(readOnly = true)
    public Pagination<StockTransApplicationCommand> getoutboundpackageByStalist(int start, int pageSize, StockTransApplicationCommand staCmd, Long ouid, Sort[] sorts) {
        Date startCreateTime = null;
        Date endCreateTime = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        List<Integer> staTypeList = new ArrayList<Integer>();
        // staTypeList.add(StockTransApplicationType.OUTBOUND_PURCHASE.getValue());
        staTypeList.add(StockTransApplicationType.VMI_RETURN.getValue());
        /*
         * staTypeList.add(StockTransApplicationType.VMI_TRANSFER_RETURN.getValue());
         * staTypeList.add(StockTransApplicationType.OUTBOUND_SETTLEMENT.getValue());
         * staTypeList.add(StockTransApplicationType.OUTBOUND_CONSIGNMENT.getValue())
         */;
        if (staCmd != null) {
            if (staCmd.getStartCreateTime() != null) {
                startCreateTime = staCmd.getStartCreateTime();
            }
            if (staCmd.getEndCreateTime() != null) {
                endCreateTime = staCmd.getEndCreateTime();
            }

            if (StringUtils.hasLength(staCmd.getOwner())) {
                owner = staCmd.getOwner();
            }
            if (StringUtils.hasLength(staCmd.getRefSlipCode())) {
                refSlipCode = staCmd.getRefSlipCode();
            }
            if (StringUtils.hasLength(staCmd.getSlipCode1())) {
                slipCode1 = staCmd.getSlipCode1();
            }
            if (StringUtils.hasLength(staCmd.getSlipCode2())) {
                slipCode2 = staCmd.getSlipCode2();
            }

        }
        return staDao.findOutboundPackageByStaListPage(start, pageSize, startCreateTime, endCreateTime, owner, slipCode2, slipCode1, refSlipCode, staTypeList, ouid, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }

    // tab1
    @Transactional(readOnly = true)
    public List<CartonCommand> findTrunkDetailInfoNoPage(Long staid, Long ouid, Sort[] sorts) {
        return cartonDao.findTrunkDetailInfoNoPage(staid, new BeanPropertyRowMapperExt<CartonCommand>(CartonCommand.class), sorts);
    }

    // tab2
    @Transactional(readOnly = true)
    public Pagination<SkuCommand> findPlanExecuteDetailInfo(int start, int pageSize, Long staid, Long ouid, Sort[] sorts) {
        return skuDao.findPlanExecuteDetailInfoPage(start, pageSize, staid, new BeanPropertyRowMapperExt<SkuCommand>(SkuCommand.class), sorts);
    }

    // tab3
    @Transactional(readOnly = true)
    public Pagination<SkuCommand> findCompleteDetailInfo(int start, int pageSize, Long staid, SkuCommand skuCmd, Long ouid, Sort[] sorts) {
        String cartonCode = null;
        String code = null;
        String barCode = null;
        String supplyCode = null;
        if (skuCmd != null) {
            if (StringUtils.hasLength(skuCmd.getCartonCode())) {
                cartonCode = skuCmd.getCartonCode() + "%";
            }
            if (StringUtils.hasLength(skuCmd.getCode())) {
                code = skuCmd.getCode() + "%";
            }
            if (StringUtils.hasLength(skuCmd.getBarCode())) {
                barCode = skuCmd.getBarCode() + "%";
            }
            if (StringUtils.hasLength(skuCmd.getSupplierCode())) {
                supplyCode = skuCmd.getSupplierCode() + "%";
            }
        }
        return skuDao.findCompleteDetailInfoPage(start, pageSize, staid, cartonCode, code, barCode, supplyCode, sorts, new BeanPropertyRowMapperExt<SkuCommand>(SkuCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<StvLineCommand> findCancelDetailInfo(int start, int pageSize, Long staid, Long ouid, Sort[] sorts) {
        return stvLineDao.findCancelDetailInfoPage(start, pageSize, staid, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class), sorts);
    }

    public Carton generateCartonByStaId(Long staid) {
        StockTransApplication sta = staDao.getByPrimaryKey(staid);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_IS_NULL);
        }
        Carton carton = new Carton();
        String seqNo = cartonDao.generateCartonSeqNo(staid, new SingleColumnRowMapper<String>());
        carton.setSeqNo(seqNo);
        carton.setCode(cartonDao.generateCartonCode(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).toString());
        carton.setCreateTime(new Date());
        carton.setSta(sta);
        carton.setStatus(CartonStatus.CREATED);
        cartonDao.save(carton);
        cartonDao.flush();
        Carton destCarton = new Carton();
        org.springframework.beans.BeanUtils.copyProperties(carton, destCarton);
        destCarton.setSta(null);
        // 验证carton.seqno.sta_id 的唯一性
        if (staid != null && seqNo != null) {
            List<Carton> list = cartonDao.checkCartonSeqNoStaId(staid, seqNo, new BeanPropertyRowMapperExt<Carton>(Carton.class));
            if (list.size() > 1) {
                log.error(staid + "seqno唯一性错误");
                throw new BusinessException("seqno唯一性错误");
            }
        }

        return destCarton;
    }

    @Transactional(readOnly = true)
    private List<OutBoundPackingObj> generateOutBoundPackingInfoBystaid(Long staid) {
        List<OutBoundPackingObj> packings = staDao.findOutBoundPackageByStaid(staid, new BeanPropertyRowMapperExt<OutBoundPackingObj>(OutBoundPackingObj.class));
        List<StvLineCommand> lines = stvLineDao.findOutBoundPackageLineByStaid(staid, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        if (packings != null && !packings.isEmpty()) {
            packings.get(0).setLines(lines);
        }
        return packings;
    }

    @Transactional(readOnly = true)
    public Pagination<WarehouseLocation> findValidLocationsByouid(int start, int pageSize, String code, Long ouid, Sort[] sorts) {
        String locCode = null;
        if (StringUtils.hasLength(code)) {
            locCode = code + "%";
        }
        return warehouseLocationDao.findValidLocationsByouid(start, pageSize, locCode, ouid, new BeanPropertyRowMapperExt<WarehouseLocation>(WarehouseLocation.class), sorts);
    }

    @Transactional(readOnly = true)
    public Pagination<WarehouseDistrict> findValidDistrictByouid(int start, int pageSize, String code, Long ouid, Sort[] sorts) {
        String districtCode = null;
        if (StringUtils.hasLength(code)) {
            districtCode = code + "%";
        }
        return warehouseDistrictDao.findValidDistrictByouid(start, pageSize, districtCode, ouid, new BeanPropertyRowMapperExt<WarehouseDistrict>(WarehouseDistrict.class), sorts);
    }

    public Pagination<InventoryCheckCommand> findSkuGroupInvCheckList(int start, int pageSize, InventoryCheckCommand icheck, Long ouid, Sort[] sorts) {
        Date startCreateTime = null;
        Date endCreateTime = null;
        Date startFinishTime = null;
        Date endFinishTime = null;
        Integer intStatus = null;
        String code = null;
        String owner = null;
        String user = null;

        List<Integer> icheckTypeList = new ArrayList<Integer>();
        icheckTypeList.add(InventoryCheckType.SKU_MERGER.getValue());
        icheckTypeList.add(InventoryCheckType.SKU_SPLIT.getValue());
        if (icheck != null) {
            if (icheck.getStartDate() != null) {
                startCreateTime = icheck.getStartDate();
            }
            if (icheck.getEndDate() != null) {
                endCreateTime = icheck.getEndDate();
            }
            if (icheck.getStartFinishTime() != null) {
                startFinishTime = icheck.getStartFinishTime();
            }
            if (icheck.getEndFinishTime() != null) {
                endFinishTime = icheck.getEndFinishTime();
            }
            if (icheck.getIntInvCheckStatus() != null) {
                intStatus = icheck.getIntInvCheckStatus();
            }
            if (StringUtils.hasLength(icheck.getCode())) {
                code = icheck.getCode() + "%";
            }
            if (StringUtils.hasLength(icheck.getOwner())) {
                owner = icheck.getOwner();
            }
            if (StringUtils.hasLength(icheck.getCreatorName())) {
                user = icheck.getCreatorName() + "%";
            }
        }
        return inventoryCheckDao.findSkuGroupICheckListPage(start, pageSize, startCreateTime, endCreateTime, startFinishTime, endFinishTime, intStatus, code, owner, icheckTypeList, user, ouid, sorts, new BeanPropertyRowMapperExt<InventoryCheckCommand>(
                InventoryCheckCommand.class));
    }

    public Pagination<StvLineCommand> findSkuCollectInfo(int start, int pageSize, Long invcheckid, Long ouid, Sort[] sorts) {
        return stvLineDao.findSkuCollectInfoPage(start, pageSize, invcheckid, sorts, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public Pagination<StvLineCommand> findSkuAdjustDetailInfo(int start, int pageSize, Long invcheckid, Long ouid, Sort[] sorts) {
        return stvLineDao.findSkuAdjustDetailInfo(start, pageSize, invcheckid, sorts, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public Pagination<Sku> findProductForBoxByPage(int start, int pageSize, Sku product, Sort[] sorts) {
        String code = null, supplier = null, name = null;
        if (product != null) {
            if (StringUtils.hasLength(product.getCode())) {
                code = product.getCode() + "%";
            }
            if (StringUtils.hasLength(product.getSupplierCode())) {
                supplier = product.getSupplierCode() + "%";
            }
            if (StringUtils.hasLength(product.getName())) {
                name = product.getName() + "%";
            }
        }
        return skuDao.findProductForBoxByPage(start, pageSize, code, supplier, name, new BeanPropertyRowMapperExt<Sku>(Sku.class), sorts);
    }



    public void resetInvoiceExecuteCount(Long plid, Long staid) {
        if (plid != null) {
            staInvoiceDao.resetExecuteCountByPlid(plid);
        } else if (staid != null) {
            staInvoiceDao.resetExecuteCountByStaid(staid);
        } else {
            log.error("no sta id or plicking list if found!");
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        }
    }

    public void vmiReturnPacking(Long staID) {
        if (staID == null) {
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staID);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_IS_NULL);
        }
        if (sta.getStatus().getValue() != StockTransApplicationStatus.OCCUPIED.getValue()) {
            throw new BusinessException(ErrorCode.CURRENT_STA_IS_NOT_OCCUPIED, new Object[] {sta.getCode()});
        }
        sta.setStatus(StockTransApplicationStatus.PACKING);
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        generateCartonByStaId(staID);
    }

    @Transactional(readOnly = true)
    public List<PickingListCommand> findPickingListInfo(PickingListCommand plCmd, Long ouid, int diekNo, Sort[] sorts) {
        String code = null;
        Date createTimeStart = null;
        Date createTimeEnd = null;
        List<PickingListCommand> pickList = null;

        if (plCmd != null) {
            if (StringUtils.hasLength(plCmd.getCode())) {
                code = plCmd.getCode() + "%";
            }
            if (plCmd.getCreateTime() != null) {
                createTimeStart = plCmd.getCheckedTime();
            }
            if (plCmd.getPickingTime() != null) {
                createTimeEnd = plCmd.getPickingTime();
            }
        }
        if (diekNo == 0) {
            pickList = pickingListDao.findPickingListInfo(sorts, code, createTimeStart, createTimeEnd, ouid, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
        }
        if (diekNo == 1) {
            pickList = pickingListDao.findPickingListDieking(sorts, code, createTimeStart, createTimeEnd, ouid, WhAddStatusMode.DIEKING.getValue(), new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
        }
        if (diekNo == 2) {
            pickList = pickingListDao.findPickingListDieking(sorts, code, createTimeStart, createTimeEnd, ouid, WhAddStatusMode.SEPARATION.getValue(), new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
        }
        return pickList;
    }

    @Transactional(readOnly = true)
    public List<PickingListCommand> findPickingListInfoFast(PickingListCommand plCmd, Sort[] sorts) {
        String code = null;
        Date createTimeStart = null;
        Date createTimeEnd = null;

        if (plCmd != null) {
            if (StringUtils.hasLength(plCmd.getCode())) {
                code = plCmd.getCode() + "%";
            }
            if (plCmd.getCreateTime() != null) {
                createTimeStart = plCmd.getCheckedTime();
            }
            if (plCmd.getPickingTime() != null) {
                createTimeEnd = plCmd.getPickingTime();
            }
        }
        return pickingListDao.findPickingListInfoFast(sorts, code, createTimeStart, createTimeEnd, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public List<StaLineCommand> findPickingSku(Long pickinglistId, Long ouid, Sort[] sorts) {
        return staLineDao.findPickingSku(sorts, pickinglistId, ouid, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * 二次分拣意见 fanht
     * 
     * @param start
     * @param pageSize
     * @param plCmd
     * @param ouid
     * @param sorts
     * @return
     */
    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListInfo(int start, int pageSize, PickingListCommand plCmd, Long ouid, Sort[] sorts) {
        String code = null;
        Date createTimeStart = null;
        Date createTimeEnd = null;

        if (plCmd != null) {
            if (StringUtils.hasLength(plCmd.getCode())) {
                code = plCmd.getCode() + "%";
            }
            if (plCmd.getCheckedTime() != null) {
                createTimeStart = plCmd.getCheckedTime();
            }
            if (plCmd.getExecutedTime() != null) {
                createTimeEnd = plCmd.getExecutedTime();
            }
        }
        return pickingListDao.findPickingListInfo(start, pageSize, sorts, code, createTimeStart, createTimeEnd, ouid, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }

    /**
     * 配货清单拣货
     * 
     * @param start
     * @param pageSize
     * @param plCmd
     * @param ouid
     * @param sorts
     * @return
     */
    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListDiekingSeparation(int start, int pageSize, int whStatus, PickingListCommand plCmd, Long ouid, Sort[] sorts) {
        String code = null;
        Date createTimeStart = null;
        Date createTimeEnd = null;

        if (plCmd != null) {
            if (StringUtils.hasLength(plCmd.getCode())) {
                code = plCmd.getCode() + "%";
            }
            if (plCmd.getCheckedTime() != null) {
                createTimeStart = plCmd.getCheckedTime();
            }
            if (plCmd.getExecutedTime() != null) {
                createTimeEnd = plCmd.getExecutedTime();
            }
        }
        return pickingListDao.findPickingListDieking(start, pageSize, sorts, code, createTimeStart, createTimeEnd, ouid, whStatus, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }

    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListInfoB(int start, int pageSize, PickingListCommand plCmd, Long ouid, List<Long> lists, Long test, Sort[] sorts) {
        String code = null;
        Date createTimeStart = null;
        Date createTimeEnd = null;

        if (plCmd != null) {
            if (StringUtils.hasLength(plCmd.getCode())) {
                code = plCmd.getCode() + "%";
            }
            if (plCmd.getCheckedTime() != null) {
                createTimeStart = plCmd.getCheckedTime();
            }
            if (plCmd.getExecutedTime() != null) {
                createTimeEnd = plCmd.getExecutedTime();
            }
        }
        return pickingListDao.findPickingListInfoB(start, pageSize, sorts, code, createTimeStart, createTimeEnd, ouid, lists, test, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }

    /**
     * 二次分拣意见 运营中心
     * 
     * @param start
     * @param pageSize
     * @param plCmd
     * @param ouid
     * @param sorts
     * @return
     */
    @Transactional(readOnly = true)
    public Pagination<PickingListCommand> findPickingListInfoopc(int start, int pageSize, PickingListCommand plCmd, List<Long> ouid, Sort[] sorts) {
        String code = null;
        Date createTimeStart = null;
        Date createTimeEnd = null;

        if (plCmd != null) {
            if (StringUtils.hasLength(plCmd.getCode())) {
                code = plCmd.getCode() + "%";
            }
            if (plCmd.getCheckedTime() != null) {
                createTimeStart = plCmd.getCheckedTime();
            }
            if (plCmd.getExecutedTime() != null) {
                createTimeEnd = plCmd.getExecutedTime();
            }
        }
        return pickingListDao.findPickingListInfoopc(start, pageSize, sorts, code, createTimeStart, createTimeEnd, ouid, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }



    @Transactional(readOnly = true)
    public List<StaLineCommand> findStaLineByPickingIdDiek(Long pickinglistId, Long ouid, Sort[] sorts) {
        return staLineDao.findStaLineByPickingIdDiek(sorts, pickinglistId, ouid, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public List<StockTransApplicationCommand> findRuleCodeByPickingId(Long pickinglistId) {
        return staDao.findRuleCodeByPickingId(pickinglistId, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    /**
     * 二次分拣扫描商品
     * 
     * @param barcode
     */
    public Map<String, Object> twicePickingByBarcode(Long pickingId, Long staLineId, String skuBarCode, Long userId, Boolean isNeedCheck) {
        Map<String, Object> map = new HashMap<String, Object>();
        TwicePickingBarCode tpbcList = mongoOperation.findOne(new Query(Criteria.where("pickingId").is(pickingId)), TwicePickingBarCode.class);
        List<StaCheckRecord> scrList = tpbcList.getStaCheckRecordList();
        Boolean isLineOver = false;
        Long staId = 0L;
        for (StaCheckRecord scr : scrList) {
            if (scr.getStaLineId().equals(staLineId)) {
                staId = scr.getStaId();
                scr.setCompleteQty(scr.getCompleteQty() + 1);
                if (scr.getQty() <= scr.getCompleteQty()) {
                    isLineOver = true;
                    map.put("isLineOver", true);
                }
                map.put("ruleCode", scr.getRuleCode());
                // 是否存在行取消
                if (scr.getCancelQty() != null && scr.getCancelQty() > 0) {
                    map.put("isLineCancel", true);
                }
                break;
            }
        }
        if (isLineOver) {


            Boolean isStaOver = true;
            // 判断此作业单是否全部核对完成
            for (StaCheckRecord scr : scrList) {
                if (staId.equals(scr.getStaId())) {
                    if (scr.getQty() > scr.getCompleteQty()) {
                        isStaOver = false;
                    }
                }
            }
            map.put("isStaOver", isStaOver);
            StockTransApplication sta = staDao.getByPrimaryKey(staId);
            if (isStaOver && isNeedCheck) {
                /*
                 * if ((sta.getIsPreSale() == null || "".equals(sta.getIsPreSale()) ||
                 * "0".equals(sta.getIsPreSale())) &&
                 * StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
                 * sta.setIsHaveReportMissing(false); // AD部分取消接口
                 * adCheckManager.storeLogisticsSend(sta.getId(), false); OrderCheckCommand occ =
                 * new OrderCheckCommand(); occ.setStaId(staId); occ.setPickingType(2);
                 * adCheckManager.ifExistsLineCanncel(occ, userId, sta.getMainWarehouse().getId());
                 * }
                 */

                if (StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus()) || StockTransApplicationStatus.CANCELED.equals(sta.getStatus())) {
                    if (StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus())) {
                        map.put("staStatus", "cancel_undo");
                    } else {
                        map.put("staStatus", "cancel");

                    }
                } else if (StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
                    List<PackageInfo> packageInfos = new ArrayList<PackageInfo>();
                    PackageInfo packageInfo = new PackageInfo();
                    packageInfo.setTrackingNo(sta.getStaDeliveryInfo().getTrackingNo());
                    packageInfos.add(packageInfo);
                    List<String> snlist = new ArrayList<String>();
                    List<GiftLine> glList = new ArrayList<GiftLine>();
                    staSortingCheck(snlist, glList, packageInfos, staId, sta.getMainWarehouse().getId(), null, userId);
                    packageInfo = packageInfoDao.findByTrackingNo(sta.getStaDeliveryInfo().getTrackingNo());
                    map.put("staStatus", "check");
                    map.put("trackingNo", sta.getStaDeliveryInfo().getTrackingNo());
                    map.put("packageInfoId", packageInfo.getId());
                    List<StaLineCommand> lc = staLineDao.findCancelLineBySta(staId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
                    if (lc != null && lc.size() > 0) {
                        map.put("staStatus", "partCheck");
                    }

                    Long staLineCancel = staDao.findStaLineCancel(staId, new SingleColumnRowMapper<Long>(Long.class));
                    if (staLineCancel != null && staLineCancel > 0) {
                        map.put("lineCancel", true);
                    }

                } else {
                    map.put("staStatus", "other");
                }


            } else {
                map.put("staStatus", "occupied");
            }

            // 释放周转箱与集货库位
            if (isNeedCheck) {
                List<Long> staIdS = staLineDao.findNotCheckStaIdByCancelLine(pickingId, new SingleColumnRowMapper<Long>(Long.class));
                if (staIdS == null || staIdS.size() == 0) {
                    resetBoxAndCollection(pickingId, userId,null);
                }
            }
        } else {
            map.put("staStatus", "occupied");
        }
        map.put("staId", staId);

        // 记录日志
        StaCheckRecordLog scrl = new StaCheckRecordLog();
        scrl.setCreateTime(new Date());
        scrl.setOperatorId(userId);
        scrl.setPickingId(pickingId);
        scrl.setSkuBarCode(skuBarCode);
        scrl.setStaId(staId);
        scrl.setStaLineId(staLineId);
        staCheckRecordLogDao.save(scrl);
        mongoOperation.save(tpbcList);

        return map;
    }

    /**
     * 重置集货库位和周转箱
     * 
     * @param pId
     */
    public void resetBoxAndCollection(Long pId, Long userId,Long ouId) {
        goodsCollectionLogDao.resetGoodsCollectionLogByPlId(pId, userId);
        whPickingBatchDao.updateBatchByPickId(pId); // 剔除自动化箱
        PickingList pl = pickingListDao.getByPrimaryKey(pId);
        pl.setTwoPickingOver(true);
        // goodsCollectionDao.resetGoodsCollectionByPickingId(pId);
        if(ouId !=null){
            Warehouse se = warehouseDao.getByOuId(ouId);
            if(se.getIsTestWh() !=null && se.getIsTestWh()){//压测店铺
                List<StockTransApplicationCommand> ls=staDao.findStaByPidByTest(pId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
                Long staId=null;
                for (StockTransApplicationCommand stockTransApplicationCommand : ls) {
                    staId=stockTransApplicationCommand.getId();
                    StockTransApplicationCommand sta = staDao.findStaByStaIdByTest(staId,new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
                    PressureTestDto test=new  PressureTestDto();
                    test.setStaId(sta.getId());
                    test.setStaCode(sta.getCode());
                    test.setpId(sta.getPickingListId());
                    test.setSta(sta);
                    if(sta.getPickingListId() !=null){
                        PickingListCommand pick=staDao.findPickByPidByTest(sta.getPickingListId(), new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
                        test.setPick(pick);
                    }
                    List<StaLineCommand> staLines= staDao.findStaLineByStaIdByTest(staId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
                    test.setStaLines(staLines);
                    String reqJson = com.baozun.utilities.json.JsonUtil.writeValue(test);
                    MongoDBMessageTest mdbmTest = new MongoDBMessageTest();
                    MessageCommond mes = new MessageCommond();
                    try {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        Date date = new Date();
                        mes.setMsgId(sta.getId() + ":" + UUIDUtil.getUUID());
                        mes.setIsMsgBodySend(false);
                        mes.setMsgType("findStaLineByStaIdByTest_checking");
                        mes.setMsgBody(reqJson);
                        mes.setSendTime(sdf.format(date));
                        producerServer.sendDataMsgConcurrently(MQ_WMS3_CHECKING,null, mes);
                        // 保存进mongodb
                        mdbmTest.setMsgId(mes.getMsgId());
                        mdbmTest.setStaCode(sta.getCode());
                        mdbmTest.setOtherUniqueKey(sta.getCode());
                        mdbmTest.setMsgBody(reqJson);
                        mdbmTest.setMemo(MQ_WMS3_CHECKING);
                        mdbmTest.setSendTime(sdf.format(date));
                        mdbmTest.setMsgType("findStaLineByStaIdByTest_checking");
                        mongoOperation.save(mdbmTest);
                    } catch (Exception e) {
                        throw new BusinessException(0);
                    }
                }
            }
        }

    }

    /**
     * 获取二次分拣记录
     * 
     * @param pickingId
     * @return
     */
    public List<TwicePickingBarCode> findTwicePickingInfoByPickingId(Long pickingId) {
        List<TwicePickingBarCode> tpbcList = mongoOperation.find(new Query(Criteria.where("pickingId").is(pickingId)), TwicePickingBarCode.class);
        return tpbcList;
    }

    /**
     * 二次分拣意见，查询配货详情 fanht
     * 
     * @param pickinglistId
     * @param ouid
     * @param sorts
     * @return
     */
    @Transactional(readOnly = true)
    public List<StaLineCommand> findStaLineByPickingIdFast(Long pickinglistId, Sort[] sorts) {
        return staLineDao.findStaLineByPickingIdFast(sorts, pickinglistId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * 销售出库 刷在途
     */
    public void salesCreatePage(Long ouid, Long userId, String trackingNo, BigDecimal weight, Long staId, String lpCode, String sns, String barCode) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (transportatorDao.findByCode(lpCode) == null) {
            throw new BusinessException(ErrorCode.EXCEL_ERROR_TRANSPORTATOR_NULL);
        }
        // mender:yimin.lu; 逻辑：已经出库完成的订单不可通过这个功能再次出库
        if (sta.getStatus().equals(StockTransApplicationStatus.FINISHED) || sta.getStatus().equals(StockTransApplicationStatus.CANCEL_UNDO) || sta.getStatus().equals(StockTransApplicationStatus.CANCELED)) {
            return;
        } else if (sta.getStatus().equals(StockTransApplicationStatus.CREATED)) {
            // 库存占用
            // createStvForSalesByStaId(staId, null, false);
            // occupyInventoryForSales(sta);
            createStvByStaId(sta.getId(), userId, null, false);
            // 库存占用 销售出库 false fanht
        } else if (sta.getStatus().equals(StockTransApplicationStatus.INTRANSIT)) {
            // 已转出情况 直接刷完成
            sta.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId, sta.getMainWarehouse().getId());
            sta.setFinishTime(new Date());
            sta.setLastModifyTime(new Date());
            staDao.save(sta);
            if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
                if (vmi != null && StringUtil.isEmpty(sta.getDataSource())) {
                    vmi.generateReceivingWhenFinished(sta);
                }
            }
            return;
        }
        // 占用sn号
        if (sta.getIsSn() != null && sta.getIsSn()) {
            if (null != sns) {
                String[] s = sns.split(",");
                List<String> snList = Arrays.asList(s);
                StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
                if (stv == null) {
                    throw new BusinessException(ErrorCode.STV_NOT_FOUND);
                }
                skuSnDao.occupiedSnByStvId(stv.getId(), SkuSnStatus.CHECKING.getValue(), snList);
            }
        }
        PackageInfo pg = new PackageInfo();
        pg.setTrackingNo(trackingNo);
        pg.setLpCode(lpCode);
        pg.setWeight(weight);
        pg.setLastModifyTime(new Date());
        StaDeliveryInfo di = sta.getStaDeliveryInfo();
        di.setSta(sta);
        di.setLpCode(lpCode);
        di.setLastModifyTime(new Date());
        staDeliveryInfoDao.save(di);
        pg.setStaDeliveryInfo(di);
        packageInfoDao.save(pg);
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        sta.setCheckUserId(userId);
        staDao.save(sta);
        packageInfoDao.flush();

        List<StaAdditionalLine> saddlines = null;
        if (barCode != null && !"".equals(barCode)) {

            saddlines = new ArrayList<StaAdditionalLine>();
            StaAdditionalLine sal = new StaAdditionalLine();
            sal.setQuantity(1L);
            Sku s = new Sku();
            s.setBarCode(barCode);
            sal.setSku(s);
            saddlines.add(sal);
        }

        // 出库
        if (salesStaOutBound(staId, userId, ouid, trackingNo, weight, saddlines, false, null)) {
            sta.setStatus(StockTransApplicationStatus.FINISHED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.FINISHED.getValue(), userId, sta.getMainWarehouse().getId());
            sta.setFinishTime(new Date());
            sta.setLastModifyTime(new Date());
            staDao.save(sta);
            if (sta.getType().equals(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT) && sta.getVmiRCStatus() != Boolean.TRUE && StringUtil.isEmpty(sta.getDataSource())) {
                BiChannel shop = companyShopDao.getByCode(sta.getOwner());
                VmiInterface vmi = vmiFactory.getBrandVmi(shop.getVmiCode());
                if (vmi != null) {
                    vmi.generateReceivingWhenFinished(sta);
                }
            }
        }
    }


    // private Map<String, String> getOptionMap(String opcode) {
    // Map<String, String> map = new HashMap<String, String>();
    // List<ChooseOption> list = chooseOptionDao.findOptionListByCategoryCode(opcode);
    // if (list == null || list.isEmpty()) return map;
    // for (ChooseOption option : list) {
    // map.put(option.getOptionKey(), option.getOptionValue());
    // }
    // return map;
    // }

    public void exeZtoConfirmOrder(ZtoConfirmOrderQueue order) {
        String staCode = order.getStaCode();
        StockTransApplication sta = staDao.findStaByCode(staCode);
        // Sender
        Sender sender = new Sender();
        sender.setName(sta.getOwner());
        BiChannel bi = biChannelDao.getByCode(sta.getOwner());

        sender.setName(sta.getOwner());
        sender.setPhone(bi.getTelephone());
        sender.setCity(bi.getZipcode());
        sender.setAddress(bi.getAddress());

        // Receiver、
        Receiver re = new Receiver();
        re.setName(sta.getStaDeliveryInfo().getReceiver());
        re.setMobile(sta.getStaDeliveryInfo().getMobile());
        re.setPhone(sta.getStaDeliveryInfo().getTelephone());
        re.setCity(sta.getStaDeliveryInfo().getCity());
        re.setAddress(sta.getStaDeliveryInfo().getAddress());


        // ZtoCommand
        ZtoCommand zc = new ZtoCommand();
        zc.setId(sta.getCode());
        zc.setMailno(sta.getStaDeliveryInfo().getTrackingNo());
        zc.setSender(sender);
        zc.setReceiver(re);
        boolean flag = ZtoOrderClient.comfirmOrder(order, zc, ZTO_USERNAME, ZTO_PASSWORD);
        if (flag) {
            ZtoConfirmOrderQueueLog lg = new ZtoConfirmOrderQueueLog();
            lg.setCreateTime(order.getCreateTime());
            lg.setFinishTime(new Date());
            lg.setHeight(order.getHeight());
            lg.setLength(order.getLength());
            lg.setMailno(order.getMailno());
            lg.setPassWord(order.getPassWord());
            lg.setUserName(order.getUserName());
            lg.setStaCode(order.getStaCode());
            lg.setWeight(order.getWeight());
            lg.setWhight(order.getWhight());
            ztoConfirmOrderQueueLogDao.save(lg);
            ztoConfirmOrderQueueDao.deleteByPrimaryKey(order.getId());
        } else {
            ZtoConfirmOrderQueue order1 = ztoConfirmOrderQueueDao.getByPrimaryKey(order.getId());
            order1.setExeCount(order1.getExeCount() + 1);
        }
    }

    public void exeSfConfirmOrder(Long qId) {
        try {
            SfConfirmOrderQueue q = sfConfirmOrderQueueDao.getByPrimaryKey(qId);

            if (q.getType() != null && q.getType() == 1) {// 线下包裹反馈
                // //////////////////////////////////////////////S////////////////////////////////
                SfOrderConfirm sfCo = new SfOrderConfirm();
                sfCo.setOrderId(q.getOrderId());
                sfCo.setMailno(q.getMailno());
                sfCo.setDealtype(SfOrderConfirm.DEAL_TYPE_DETERMINE);
                SfOrderConfirmOption option = new SfOrderConfirmOption();
                option.setWeight(q.getWeight());
                // 截取children nailnos
                if (q.getFilter4() != null && q.getFilter2() != null && q.getFilter3() != null) {
                    option.setVolume(q.getFilter2() + "," + q.getFilter3() + "," + q.getFilter4());
                } else {
                    option.setVolume("");
                }
                sfCo.setOrderConfirmOption(option);
                SfResponse rs = sfOrderWebserviceClient.comfirmOrder(sfCo, q.getJcusttag(), q.getCheckword());
                if (rs != null && SfResponse.STATUS_OK.equals(rs.getHead())) {
                    SfOrderConfirmResponse cr = (SfOrderConfirmResponse) rs.getBodyObj();
                    if (SfOrderConfirmResponse.RES_STATUS_SUCCESS == cr.getResStatus()) {
                        SfConfirmOrderQueueLog lg = new SfConfirmOrderQueueLog();
                        lg.setCheckword(q.getCheckword());
                        lg.setFinishTime(new Date());
                        lg.setCreateTime(q.getCreateTime());
                        lg.setMailno(q.getMailno());
                        lg.setOrderId(q.getOrderId());
                        lg.setStaCode(q.getStaCode());
                        lg.setWeight(q.getWeight());
                        lg.setFilter4(q.getFilter4());
                        lg.setFilter2(q.getFilter2());
                        lg.setFilter3(q.getFilter3());
                        lg.setType(q.getType());
                        sfConfirmOrderQueueLogDao.save(lg);
                        sfConfirmOrderQueueDao.deleteByPrimaryKey(q.getId());
                    } else {
                        SfConfirmOrderQueue order = sfConfirmOrderQueueDao.getByPrimaryKey(q.getId());
                        order.setExeCount(order.getExeCount() + 1);
                    }
                } else {
                    SfConfirmOrderQueue order = sfConfirmOrderQueueDao.getByPrimaryKey(q.getId());
                    order.setExeCount(order.getExeCount() + 1);
                }
                // //////////////////////////////////////////////end////////////////////////////////
            } else {
                StockTransApplication sta = staDao.findStaByCode(q.getStaCode());
                BiChannel channel = biChannelDao.getByCode(sta.getOwner());
                List<ChooseOption> chooseOptionList = chooseOptionDao.findListByCategoryCodeAndKey("logisticsCode", "1");
                Boolean isNew = false;
                for (ChooseOption c : chooseOptionList) {
                    if (c.getOptionValue().equals(sta.getStaDeliveryInfo().getLpCode())) {
                        isNew = true;
                    }
                }
                if (isNew) {
                    OrderConfirmContent orderConfirmContent = new OrderConfirmContent();
                    orderConfirmContent.setOrdercode(sta.getCode());
                    orderConfirmContent.setTradeid(sta.getRefSlipCode());
                    orderConfirmContent.setWhcode(sta.getMainWarehouse().getCode());
                    orderConfirmContent.setOwnercode(sta.getOwner());
                    orderConfirmContent.setLpcode(sta.getStaDeliveryInfo().getLpCode());
                    orderConfirmContent.setTrackingno(q.getMailno());
                    orderConfirmContent.setExttransorderid(q.getOrderId());
                    if (null != q.getFilter2() && null != q.getFilter3() && null != q.getFilter4()) {
                        orderConfirmContent.setLeng(new BigDecimal(q.getFilter2()));
                        orderConfirmContent.setWidth(new BigDecimal(q.getFilter3()));
                        orderConfirmContent.setHeight(new BigDecimal(q.getFilter4()));
                    }

                    if (q.getWeight() != null && !q.getWeight().equals("")) {
                        orderConfirmContent.setWeight(new BigDecimal(q.getWeight()));
                        if (sta.getIsNikePick() != null && sta.getIsNikePick()) {
                            orderConfirmContent.setType(3);
                        } else {
                            orderConfirmContent.setType(1);
                        }

                    } else {
                        orderConfirmContent.setWeight(new BigDecimal(0));
                        orderConfirmContent.setType(2);
                    }

                    List<String> relationList = sfMailNoRemainRelationDao.findMailNoByRefPid(qId, new SingleColumnRowMapper<String>(String.class));
                    StringBuffer sBuffer = new StringBuffer(q.getMailno());
                    if (null != relationList && relationList.size() > 0 && !StringUtil.isEmpty(q.getMailno())) {
                        for (int i = 0; i < relationList.size(); i++) {
                            sBuffer.append(relationList.get(i));
                        }
                    }
                    String[] mailnoArray = sBuffer.toString().split(",");
                    if (mailnoArray.length > 1) {// 快递服务子运单号逻辑，同用主运单号字段，用逗号拼接
                        orderConfirmContent.setTrackingno(sBuffer.toString());
                    }
                    String source = "";
                    if (channel.getIsPackingList() != null && channel.getIsPackingList()) {
                        source = "WMS_NIKE";
                    } else {
                        source = "WMS3";
                    }
                    OrderConfirmResponse confirmResponse = confirmContentManager.mialOrderComfirm(orderConfirmContent, source);
                    if (confirmResponse != null && confirmResponse.getStatus() == 1) {
                        SfConfirmOrderQueueLog lg = new SfConfirmOrderQueueLog();
                        lg.setCheckword(q.getCheckword());
                        lg.setFinishTime(new Date());
                        lg.setCreateTime(q.getCreateTime());
                        lg.setMailno(q.getMailno());
                        lg.setOrderId(q.getOrderId());
                        lg.setStaCode(q.getStaCode());
                        lg.setWeight(q.getWeight());
                        lg.setFilter4(q.getFilter4());
                        lg.setFilter2(q.getFilter2());
                        lg.setFilter3(q.getFilter3());
                        sfConfirmOrderQueueLogDao.save(lg);
                        sfConfirmOrderQueueDao.deleteByPrimaryKey(q.getId());
                    } else {
                        SfConfirmOrderQueue order = sfConfirmOrderQueueDao.getByPrimaryKey(q.getId());
                        order.setExeCount(order.getExeCount() + 1);
                    }
                } else {
                    List<String> relationList = sfMailNoRemainRelationDao.findMailNoByRefPid(qId, new SingleColumnRowMapper<String>(String.class));
                    StringBuffer sBuffer = new StringBuffer(q.getMailno());
                    if (null != relationList && relationList.size() > 0 && !StringUtil.isEmpty(q.getMailno())) {
                        for (int i = 0; i < relationList.size(); i++) {
                            sBuffer.append(relationList.get(i));
                        }
                    }
                    SfOrderConfirm sfCo = new SfOrderConfirm();
                    sfCo.setOrderId(q.getOrderId());
                    // 截取parent mailno
                    String childrenMailnos = "";
                    if (StringUtils.hasText(sBuffer)) {
                        String[] mailnoArray = sBuffer.toString().split(",");
                        // SF反馈运单号调整。 单个包裹的走老逻辑
                        if (mailnoArray.length == 1) {
                            sfCo.setMailno(mailnoArray[0]);
                        } else {
                            // 多包裹的按照包裹表ID排序， 最大的ID为主运单号，其他的为子运单号
                            List<String> tranNoList = packageInfoDao.findTrackNoByStaCode(q.getStaCode(), new SingleColumnRowMapper<String>(String.class));
                            if (tranNoList != null && tranNoList.size() > 0) {
                                sfCo.setMailno(tranNoList.get(0));
                                // 子运单号去除第一个主运单号
                                // for (int i = 0; i < tranNoList.size(); i++) {
                                // childrenMailnos += "," + tranNoList.get(i);
                                // }
                                for (int i = 1; i < tranNoList.size(); i++) {
                                    childrenMailnos += "," + tranNoList.get(i);
                                }

                            }
                        }
                    }
                    sfCo.setDealtype(SfOrderConfirm.DEAL_TYPE_DETERMINE);
                    SfOrderConfirmOption option = new SfOrderConfirmOption();
                    option.setWeight(q.getWeight());
                    // 截取children nailnos
                    if (StringUtils.hasText(childrenMailnos)) {
                        option.setChildrenNos(StringUtils.trimLeadingCharacter(childrenMailnos, ','));
                    }
                    if (q.getFilter4() != null && q.getFilter2() != null && q.getFilter3() != null) {
                        option.setVolume(q.getFilter2() + "," + q.getFilter3() + "," + q.getFilter4());
                    } else {
                        option.setVolume("");
                    }
                    sfCo.setOrderConfirmOption(option);
                    SfResponse rs = sfOrderWebserviceClient.comfirmOrder(sfCo, q.getJcusttag(), q.getCheckword());
                    if (rs != null && SfResponse.STATUS_OK.equals(rs.getHead())) {
                        SfOrderConfirmResponse cr = (SfOrderConfirmResponse) rs.getBodyObj();
                        if (SfOrderConfirmResponse.RES_STATUS_SUCCESS == cr.getResStatus()) {
                            SfConfirmOrderQueueLog lg = new SfConfirmOrderQueueLog();
                            lg.setCheckword(q.getCheckword());
                            lg.setFinishTime(new Date());
                            lg.setCreateTime(q.getCreateTime());
                            lg.setMailno(q.getMailno());
                            lg.setOrderId(q.getOrderId());
                            lg.setStaCode(q.getStaCode());
                            lg.setWeight(q.getWeight());
                            lg.setFilter4(q.getFilter4());
                            lg.setFilter2(q.getFilter2());
                            lg.setFilter3(q.getFilter3());
                            sfConfirmOrderQueueLogDao.save(lg);
                            sfConfirmOrderQueueDao.deleteByPrimaryKey(q.getId());
                        } else {
                            SfConfirmOrderQueue order = sfConfirmOrderQueueDao.getByPrimaryKey(q.getId());
                            order.setExeCount(order.getExeCount() + 1);
                        }
                    } else {
                        SfConfirmOrderQueue order = sfConfirmOrderQueueDao.getByPrimaryKey(q.getId());
                        order.setExeCount(order.getExeCount() + 1);
                    }
                }
            }
        } catch (BusinessException e) {
            log.info("exeSfConfirmOrder error , {},{}", qId, e.getErrorCode());
        } catch (Exception e) {
            log.error("", e);
        }
    }

    @SingleTaskLock(timeout = TASK_LOCK_TIMEOUT, value = TASK_LOCK_VALUE)
    public void autoGdvChangeOwner() {
        List<CompanyShopShare> shs = companyShopShareDao.findShopSharesHql(Constants.SHOP_SHARE_GROUP_GDV);
        if (shs == null || shs.size() != 3) {
            return;
        }
        BiChannel shop1 = shs.get(0).getShop();
        BiChannel shop2 = shs.get(1).getShop();
        BiChannel shop3 = shs.get(2).getShop();
        // 查询店铺关联的所有分仓
        List<OperationUnit> whouList = operationUnitDao.getAllWhByShopId(shop1.getId());
        for (OperationUnit whou : whouList) {
            // 按仓库执行
            Warehouse wh = warehouseDao.getByOuId(whou.getId());
            Map<Long, Long> invs = inventoryDao.findSalesTotalInvForChangeOwner(Constants.SHOP_SHARE_GROUP_GDV, whou.getId(), new MapQtyRowMapper());
            if (invs == null) {
                continue;
            }
            Map<Long, Long> invs1 = inventoryDao.findSalesCurrentInvForChangeOwner(Constants.SHOP_SHARE_GROUP_GDV, shop1.getCode(), whou.getId(), new MapQtyRowMapper());
            if (invs1 == null) {
                invs1 = new HashMap<Long, Long>();
            }
            Map<Long, Long> invs2 = inventoryDao.findSalesCurrentInvForChangeOwner(Constants.SHOP_SHARE_GROUP_GDV, shop2.getCode(), whou.getId(), new MapQtyRowMapper());
            if (invs2 == null) {
                invs2 = new HashMap<Long, Long>();
            }
            Map<Long, Long> invs3 = inventoryDao.findSalesCurrentInvForChangeOwner(Constants.SHOP_SHARE_GROUP_GDV, shop3.getCode(), whou.getId(), new MapQtyRowMapper());
            if (invs3 == null) {
                invs3 = new HashMap<Long, Long>();
            }
            InventoryStatus sts = inventoryStatusDao.findXSInvStatusByCompany(wh.getOu().getParentUnit().getParentUnit().getId());

            Map<String, StockTransApplication> staMap = new HashMap<String, StockTransApplication>();

            Map<String, List<StaLine>> moveListMap = new HashMap<String, List<StaLine>>();

            for (CompanyShopShare shopFrom : shs) {
                for (CompanyShopShare shopTo : shs) {
                    if (shopFrom.getShop().getId().equals(shopTo.getShop().getId())) {
                        continue;
                    } else {
                        String code = shopFrom.getShop().getCode() + "_" + shopTo.getShop().getCode();
                        if (staMap.get(code) == null) {
                            StockTransApplication sta = autoGdvChangeOwnerCreateSta(sts, shopFrom.getShop().getCode(), shopTo.getShop().getCode(), wh.getOu());
                            staMap.put(code, sta);
                            List<StaLine> move = new ArrayList<StaLine>();
                            moveListMap.put(code, move);
                        }

                    }
                }
            }

            for (Entry<Long, Long> ent : invs.entrySet()) {
                StaLine line = null;
                String code = "";
                Long skuid = ent.getKey();
                long needQty3 = (new BigDecimal(ent.getValue()).multiply(new BigDecimal(shs.get(2).getInboundRatio())).divide(new BigDecimal(100))).setScale(BigDecimal.ROUND_HALF_UP, 0).longValue();
                long needQty2 = (new BigDecimal(ent.getValue()).multiply(new BigDecimal(shs.get(1).getInboundRatio())).divide(new BigDecimal(100))).setScale(BigDecimal.ROUND_HALF_UP, 0).longValue();
                long needQty = ent.getValue() - needQty3 - needQty2;
                long curQty1 = invs1.get(skuid) == null ? 0L : invs1.get(skuid).longValue();
                long curQty2 = invs2.get(skuid) == null ? 0L : invs2.get(skuid).longValue();
                long curQty3 = invs3.get(skuid) == null ? 0L : invs3.get(skuid).longValue();

                long compareQty1 = needQty - curQty1;
                long compareQty2 = needQty2 - curQty2;
                long compareQty3 = needQty3 - curQty3;

                Sku sku = new Sku();
                sku.setId(skuid);


                if (compareQty1 > 0) {

                    if (compareQty2 > 0) {
                        // 直接转店 C -> A
                        code = shop3.getCode() + "_" + shop1.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(compareQty1);
                        line.setOwner(shop3.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);

                        // 直接转店 C -> B
                        code = shop3.getCode() + "_" + shop2.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(compareQty2);
                        line.setOwner(shop3.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);

                    } else if (compareQty2 < 0) {
                        if (compareQty3 > 0) {
                            // 直接转店 B -> A
                            code = shop2.getCode() + "_" + shop1.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(compareQty1);
                            line.setOwner(shop2.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);

                            // 直接转店 B -> C
                            code = shop2.getCode() + "_" + shop3.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(compareQty3);
                            line.setOwner(shop2.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);
                        } else if (compareQty3 < 0) {
                            // 直接转店 B -> A
                            code = shop2.getCode() + "_" + shop1.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(Math.abs(compareQty2));
                            line.setOwner(shop2.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);

                            // 直接转店 C -> A
                            code = shop3.getCode() + "_" + shop1.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(Math.abs(compareQty3));
                            line.setOwner(shop3.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);


                        } else {
                            // 直接转店 B -> A
                            code = shop2.getCode() + "_" + shop1.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(compareQty1);
                            line.setOwner(shop2.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);
                        }

                    } else {
                        // 直接转店 C -> A
                        code = shop3.getCode() + "_" + shop1.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(Math.abs(compareQty3));
                        line.setOwner(shop3.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);
                    }

                } else if (compareQty1 < 0) {
                    if (compareQty2 > 0) {
                        if (compareQty3 > 0) {
                            // 直接转店 A -> B
                            code = shop1.getCode() + "_" + shop2.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(compareQty2);
                            line.setOwner(shop1.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);

                            // 直接转店 A -> C
                            code = shop1.getCode() + "_" + shop3.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(compareQty3);
                            line.setOwner(shop1.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);
                        } else if (compareQty3 < 0) {
                            // 直接转店 A -> B
                            code = shop1.getCode() + "_" + shop2.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(Math.abs(compareQty1));
                            line.setOwner(shop1.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);

                            // 直接转店 C -> B
                            code = shop3.getCode() + "_" + shop2.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(Math.abs(compareQty3));
                            line.setOwner(shop3.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);
                        } else {
                            // 直接转店 A -> B
                            code = shop1.getCode() + "_" + shop2.getCode();
                            line = new StaLine();
                            line.setSku(sku);
                            line.setInvStatus(sts);
                            line.setQuantity(compareQty2);
                            line.setOwner(shop1.getCode());
                            line.setSta(staMap.get(code));
                            moveListMap.get(code).add(line);
                        }
                    } else if (compareQty2 < 0) {

                        // 直接转店 A -> C
                        code = shop1.getCode() + "_" + shop3.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(Math.abs(compareQty1));
                        line.setOwner(shop1.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);

                        // 直接转店 B -> C
                        code = shop2.getCode() + "_" + shop3.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(Math.abs(compareQty2));
                        line.setOwner(shop2.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);

                    } else {

                        // 直接转店 A -> C
                        code = shop1.getCode() + "_" + shop3.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(Math.abs(compareQty3));
                        line.setOwner(shop1.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);
                    }
                } else {
                    if (compareQty2 > 0) {
                        // 直接转店 C -> B
                        code = shop3.getCode() + "_" + shop2.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(Math.abs(compareQty2));
                        line.setOwner(shop3.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);

                    } else if (compareQty2 < 0) {
                        // 直接转店 B -> C
                        code = shop2.getCode() + "_" + shop3.getCode();
                        line = new StaLine();
                        line.setSku(sku);
                        line.setInvStatus(sts);
                        line.setQuantity(Math.abs(compareQty2));
                        line.setOwner(shop2.getCode());
                        line.setSta(staMap.get(code));
                        moveListMap.get(code).add(line);
                    }
                }

            }

            for (Entry<String, List<StaLine>> moveEnt : moveListMap.entrySet()) {
                String code = moveEnt.getKey();
                List<StaLine> moveList = moveEnt.getValue();
                if (moveList.size() > 0) {

                    staDao.save(staMap.get(code));
                    Long skuQty = 0l;
                    for (StaLine ln : moveList) {
                        skuQty += ln.getQuantity();
                        staLineDao.save(ln);
                    }
                    staMap.get(code).setSkuQty(skuQty);
                    staDao.flush();
                    isInventoryNumber(staMap.get(code).getId());
                    // 占用库存 create stv, stvline
                    transChannelOcpInv(staMap.get(code).getId(), null);
                    try {
                        eventObserver.onEvent(new TransactionalEvent(staMap.get(code)));
                    } catch (BusinessException e) {
                        throw e;
                    }
                    staDao.flush();
                    try {
                        executeVmiTransferOutBound(staMap.get(code).getId(), null, staMap.get(code).getMainWarehouse().getId());
                    } catch (Exception e) {
                        throw new BusinessException();
                    }
                }

            }
        }
    }

    public void sfOrderFilterAccept(SfOrderFilterLog lg) {
        lg = sfOrderFilterLogDao.getByPrimaryKey(lg.getId());
        StaDeliveryInfo d = staDeliveryInfoDao.findByExtTransOrderId(lg.getOrderId());
        if (Transportator.SFCOD.equals(d.getLpCode())) {
            d.setTrackingNo(lg.getMailno());
        }
    }

    private StockTransApplication autoGdvChangeOwnerCreateSta(InventoryStatus sts, String owner, String addOwner, OperationUnit ou) {
        StockTransApplication sta = new StockTransApplication();
        sta.setAddiOwner(addOwner);
        sta.setOwner(owner);
        sta.setMainStatus(sts);
        sta.setType(StockTransApplicationType.VMI_OWNER_TRANSFER);
        sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));
        sta.setCreateTime(new Date());
        sta.setMainWarehouse(ou);
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class)).longValue());
        sta.setStatus(StockTransApplicationStatus.CREATED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), null, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        sta.setIsNotPacsomsOrder(true);
        return sta;
    }

    public void updateLineNoByOuId(List<WorkLineNo> lineNoList, Long ouid) {
        workLineNoDao.deleteByOuId(ouid);
        if (lineNoList != null) {
            for (WorkLineNo wl : lineNoList) {
                workLineNoDao.addLineNoByOuId(wl.getCode(), wl.getLineNo(), ouid);
            }
        }
    }

    public void updateStaPickingListStatus(Long plId, PickingListStatus status) {
        PickingList pl = pickingListDao.getByPrimaryKey(plId);
        pl.setStatus(status);
    }

    public JmsTemplate getBhMqJmsTemplate() {
        return bhMqJmsTemplate;
    }

    public void setBhMqJmsTemplate(JmsTemplate bhMqJmsTemplate) {
        this.bhMqJmsTemplate = bhMqJmsTemplate;
    }

    /**
     * 分拣核对详情列表查询 fanht
     * 
     * @param plId
     * @param warehouseId
     * @param status
     * @return
     */
    @Override
    public List<StockTransApplicationCommand> getPickCheckList(Long plId, Long warehouseId, Integer[] status) {
        return staDao.findStaListForVerifyByPickingList(null, plId, status, null, null, warehouseId, null, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    /**
     * O2OQS订单批量核对详情列表查询
     * 
     * @param plId
     * @param warehouseId
     * @param status
     * @return
     */
    @Override
    public List<StockTransApplicationCommand> getO2OQSPickCheckList(Long plId, Long warehouseId, Integer[] status) {
        return staDao.findO2OQSStaListForVerifyByPickingList(null, plId, status, null, null, warehouseId, null, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    /**
     * O2OQS订单批量核对装箱列表查询
     * 
     * @param plId
     * @param warehouseId
     * @param status
     * @return
     */
    @Override
    public List<PickingListPackageCommand> getO2OQSPackCheckList(Long plId, Long warehouseId, Integer[] status) {
        return pickingListPackageDao.findO2OQSPackListForVerifyByPickingList(null, plId, status, null, PickingListCheckMode.PCIKING_O2OQS.getValue(), warehouseId, null, new BeanPropertyRowMapperExt<PickingListPackageCommand>(
                PickingListPackageCommand.class));
    }

    /**
     * 分拣核对，查询订单核对明细信息：考虑合单情况 fanht
     * 
     * @param staId
     * @return
     */
    public List<StaLineCommand> findStaLineCommandListByStaId(Long staId) {
        return staLineDao.findStaLineInfoByStaId(staId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public StaDeliveryInfoCommand findTrankNoByStaId(Long staId) {
        return staDeliveryInfoDao.findTheStaDeliveryInfoByStaId(staId, new BeanPropertyRowMapperExt<StaDeliveryInfoCommand>(StaDeliveryInfoCommand.class));
    }

    /**
     * 分拣核对，执行核对
     * 
     * @param snlist
     * @param packageInfos
     * @param staId
     * @param ouid
     * @param lineNo
     */
    @Override
    public void staSortingCheck(List<String> snlist, List<GiftLine> glList, List<PackageInfo> packageInfos, Long staId, Long ouid, String lineNo, Long userId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // 更新sn号状态
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (snlist.size() == 0) {
            // 星巴克 解绑无效卡
            skuSnDao.unbindInvalidCard(stv.getId());

            skuSnDao.updateSNStatusByStvIdSql(stv.getId(), SkuSnStatus.CHECKING.getValue());
        } else {
            Iterator<String> iter = snlist.iterator();
            while (iter.hasNext()) {
                String s = iter.next();
                SkuSn skusn = snDao.findSkuSnBySn(s, ouid, SkuSnStatus.USING);
                if (skusn == null) {
                    throw new BusinessException(ErrorCode.SKU_SN_NOT_FOUND, new Object[] {sta.getCode()});
                }
                Sku sku = skuDao.getByPrimaryKey(skusn.getSku().getId());
                if (sku.getInterfaceType() != null && sku.getInterfaceType() != SkuInterfaceType.NUL) {
                    if (skusn.getCardStatus() == null || skusn.getCardStatus() != SkuSnCardStatus.ACTIVATE_SUCCESS || skusn.getCardStatus() != SkuSnCardStatus.ACTIVATE_REPETITIVE_OPERATION) {
                        skusn.setStv(null);
                        skusn.setStaId(null);
                        snDao.save(skusn);
                        iter.remove();
                        continue;
                    }
                }
            }
        }
        // 合并订单bug修复。 记录子订单的sn号 by fxl
        if (sta.getIsMerge() != null && sta.getIsMerge()) {
            List<StockTransApplication> childStaList = staDao.getChildStaByGroupId(staId);
            for (StockTransApplication stas : childStaList) {
                if (stas.getIsSn()) {
                    boolean isBind = false;
                    for (String sn : snlist) {
                        // 如果根据作业的ID和SN找不到， 说明该sn不是当前作业的的商品的sn. 继续循环判断
                        SkuSn skusn = snDao.findSkusnByStaAndSn(stas.getId(), sn, ouid, new BeanPropertyRowMapper<SkuSn>(SkuSn.class));
                        if (skusn == null) {
                            continue;
                        }
                        // 根据sn和作业的判断当前未核对的sn的商品数量。 isNoCheckCount = staLine商品的总数量 - sn表已记录的总条数
                        Long isNoCheckCount = snDao.findNoCheckSNCount(stas.getId(), sn, new SingleColumnRowMapper<Long>(Long.class));
                        // 如果小等于0，说明sn都已绑定。
                        if (isNoCheckCount <= 0) {
                            continue;
                        }
                        StockTransVoucher stvSub = stvDao.findStvCreatedByStaId(stas.getId());
                        snDao.updateStatusBySnAndSta(sn, SkuSnStatus.CHECKING.getValue(), stvSub.getId(), stas.getId());
                        isBind = true;
                    }
                    // 如果都没有绑定，抛出异常
                    if (!isBind && snlist.size() > 0) {
                        throw new BusinessException(ErrorCode.SKU_SN_NOT_FOUND, new Object[] {sta.getCode()});
                    }
                }
            }
        } else {
            for (String sn : snlist) {
                SkuSn skusn = snDao.findSkuSnBySn(sn, ouid, SkuSnStatus.USING);
                if (skusn == null) {
                    throw new BusinessException(ErrorCode.SKU_SN_NOT_FOUND, new Object[] {sta.getCode()});
                }
                skusn.setStv(stv);
                skusn.setStatus(SkuSnStatus.CHECKING);
                snDao.save(skusn);

            }
        }

        // 更新Coach 保修卡编码
        if (glList != null && glList.size() > 0) {
            for (GiftLine gift : glList) {
                giftLineDao.updateSanCardCodeById(gift.getId(), gift.getSanCardCode());
            }
        }
        checkSortingCheck(packageInfos, staId, lineNo, userId);
        /******************** AD定制取消订单行释放库存逻辑 *****************************************/
        releaseInventoryIfNecessary(staId, userId);
        /*** END **/


    }

    /**
     * @param staId
     */
    private void releaseInventoryIfNecessary(Long staId, Long userId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        Map<String, String> map = configManager.getCommonFTPConfig(Constants.AD_CONFIG);
        if (map.get(Constants.AD_TMALL_OWNER).contains(sta.getOwner())) {
            User user = userDao.getByPrimaryKey(userId);
            List<Long> idList = new ArrayList<Long>();
            // 查询是否存在AD行取消逻辑
            List<StaLineCommand> lc = staLineDao.findCancelDetailBySta(staId, sta.getCode(), new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
            if (lc != null && lc.size() > 0) {
                Long skuId = null;
                Long qty = 0L;
                for (StaLineCommand sc : lc) {
                    if (skuId == null || !skuId.equals(sc.getSkuId())) {
                        skuId = sc.getSkuId();
                        qty = sc.getQuantity();
                    }
                    if (qty > 0) {
                        if (sc.getCompleteQuantity() <= sc.getQuantity()) {
                            idList.add(sc.getId());
                            qty = sc.getQuantity() - sc.getCompleteQuantity();
                        } else {
                            Inventory inv = inventoryDao.getByPrimaryKey(sc.getId());
                            inv.setQuantity(sc.getQuantity());
                            Inventory inv1 = new Inventory();
                            inv1.setBatchCode(inv.getBatchCode());
                            inv1.setDistrict(inv.getDistrict());
                            inv1.setExpireDate(inv.getExpireDate());
                            inv1.setInboundTime(inv.getInboundTime());
                            inv1.setIsOccupied(inv.getIsOccupied());
                            inv1.setLocation(inv.getLocation());
                            inv1.setOccupationCode(inv.getOccupationCode());
                            inv1.setOcpCode(inv.getOcpCode());
                            inv1.setOu(inv.getOu());
                            inv1.setOwner(inv.getOwner());
                            inv1.setProductionDate(inv.getProductionDate());
                            inv1.setQuantity(sc.getCompleteQuantity() - sc.getQuantity());
                            inv1.setSku(inv.getSku());
                            inv1.setSkuCost(inv.getSkuCost());
                            inv1.setStatus(inv.getStatus());
                            inv1.setValidDate(inv.getValidDate());
                            inventoryDao.save(inv1);
                            idList.add(sc.getId());
                            qty = 0L;
                        }
                    } else {
                        continue;
                    }

                }
            } else {
                return;
            }
            WarehouseDistrict wd = warehouseDistrictDao.findDistrictByCodeAndOu(WarehouseDistrict.DEFAULT_DISTRICT, sta.getMainWarehouse().getId());
            if (wd == null) {
                wd = new WarehouseDistrict();
                wd.setCode(WarehouseDistrict.DEFAULT_DISTRICT);
                wd.setType(WarehouseDistrictType.PICKING);
                wd.setOu(sta.getMainWarehouse());
                warehouseDistrictDao.save(wd);
            }
            WarehouseLocation wl = warehouseLocationDao.findByLocationCode(WarehouseLocation.DEFAULT_LOCATION, sta.getMainWarehouse().getId());
            if (wl == null) {
                wl = new WarehouseLocation();
                wl.setCode(WarehouseLocation.DEFAULT_LOCATION);
                wl.setBarCode(WarehouseLocation.DEFAULT_LOCATION);
                wl.setCreateTime(new Date());
                wl.setCreatorUser(user);
                wl.setDistrict(warehouseDistrictDao.getByPrimaryKey(wd.getId()));
                wl.setOu(sta.getMainWarehouse());
                warehouseLocationDao.save(wl);
            }
            for (Long id : idList) {
                Inventory inv = inventoryDao.getByPrimaryKey(id);
                StockTransTxLog st = new StockTransTxLog();
                st.setBatchCode(inv.getBatchCode());
                st.setDirection(TransactionDirection.OUTBOUND);
                st.setDistrictId(inv.getDistrict().getId());
                st.setExpireDate(inv.getExpireDate());
                st.setInboundTime(inv.getInboundTime());
                st.setInvStatusId(inv.getStatus().getId());
                st.setLocationId(inv.getLocation().getId());
                st.setOpUserName(user.getLoginName());
                st.setOwner(inv.getOwner());
                st.setQuantity(inv.getQuantity());
                st.setSkuId(inv.getSku().getId());
                st.setStaCode(inv.getOccupationCode() + "_R");
                st.setTransactionTime(new Date());
                st.setTransactionType(transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CANCEL_RELEASE_INVENTORY_OUT));
                st.setWarehouseOuId(inv.getOu().getId());
                stockTransTxLogDao.save(st);
                st = new StockTransTxLog();
                st.setBatchCode(inv.getBatchCode());
                st.setDirection(TransactionDirection.INBOUND);
                st.setDistrictId(wd.getId());
                st.setExpireDate(inv.getExpireDate());
                st.setInboundTime(inv.getInboundTime());
                st.setInvStatusId(inv.getStatus().getId());
                st.setLocationId(wl.getId());
                st.setOpUserName(user.getLoginName());
                st.setOwner(inv.getOwner());
                st.setQuantity(inv.getQuantity());
                st.setSkuId(inv.getSku().getId());
                st.setStaCode(inv.getOccupationCode() + "_R");
                st.setTransactionTime(new Date());
                st.setTransactionType(transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CANCEL_RELEASE_INVENTORY_IN));
                st.setWarehouseOuId(inv.getOu().getId());
                stockTransTxLogDao.save(st);
                inv.setOccupationCode(null);
                inv.setIsOccupied(false);
                inv.setDistrict(warehouseDistrictDao.getByPrimaryKey(wd.getId()));
                inv.setLocation(warehouseLocationDao.getByPrimaryKey(wl.getId()));
            }
            inventoryDao.flush();
            Integer errCount = staLineDao.findIfExistsErrorLine(staId, sta.getCode(), new SingleColumnRowMapper<Integer>(Integer.class));
            if (errCount > 0) {
                throw new BusinessException(ErrorCode.AD_RELEASY_INVENOTRY_ERROR);
            }
        }
    }

    /**
     * O2OQS批次分拣核对，执行核对
     */
    @Override
    public void o2oqsSortingCheck(Long plpId, List<PackageInfo> packageInfos, Long plId, List<StockTransApplication> staList, Long ouid, String lineNo, Long userId) {
        if (log.isDebugEnabled()) {
            log.debug("-----begin o2oqsSortingCheck------" + plId);
        }
        if (null == plId || null == plpId) {
            throw new BusinessException(ErrorCode.BUSINESS_EXCEPTION);
        }
        PickingList pl = pickingListDao.getByPrimaryKey(plId);
        if (null == pl) {
            throw new BusinessException(ErrorCode.PICKING_LIST_NOT_FOUND);
        }
        if (PickingListStatus.PACKING != pl.getStatus() && PickingListStatus.PARTLY_RETURNED != pl.getStatus()) {
            throw new BusinessException(ErrorCode.PICKING_LIST_STATUS_ERROR);
        }
        PickingListPackage plp = pickingListPackageDao.findByIdAndStatus(plpId, plId, DefaultStatus.CREATED);
        // log.error("====>o2oqs check, plId:[" + plId + "] , plCode:[" + pl.getCode() +
        // "] , plStatus:[" + pl.getStatus().getValue() + "] , plpId:[" + plpId + "] , isExist[" +
        // (null == plp ? true : false) + "] , trackingNo:["
        // + (null != packageInfos ? packageInfos.get(0).getTrackingNo() : null) + "]");
        if (null == plp) {
            throw new BusinessException(ErrorCode.PICKING_LIST_PACKAGE_NOT_FOUND);
        }
        if (log.isDebugEnabled()) {
            log.debug("----staList staList---" + staList.size());
        }
        for (StockTransApplication sta : staList) {
            Long staId = sta.getId();
            checkSortingCheck(plp, packageInfos, staId, lineNo, userId);
        }
        plp.setStatus(DefaultStatus.REXEERROR);// 状态语义为：已核对
        if (StringUtil.isEmpty(plp.getTrackingNo())) {
            plp.setTrackingNo(null != packageInfos ? packageInfos.get(0).getTrackingNo() : null);
        }
        pickingListPackageDao.save(plp);
        List<StockTransApplication> stas = pl.getStaList();
        boolean isNewPackage = false;
        if (null == stas) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        for (StockTransApplication s : stas) {
            if (StockTransApplicationStatus.OCCUPIED == s.getStatus()) {
                isNewPackage = true;
                break;
            }
        }
        if (true == isNewPackage) {
            String toLocation = pl.getToLocation();
            if (StringUtil.isEmpty(toLocation)) {
                throw new BusinessException(ErrorCode.SHOP_STORE_INFO_NOT_FOUND);
            }
            List<PickingListPackage> newPlp = pickingListPackageDao.findByPlIdAndStatus(plId, DefaultStatus.CREATED);
            if (0 == newPlp.size()) {
                // 新建批次包裹
                if (log.isDebugEnabled()) {
                    log.debug("----- createPickingListPackage-----" + plId);
                }
                warehouseOutBoundManager.createPickingListPackage(plId, toLocation);
                // 匹配运单
                transOlManagerProxy.matchingTransNoByPackage(plId);
            }
        }
    }

    /**
     * 取消已处理的作业单，直接修改核对数量
     */
    public void updateisCheckQty(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta != null && sta.getStatus() == StockTransApplicationStatus.CANCEL_UNDO) {
            List<StaLine> list = staLineDao.findByStaId(staId);
            for (StaLine staLine : list) {
                staLineDao.updateCompQtyByStaId(staLine.getId());
            }
            staLineDao.flush();
        } else {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR);
        }
    }

    public void checkisCheckQty(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta != null && sta.getStatus() == StockTransApplicationStatus.CANCEL_UNDO) {
            List<StaLine> list = staLineDao.findByStaId(staId);
            for (StaLine staLine : list) {
                StaLine line = staLineDao.findStaLineQtyById(staLine.getId());// 判断执行量和核对量是否一致，一致则抛出异常
                if (line != null) {
                    throw new BusinessException(ErrorCode.ERROR_STALINE_ISCHECK);
                }
            }
        } else {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR);
        }
    }

    /**
     * 分拣核对
     * 
     * @param packageInfos
     * @param staId
     * @param lineNocode
     */
    private void checkSortingCheck(List<PackageInfo> packageInfos, Long staId, String lineNocode, Long userId) {
        if (log.isDebugEnabled()) {
            log.debug("=======execute checkSortingCheck=========");
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // sta状态检查
        if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
            if (StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus())) {
                updateisCheckQty(sta.getId());
                throw new BusinessException(ErrorCode.STA_CANCELED_QTY);
            }
            if (StockTransApplicationStatus.CANCELED.equals(sta.getStatus())) {
                throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {sta.getCode()});
            }
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 是否合并单
        if (null != sta.getIsMerge() && true == sta.getIsMerge()) {
            // 设置合单情况下，子单状态
            List<StockTransApplication> list = staDao.findGroupStaList(staId);
            if (log.isDebugEnabled()) {
                log.debug("========groupStaList size=========" + list.size());
            }
            if (list != null && list.size() > 0) {
                for (StockTransApplication bean : list) {
                    // sta状态检查
                    if (!StockTransApplicationStatus.OCCUPIED.equals(bean.getStatus())) {
                        if (StockTransApplicationStatus.CANCELED.equals(bean.getStatus()) || StockTransApplicationStatus.CANCEL_UNDO.equals(bean.getStatus())) {
                            throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {bean.getCode()});
                        }
                        throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {bean.getCode()});
                    }
                    // 设置子单状态
                    bean.setStatus(StockTransApplicationStatus.CHECKED);
                    // 订单状态与账号关联
                    whInfoTimeRefDao.insertWhInfoTime2(bean.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, bean.getMainWarehouse() == null ? null : bean.getMainWarehouse().getId());
                    bean.setCheckTime(new Date());
                    bean.setCheckUserId(userId);
                    bean.setLastModifyTime(new Date());
                    staDao.save(bean);
                    // 设置子执行单状态
                    StockTransVoucher stv = stvDao.findStvCreatedByStaId(bean.getId());
                    if (stv == null) {
                        throw new BusinessException(ErrorCode.STV_NOT_FOUND);
                    }
                    stv.setStatus(StockTransVoucherStatus.CHECK);
                    stv.setLastModifyTime(new Date());
                    stvDao.save(stv);
                }
            } else {
                throw new BusinessException(ErrorCode.CHILD_STA_NOT_FOUND, new Object[] {sta.getCode()});
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("=======sta find end==============");
        }
        String lpCode = sta.getStaDeliveryInfo().getLpCode();
        if (log.isDebugEnabled()) {
            log.debug("=======find lpcode {}==============", lpCode);
        }
        if (log.isDebugEnabled()) {
            log.debug("=========packageInfos size=================" + packageInfos.size());
        }
        // 合并订单无包裹信息
        if (packageInfos == null || packageInfos.size() == 0) {
            throw new BusinessException(ErrorCode.PDA_STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        StaDeliveryInfo di = sta.getStaDeliveryInfo();
        for (int i = 0; i < packageInfos.size(); i++) {
            PackageInfo p = packageInfos.get(i);
            if (packageInfoDao.findByTrackingNo(p.getTrackingNo()) != null) {
                throw new BusinessException(ErrorCode.PACKAGE_INFO_IS_EXIST, new Object[] {sta.getCode(), p.getTrackingNo()});
            }
            if (log.isDebugEnabled()) {
                log.debug("=======find PackageInfo {}==============", p.getId());
            }
            String trackingNo = p.getTrackingNo();

            if (i == 0) {
                if (di.getAliPackageNo() == null || "".equals(di.getAliPackageNo())) {
                    sta.getStaDeliveryInfo().setTrackingNo(trackingNo);
                }
                // 是否分包 fanht
                if (packageInfos.size() > 1) {
                    sta.getStaDeliveryInfo().setIsMorePackage(true);
                } else {
                    sta.getStaDeliveryInfo().setIsMorePackage(false);
                }
            }
            p.setLpCode(lpCode);
            p.setStaDeliveryInfo(sta.getStaDeliveryInfo());
            // 如果是云栈获取的运单号就打上标记
            if (di.getAliPackageNo() != null && !"".equals(di.getAliPackageNo()) && trackingNo.equals(di.getTrackingNo())) {
                p.setAliPackageNo(di.getAliPackageNo());
            }
            p.setLastModifyTime(new Date());
            packageInfoDao.save(p);

        }
        // staLine 数量更新
        int num = 0;
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update=================");
        }
        // 查询 sta涉及的staL fanht
        List<StaLineCommand> staLineList = staLineDao.findStaLineByStaId(staId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
        for (int i = 0; i < staLineList.size(); i++) {
            StaLine s = staLineList.get(i);
            StaLine s1 = staLineDao.getByPrimaryKey(s.getId());
            s1.setCompleteQuantity(s1.getQuantity());
            staLineDao.save(s1);
            num = num + s1.getQuantity().intValue();
        }
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update end =================");
        }
        // PickingList 数量更新 sta数量 +1 sku 数量++
        pickingListDao.addCheckedCount(sta.getPickingList().getId(), num);
        if (log.isDebugEnabled()) {
            log.debug("=========addCheckedCount end =================");
        }
        // sta 状态
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setCheckTime(new Date());
        sta.setCheckUserId(userId);
        sta.setLastModifyTime(new Date());
        // stv 状态
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (stv == null) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        stv.setStatus(StockTransVoucherStatus.CHECK);
        stv.setLastModifyTime(new Date());
        stvDao.save(stv);
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        if (wh.getIsMqInvoice() != null && wh.getIsMqInvoice() && sta.getPickingList().getIsMqInvoice() != null && sta.getPickingList().getIsMqInvoice()) {
            if (lineNocode == null) {
                throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
            }
            WorkLineNo lineNo = workLineNoDao.getWorkLineNoByCode(sta.getMainWarehouse().getId(), lineNocode);
            if (lineNo == null) {
                throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
            } else {
                // TODO 流水开票
            }
        }

        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        staDao.flush();
        // 释放周转箱
        try {
            autoOutboundTurnboxManager.resetTurnoverBoxStatusByPickingList(sta.getPickingList().getId(), userId);
        } catch (Exception e) {}
        if (log.isDebugEnabled()) {
            log.debug("=========end checkSortingCheck=================");
        }
    }

    /**
     * O2OQS批次分拣核对
     * 
     * @param packageInfos
     * @param staId
     * @param lineNocode
     */
    private void checkSortingCheck(PickingListPackage plp, List<PackageInfo> packageInfos, Long staId, String lineNocode, Long userId) {
        if (log.isDebugEnabled()) {
            log.debug("=======execute O2OQS checkSortingCheck========");
        }
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // sta状态检查
        if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
            if (StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus())) {
                updateisCheckQty(sta.getId());
                throw new BusinessException(ErrorCode.STA_CANCELED_QTY);
            }
            if (StockTransApplicationStatus.CANCELED.equals(sta.getStatus())) {
                throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {sta.getCode()});
            }
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        // 是否合并单
        if (null != sta.getIsMerge() && true == sta.getIsMerge()) {
            // 设置合单情况下，子单状态
            List<StockTransApplication> list = staDao.findGroupStaList(staId);
            if (log.isDebugEnabled()) {
                log.debug("groupStaList O2OQS list.size" + list.size());
            }
            if (list != null && list.size() > 0) {
                for (StockTransApplication bean : list) {
                    // sta状态检查
                    if (!StockTransApplicationStatus.OCCUPIED.equals(bean.getStatus())) {
                        if (StockTransApplicationStatus.CANCELED.equals(bean.getStatus()) || StockTransApplicationStatus.CANCEL_UNDO.equals(bean.getStatus())) {
                            throw new BusinessException(ErrorCode.STA_CANCELED, new Object[] {bean.getCode()});
                        }
                        throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {bean.getCode()});
                    }
                    // 设置子单状态
                    bean.setStatus(StockTransApplicationStatus.CHECKED);
                    // 订单状态与账号关联
                    whInfoTimeRefDao.insertWhInfoTime2(bean.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, bean.getMainWarehouse() == null ? null : bean.getMainWarehouse().getId());
                    bean.setCheckTime(new Date());
                    bean.setCheckUserId(userId);
                    bean.setLastModifyTime(new Date());
                    staDao.save(bean);
                    // 设置子执行单状态
                    StockTransVoucher stv = stvDao.findStvCreatedByStaId(bean.getId());
                    if (stv == null) {
                        throw new BusinessException(ErrorCode.STV_NOT_FOUND);
                    }
                    stv.setStatus(StockTransVoucherStatus.CHECK);
                    stv.setLastModifyTime(new Date());
                    stvDao.save(stv);
                }
            } else {
                throw new BusinessException(ErrorCode.CHILD_STA_NOT_FOUND, new Object[] {sta.getCode()});
            }
        }

        String lpCode = sta.getStaDeliveryInfo().getLpCode();
        if (log.isDebugEnabled()) {
            log.debug("=======find lpcode {}==============", lpCode);
        }
        if (log.isDebugEnabled()) {
            log.debug("====packageInfos list.size()====" + packageInfos.size());
        }
        for (int i = 0; i < packageInfos.size(); i++) {
            PackageInfo pi = new PackageInfo();
            PackageInfo p = packageInfos.get(i);
            if (packageInfoDao.findByTrackingNo(p.getTrackingNo()) != null && pickingListPackageDao.findByTrackingNoAndStatus(p.getTrackingNo(), DefaultStatus.FINISHED) != null) {
                throw new BusinessException(ErrorCode.PACKAGE_INFO_IS_EXIST, new Object[] {sta.getCode(), p.getTrackingNo()});
            }
            if (log.isDebugEnabled()) {
                log.debug("=======find PackageInfo {}==============", p.getId());
            }
            String trackingNo = p.getTrackingNo();
            pi.setTrackingNo(trackingNo);
            if (i == 0) {
                sta.getStaDeliveryInfo().setTrackingNo(trackingNo);
                // 是否分包 fanht
                if (packageInfos.size() > 1) {
                    sta.getStaDeliveryInfo().setIsMorePackage(true);
                } else {
                    sta.getStaDeliveryInfo().setIsMorePackage(false);
                }
            }
            pi.setLpCode(lpCode);
            pi.setStaDeliveryInfo(sta.getStaDeliveryInfo());
            pi.setLastModifyTime(new Date());
            packageInfoDao.save(pi);
        }
        // staLine 数量更新
        int num = 0;
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update=================");
        }
        // 查询 sta涉及的staL fanht
        List<StaLineCommand> staLineList = staLineDao.findStaLineByStaId(staId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
        for (int i = 0; i < staLineList.size(); i++) {
            StaLine s = staLineList.get(i);
            StaLine s1 = staLineDao.getByPrimaryKey(s.getId());
            s1.setCompleteQuantity(s1.getQuantity());
            staLineDao.save(s1);
            num = num + s1.getQuantity().intValue();
        }
        if (log.isDebugEnabled()) {
            log.debug("=========staLine update end =================");
        }
        // PickingList 数量更新 sta数量 +1 sku 数量++
        pickingListDao.addCheckedCount(sta.getPickingList().getId(), num);
        if (log.isDebugEnabled()) {
            log.debug("=========addCheckedCount end =================");
        }
        // sta 状态
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CHECKED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setCheckTime(new Date());
        sta.setCheckUserId(userId);
        sta.setLastModifyTime(new Date());
        sta.setPackageId(plp);
        // stv 状态
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (stv == null) {
            throw new BusinessException(ErrorCode.STV_NOT_FOUND);
        }
        stv.setStatus(StockTransVoucherStatus.CHECK);
        stv.setLastModifyTime(new Date());
        stvDao.save(stv);
        Warehouse wh = warehouseDao.getByOuId(sta.getMainWarehouse().getId());
        if (wh.getIsMqInvoice() != null && wh.getIsMqInvoice() && sta.getPickingList().getIsMqInvoice() != null && sta.getPickingList().getIsMqInvoice()) {
            if (lineNocode == null) {
                throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
            }
            WorkLineNo lineNo = workLineNoDao.getWorkLineNoByCode(sta.getMainWarehouse().getId(), lineNocode);
            if (lineNo == null) {
                throw new BusinessException(ErrorCode.WORK_LINE_NO_IS_NULL, new Object[] {sta.getCode()});
            } else {
                // TODO 流水开票
            }
        }
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        if (log.isDebugEnabled()) {
            log.debug("=========end O2OQS checkSortingCheck=================");
        }
    }

    public void createSnImportByBarcode(String sn, int type, String barcode, Long whouid) {
        Warehouse wh = warehouseDao.getByOuId(whouid);
        Long customerId = null;
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        Sku sku = skuDao.getByBarcode(barcode, customerId);
        createSnImport(sn, type, whouid, sku.getId());
    }


    public void createSnImport(String sn, int type, Long ouid, Long skuid) {
        List<SkuSnCommand> s = skuSnDao.getSkuSnBySku(sn, ouid, new BeanPropertyRowMapperExt<SkuSnCommand>(SkuSnCommand.class));
        if (s.size() == 0) {
            skuSnDao.createSnImport(sn, type, ouid, skuid);
        } else {
            skuSnDao.updateSn(sn, skuid);
        }
    }

    @Transactional(readOnly = true)
    public Sku checkSnBybarcode(String barCode, Long uid) throws JSONException {
        Warehouse wh = warehouseDao.getByOuId(uid);
        Long customerId = null;
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        Sku s = skuDao.getByBarcode(barCode, customerId);
        Sku tmp = new Sku();
        try {
            PropertyUtil.copyProperties(s, tmp);
            tmp.setBrand(null);
            tmp.setPaperSku(null);
            tmp.setCustomer(null);
            return tmp;
        } catch (Exception e) {
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        }
    }

    public JSONObject snsimportHand(List<SkuSn> skuSns, Long uid) throws JSONException {
        JSONObject result = new JSONObject();
        Warehouse wh = warehouseDao.getByOuId(uid);
        Long customerId = null;
        if (wh != null && wh.getCustomer() != null) {
            customerId = wh.getCustomer().getId();
        }
        for (SkuSn skuSn : skuSns) {

            Sku s = skuDao.getByBarcode(skuSn.getSku().getBarCode(), customerId);
            if (s == null) {
                result.put("result", "product");
            } else {
                Boolean issnproduct = s.getIsSnSku();
                if (issnproduct == null) {
                    result.put("result", "notSNproduct");
                } else if (issnproduct.equals(false)) {
                    result.put("result", "notSNproduct");
                } else {
                    SkuSn snSkuSn = skuSnDao.findSkuSnBySnSingle(skuSn.getSn());
                    if (snSkuSn != null) {
                        result.put("result", "UNIQUE");
                        result.put("sncode", skuSn.getSn());
                        break;
                    } else {
                        createSnImport(skuSn.getSn(), 1, uid, s.getId());
                        result.put("result", "SUCCES");
                        result.put("skulist", JsonUtil.obj2json(s));
                    }
                }
            }
        }
        return result;
    }

    /**
     * 仓库经理确认调用oms接口
     * 
     * @param province
     * @return
     */
    public void managerCheckforoms(String code) {
        InventoryCheck ic1 = inventoryCheckDao.findByCode(code);
        List<InventoryCheckDifferenceLineCommand> list = inventoryCheckDifferenceLineDao.getDifferentDetailByInventoryCheckId(ic1.getId(), new BeanPropertyRowMapper<InventoryCheckDifferenceLineCommand>(InventoryCheckDifferenceLineCommand.class));
        if (list.size() == 0) {
            List<StockTransApplication> staList = staDao.findBySlipCode(code);
            if (staList.size() == 0) {
                warehouseLocationDao.unLockByInvCheck(ic1.getId());
                ic1.setStatus(InventoryCheckStatus.FINISHED);
                ic1.setFinishTime(new Date());
                /***** mongoDB库存变更添加逻辑 ******************************/
                try {
                    eventObserver.onEvent(new TransactionalEvent(ic1));
                } catch (BusinessException e) {
                    throw e;
                }
                return;
            } else {
                // 此处无盘盈盘亏数据 不需要 OMS确认
                ic1.setStatus(InventoryCheckStatus.CONFIRMOMS);
                ic1.setFinishTime(new Date());
                return;
            }
        } else {
            OperationBill ob = new OperationBill();
            ob.setDirection(OperationBill.IN_AND_OUT);
            ob.setCode(ic1.getCode());
            ob.setSlipCode(ic1.getSlipCode());
            ob.setType(ic1.getType().getValue() + 10000);
            ob.setMemo(ic1.getRemork());
            ob.setWhCode(ic1.getOu().getCode());
            List<OperationBillLine> outLine = new ArrayList<OperationBillLine>();
            List<OperationBillLine> inLine = new ArrayList<OperationBillLine>();
            String ownerCode = "";
            for (InventoryCheckDifferenceLineCommand sl : list) {
                OperationBillLine bl = new OperationBillLine();
                bl.setSkuCode(sl.getSkuCode());
                bl.setQty(sl.getQuantity().compareTo(0L) < 0 ? -sl.getQuantity() : sl.getQuantity());
                bl.setShopCode(sl.getOwner());
                // 如果店铺为空，通过占用码和商品ID查找库存上的店铺
                bl.setWhCode(ic1.getOu().getCode());
                if (sl.getQuantity().compareTo(0L) < 0) {
                    outLine.add(bl);
                } else {
                    inLine.add(bl);
                }
                if ("".equals(ownerCode) || ownerCode == null) {
                    ownerCode = sl.getOwner();
                }
            }
            ob.setInboundLines(inLine);
            ob.setOutboundLines(outLine);
            try {
                log.debug("Call oms inventorycheck comfirm interface------------------->BEGIN");
                BaseResult br = rmi4Wms.operationBillCreate(ob);
                if (br.getStatus() == 0) {
                    throw new BusinessException(ErrorCode.SYSTEM_ERROR, new Object[] {br.getMsg()});
                } else {
                    if (ic1.getShop() == null) {
                        BiChannel l = biChannelDao.getByCode(ownerCode);
                        if (l != null) {
                            ic1.setShop(l);
                        }
                    }
                    ic1.setSlipCode(br.getSlipCode());
                    inventoryCheckDao.flush();
                }
                log.debug("Call oms inventorycheck comfirm interface------------------->END");
            } catch (BusinessException e) {
                throw e;
            } catch (Exception e) {
                throw new BusinessException(ErrorCode.RMI_OMS_FAILURE);
            }
        }
    }

    @Override
    public void updatepredefinedOutOccupation(StockTransApplication sta, List<StaLineCommand> staLines) {
        StockTransVoucher stv1 = stockTransVoucherDao.findStvCreatedByStaId(sta.getId());
        if (stv1 != null) {
            List<StvLine> stvLines = stvLineDao.findAllByStaId(sta.getId(), new BeanPropertyRowMapperExt<StvLine>(StvLine.class));
            if (stvLines.size() > 0) {
                for (int i = 0; i < stvLines.size(); i++) {
                    stvLineDao.delete(stvLines.get(i));
                }
            }
            stockTransVoucherDao.delete(stv1);
            stvLineDao.flush();
            stockTransVoucherDao.flush();

        }

        StockTransVoucher stv = new StockTransVoucher();
        stv.setBusinessSeqNo(stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>()));
        TransactionType transactionType = null;
        if (sta.getType().equals(StockTransApplicationType.WELFARE_USE)) { // 福利领用
            transactionType = transactionTypeDao.findByCode(Constants.WELFARE_USE);
        } else if (sta.getType().equals(StockTransApplicationType.FIXED_ASSETS_USE)) { // 固定资产领用
            transactionType = transactionTypeDao.findByCode(Constants.FIXED_ASSETS_USE);
        } else if (sta.getType().equals(StockTransApplicationType.OUTBOUND_PACKAGING_MATERIALS)) { // 包材领用出库
            transactionType = transactionTypeDao.findByCode(Constants.PACKAGING_MATERIALS_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.OUTBOUND_SETTLEMENT)) { // 结算经销出库
            transactionType = transactionTypeDao.findByCode(Constants.SETTLEMENT_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.OUTBOUND_CONSIGNMENT)) { // 代销出库
            transactionType = transactionTypeDao.findByCode(Constants.CONSIGNMENT_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SCARP_OUTBOUND)) { // 报废出库
            transactionType = transactionTypeDao.findByCode(Constants.SCARP_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SALES_PROMOTION_USE)) { // 促销领用
            transactionType = transactionTypeDao.findByCode(Constants.SALES_PROMOTION_USE);
        } else if (sta.getType().equals(StockTransApplicationType.LOW_VALUE_CONSUMABLE_USE)) { // 低值易耗品
            transactionType = transactionTypeDao.findByCode(Constants.LOW_VALUE_CONSUMABLE_USE);
        } else if (sta.getType().equals(StockTransApplicationType.SAMPLE_OUTBOUND)) { // 样品领用出库
            transactionType = transactionTypeDao.findByCode(Constants.SAMPLE_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.TRANSIT_CROSS)) { // 样品领用出库
            transactionType = transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_TRANSIT_CROSS_OUT);
        } else if (sta.getType().equals(StockTransApplicationType.SKU_EXCHANGE_OUTBOUND)) { // 商品置换出库
            transactionType = transactionTypeDao.findByCode(Constants.SKU_EXCHANGE_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.REAPAIR_OUTBOUND)) { // 送修出库
            transactionType = transactionTypeDao.findByCode(Constants.REAPAIR_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SERIAL_NUMBER_OUTBOUND)) { // 串号拆分出库
            transactionType = transactionTypeDao.findByCode(Constants.SERIAL_NUMBER_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.SERIAL_NUMBER_GROUP_OUTBOUND)) { // 串号组合出库
            transactionType = transactionTypeDao.findByCode(Constants.SERIAL_NUMBER_GROUP_OUTBOUND);
        } else if (sta.getType().equals(StockTransApplicationType.VMI_RETURN)) { // 串号组合出库
            transactionType = transactionTypeDao.findByCode(Constants.VMI_RETURN_OUT);
        } else if (sta.getType().equals(StockTransApplicationType.VMI_TRANSFER_RETURN)) { // 串号组合出库
            transactionType = transactionTypeDao.findByCode(Constants.VMI_TRANSFER_RETURN_OUT);
        }
        stv.setCreateTime(new Date());
        stv.setLastModifyTime(new Date());
        stv.setDirection(transactionType.getDirection());
        stv.setOwner(sta.getOwner());
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setDirection(TransactionDirection.OUTBOUND);
        stv.setWarehouse(sta.getMainWarehouse());
        stv.setTransactionType(transactionType);
        stv.setCode(sta.getCode());
        stv.setSta(sta);
        stv.setTransactionType(transactionType);
        stvDao.save(stv);
        try {
            predefinedOutOccupation(sta, staLines, stv);
        } catch (BusinessException e) {
            throw e;
        }

    }

    public void predefinedOutOccupation(StockTransApplication sta, List<StaLineCommand> staLines, StockTransVoucher stv) throws BusinessException {
        List<Inventory> inventories = inventoryDao.findByOccupiedCode(sta.getCode());
        if (inventories.size() > 0) {
            for (int i = 0; i < inventories.size(); i++) {
                inventories.get(i).setOccupationCode("");
                inventories.get(i).setIsOccupied(false);
                inventoryDao.save(inventories.get(i));

            }
            inventoryDao.flush();
        }

        for (int i = 0; i < staLines.size(); i++) {

            List<Inventory> inventorys = inventoryDao.findInventory(sta.getId(), staLines.get(i).getLocation(), staLines.get(i).getSkuId(), new BeanPropertyRowMapperExt<Inventory>(Inventory.class));
            if (inventorys.size() == 0) {
                throw new BusinessException(ErrorCode.SO_TO_WH_INVENTORY_IS_NULL);
            }
            Integer sum = inventoryDao.findInventorysum(sta.getId(), staLines.get(i).getLocation(), staLines.get(i).getSkuId(), new SingleColumnRowMapper<Integer>(Integer.class));
            if (staLines.get(i).getQuantity() <= sum) {
                for (Inventory inventory1 : inventorys) {
                    if (staLines.get(i).getQuantity() < inventory1.getQuantity()) {
                        Inventory inventory = new Inventory();
                        StvLine stvLine = new StvLine();
                        inventory.setId(null);
                        inventory1.setQuantity(inventory1.getQuantity() - staLines.get(i).getQuantity());
                        inventory.setBatchCode(inventory1.getBatchCode());
                        inventory.setInboundTime(inventory1.getInboundTime());
                        inventory.setQuantity(staLines.get(i).getQuantity());
                        inventory.setOccupationCode(sta.getCode());
                        inventory.setOwner(inventory1.getOwner());
                        inventory.setDistrict(inventory1.getDistrict());
                        inventory.setLocation(inventory1.getLocation());
                        inventory.setOu(inventory1.getOu());
                        inventory.setSku(inventory1.getSku());
                        inventory.setStatus(inventory1.getStatus());
                        inventory.setProductionDate(inventory1.getProductionDate());
                        inventory.setExpireDate(inventory1.getExpireDate());
                        inventory.setValidDate(inventory1.getValidDate());
                        inventory.setIsOccupied(true);
                        // 操作明细
                        stvLine.setDirection(TransactionDirection.OUTBOUND);
                        stvLine.setBatchCode(inventory.getBatchCode());
                        stvLine.setOwner(inventory.getOwner());
                        stvLine.setQuantity(inventory.getQuantity());
                        stvLine.setSkuCost(inventory.getSkuCost());
                        stvLine.setDistrict(inventory.getDistrict());
                        stvLine.setInvStatus(inventory.getStatus());
                        stvLine.setProductionDate(inventory.getProductionDate());
                        stvLine.setExpireDate(inventory.getExpireDate());
                        stvLine.setValidDate(inventory.getValidDate());
                        stvLine.setLocation(inventory.getLocation());
                        stvLine.setSku(inventory.getSku());
                        stvLine.setStaLine(staLineDao.findStaLineBySkuId(staLines.get(i).getSkuId(), sta.getId()));
                        stvLine.setStv(stv);
                        stvLine.setWarehouse(inventory.getOu());
                        stvLine.setInBoundTime(inventory1.getInboundTime());
                        stvLineDao.save(stvLine);
                        inventoryDao.save(inventory);
                        inventoryDao.save(inventory1);
                        staLineDao.flush();
                        staLines.get(i).setQuantity(0l);
                        break;

                    } else if (staLines.get(i).getQuantity().equals(inventory1.getQuantity())) {
                        StvLine stvLine = new StvLine();
                        inventory1.setOccupationCode(sta.getCode());
                        inventory1.setIsOccupied(true);
                        inventoryDao.save(inventory1);
                        // 操作明细
                        stvLine.setDirection(TransactionDirection.OUTBOUND);
                        stvLine.setBatchCode(inventory1.getBatchCode());
                        stvLine.setOwner(inventory1.getOwner());
                        stvLine.setQuantity(inventory1.getQuantity());
                        stvLine.setSkuCost(inventory1.getSkuCost());
                        stvLine.setDistrict(inventory1.getDistrict());
                        stvLine.setInvStatus(inventory1.getStatus());
                        stvLine.setLocation(inventory1.getLocation());
                        stvLine.setStaLine(staLineDao.findStaLineBySkuId(staLines.get(i).getSkuId(), sta.getId()));
                        stvLine.setSku(inventory1.getSku());
                        stvLine.setProductionDate(inventory1.getProductionDate());
                        stvLine.setExpireDate(inventory1.getExpireDate());
                        stvLine.setValidDate(inventory1.getValidDate());
                        stvLine.setStv(stv);
                        stvLine.setInBoundTime(inventory1.getInboundTime());
                        stvLine.setWarehouse(inventory1.getOu());
                        stvLineDao.save(stvLine);
                        staLineDao.flush();
                        staLines.get(i).setQuantity(staLines.get(i).getQuantity() - inventory1.getQuantity());
                        break;

                    } else if (staLines.get(i).getQuantity() > inventory1.getQuantity()) {
                        StvLine stvLine = new StvLine();
                        inventory1.setOccupationCode(sta.getCode());
                        inventory1.setIsOccupied(true);
                        inventoryDao.save(inventory1);
                        // 操作明细
                        stvLine.setDirection(TransactionDirection.OUTBOUND);
                        stvLine.setBatchCode(inventory1.getBatchCode());
                        stvLine.setOwner(inventory1.getOwner());
                        stvLine.setQuantity(inventory1.getQuantity());
                        stvLine.setSkuCost(inventory1.getSkuCost());
                        stvLine.setDistrict(inventory1.getDistrict());
                        stvLine.setInvStatus(inventory1.getStatus());
                        stvLine.setLocation(inventory1.getLocation());
                        stvLine.setSku(inventory1.getSku());
                        stvLine.setProductionDate(inventory1.getProductionDate());
                        stvLine.setExpireDate(inventory1.getExpireDate());
                        stvLine.setValidDate(inventory1.getValidDate());
                        stvLine.setStaLine(staLineDao.findStaLineBySkuId(staLines.get(i).getSkuId(), sta.getId()));
                        stvLine.setStv(stv);
                        stvLine.setInBoundTime(inventory1.getInboundTime());
                        stvLine.setWarehouse(inventory1.getOu());
                        stvLineDao.save(stvLine);
                        staLineDao.flush();
                        staLines.get(i).setQuantity(staLines.get(i).getQuantity() - inventory1.getQuantity());

                    }
                }

            } else {
                log.debug("需要出库数量:" + staLines.get(i).getQuantity() + "  " + "库存数量:" + sum);
                throw new BusinessException("库存数量不足");
            }
        }
    }

    @Override
    public PickingListCommand getSingleCheckOrder(Long ouId, List<Long> idList, String code) {
        List<Integer> statusList = new ArrayList<Integer>();
        statusList.add(PickingListStatus.PACKING.getValue());
        statusList.add(PickingListStatus.PARTLY_RETURNED.getValue());
        return pickingListDao.getSingleCheckOrder(ouId, idList, code, statusList, PickingListCheckMode.PICKING_CHECK.getValue(), WhAddStatusMode.CHECK.getValue(), new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }



    @Override
    public String createOwnerTransFerSta(StockTransApplication stas) {
        StockTransApplication sta = new StockTransApplication();
        OperationUnit ou1 = operationUnitDao.getByPrimaryKey(stas.getMainWarehouse().getId());
        if (!StringUtils.hasLength(stas.getAddiOwner())) {
            // 接口数据中附加店铺为空!
            throw new BusinessException(ErrorCode.EI_ADD_OWNER_IS_NULL, new Object[] {stas.getAddiOwner()});
        }
        BiChannel cs = companyShopDao.getByCode(stas.getAddiOwner());
        if (cs == null) {
            // 接口数据对应的附加店铺不存在!
            throw new BusinessException(ErrorCode.EI_ADD_OWNER_NOT_EXISTS);
        }
        String owner1 = warehouseShopRefDao.getShopInfoByWarehouseAndShopCode(ou1.getId(), stas.getAddiOwner(), new SingleColumnRowMapper<String>(String.class));
        if (owner1 == null) {
            // 仓库和附加店铺没有绑定!
            throw new BusinessException(ErrorCode.EI_TARGET_WH_SHOP_NOREF);
        }
        if (stas.getOwner().equals(stas.getAddiOwner())) {
            // 店铺和附加店铺一致!
            throw new BusinessException(ErrorCode.EI_TARGET_ORG_SHOP_ERROR);
        }
        BiChannel shop = companyShopDao.getByCode(stas.getOwner());
        if (!((shop.getVmiCode() != null && cs.getVmiCode() != null) || (shop.getVmiCode() == null && cs.getVmiCode() == null))) {
            throw new BusinessException(ErrorCode.EI_TWO_SHOP_MUST_VMI_SAME);
        }
        whExe.validateBiChannelSupport(null, shop.getCode());
        // InventoryStatus invStatus =
        // inventoryStatusDao.getByPrimaryKeyAndOuId(stas.getMainStatus().getId(),
        // ou1.getParentUnit().getParentUnit().getId());
        sta.setRefSlipCode(stas.getCode());
        // sta.setMainStatus(invStatus);
        sta.setType(StockTransApplicationType.valueOf(stas.getType().getValue()));
        sta.setCode(sequenceManager.getCode(StockTransApplication.class.getName(), sta));
        sta.setMainWarehouse(ou1);
        sta.setOwner(stas.getOwner());
        sta.setAddiOwner(stas.getAddiOwner());
        sta.setBusinessSeqNo(staDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>()).longValue());
        sta.setCreateTime(new Date());
        sta.setLastModifyTime(new Date());
        sta.setStatus(StockTransApplicationStatus.CREATED);
        sta.setIsNeedOccupied(true);
        sta.setMemo(stas.getMemo());

        List<StaLine> staline = staLineDao.findByStaId(stas.getId());
        if (shop != null && shop.getVmiCode() != null) {
            VmiInterface vf = vmiFactory.getBrandVmi(shop.getVmiCode());
            if (vf != null) {
                sta.setRefSlipCode(vf.generateRtnStaSlipCode(shop.getVmiCode(), sta.getType()));
            }
        }
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), null, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());

        // 合并明细行记录同商品(库存状态一致)
        Map<String, StaLine> map = new HashMap<String, StaLine>();
        for (StaLine line : staline) {
            if (map.get(line.getSku().getCode()) == null) {
                map.put(line.getSku().getCode(), line);
            } else {
                StaLine newLine = map.get(line.getSku().getCode());
                newLine.setQuantity(newLine.getQuantity() + line.getQuantity());
                map.put(line.getSku().getCode(), newLine);
            }
        }
        staDao.save(sta);
        staDao.flush();
        List<StaLine> lineList = new ArrayList<StaLine>();
        lineList.addAll(map.values());
        for (StaLine line1 : lineList) {
            Sku sku = skuDao.getByCode(line1.getSku().getCode());
            InventoryStatus invStatus = inventoryStatusDao.findSalesAviliableStatus(ou1.getId());
            StaLine sl = new StaLine();
            sl.setSta(sta);
            sl.setSku(sku);
            sl.setOwner(stas.getOwner());
            sl.setQuantity(line1.getQuantity());
            sl.setInvStatus(invStatus);
            staLineDao.save(sl);
        }
        staLineDao.flush();
        staDao.updateSkuQtyById(sta.getId());
        staDao.updateIsSnSta(sta.getId());
        occupyInvntoryForSta(sta);
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
        return sta.getRefSlipCode();
    }

    /**
     * 库存占用生成STV
     * 
     * @param sta
     */
    private void occupyInvntoryForSta(StockTransApplication sta) {
        StockTransApplication sta1 = staDao.getByPrimaryKey(sta.getId());
        if (!StockTransApplicationStatus.CREATED.equals(sta1.getStatus())) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta1.getCode()});
        }
        TransactionType t = null;
        t = transactionTypeDao.findByCode(TransactionType.returnTypeOutbound(sta1.getType()));
        if (t != null) {
            occupyInventoryCommonMethod(sta1.getId());
            sta1.setStatus(StockTransApplicationStatus.OCCUPIED);
            // 订单状态与账号关联
            whInfoTimeRefDao.insertWhInfoTime2(sta1.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.OCCUPIED.getValue(), null, sta.getMainWarehouse().getId());
            sta1.setLastModifyTime(new Date());
            int tdType = TransactionDirection.OUTBOUND.getValue();
            String code = stvDao.getCode(sta1.getId(), new SingleColumnRowMapper<String>());
            stvDao.createStv(code, sta1.getOwner(), sta.getId(), StockTransVoucherStatus.CREATED.getValue(), null, tdType, sta.getMainWarehouse().getId(), t.getId());
            stvLineDao.createForCrossByStaId(sta1.getId());
        } else {
            throw new BusinessException(ErrorCode.STV_TRAN_TYPE_ERROR, new Object[] {sta1.getType()});
        }

    }

    /**
     * 通用库存占用方法
     * 
     * @param staId
     */
    public void occupyInventoryCommonMethod(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        List<InventoryOccupyCommand> list = inventoryDao.findForOccupyInventory(null, staId, WarehouseDistrictType.RECEIVING.getValue(), new BeanPropertyRowMapper<InventoryOccupyCommand>(InventoryOccupyCommand.class));
        Long skuId = null;
        Long tqty = null;
        Long statusId = null;
        Date expireDate = null;
        for (InventoryOccupyCommand cmd : list) {
            if (skuId == null || !(skuId.equals(cmd.getSkuId()) && ((expireDate == null && cmd.getExpDate() == null) || (expireDate != null && expireDate.equals(cmd.getExpDate()))) && statusId.equals(cmd.getStatusId()))) {
                skuId = cmd.getSkuId();
                statusId = cmd.getStatusId();
                expireDate = cmd.getExpDate();
                tqty = cmd.getPlanOccupyQty() == null ? 0L : cmd.getPlanOccupyQty();
            }
            // 待占用量小于等于0表示占用完毕，继续后续商品占用
            if (tqty.longValue() <= 0L) {
                continue;
            }
            if (cmd.getQuantity().longValue() > tqty.longValue()) {
                // 库存数量大于待占用量拆分库存份
                inventoryDao.occupyInvById(cmd.getId(), sta.getCode(), tqty);
                // 插入新库存份
                saveInventoryForOccupy(cmd, cmd.getQuantity().longValue() - tqty.longValue(), null);
                // 重置待占用量
                tqty = 0L;
            } else {
                // 库存数量小于等于待占用量,直接占用库存份
                inventoryDao.occupyInvById(cmd.getId(), sta.getCode(), cmd.getQuantity().longValue());
                tqty = tqty - cmd.getQuantity().longValue();
            }
        }
        inventoryDao.flush();
        // 验证占用量
        validateOccupy(sta.getId());
    }

    /**
     * 
     * 根据条件查询历史作业单
     */
    public Pagination<StockTransApplicationCommand> findPrintGift(int start, int size, Long ouId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, StockTransApplicationCommand sta, Sort[] sorts) {
        String code = null;
        String refSlipCode = null;
        Integer status = null;
        String SlipCode1 = null;
        String SlipCode2 = null;
        if (sta != null) {
            status = sta.getIntStaStatus();
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode1())) {
                SlipCode1 = sta.getSlipCode1() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode2())) {
                SlipCode2 = sta.getSlipCode2() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
        }
        return staDao.findPrintGift(start, size, ouId, createTime, endCreateTime, finishTime, endFinishTime, code, refSlipCode, status, SlipCode1, SlipCode2, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class),
                sorts);
    }

    public Pagination<GiftLine> findPrintGiftLine(int start, int pageSize, Long staId, Sort[] sorts) {
        return giftLineDao.getPrintGiftLine(start, pageSize, staId, new BeanPropertyRowMapperExt<GiftLine>(GiftLine.class), sorts);
    }



    /**
     * 库存明细查寻(新增保质期条件) bin.hu
     */
    public Pagination<InventoryCommand> findDetailsInventoryByPageShelfLife(int start, int pageSize, InventoryCommand inv, Long whOuId, Long companyid, Sort[] sorts) {
        Integer wd = null;
        Integer sl = null;
        if (inv != null) {
            inv.setQueryLikeParam();
        } else {
            inv = new InventoryCommand();
        }
        if (inv.getExtCode2() != null) {
            if ("".equals(inv.getExtCode2())) {
                inv.setExtCode2(null);
            }
        }
        if (!inv.getWarningDate().equals("")) {
            wd = Integer.valueOf(inv.getWarningDate());
        }
        if (!inv.getShelfLife().equals("")) {
            sl = Integer.valueOf(inv.getShelfLife());
        }
        if (inv.getIsZeroInventory() == 2) {
            return inventoryZeroDao.findDetailsInventoryByPageShelfLife(start, pageSize, inv.getJmCode(), inv.getSkuCode(), inv.getExtCode2(), inv.getBarCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getLocationCode(), inv.getInvOwner(), whOuId,
                    companyid, inv.getInventoryStatusId(), wd, sl, inv.getStartDate(), inv.getEndDate(), inv.getIsZeroInventory(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class), sorts);

        } else {
            return inventoryDao.findDetailsInventoryByPageShelfLife(start, pageSize, inv.getJmCode(), inv.getSkuCode(), inv.getExtCode2(), inv.getBarCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getLocationCode(), inv.getInvOwner(), whOuId,
                companyid, inv.getInventoryStatusId(), wd, sl, inv.getStartDate(), inv.getEndDate(), inv.getIsZeroInventory(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class), sorts);

        }
    }



    /**
     * 验证生产日期&过期时间
     * 
     * @throws Exception
     */
    @SuppressWarnings("unused")
    public ReadStatus checkPoductionDateAndExpireDate(String poductionDate, String expireDate, ReadStatus rs, String code, Sku sku, Date errorLog, int type) throws Exception {
        SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMdd");
        if (type == 0) {
            if (sku == null) {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.EI_SKU_NOTEXISTS, new Object[] {code}));
                return rs;
            }
            if (sku.getStoremode().getValue() == InboundStoreMode.SHELF_MANAGEMENT.getValue()) {
                // 如果是保质期商品
                if (!StringUtil.isEmpty(poductionDate) && StringUtil.isEmpty(expireDate) && sku.getValidDate() == null) {
                    rs.setStatus(-2);
                    rs.addException(new BusinessException(ErrorCode.SKU_SHELF_MANAGEMENT_VALID_DATE, new Object[] {code}));
                    return rs;
                }
                if (StringUtil.isEmpty(poductionDate) && StringUtil.isEmpty(expireDate)) {
                    rs.setStatus(-2);
                    rs.addException(new BusinessException(ErrorCode.SKU_PD_AND_ED_IS_NULL, new Object[] {code}));
                    return rs;
                }
                // 验证生产日期
                if (!StringUtil.isEmpty(poductionDate) && poductionDate.trim().length() != 8) {
                    rs.setStatus(-2);
                    rs.addException(new BusinessException(ErrorCode.SKU_PODUCTION_DATE_IS_ERROR, new Object[] {code, poductionDate}));
                    return rs;
                }
                // 验证过期时间
                if (!StringUtil.isEmpty(expireDate) && expireDate.trim().length() != 8) {
                    rs.setStatus(-2);
                    rs.addException(new BusinessException(ErrorCode.SKU_EXPIRE_DATE_IS_ERROR, new Object[] {code, expireDate}));
                    return rs;
                }
                Date pDate = null;
                if (!StringUtil.isEmpty(poductionDate)) {
                    try {
                        // 生成日期格式转换
                        pDate = formatDate.parse(poductionDate.trim());
                    } catch (ParseException e) {
                        rs.setStatus(-2);
                        rs.addException(new BusinessException(ErrorCode.SKU_PODUCTION_DATE_IS_ERROR, new Object[] {code, expireDate}));
                        return rs;
                    }
                }
                Date eDate = null;
                if (!StringUtil.isEmpty(expireDate)) {
                    try {
                        // 过期时间格式转换
                        eDate = formatDate.parse(expireDate.trim());
                    } catch (ParseException e) {
                        rs.setStatus(-2);
                        rs.addException(new BusinessException(ErrorCode.SKU_EXPIRE_DATE_IS_ERROR, new Object[] {code, expireDate}));
                        return rs;
                    }
                }
            }
        }
        if (type == 1) {
            String eDate = "";
            if (errorLog != null) {
                eDate = formatDate.format(errorLog);
            }
            // 验证过期时间是否正确
            if (!TimeTypeMode.DAY.equals(sku.getTimeType())) {
                String dataStr = (TimeTypeMode.MONTH.equals(sku.getTimeType()) ? expireDate.substring(0, 6) + "01" : expireDate.substring(0, 4) + "0101");
                if (!eDate.equals(dataStr)) {
                    rs.setStatus(-2);
                    rs.addException(new BusinessException(ErrorCode.SKU_SHELF_MANAGEMENT_EXPIREDATE_ERROR, new Object[] {"", code}));
                    return rs;
                }
            }
            if (TimeTypeMode.DAY.equals(sku.getTimeType())) {
                if (!eDate.equals(formatDate.format(formatDate.parse(expireDate)))) {
                    rs.setStatus(-2);
                    rs.addException(new BusinessException(ErrorCode.SKU_SHELF_MANAGEMENT_EXPIREDATE_ERROR, new Object[] {"", code}));
                    return rs;
                }
            }
        }
        return rs;
    }

    // 导入模板批量收货- 分页操作
    public Pagination<StockTransApplicationCommand> findBatchStaByPagination(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime, int type, int statu, int start, int size, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String locked = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = "%" + sta.getRefSlipCode() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
        }
        ArrayList<Integer> types = new ArrayList<Integer>();
        ArrayList<Integer> status = new ArrayList<Integer>();
        status.add(StockTransApplicationStatus.CREATED.getValue());
        // status.add(StockTransApplicationStatus.FINISHED.getValue());

        types.add(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue());
        types.add(StockTransApplicationType.INBOUND_PURCHASE.getValue());
        if (type != 0) {
            types.clear();
            types.add(type);
        }
        if (statu != 0) {
            status.clear();
            status.add(statu);
        }
        return staDao.findPredefinedStaByTypeBYPagination(start, size, types, status, locked, wh.getId(), code, refcode, owner, startTime, endTime, arriveStartTime, arriveEndTime, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }

    /**
     * 保存STV照片图片路径bin.hu
     */
    @Override
    public void creatStvCheckImg(String staCode, String fileUrl, String fileName) {
        String[] fileNameUrl = fileName.substring(0, fileName.length() - 1).split("/");
        for (String string : fileNameUrl) {
            StockTransApplication sta = staDao.getByCode(staCode);
            StockTransVoucher stv = stvDao.findStvCreatedByStaId(sta.getId());
            StvCheckImg stvImg = new StvCheckImg();
            stvImg.setCreatTime(new Date());
            stvImg.setFileUrl(fileUrl + "/" + string);
            stvImg.setStv(stv);
            stvCheckDao.save(stvImg);
        }
    }

    /**
     * 获取配货批次中所有作业单和运单信息
     */
    @Override
    public List<StockTransApplicationCommand> findAllStaAndDeliveryInfoByPickingList(Long pickingListId, Long ouId) {
        return staDao.findAllStaAndDeliveryInfoByPickingList(pickingListId == null ? -1L : pickingListId, ouId == null ? -1L : ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }



    /**
     * 根据slip_Code查询
     */
    @Override
    public List<AllocateCargoOrderCommand> getByslipCode(String slipCode, Sort[] sorts) {

        return pickingListDao.getByslipCode(slipCode, new BeanPropertyRowMapper<AllocateCargoOrderCommand>(AllocateCargoOrderCommand.class), sorts);
    }



    @Override
    public PickingListCommand findSlipCodeByid(Long ouId, String code) {
        return pickingListDao.findSlipCodeByid(ouId, code, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }



    /**
     * 预定义入库关闭/取消 根据作业单Id 修改状态和完成时间
     */
    public void updateTypeAndFinishTimeByid(Long id, Long userId) {
        staDao.updateTypeAndFinishTimeByid(id);
        StockTransApplication sta = staDao.getByPrimaryKey(id);
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CLOSE.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CLOSE.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        }

    }



    /**
     * Id
     */
    @Override
    public List<StaLineCommand> operationOthersOperateQueryDetails2(Long staId) {

        return staLineDao.operationOthersOperateQueryDetails2(staId, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * 记录sku的变更
     */

    public SkuModifyLog refreshSkuModifyLog(Sku sku) {
        SkuModifyLog smf = new SkuModifyLog();
        try {
            org.springframework.beans.BeanUtils.copyProperties(sku, smf);

            smf.setLastModifyTime(new Date());
            smf.setId(null);
            smf.setSku(sku);
        } catch (Exception e) {
            smf = null;
            if (logger.isErrorEnabled()) {
                logger.error("SkuModifyLog Exception:" + sku.getCode(), e);
            }
        }
        return smf;
    }

    @Override
    public List<InventoryCommand> findDetailsInventoryLocationSum(InventoryCommand inv, Long whOuId, Long companyid) {
        Integer wd = null;
        Integer sl = null;
        if (inv != null) {
            inv.setQueryLikeParam();
        } else {
            inv = new InventoryCommand();
        }
        if (inv.getExtCode2() != null) {
            if ("".equals(inv.getExtCode2())) {
                inv.setExtCode2(null);
            }
        }
        if (!inv.getWarningDate().equals("")) {
            wd = Integer.valueOf(inv.getWarningDate());
        }
        if (!inv.getShelfLife().equals("")) {
            sl = Integer.valueOf(inv.getShelfLife());
        }
        return inventoryDao.findDetailsInventoryLocationSum(inv.getJmCode(), inv.getSkuCode(), inv.getExtCode2(), inv.getBarCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getLocationCode(), inv.getInvOwner(), whOuId, companyid,
                inv.getInventoryStatusId(), wd, sl, inv.getStartDate(), inv.getEndDate(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }

    @Override
    public InventoryCommand findDetailsInventorySkuQty(InventoryCommand inv, Long whOuId, Long companyid) {
        Integer wd = null;
        Integer sl = null;
        if (inv != null) {
            inv.setQueryLikeParam();
        } else {
            inv = new InventoryCommand();
        }
        if (inv.getExtCode2() != null) {
            if ("".equals(inv.getExtCode2())) {
                inv.setExtCode2(null);
            }
        }
        if (!inv.getWarningDate().equals("")) {
            wd = Integer.valueOf(inv.getWarningDate());
        }
        if (!inv.getShelfLife().equals("")) {
            sl = Integer.valueOf(inv.getShelfLife());
        }
        return inventoryDao.findDetailsInventorySkuQty(inv.getJmCode(), inv.getSkuCode(), inv.getExtCode2(), inv.getBarCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getLocationCode(), inv.getInvOwner(), whOuId, companyid,
                inv.getInventoryStatusId(), wd, sl, inv.getStartDate(), inv.getEndDate(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }

    @Override
    public List<InventoryCommand> findDetailsInventorySkuSum(InventoryCommand inv, Long whOuId, Long companyid) {
        Integer wd = null;
        Integer sl = null;
        if (inv != null) {
            inv.setQueryLikeParam();
        } else {
            inv = new InventoryCommand();
        }
        if (inv.getExtCode2() != null) {
            if ("".equals(inv.getExtCode2())) {
                inv.setExtCode2(null);
            }
        }
        if (!inv.getWarningDate().equals("")) {
            wd = Integer.valueOf(inv.getWarningDate());
        }
        if (!inv.getShelfLife().equals("")) {
            sl = Integer.valueOf(inv.getShelfLife());
        }
        return inventoryDao.findDetailsInventorySkuSum(inv.getJmCode(), inv.getSkuCode(), inv.getExtCode2(), inv.getBarCode(), inv.getSkuName(), inv.getSupplierSkuCode(), inv.getLocationCode(), inv.getInvOwner(), whOuId, companyid,
                inv.getInventoryStatusId(), wd, sl, inv.getStartDate(), inv.getEndDate(), new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
    }

    @Override
    public Warehouse getByOuId(Long ouid) {
        Warehouse w = warehouseMap.get(ouid);
        if (null == w) {
            w = warehouseDao.getByOuId(ouid);
            warehouseMap.put(ouid, w, 3 * 60 * 1000);
        }
        return w;
    }

    @Override
    public List<Warehouse> getIsAreaOcpInvAll() {
        return warehouseDao.getIsAreaOcpInvAll();
    }

    public InventoryCheck findInventoryCheckByCode(String code) {

        return inventoryCheckDao.findByCode(code);
    }

    /**
     * 仓库经理确认检验（是否已导入）
     * 
     * @param code
     * @param singleColumnRowMapper
     * @return
     */
    public Long managerchecknumber(String code) {
        return inventoryCheckDao.managerchecknumber(code, new SingleColumnRowMapper<Long>(Long.class));
    }

    public List<SkuBarcodeCommand> findSkuBarcodeForPda(String plcode) {
        return skuBarcodeDao.findSkuBarcodeForPda(plcode, new BeanPropertyRowMapperExt<SkuBarcodeCommand>(SkuBarcodeCommand.class));
    }

    public List<StaLineCommand> findOccupySkuForPda(String plcode) {
        return staLineDao.findOccupySkuForPda(plcode, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * 根据条码查找sku
     * 
     * @param barCode
     * @return
     */
    public Sku getSkuByBarcode(String barCode, Long customerId) {
        Sku sku = skuDao.getByBarcode(barCode, customerId);
        SkuCommand sc = null;
        if (sku != null) {
            sc = new SkuCommand();
            try {
                org.springframework.beans.BeanUtils.copyProperties(sku, sc);
            } catch (Exception e) {
                log.error("Copy Bean properties error for Sku");
                log.error("", e);
                throw new RuntimeException("Copy Bean properties error for Sku");
            }
        }
        return sc;
    }

    /**
     * 根据传入的分类Id查看该分类下的所有商品 KJL
     * 
     * @param id
     * @param beanPropertyRowMapper
     * @return
     */
    public List<Sku> getProductByCategoryId(Long id) {
        return skuDao.getProductByCategoryId(id, new BeanPropertyRowMapper<Sku>(Sku.class));
    }

    /**
     * 查询给定SKU查询Sn号
     * 
     * @param string
     * 
     * @param parseLong
     * @param beanPropertyRowMapperExt
     * @return
     */
    public List<SkuSnCommand> getSkuSnBySku(String string, Long whId) {
        return skuSnDao.getSkuSnBySku(string, whId, new BeanPropertyRowMapperExt<SkuSnCommand>(SkuSnCommand.class));
    }

    public Sku getSkuByBarcode1(String barCode) {
        return skuDao.getByBarcode1(barCode);

    }

    public ReturnApplication getReturnByCode(String code) {
        ReturnApplication ra = returnApplicationDao.getReturnByCode(code);
        ReturnApplicationCommand cmdRa = new ReturnApplicationCommand();
        try {
            PropertyUtil.copyProperties(ra, cmdRa);
        } catch (Exception e) {
            log.error("Copy Bean properties error for ReturnApplication");
            log.error("", e);
            throw new RuntimeException("Copy Bean properties error for ReturnApplication");
        }
        return cmdRa;
    }

    /**
     * 根据配货ID获取已取消的作业单的数量
     * 
     * @return
     */
    public Long findCancelCountByPickId(Long pickId) {
        Long countSta = pickingListDao.findCancelCountByPickId(pickId, new SingleColumnRowMapper<Long>(Long.class));
        return countSta;
    }

    public List<ReturnApplicationCommand> fingReturnSkuByRaId(Long raId) {
        return returnApplicationDao.fingReturnSkuByRaId(raId);
    }

    public List<WorkLineNo> queryWorkLineNoByOuid(Long ouid) {
        return workLineNoDao.queryWorkLineNoByOuid(ouid);
    }

    @Override
    public BiChannel getChannelVmiCode(String code) {
        return biChannelDao.getByCode(code);
    }

    @Override
    public Long findPickingListCheckmodeByPickId(Long plCmdId) {
        return pickingListDao.findPickingListByPickId(plCmdId, new SingleColumnRowMapper<Long>(Long.class));
    }

    @Override
    public Long findPickingListSpecialTypeByPickId(Long plCmdId) {
        return pickingListDao.findPickingListByPickIdS(plCmdId, new SingleColumnRowMapper<Long>(Long.class));
    }

    @Override
    public VMIBackOrder findBackPrintHanderInfo(String staid) {
        return staLineDao.findBackPrintHanderInfo(staid, new BeanPropertyRowMapper<VMIBackOrder>(VMIBackOrder.class));
    }

    @Override
    public String findPickingListPSizesByPickId(Long plCmdId) {
        return skuSizeConfigDao.findBypicklistId(plCmdId, new SingleColumnRowMapper<String>(String.class));
    }

    @Override
    public SkuSizeConfig getSkuSizeConfigById(Long id) {
        return skuSizeConfigDao.getByPrimaryKey(id);
    }

    @Override
    public String findSkuCategoriesNameById(Long id) {
        SkuCategories skuc = skuCategoriesDao.getByPrimaryKey(id);
        return skuc.getSkuCategoriesName();
    }

    public String findSkuBarcodeById(Long id) {
        Sku sku = skuDao.getByPrimaryKey(id);
        if (sku == null) {
            return null;
        } else {
            return sku.getBarCode();
        }
    }

    @Transactional(readOnly = true)
    public PickingList findPickingListById(Long id) {
        PickingList pl = pickingListDao.getByPrimaryKey(id);
        PickingList tmp = new PickingList();
        try {
            PropertyUtil.copyProperties(pl, tmp);
            tmp.setWarehouse(null);
            tmp.setCreator(null);
            tmp.setOperator(null);
        } catch (Exception e) {
            log.error("", e);
        }
        return tmp;
    }


    public List<Long> findStaListByPkId(Long pkId) {
        return staDao.findStaByPid(pkId, new SingleColumnRowMapper<Long>(Long.class));
    }

    public WhInfoTimeRef findWhInfoTimeRefById(String plCode, WhInfoTimeRefBillType type) {
        return whInfoTimeRefDao.getFirstPrintDate(plCode, type.getValue(), WhInfoTimeRefNodeType.PRING_PICKING1.getValue(), new BeanPropertyRowMapper<WhInfoTimeRef>(WhInfoTimeRef.class));
    }

    @Transactional(readOnly = true)
    public OperationUnit findOperationUnitById(Long id) {
        OperationUnit ou = operationUnitDao.getByPrimaryKey(id);
        OperationUnit tmp = new OperationUnit();
        try {
            PropertyUtil.copyProperties(ou, tmp);
            tmp.setOuType(null);
            tmp.setParentUnit(null);
            tmp.setChildrenUnits(null);
        } catch (Exception e) {
            log.error("", e);
        }
        return tmp;
    }

    /**
     * 查询配货失败作业单的数据
     */
    public List<SkuReplenishmentCommand> findReplenishSummaryForPickingFailed(Long ouId, Map<String, Object> skuInfoMap, Long terms) {
        return staErrorLineDao.findReplenishSummaryForPickingFailed(ouId, skuInfoMap, terms, new BeanPropertyRowMapperExt<SkuReplenishmentCommand>(SkuReplenishmentCommand.class));
    }

    public StockTransApplication getByCode(String code) {
        StockTransApplication sta = staDao.getByCode(code);
        StockTransApplication stas = new StockTransApplication();
        stas.setType(sta.getType());
        return stas;
    }

    /**
     * 指定作业单的行列表
     * 
     * @param staId 作业单ID
     * @return
     */
    public List<StaLineCommand> findStaLineListByStaIdWithSn(Long staId, Boolean isNotFinish, boolean isSnSku, boolean isDistinguishSnSku) {
        return staLineDao.findStaLineListByStaIdWithSn(staId, isNotFinish, isSnSku, isDistinguishSnSku, new Sort[] {new Sort("sku.bar_Code asc")}, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public void updatePLExputCountByPlId(Long plId) {
        staDao.updatePLExputCountByPlId(plId);
    }

    public List<StvLineCommand> findRecevingMoveOutboundSuggest(Long ouId, String districtCode, String locationCode, String skuCode, String barCode, String supplierCode) {
        return stvLineDao.findRecevingMoveOutboundSuggest(ouId, districtCode, locationCode, skuCode, barCode, supplierCode, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public List<StvLineCommand> findPickingReplenishQtyBySku(Long ouId, Long skuId) {
        return stvLineDao.findPickingReplenishQtyBySku(ouId, skuId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public StvLineCommand findStockSuggestBySku(Long ouId, Long skuId) {
        return stvLineDao.findStockSuggestBySku(ouId, skuId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public StvLineCommand findStockSuggestByProduct(Long ouId, Long skuId) {
        return stvLineDao.findStockSuggestByProduct(ouId, skuId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public List<MsSnReportCommand> findYesterdayData() {
        return msSnReportCommandDao.findYesterdayData(new BeanPropertyRowMapper<MsSnReportCommand>(MsSnReportCommand.class));
    }

    public List<StaLineCommand> findStaLineByStaIdAndNotSNSku(Long staId, boolean isSnSku) {
        return staLineDao.findStaLineByStaIdAndNotSNSku(staId, isSnSku, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public List<InventoryCommand> findFlittingOutInfoByStaId(Long staId) {
        return inventoryDao.findFlittingOutInfoByStaId(staId, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }

    public List<PdaPostLogCommand> findPdaLogwithGroup(String code) {
        return pdaPostLogDao.findPdaLogwithGroup(code, new BeanPropertyRowMapperExt<PdaPostLogCommand>(PdaPostLogCommand.class));
    }

    public StockTransVoucher findStvCreatedByStaId(Long staId) {
        return stvDao.findStvCreatedByStaId(staId);
    }

    public List<StvLineCommand> findPlanExeQtyByPda(Long stvId, String code) {
        return stvLineDao.findPlanExeQtyByPda(stvId, code, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }


    public InventoryCheck getInventoryCheckById(Long invCheckId) {
        return inventoryCheckDao.getByPrimaryKey(invCheckId);
    }

    public List<InventoryCheckDifferenceLineCommand> findCheckOverageByInvCk(Long invCkId, Long ouId, Long compId) {
        return inventoryCheckDifferenceLineDao.findCheckOverageByInvCk(invCkId, ouId, compId, new BeanPropertyRowMapperExt<InventoryCheckDifferenceLineCommand>(InventoryCheckDifferenceLineCommand.class));
    }

    public List<StaLineCommand> findkuByStaIdAndIsSn(Long staId, boolean isSnSku) {
        return staLineDao.findkuByStaIdAndIsSn(staId, isSnSku, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    public List<SkuSnLogCommand> findSNBySta(Long staid) {
        return snLogDao.findSNBySta(staid, new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
    }

    public List<StaDeliveryInfoCommand> findStaDeliveryInfoListByPlid(Long plid, Long ouid) {
        return staDeliveryInfoDao.findStaDeliveryInfoListByPlid(plid, ouid, new BeanPropertyRowMapper<StaDeliveryInfoCommand>(StaDeliveryInfoCommand.class));
    }

    public List<StvLineCommand> findStvLineCmdByStaId(Long staId) {
        return stvLineDao.findStvLineListByStaId(staId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public List<MsgInvoice> findVMIInvoice(Date fromDate, Date endDate, String source) {
        return msgInvoiceDao.findVMIInvoice(fromDate, endDate, source, new BeanPropertyRowMapperExt<MsgInvoice>(MsgInvoice.class));
    }

    public List<HandOverListLineCommand> findHandOverListExport(Date fromDate, Date endDate, String lpCode, List<Long> idList, Long ouId) {
        return handOverListLineDao.findHandOverListExport(fromDate, endDate, lpCode, idList, ouId, new BeanPropertyRowMapperExt<HandOverListLineCommand>(HandOverListLineCommand.class));
    }

    public List<HandOverListLineCommand> findHandOverListExport2(Date fromDate, Date endDate, String lpCode, List<Long> idList, Long ouId) {
        return handOverListLineDao.findHandOverListExport2(fromDate, endDate, lpCode, idList, ouId, new BeanPropertyRowMapperExt<HandOverListLineCommand>(HandOverListLineCommand.class));
    }

    public List<PackageInfoCommand> findDeliveryInfoList(List<Long> oulist, Long deliveryid, Long ouid, Date starttime, Date endtime) {
        return packageInfoDao.findDeliveryInfoList(oulist, deliveryid, ouid, starttime, endtime, new BeanPropertyRowMapperExt<PackageInfoCommand>(PackageInfoCommand.class));
    }

    public PoCommand findPoInfo(Long staid) {
        return staDao.findPoInfo(staid, new BeanPropertyRowMapperExt<PoCommand>(PoCommand.class));
    }

    public List<StvLineCommand> findPoConfirmStvLineBySta(Long staId) {
        return stvLineDao.findPoConfirmStvLineBySta(staId, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
    }

    public List<HandOverListLineCommand> findExportInfoByHoListId(Long hoListId, Integer status) {
        return handOverListLineDao.findExportInfoByHoListId(hoListId, status, new BeanPropertyRowMapperExt<HandOverListLineCommand>(HandOverListLineCommand.class));
    }

    public List<HandOverListLineCommand> findExportInfoByHoListId2(Long hoListId, Integer status) {
        return handOverListLineDao.findExportInfoByHoListId2(hoListId, status, new BeanPropertyRowMapperExt<HandOverListLineCommand>(HandOverListLineCommand.class));
    }

    public StockTransApplication getStaByPrimaryKey(Long id) {
        StockTransApplication sta = staDao.getByPrimaryKey(id);
        StockTransApplication stas = new StockTransApplication();
        stas.setType(sta.getType());
        stas.setCode(sta.getCode());
        return stas;
    }

    public List<PdaPostLog> findPdaErrorLogByStaCode(String staCode) {
        return pdaPostLogDao.findPdaErrorLogByStaCode(staCode, new BeanPropertyRowMapperExt<PdaPostLog>(PdaPostLog.class));
    }

    public List<InventoryCheckDifTotalLineCommand> findvmiicLineByInvCheckIdAndQty(Long invcheckid, boolean qtyStatus) {
        return vmiinvCheckLineDao.findvmiicLineByInvCheckIdAndQty(invcheckid, qtyStatus, new BeanPropertyRowMapper<InventoryCheckDifTotalLineCommand>(InventoryCheckDifTotalLineCommand.class), new Sort[] {new Sort("skuCode")});
    }

    public List<InventoryCommand> findByInventoryCheckId(Long invCkId, Boolean isSnSku) {
        return inventoryDao.findByInventoryCheckId(invCkId, null, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class), new Sort[] {new Sort("locationCode"), new Sort("skuCode")});
    }

    public List<StockTransApplicationCommand> findExportSalesSendOutInfo(Long plId) {
        return staDao.findExportSalesSendOutInfo(plId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public List<StockTransApplicationCommand> findExportreturnRegisterInfo(Long ouId) {
        return staDao.findExportreturnRegisterInfo(ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    public List<SkuSnLogCommand> findOutboundSnByStaSlipCode(String slipCode) {
        return snLogDao.findOutboundSnByStaSlipCode(slipCode, new BeanPropertyRowMapperExt<SkuSnLogCommand>(SkuSnLogCommand.class));
    }

    public List<InventoryCommand> findInventoryReportk(Long ouId) {
        return inventoryDao.findInventoryReportk(ouId, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }

    @Override
    public List<SalesReportFormCommand> findSalesReportForm(Date outboundTime, Date endOutboundTime) {

        return staDao.findSalesReportForm(outboundTime, endOutboundTime, new BeanPropertyRowMapperExt<SalesReportFormCommand>(SalesReportFormCommand.class));
    }

    @Override
    public List<StaDeliverCommand> findAllStaByPickingListId(Long id) {

        return staDeliverCommandDao.findAllStaByPickingListId(id, new BeanPropertyRowMapper<StaDeliverCommand>(StaDeliverCommand.class));
    }

    @Override
    public List<StaLineCommand> findStaLineListByStaIdWithSn(Long staId, Boolean isNotFinish, boolean isSnSku, boolean isDistinguishSnSku, Sort[] sorts) {

        return staLineDao.findStaLineListByStaIdWithSn(staId, isNotFinish, isSnSku, isDistinguishSnSku, new Sort[] {new Sort("sku.bar_Code asc")}, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    @Override
    public List<StaLineCommand> findInBoundStaLine(Long staId, Object condition) {

        return staLineDao.findInBoundStaLine(staId, condition, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    @Override
    public List<StvLineCommand> findConfirmDiversity(Long stvId) {

        return stvLineDao.findConfirmDiversity(stvId, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    /**
     * 查询存在差异的数据
     * 
     */
    public List<StvLineCommand> findInBoundIsSN(Long stvId, List<Long> stvList, Boolean isSkuSn) {

        return stvLineDao.findInBoundIsSN(stvId, stvList, isSkuSn, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    @Override
    public List<StvLineCommand> findInBound(Long stvId, List<Long> stvList) {
        return stvLineDao.findInBound(stvId, stvList, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    /**
     * 虚拟仓收货 查询存在差异的数据
     * 
     */
    public List<StvLineCommand> findInventInBoundIsSN(Long staId, List<Long> staList, Boolean isSkuSn) {

        return stvLineDao.findInventInBoundIsSN(staId, staList, isSkuSn, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
    }

    public List<StockTransApplicationCommand> findNikeCRWCartonLine(StockTransApplicationCommand staCmd, Long ouId) {
        Date startCreateTime = null;
        Date endCreateTime = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        if (staCmd != null) {
            if (staCmd.getStartCreateTime() != null) {
                startCreateTime = staCmd.getStartCreateTime();
            }
            if (staCmd.getEndCreateTime() != null) {
                endCreateTime = staCmd.getEndCreateTime();
            }

            if (StringUtils.hasLength(staCmd.getOwner())) {
                owner = staCmd.getOwner();
            }
            if (StringUtils.hasLength(staCmd.getRefSlipCode())) {
                refSlipCode = staCmd.getRefSlipCode();
            }
            if (StringUtils.hasLength(staCmd.getSlipCode1())) {
                slipCode1 = staCmd.getSlipCode1();
            }
            if (StringUtils.hasLength(staCmd.getSlipCode2())) {
                slipCode2 = staCmd.getSlipCode2();
            }
        }
        return staDao.findNikeCRWCartonLine(startCreateTime, endCreateTime, owner, slipCode2, slipCode1, refSlipCode, ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }


    public List<StockTransApplicationCommand> findNikeCRWCartonLine1(StockTransApplicationCommand staCmd, Long ouId) {
        Date startCreateTime = null;
        Date endCreateTime = null;
        String slipCode1 = null;
        String slipCode2 = null;
        String refSlipCode = null;
        String owner = null;
        if (staCmd != null) {
            if (staCmd.getStartCreateTime() != null) {
                startCreateTime = staCmd.getStartCreateTime();
            }
            if (staCmd.getEndCreateTime() != null) {
                endCreateTime = staCmd.getEndCreateTime();
            }

            if (StringUtils.hasLength(staCmd.getOwner())) {
                owner = staCmd.getOwner();
            }
            if (StringUtils.hasLength(staCmd.getRefSlipCode())) {
                refSlipCode = staCmd.getRefSlipCode();
            }
            if (StringUtils.hasLength(staCmd.getSlipCode1())) {
                slipCode1 = staCmd.getSlipCode1();
            }
            if (StringUtils.hasLength(staCmd.getSlipCode2())) {
                slipCode2 = staCmd.getSlipCode2();
            }
        }
        return staDao.findNikeCRWCartonLine1(startCreateTime, endCreateTime, owner, slipCode2, slipCode1, refSlipCode, ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }



    public void writeDataToFile(File file, String data) {
        FileWriter fw = null;
        try {
            if (!file.exists()) {
                file.createNewFile();
            }
            fw = new FileWriter(file);
            fw.write(data);
        } catch (IOException e1) {
            if (log.isErrorEnabled()) {
                log.error("Converse writeDataToFile IOException:", e1);
            }
        } finally {
            try {
                if (fw != null) fw.close();
            } catch (IOException e) {
                log.error("", e);
            }
        }
    }

    /**
     * 销售|换货出库发票导出
     */
    public List<StaInvoiceCommand> findSalesOutBoundInvoiceimport(Long ouid, String fromDate, String endDate) {

        return staInvoiceDao.findInvoicImportByOuId(ouid, fromDate, endDate);
    }

    /**
     * 便利店自提信息导出
     */
    public List<ConvenienceStoreOrderInfo> findConvenienceStoreOrderInfo(Date fromDate, Date endDate, Long ouId) {
        return convenienceStoreOrderInfoDao.findConvenienceStoreOrderInfo(fromDate, endDate, ouId, new BeanPropertyRowMapper<ConvenienceStoreOrderInfo>(ConvenienceStoreOrderInfo.class));
    }

    /**
     * 查询外包仓商品关联
     */
    @Override
    public Pagination<SkuWarehouseRefCommand> findSkuWarehouseRefListAll(int start, int size, Long brandId, String source, String sourcewh, Long channelId, Sort[] sorts) {
        if (!StringUtils.hasText(source)) {
            source = null;
        }
        if (!StringUtils.hasText(sourcewh)) {
            sourcewh = null;
        }

        return skuWarehouseRefDao.findSkuWarehouseRefListAll(start, size, brandId, source, sourcewh, channelId, new BeanPropertyRowMapperExt<SkuWarehouseRefCommand>(SkuWarehouseRefCommand.class), sorts);
    }

    @Override
    public SkuWarehouseRefCommand findSkuWarehouseRefList(String sourcewh) {

        return skuWarehouseRefDao.findSkuWarehouseRefList(sourcewh, new BeanPropertyRowMapperExt<SkuWarehouseRefCommand>(SkuWarehouseRefCommand.class));
    }

    /**
     * 获取品牌（下拉框）
     */
    @Override
    public List<SkuWarehouseRefCommand> findByBrandName() {

        return skuWarehouseRefDao.findByBrandName(new BeanPropertyRowMapper<SkuWarehouseRefCommand>(SkuWarehouseRefCommand.class));
    }

    /**
     * 获取品牌（下拉框）
     */
    @Override
    public List<SkuWarehouseRefCommand> findByChannelName() {

        return skuWarehouseRefDao.findByChannelName(new BeanPropertyRowMapper<SkuWarehouseRefCommand>(SkuWarehouseRefCommand.class));
    }

    /**
     * 加载 仓库下拉列表 用于新建
     * 
     * @param rowMap
     * @return
     */
    @Override
    public List<SkuWarehouseRefCommand> findBrandNameAll() {

        return skuWarehouseRefDao.findBrandNameAll(new BeanPropertyRowMapper<SkuWarehouseRefCommand>(SkuWarehouseRefCommand.class));
    }

    /**
     * 加载店铺下拉列表 用于新建
     * 
     * @param rowMap
     * @return
     */
    @Override
    public List<BiChannel> findChannelNameAll() {
        return biChannelDao.findChannelNameAll(new BeanPropertyRowMapper<BiChannel>(BiChannel.class));
    }

    /**
     * 插入外包仓品牌与仓库关联数据
     * 
     * @param brandId
     * @param source
     * @param whid
     */
    @Override
    public void insertSkuWarehouseRef(Long brandId, String source, String sourcewh, Long channelId) {
        skuWarehouseRefDao.insertSkuWarehouseRef(brandId, source, sourcewh, channelId);

    }

    @Override
    public PickingListPackageCommand findPickingListPackageByTrackingNo(String trackingNo, Long wh_ou_id) {
        PickingListPackageCommand plpc = null;
        if (StringUtils.hasText(trackingNo)) {
            plpc = pickingListPackageDao.findPickingListPackageByTrackingNo(trackingNo, new BeanPropertyRowMapper<PickingListPackageCommand>(PickingListPackageCommand.class));
            return plpc;
        } else {
            throw new BusinessException(ErrorCode.ERROR_LPCODE_ISNULL, new Object[] {trackingNo});
        }
    }

    /**
     * 获取配货失败 缺货SKU的信息
     */
    @Override
    public List<StaErrorLineCommand> findStaFailure(Long ouid) {
        return staErrorLineDao.findStaFailure(ouid);

    }


    @Override
    public PickingListCommand findSlipCodeAndPickingListCodeByStaCode(Long ouId, String code) {
        return pickingListDao.findSlipCodeAndPickingListCodeByStaCode(ouId, code, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }

    @Override
    public StaDeliveryInfo getVmiReturnAddress(Long id) {
        StaDeliveryInfo s = new StaDeliveryInfo();
        StaDeliveryInfo staDeliveryInfo = staDeliveryInfoDao.getByPrimaryKey(id);
        BeanUtils.copyProperties(staDeliveryInfo, s);
        s.setPackageInfos(null);
        s.setTransTimeType(null);
        s.setTransType(null);
        s.setSta(null);
        s.setReturnReasonType(null);
        return s;
    }

    @Override
    public void editVmiReturnAddress(Long staid, Long ouid, Long uid, StaDeliveryInfo s) {
        User user = userDao.getByPrimaryKey(uid);
        StockTransApplication sta = staDao.getByPrimaryKey(staid);
        sta.setCreator(user);
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        StaDeliveryInfo sd = staDeliveryInfoDao.getByPrimaryKey(staid);
        String oldLpcode = sd.getLpCode();
        String oldtranno = sd.getTrackingNo();
        sd.setProvince(s.getProvince());
        sd.setCity(s.getCity());
        sd.setDistrict(s.getDistrict());
        sd.setAddress(s.getAddress());
        sd.setReceiver(s.getReceiver());
        sd.setTelephone(s.getTelephone());
        sd.setLastModifyTime(new Date());
        if (!StringUtil.isEmpty(s.getLpCode())) {
            // 如果有改动物流商需要修改对应lpcode
            sd.setTrackingNo(null);
            sd.setLpCode(s.getLpCode());
        }
        staDeliveryInfoDao.save(sd);
        staDeliveryInfoDao.flush();
        if (!StringUtil.isEmpty(s.getLpCode())) {
            // 如果有改动物流商需要修改对应物流单号&释放除了YTO和SF的物流单号
            try {
                transOlManager.matchingTransNo(sta.getId(), s.getLpCode(), ouid);
            } catch (Exception e) {
                throw new BusinessException(ErrorCode.TRANS_CAN_NOT_SEND, new Object[] {sta.getCode()});
            }

            // 释放物流单号
            if (!StringUtil.isEmpty(oldLpcode) && !StringUtil.isEmpty(oldtranno)) {
                if (!oldLpcode.equals("SF") && !oldLpcode.equals("YTO")) {
                    WhTransProvideNo wh = whTransProvideNoDao.getByTranNoAndStaIdAndLpcode(oldtranno, sta.getId(), oldLpcode);
                    if (wh != null) {
                        wh.setStaid(null);
                        whTransProvideNoDao.save(wh);
                    }
                }
            }
        }
    }

    @Override
    public Integer checkCartonstatus(Long staid) {
        List<Carton> cartons = cartonDao.checkCartonstatus(staid, new BeanPropertyRowMapper<Carton>(Carton.class));
        return cartons.size();
    }

    @Override
    public Long getVmiReturnStaIdByCarton(Long id) {
        Carton c = cartonDao.getByPrimaryKey(id);
        Long staid = c.getSta().getId();
        return staid;
    }



    @Override
    public void deleteDistributionRuleById(Long ruleId) {
        if (ruleId != null) {
            DistributionRule dr = distributionRuleDao.getByPrimaryKey(ruleId);
            if (dr != null) {
                dr.setStatus(DistributionRuleStatus.DISABLE);
                dr.setLastModifyTime(new Date());
                distributionRuleDao.save(dr);
                distributionRuleDao.flush();
            } else {
                throw new BusinessException(ErrorCode.DISTRIBUTION_RULE_NOT_FOUND, new Object[] {ruleId});
            }
        }
    }

    @Override
    public List<DistributionRuleCondition> getDistributionRuleConditionList() {
        return distributionRuleConditionDao.getDistributionRuleConditionList();
    }

    @Override
    public List<DistributionRuleConditionCommand> getDistributionRuleConditionDetail(String groupCode) {
        return distributionRuleConditionDao.getDistributionRuleConditionDetail(groupCode, new BeanPropertyRowMapperExt<DistributionRuleConditionCommand>(DistributionRuleConditionCommand.class));
    }

    @Override
    public Integer checkRuleNameIsExist(String ruleName) {
        return distributionRuleDao.checkRuleNameIsExist(ruleName, new BeanPropertyRowMapper<DistributionRule>(DistributionRule.class)).size();
    }

    @Override
    public void newDistributionRuleAndDetail(String ruleName, Long ouId, Long createId, List<Long> idList, String remark) {
        // 新建配货规则表
        DistributionRule dr = new DistributionRule();
        OperationUnit ou = operationUnitDao.getByPrimaryKey(ouId);
        if (ou == null) {
            throw new BusinessException(ErrorCode.OPERATION_UNIT_NOT_FOUNT);
        }
        User u = userDao.getByPrimaryKey(createId);
        if (u == null) {
            throw new BusinessException(ErrorCode.USER_NOT_FOUND);
        }
        dr.setName(ruleName);
        dr.setOuId(ou);
        dr.setCreatorId(u);
        dr.setCreateTime(new Date());
        dr.setLastModifyTime(new Date());
        dr.setStatus(DistributionRuleStatus.ENABLE);
        dr.setVersion(0);
        distributionRuleDao.save(dr);
        // 新建配货规则明细表
        DistributionRuleDetail drd = null;
        DistributionRuleCondition drc = null;
        int i = 0;
        for (Long id : idList) {
            drc = distributionRuleConditionDao.getByPrimaryKey(id);
            drd = new DistributionRuleDetail();
            drd.setConditionId(drc);
            DistributionRuleConditionType type = drc.getType();
            if (type.equals(DistributionRuleConditionType.INPUT)) {
                String[] remarks = remark.split(",");
                drd.setRemark(remarks[i]);
                i++;
            } else {
                drd.setRemark(null);
            }
            drd.setRuleId(dr);
            distributionRuleDetailDao.save(drd);
            distributionRuleDetailDao.flush();
        }
    }

    @Override
    public List<DistributionRuleDetailCommand> getDistributionRuleConditionCurrentDetail(Long ouid, Long ruleId) {
        Long id = null;
        if (ruleId != null) {
            id = ruleId;
        }
        return distributionRuleDetailDao.getDistributionRuleConditionCurrentDetail(ouid, id, new BeanPropertyRowMapperExt<DistributionRuleDetailCommand>(DistributionRuleDetailCommand.class));
    }

    @Override
    public void updateDistributionRuleAndDetail(String ruleName, Long ouId, Long createId, List<Long> idList, String remark) {
        DistributionRule dbr = null;
        if (StringUtils.hasText(ruleName)) {
            dbr = distributionRuleDao.getIdByRuleName(ruleName, new BeanPropertyRowMapper<DistributionRule>(DistributionRule.class));
        }
        dbr = distributionRuleDao.getByPrimaryKey(dbr.getId());
        if (dbr == null) {
            throw new BusinessException(ErrorCode.DISTRIBUTION_RULE_NOT_FOUND);
        }
        List<DistributionRuleDetailCommand> dbrdList = distributionRuleDetailDao.getDistributionRuleConditionCurrentDetail(ouId, dbr.getId(), new BeanPropertyRowMapperExt<DistributionRuleDetailCommand>(DistributionRuleDetailCommand.class));
        if (dbrdList != null) {
            // 删除原有条件明细
            for (DistributionRuleDetailCommand d : dbrdList) {
                distributionRuleDetailDao.deleteByPrimaryKey(d.getId());
            }
            distributionRuleDetailDao.flush();
        }
        // 新建配货规则明细表
        DistributionRuleDetail drd = null;
        DistributionRuleCondition drc = null;
        int i = 0;
        for (Long id : idList) {
            drc = distributionRuleConditionDao.getByPrimaryKey(id);
            drd = new DistributionRuleDetail();
            drd.setConditionId(drc);
            DistributionRuleConditionType type = drc.getType();
            if (type.equals(DistributionRuleConditionType.INPUT)) {
                String[] remarks = remark.split(",");
                drd.setRemark(remarks[i]);
                i++;
            } else {
                drd.setRemark(null);
            }
            drd.setRuleId(dbr);
            distributionRuleDetailDao.save(drd);
            distributionRuleDetailDao.flush();
        }
        User user = userDao.getByPrimaryKey(createId);
        if (user == null) {
            throw new BusinessException(ErrorCode.USER_NOT_FOUND);
        }
        dbr.setName(ruleName);
        dbr.setCreatorId(user);
        dbr.setLastModifyTime(new Date());
        distributionRuleDao.save(dbr);
    }

    @Override
    public Pagination<DistributionRuleDetailCommand> getDistributionRuleConditionCurrentDetail(int start, int pageSize, Long ouid, Long ruleId, Sort[] sorts) {
        Long id = null;
        if (ruleId != null) {
            id = ruleId;
        }
        return distributionRuleDetailDao.getDistributionRuleConditionCurrentDetail(start, pageSize, ouid, id, new BeanPropertyRowMapperExt<DistributionRuleDetailCommand>(DistributionRuleDetailCommand.class), sorts);
    }

    @Override
    public Map<String, Object> findSkuInventory(File file, Long ouid, String invowner) {
        Map<String, Object> beans = new HashMap<String, Object>();
        Map<String, Object> maprs = new HashMap<String, Object>();
        ReadStatus rs;
        try {
            rs = skunumberMainImport.readSheet(new FileInputStream(file), 0, beans);
            if (rs == null) {
                throw new BusinessException(ErrorCode.SYSTEM_ERROR);
            }
        } catch (FileNotFoundException e1) {
            if (logger.isErrorEnabled()) {
                logger.error("findSkuInventory FileNotFoundException:" + ouid, e1);
            }
            throw new BusinessException(ErrorCode.SYSTEM_ERROR);
        }
        // 验证
        String type = (String) beans.get("type");
        final ExcelSheet sheetOut = skunumberMainImport.getDefinition().getExcelSheets().get(0);
        List<ExcelBlock> blocksOut = sheetOut.getSortedExcelBlocks();
        int intType = 0;
        if ("SKU条形码".equals(type)) {
            intType = 1;
        } else if ("SKU编码".equals(type)) {
            intType = 0;
        } else if ("货号".equals(type)) {
            intType = 2;
        } else {
            rs.setStatus(-1);
            String strCell = ExcelUtil.getCellIndex(blocksOut.get(1).getStartRow(), blocksOut.get(1).getStartCol());
            rs.addException(new BusinessException(ErrorCode.EXCEL_IMPORT_INVENTORY_INITIALIZE_TYPE, new Object[] {SHEET_0, strCell}));
        }
        @SuppressWarnings("unchecked")
        List<Sku> skuList = (List<Sku>) beans.get("sku");
        String barcode = null;
        String skucode = null;
        String upc = null;
        List<InventoryCommand> command = new ArrayList<InventoryCommand>();
        if (skuList.size() < 1000) {
            if (intType == 1) {
                for (int i = 0; i < skuList.size(); i++) {
                    if (i == 0) {
                        barcode = "'" + skuList.get(i).getBarCode() + "'";
                    } else {
                        barcode += ",'" + skuList.get(i).getBarCode() + "'";
                    }
                }
            } else if (intType == 0) {
                for (int i = 0; i < skuList.size(); i++) {
                    if (i == 0) {
                        skucode = "'" + skuList.get(i).getBarCode() + "'";
                    } else {
                        skucode += ",'" + skuList.get(i).getBarCode() + "'";
                    }
                }
            } else {
                for (int i = 0; i < skuList.size(); i++) {
                    if (i == 0) {
                        upc = "'" + skuList.get(i).getBarCode() + "'";
                    } else {
                        upc += ",'" + skuList.get(i).getBarCode() + "'";
                    }
                }
            }
            if (!StringUtils.hasText(invowner)) {
                invowner = null;
            }
            if (barcode != null || skucode != null || upc != null) {
                command = inventoryDao.findSkuInventory(barcode, skucode, upc, ouid, invowner, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
            }
            if (command.size() == 0) {
                rs.setStatus(2);
                maprs.put("command", command);
                maprs.put("rs", rs);
            } else {
                rs.setStatus(1);
                maprs.put("command", command);
                maprs.put("rs", rs);

            }

        } else {
            rs.setStatus(0);
            maprs.put("command", command);
            maprs.put("rs", rs);
        }

        return maprs;

    }

    /**
     * 获取可分批的订单
     * 
     * @param start
     * @param pageSize
     * @param whId
     * @param ocpSort
     */
    public Pagination<StockTransApplicationCommand> findStasByOcpOrder(int start, int pageSize, String ocpBatchCode, Long whId, Boolean autoOcp) {
        Pagination<StockTransApplicationCommand> p = staDao.findStasByOcpOrder(start, pageSize, null, ocpBatchCode, whId, autoOcp, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        return p;
    }

    @Override
    public List<StaLineCommand> findHandStaLineStarbucksBySta(Long staId, Sort[] sorts) {
        return staLineDao.findHandStaLineStarbucksBySta(staId, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }

    /**
     * 平台对接编码下拉列表
     */
    @Override
    public List<InventoryCommand> findExtCode1(Long ouid) {
        List<InventoryCommand> list = inventoryDao.findExtCode1(ouid, new BeanPropertyRowMapper<InventoryCommand>(InventoryCommand.class));
        return list;
    }


    /**
     * 将订单设置为占用批占用中并返回是否有下一批次
     * 
     * @param batchCode
     * @param staBatchLimit
     */
    public Integer updateStaOcpBatchCode(String batchCode, Long staBatchLimit) {
        Integer staCount = staDao.updateStaOcpBatchCode(batchCode, staBatchLimit);
        return staCount;
    }

    /**
     * 统计此批次订单中有多少仓库
     * 
     * @param batchCode
     * @return
     */
    public List<Long> findOuIdByOcpBatchCode(String batchCode) {
        return staDao.findOuIdByOcpBatchCode(batchCode, new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * 根据参数将一定数量的订单按占用批编码设为一个批次
     * 
     * @param ocpBatchCode
     * @param ocpCode
     * @param mainWhId
     * @param autoOcp
     * @param ocpStaLimit
     */
    public List<Long> ocpStaByOcpCode(Long mainWhId, Boolean autoOcp, Integer ocpStaLimit, Integer ocpErrorQty, String saleModle, String isYs, String areaCode) {
        return staDao.ocpStaByOcpCode(mainWhId, autoOcp, ocpStaLimit, ocpErrorQty, saleModle, isYs, areaCode, new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * 根据占用批编码处理异常占用批
     * 
     * @param ocpCode
     */
    public void updateStaByOcpCode(String ocpCode, Long staId) {
        staDao.updateStaByOcpCode(ocpCode, staId);
    }

    @Override
    public BiChannel getChannelVmiCodeById(Long id) {
        return biChannelDao.getByPrimaryKey(id);
    }

    @Override
    public StockTransVoucherCommand findIsSnByStvId(Long stvId) {
        StockTransVoucherCommand stv = stvDao.findIsSnByStvId(stvId, new BeanPropertyRowMapperExt<StockTransVoucherCommand>(StockTransVoucherCommand.class));
        return stv;
    }

    /**
     * 根据运单号查找退货申请
     */
    public ReturnApplicationCommand findReturnAppByTrackNo(Long ouId, String trackNo) {
        return returnApplicationDao.findReturnAppByTrackingNo(ouId, trackNo, new BeanPropertyRowMapper<ReturnApplicationCommand>(ReturnApplicationCommand.class));
    }

    @Override
    public void updateReturnDoc(File file, String code) {
        // 读取库存同步配置信息
        Map<String, String> cfg = configManager.getEbsFTPConfig();
        // WMS 本地目录文件生成目录
        String localDir = cfg.get(Constants.LOC_DOC_PATH);
        // 读取生成目录下所有文件，剪切到备份目录。
        File f = new File(localDir);
        if (!f.exists()) {
            f.mkdirs();
        }
        try {
            // 判断是否存在同名文件，如存在删除旧的上传新的
            File[] files = f.listFiles();
            for (File file2 : files) {
                if (file2.getName().equals(code + ".doc")) {
                    file2.delete();
                }
            }
            // 复制文件
            FileUtils.copyFileToDirectory(file, new File(localDir), true);
            // 文件重命名
            File resFile = new File(localDir + "/" + file.getName());
            File newFile = new File(localDir + "/" + code + ".doc");
            resFile.renameTo(newFile);
            file.delete();
        } catch (Exception e) {
            if (logger.isErrorEnabled()) {
                logger.error("updateReturnDoc Exception:" + code, e);
            }
        }

    }

    @Override
    public void createWmsOtherOutBoundInvNoticeOms(Long staId, Long status, WmsOtherOutBoundInvNoticeOmsStatus wstatus) {
        String batchCode = Long.valueOf(new Date().getTime()).toString();
        WmsOtherOutBoundInvNoticeOms wto = new WmsOtherOutBoundInvNoticeOms();
        wto.setCreateTime(new Date());
        wto.setBatchCode(batchCode);
        wto.setFinishErrorCount(0l);
        wto.setFinishIsSend(wstatus.getValue());
        wto.setOccupationErrorCount(0l);
        wto.setOccupationIsSend(0l);
        wto.setCancelErrorCount(0l);
        if (wstatus.getValue() == 3) {
            InventoryCheck ic = inventoryCheckDao.getByPrimaryKey(staId);
            wto.setStaCode(ic.getCode());
            wto.setStaId(ic.getId());
            wto.setWhOuId(ic.getOu());
            wto.setOwner(ic.getShop().getCode());
        } else {
            StockTransApplication sta = staDao.getByPrimaryKey(staId);
            wto.setStaCode(sta.getCode());
            wto.setStaId(sta.getId());
            wto.setWhOuId(sta.getMainWarehouse());
            wto.setOwner(sta.getOwner());
        }
        wto.setStatus(status);// 2为占用、10为完成、17为取消、20为作废
        wto.setLastModifyTime(new Date());
        wmsOtherOutBoundInvNoticeOmsDao.save(wto);
    }

    @Override
    public void updateWmsOtherOutBoundInvNoticeOms(Long staId, Long status, WmsOtherOutBoundInvNoticeOmsStatus wstatus) {
        WmsOtherOutBoundInvNoticeOms wtoms = null;
        if (wstatus.getValue() == 3) {// VMI库存调整，涉及的是checkInventory逻辑
            InventoryCheck ic = inventoryCheckDao.getByPrimaryKey(staId);
            wtoms = wmsOtherOutBoundInvNoticeOmsDao.findOtherOutInvNoticeOmsByStaCode(ic.getCode());
            if (wtoms != null) {
                wmsOtherOutBoundInvNoticeOmsDao.updateOtherOutBoundInvNoticeOmsByStaCode(ic.getCode(), status);
            }
        } else {
            // 其他出库更新中间表，传递明细给oms/pac
            StockTransApplication sta = staDao.getByPrimaryKey(staId);
            wtoms = wmsOtherOutBoundInvNoticeOmsDao.findOtherOutInvNoticeOmsByStaCode(sta.getCode());
            if (wtoms != null) {
                wmsOtherOutBoundInvNoticeOmsDao.updateOtherOutBoundInvNoticeOmsByStaCode(sta.getCode(), status);
            }
        }
    }

    /**
     * 判断订单是否有装箱
     * 
     * @param staid
     * @return
     */
    public boolean judgeCarton(Long staid) {
        List<Carton> c = cartonDao.checkCartonstatus(staid, new BeanPropertyRowMapper<Carton>(Carton.class));
        if (c == null || c.isEmpty()) {
            return false;
        }
        return true;
    }

    @Override
    public Pagination<StockTransApplicationCommand> findCartonStaByPagination(StockTransApplication sta, OperationUnit wh, Date startTime, Date endTime, Date arriveStartTime, Date arriveEndTime, int type, int statu, int start, int size, Sort[] sorts) {
        String code = null;
        String refcode = null;
        String owner = null;
        String locked = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode();
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refcode = sta.getRefSlipCode();
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner();
            }
        }
        ArrayList<Integer> types = new ArrayList<Integer>();
        ArrayList<Integer> status = new ArrayList<Integer>();
        status.add(StockTransApplicationStatus.CREATED.getValue());
        status.add(StockTransApplicationStatus.PARTLY_RETURNED.getValue());
        status.add(StockTransApplicationStatus.FROZEN.getValue());
        status.add(StockTransApplicationStatus.FINISHED.getValue());
        types.add(StockTransApplicationType.VMI_INBOUND_CONSIGNMENT.getValue());
        types.add(StockTransApplicationType.INBOUND_PURCHASE.getValue());
        types.add(StockTransApplicationType.INBOUND_SETTLEMENT.getValue());
        types.add(StockTransApplicationType.INBOUND_CONSIGNMENT.getValue());
        if (type != 0) {
            types.clear();
            types.add(type);
        }
        if (statu != 0) {
            status.clear();
            status.add(statu);
        }
        return staDao.findFreezeCartonStaByTypeBYPagination(start, size, types, status, locked, wh.getId(), code, refcode, owner, startTime, endTime, arriveStartTime, arriveEndTime, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }


    @Override
    public boolean checkingRootStaCompleteQty(Long id) {
        boolean flag = false;
        Long rootSum = staDao.findSurplusPlanByStaId(id, new SingleColumnRowMapper<Long>(Long.class));
        if (rootSum == 0) {
            flag = true;
        }
        return flag;
    }

    /**
     * 判断该仓库是否需要复核称重
     * 
     * @param staid
     * @return
     */
    public boolean checkWeigh(Long ouId) {
        Warehouse wh = warehouseDao.getByOuId(ouId);
        if (null == wh || null == wh.getIsBigLuxuryWeigh() || !wh.getIsBigLuxuryWeigh()) {
            return false;
        }
        return true;
    }

    @Override
    public Pagination<WmsInvoiceOrder> queryInvoiceOrderExport(int start, int pageSize, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, WmsInvoiceOrder wioc, Sort[] sorts) {
        String owner = null;
        String orderCode = null;
        String batchCode = null;
        String lpCode = null;
        String transNo = null;
        String systemKey = null;
        Integer intStatus = null;
        if (StringUtils.hasText(wioc.getOwner())) {
            owner = wioc.getOwner() + "%";
        }
        if (StringUtils.hasText(wioc.getOrderCode())) {
            orderCode = wioc.getOrderCode();
        }
        if (StringUtils.hasText(wioc.getBatchCode())) {
            batchCode = wioc.getBatchCode();
        }
        if (StringUtils.hasText(wioc.getLpCode())) {
            lpCode = wioc.getLpCode();
        }
        if (StringUtils.hasText(wioc.getTransNo())) {
            transNo = wioc.getTransNo();
        }
        if (StringUtils.hasText(wioc.getSystemKey())) {
            systemKey = wioc.getSystemKey();
        }
        if (null != wioc.getStatus()) {
            intStatus = wioc.getStatus().getValue();
        }
        Pagination<WmsInvoiceOrder> p =
                wmsInvoiceOrderDao.findWmsInvoiceOrderList(start, pageSize, createTime, endCreateTime, finishTime, endFinishTime, systemKey, orderCode, owner, intStatus, batchCode, wioc.getPgIndex(), lpCode, transNo,
                        new BeanPropertyRowMapper<WmsInvoiceOrder>(WmsInvoiceOrder.class), sorts);
        return p;
    }

    @Deprecated
    @Override
    public Map<String, String> checkAllWmsInvoiceOrder(List<Long> wioIdlist, Long ouId) {
        Map<String, String> map = new HashMap<String, String>();
        map.put("flag", "false");
        map.put("batchNo", "false");
        // 接收到发票单时如果没有物流商默认匹配EMS，现只支持EMS、SF、STO 3家快递电子运单接口
        setInvoiceOrderLogistics(wioIdlist, ouId);
        // 匹配运单号通用
        transOlManagerProxy.matchingTransNoByInvoiceOrder(wioIdlist);// 暂时关闭
        // 所有选择没有批次操作
        List<Long> wioList = wmsInvoiceOrderDao.findAllWmsInvoiceOrderByListId("isNull", wioIdlist, new SingleColumnRowMapper<Long>(Long.class));
        if (wioList.size() == wioIdlist.size()) {
            map.put("flag", "true");
            String dateStr = new SimpleDateFormat("yyyyMMdd").format(new Date());
            String longs = wmsInvoiceOrderDao.findTheMaxBatchNoByToday(dateStr + "%", new SingleColumnRowMapper<String>(String.class));
            String temp = null;
            if (longs != null) {
                temp = haoAddOne(longs);
            } else {
                temp = dateStr + haoAddOne("0");
            }
            map.put("batchNo", temp);
            Long pgIndex = 0L;
            for (Long wioId : wioList) {
                ++pgIndex;
                wmsInvoiceOrderDao.updateWmsInvoiceOrderByWioId(wioId, temp, pgIndex);
            }
            return map;
        }

        // 所以选择已经存在批次操作
        List<Long> tempList = wmsInvoiceOrderDao.findAllWmsInvoiceOrderByListId("notNull", wioIdlist, new SingleColumnRowMapper<Long>(Long.class));
        List<String> wioList1 = wmsInvoiceOrderDao.findDistinctBatchNoExist(wioIdlist, new SingleColumnRowMapper<String>(String.class));
        if ((wioList1.size() > 0 && wioList1.size() == 1) && (tempList.size() == wioIdlist.size())) {
            map.put("flag", "trueExist");
            map.put("batchNo", wioList1.get(0));
            return map;
        }

        return map;
    }

    // 设置发票订单物流商
    public void setInvoiceOrderLogistics(List<Long> wioIdlist, Long ouId) {
        for (Long wioId : wioIdlist) {
            WmsInvoiceOrder wio = wmsInvoiceOrderDao.getByPrimaryKey(wioId);
            // 没有物流商推荐EMS
            if (StringUtils.isEmpty(wio.getLpCode())) {
                wio.setLpCode(Transportator.EMS);
            } else {
                // 有物流商，不是EMS、SF、STO则改为EMS
                if (!Transportator.EMS.equals(wio.getLpCode()) && !Transportator.SF.equals(wio.getLpCode()) && !Transportator.STO.equals(wio.getLpCode())) {
                    wio.setLpCode(Transportator.EMS);
                }
                // 物流服务商是否在店铺所属的逻辑仓可用
                List<TransDeliveryCfgCommand> tList = transDeliveryCfgDao.findTransCfgByWhOuIdAndLpCode(ouId, wio.getLpCode(), new BeanPropertyRowMapperExt<TransDeliveryCfgCommand>(TransDeliveryCfgCommand.class));
                if (tList.size() <= 0) {
                    wio.setLpCode(Transportator.EMS);
                }
            }
        }
    }



    // 流水号加1后返回，流水号长度为5
    public static String haoAddOne(String liuShuiHao) {
        Long longHao = Long.parseLong(liuShuiHao);
        longHao++;
        DecimalFormat df = new DecimalFormat(Constants.STR_FORMAT);
        return df.format(longHao);

    }

    @Override
    public List<WmsInvoiceOrderCommand> findWmsInvoiceOrderByWioIdlist(List<Long> wioIdlist) {
        return wmsInvoiceOrderDao.findWmsInvoiceOrderByWioIdlist(wioIdlist, new BeanPropertyRowMapper<WmsInvoiceOrderCommand>(WmsInvoiceOrderCommand.class));
    }

    @Override
    public List<WmsInvoiceOrderCommand> findWmsInvoiceOrderBySlipCode(String slipCode, Long ouId) {
        return wmsInvoiceOrderDao.findWmsInvoiceOrderBySlipCode(ouId, slipCode, new BeanPropertyRowMapper<WmsInvoiceOrderCommand>(WmsInvoiceOrderCommand.class));
    }

    @Override
    public void updateWmsInvoiceOrderStatus(List<Long> wioIdlist, Long ouId) {
        for (Long wioId : wioIdlist) {
            WmsInvoiceOrder wio = wmsInvoiceOrderDao.getByPrimaryKey(wioId);
            if (wio.getStatus() != StockTransApplicationStatus.FINISHED) {
                staIntransitForOnLineTransOrder(wio);
            }
            wmsInvoiceOrderDao.updateWmsInvoiceOrderStatusByWioIdList(wioId, DefaultStatus.FINISHED.getValue());
        }
    }

    /**
     * 发票打印完成注册在线快递订单回传信息
     * 
     * @param sta
     * @param wh
     */
    private void staIntransitForOnLineTransOrder(WmsInvoiceOrder wio) {
        String lpcode = wio.getLpCode();
        TransOlInterface transol = transOnLineFactory.getTransOnLineForFillInInvoice(lpcode);
        if (transol != null) {
            transol.setRegistConfirmInvoiceOrder(wio);
        }
    }

    @Override
    public Map<String, List<Long>> findInvoiceStaId(String[] plId) {
        Map<String, List<Long>> map = new HashMap<String, List<Long>>();
        for (int i = 0; i < plId.length; i++) {
            List<Long> list = new ArrayList<Long>();
            Long id = Long.parseLong(plId[i]);
            list.add(id);
            List<StaInvoiceCommand> invoiceCommands = staInvoiceDao.findInvoiceByPlid(id);
            if (invoiceCommands.size() > 0) {
                if (map.containsKey(invoiceCommands.get(0).getCompanyName())) {
                    List<Long> plIds = map.get(invoiceCommands.get(0).getCompanyName());
                    plIds.add(id);
                    map.put(invoiceCommands.get(0).getCompanyName(), plIds);
                } else {
                    map.put(invoiceCommands.get(0).getCompanyName(), list);
                }
            }

        }
        return map;
    }

    public void staSortingCheckAndsalesStaOutBoundHand(List<String> snlist, List<GiftLine> glList, String trans_no, List<PackageInfo> packageInfos, Long staId, Long ouid, String lineNo, Long userId, BigDecimal weight, List<StaAdditionalLine> saddlines) {
        // 核对
        List<PackageInfo> infos = new ArrayList<PackageInfo>();
        if (StringUtils.hasText(trans_no)) {
            PackageInfo info = new PackageInfo();
            info.setTrackingNo(trans_no);
            infos.add(info);
            packageInfos.add(info);
        } else {
            infos = packageInfos;
        }

        staSortingCheck(snlist, glList, infos, staId, ouid, lineNo, userId);
        // 称重出库
        for (PackageInfo packageInfo : packageInfos) {
            salesStaOutBoundHand(staId, userId, false, ouid, packageInfo.getTrackingNo(), weight, saddlines, false, null);
        }


    }

    /**
     * 大件复核称重/单件
     */
    public void checkSingleStaAndSalesStaOutbound(Long staId, String trackingNo, String lineNo, String sn, Long userId, Long ouId, BigDecimal weight, List<StaAdditionalLine> saddlines) {
        int w = weight.compareTo(BigDecimal.ZERO);
        if (weight != null && w > 0) {
            // 核对
            checkSingleSta(staId, trackingNo, lineNo, sn, userId);
            // 出库
            salesStaOutBoundHand(staId, userId, false, ouId, trackingNo, weight, saddlines, false, null);
        } else {
            throw new BusinessException(ErrorCode.WEIGHT_IS_ZERO);
        }
    }

    /**
     * 获取顺丰确认队列
     * 
     * @param count
     * @return
     */
    public List<SfConfirmOrderQueue> findExtOrder(Long count) {
        return sfConfirmOrderQueueDao.findExtOrder(count);
    }

    @Override
    public void deletePackageInfo(String slipCode) {
        StockTransApplication sta = staDao.getByCode(slipCode);
        if (sta != null) {
            packageInfoDao.deletePackageInfoByStaId(sta.getId());
            staAdditionalLineDao.deleteStaAddLineByStaId(sta.getId());
        }

    }

    @Override
    public Warehouse operationUnitQuery(Long ouId) {
        Warehouse warehouse = warehouseDao.getByOuId(ouId);
        return warehouse;
    }

    @Override
    public void vmiReturnOrderBinding(String staCode, String slipCode) {
        StockTransApplication stasuccess = staDao.findReturnExecuteSuccess(staCode, new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        if (stasuccess != null) {
            throw new BusinessException(ErrorCode.RETURN_ORDER_STA_BINDING_SUCCESS, new Object[] {staCode});
        }
        StockTransApplication staSlipCode = staDao.findReturnMaxWarehouseOrder(slipCode, new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        if (null != staSlipCode) {
            throw new BusinessException(ErrorCode.RETURN_ORDER_STA_IS_BINDING, new Object[] {slipCode});
        }
        StockTransApplication sta = staDao.getByCode(staCode);
        sta.setRefSlipCode(slipCode);
        staDao.save(sta);
    }

    @Override
    public void vmireturnRemoreOrderbinding(String staCode, String slipCode) {
        StockTransApplication stasuccess = staDao.findReturnExecuteSuccess(staCode, new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        if (stasuccess != null) {
            throw new BusinessException(ErrorCode.RETURN_ORDER_STA_BINDING_SUCCESS, new Object[] {staCode});
        }
        StockTransApplication sta = staDao.findNotExecuteReturnOrder(staCode, new BeanPropertyRowMapper<StockTransApplication>(StockTransApplication.class));
        if (sta != null) {
            throw new BusinessException(ErrorCode.RETURN_ORDER_STA_BINDING_IS_EXECUTE, new Object[] {slipCode});
        }
        StockTransApplication staExe = staDao.getByCode(staCode);
        staExe.setRefSlipCode("");
        staDao.save(staExe);
    }

    /**
     * STO优化 DAEMON
     */
    public Long getTranNoNumberByLpCode() {
        return whTransProvideNoDao.getTranNoNumberByLpCode(Transportator.STO, null, new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * STO优化 DAEMON
     */
    public List<Long> getAllSTOWarehouse() {
        return warehouseDao.getAllSTOWarehouse(new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * STO优化 DAEMON
     */
    public Warehouse getWarehouseByOuId(Long whId) {
        return warehouseDao.getWarehouseByOuId(whId, new BeanPropertyRowMapper<Warehouse>(Warehouse.class));
    }

    /**
     * STO优化 DAEMON
     */
    public List<Long> findStaByOuIdAndStatus(Long whId, List<String> lpList) {
        return staDao.findStaByOuIdAndStatus(whId, lpList, new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * SF非单独定时的所有仓库
     */
    @Override
    public List<Long> getAllSFWarehouse() {
        return warehouseDao.getAllSfWarehouse(new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * 优化
     */
    public List<Long> findExtOrderIdSeo(Long count) {
        return sfConfirmOrderQueueDao.findExtOrderIdSeo(count, new SingleColumnRowMapper<Long>(Long.class));
    }

    public Map<String, Long> findStalAndBarcodeByStaid(Long staId) {
        return staLineDao.findStalAndBarcodeByStaid(staId, new MapRowMapper());
    }

    @Override
    public List<PickingList> queryPickingLists(String[] plLists) {
        List<Long> pl = new ArrayList<Long>();
        for (int i = 0; i < plLists.length; i++) {
            if (StringUtils.hasText(plLists[i])) {
                pl.add(Long.parseLong(plLists[i]));
            }
        }
        List<PickingList> list = pickingListDao.findPlIds(pl, new BeanPropertyRowMapper<PickingList>(PickingList.class));
        return list;
    }

    /**
     * 保存用户绑定仓库
     */
    public void saveUserWhRef(Long userId, Long whId) {
        warehouseDao.deleteUserWhRef(userId);
        warehouseDao.saveUserWhRef(userId, whId);
    }

    /**
     * 根据运单号查找物流商
     */
    public String findLpCodeByTrackNo(String trackNo) {
        List<ReturnPackage> pg = returnPackageDao.getPackageByTrackingNo(trackNo);
        if (pg == null || pg.size() == 0) {
            return "null";
        } else {
            return pg.get(0).getLpcode();
        }
    }

    // 修改快递登录的类型
    public void updateReTrackNoStatus(Long raId, Long typeId) {
        warehouseDao.updateReTrackNoStatus(raId, typeId);
    }

    @Override
    public Pagination<SkuImperfectCommand> findSkuImperfect(int start, int pageSize, OperationUnit operationUnit, SkuImperfect skuImperfect, StockTransApplication sta, Sku sku, String createDate, String endDate, Sort[] sorts) {
        String slipCode = null;
        String receiver = null;
        String barCode = null;
        String supplierCode = null;
        String defectType = null;
        String defectWhy = null;
        String owner = null;
        String defectCode = null;
        String cartonCode = null;
        Integer type = null;
        String code = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner();
            }

            if (StringUtils.hasText(sta.getRefSlipCode())) {
                slipCode = sta.getRefSlipCode();
            }
            if (sta.getStaDeliveryInfo() != null) {
                if (StringUtils.hasText(sta.getStaDeliveryInfo().getReceiver())) {
                    receiver = sta.getStaDeliveryInfo().getReceiver();
                }
            }
            if (StringUtils.hasText(sta.getMemo())) {
                cartonCode = sta.getMemo();
            }

            if (StringUtils.hasText(sta.getShipmentCode())) {
                type = Integer.parseInt(sta.getShipmentCode());
            }
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode();
            }
        }

        if (sku != null) {
            if (StringUtils.hasText(sku.getBarCode())) {
                barCode = sku.getBarCode();
            }
            if (StringUtils.hasText(sku.getSupplierCode())) {
                supplierCode = sku.getSupplierCode();
            }

        }
        if (skuImperfect != null) {
            if (StringUtils.hasText(skuImperfect.getDefectCode())) {
                defectCode = skuImperfect.getDefectCode();
            }
            if (StringUtils.hasText(skuImperfect.getDefectType())) {
                defectType = skuImperfect.getDefectType();
            }
            if (StringUtils.hasText(skuImperfect.getDefectWhy())) {
                defectWhy = skuImperfect.getDefectWhy();
            }
        }

        return imperfectDao.getSkuImperfectl(start, pageSize, operationUnit.getId(), slipCode, receiver, barCode, supplierCode, defectType, defectWhy, owner, defectCode, FormatUtil.getDate(createDate), FormatUtil.getDate(endDate), type, code, cartonCode,
                new BeanPropertyRowMapperExt<SkuImperfectCommand>(SkuImperfectCommand.class), sorts);
    }

    @Override
    public Pagination<InventoryCommand> inventoryImperfect(int start, int pageSize, OperationUnit operationUnit, StockTransApplication sta, Sku sku, Sort[] sorts) {
        Long ouId = operationUnit.getId();
        String owner = null;
        String barCode = null;
        String jmCode = null;
        String supplierCode = null;
        if (sku != null) {
            if (StringUtils.hasText(sku.getBarCode())) {
                barCode = sku.getBarCode();
            }
            if (StringUtils.hasText(sku.getSupplierCode())) {
                supplierCode = sku.getSupplierCode();
            }
            if (StringUtils.hasText(sku.getJmCode())) {
                jmCode = sku.getJmCode();
            }
        }
        if (sta != null) {
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner();
            }
        }
        return inventoryDao.findImperfectInv(start, pageSize, ouId, owner, barCode, supplierCode, jmCode, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }

    @Override
    public Pagination<StockTransApplicationCommand> findStaProcurementReturnInboundList(StockTransApplicationCommand stacmd, Boolean isStvId, Long whId, Date startTime, Date endTime, int start, int pageSize, Sort[] sorts) {
        String code = null;
        String refSlipCode = null;
        String owner = null;
        String slipCode2 = null;
        if (null != stacmd) {
            if (StringUtils.hasText(stacmd.getCode())) {
                code = stacmd.getCode();
            }
            if (StringUtils.hasText(stacmd.getSlipCode())) {
                refSlipCode = stacmd.getSlipCode();
            }
            if (StringUtils.hasText(stacmd.getOwner())) {
                owner = stacmd.getOwner();
            }
            if (StringUtils.hasText(stacmd.getSlipCode2())) {
                slipCode2 = stacmd.getSlipCode2();
            }
        }
        if (StringUtils.isEmpty(isStvId)) {
            isStvId = true;
        }
        Pagination<StockTransApplicationCommand> sta =
                staDao.findStaProcurementReturnInbound(start, pageSize, isStvId, whId, sorts, startTime, endTime, code, slipCode2, refSlipCode, owner, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        return sta;
    }

    /**
     * 负向采购退货入库确认
     */
    @Override
    public void procurementReturnInboundReceiptConfirm(Long staId, List<StvLine> stvLineList, User creator) {
        log.error("......begin procurementReturnInboundReceiptConfirm......." + staId);
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        if (StockTransApplicationStatus.FINISHED.equals(sta.getStatus())) {
            throw new BusinessException(ErrorCode.STA_STATUS_ERROR, new Object[] {sta.getCode()});
        }
        StockTransVoucher stv = null;
        stv = stvDao.findStvCreatedByStaId(sta.getId());
        if (stv != null) {
            // business_exception_10009=作业申请单有未完成上架的作业明细单,在未完成之前不能进行收货操作
            log.error("......The StockTransApplication has StockTransVoucher created, you can do nothing before complete the stv.");
            throw new BusinessException(ErrorCode.STA_HAS_CREATED_STV);
        }
        // Stv的事物类型
        TransactionType tranType = transactionTypeDao.findByCode(TransactionType.returnTypeInbound(sta.getType()));
        if (tranType == null) {
            throw new BusinessException(ErrorCode.STV_TRAN_TYPE_ERROR, new Object[] {sta.getType().name()});
        }
        stv = new StockTransVoucher();
        BigDecimal biSeqNo = stvDao.getBusinessSeqNo(new SingleColumnRowMapper<BigDecimal>(BigDecimal.class));
        stv.setBusinessSeqNo(biSeqNo.longValue());
        stv.setCode(stvDao.getCode(sta.getId(), new SingleColumnRowMapper<String>(String.class)));
        stv.setMode(null);
        stv.setCreateTime(new Date());
        stv.setCreator(creator);
        stv.setDirection(TransactionDirection.INBOUND);
        stv.setOwner(sta.getOwner());
        stv.setSta(sta);
        stv.setLastModifyTime(new Date());
        stv.setStatus(StockTransVoucherStatus.CREATED);
        stv.setWarehouse(sta.getMainWarehouse());
        stv.setTransactionType(tranType);
        stv = stvDao.save(stv);
        List<StvLineCommand> barCodes = stvLineDao.findOutBatchCode(null, null, sta.getSlipCode2(), null, new BeanPropertyRowMapperExt<StvLineCommand>(StvLineCommand.class));
        List<StvLine> stvLines = new ArrayList<StvLine>();
        for (StvLine stvLine : stvLineList) {
            if (stvLine == null) {
                continue;
            }
            StaLine staLine = null;
            if (stvLine.getStaLine() != null && stvLine.getStaLine().getId() != null) {
                staLine = staLineDao.getByPrimaryKey(stvLine.getStaLine().getId());
            } else {
                staLine = this.findStaLineByBarCodeOrCodeProps(stvLine.getSku(), stv.getSta().getId());
            }
            stvLine.setSkuCost(staLine.getSkuCost());
            stvLine.setStaLine(staLine);
            stvLine.setOwner(sta.getOwner());
            stvLines.addAll(wmExecute.createStvLineByDate(stv, stvLine, barCodes, true));
        }
        stv.setStvLines(stvLines);
        sta.setInboundOperator(creator);
        sta.setInboundTime(new Date());
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        stvDao.flush();
        whExe.createSN(stv, stvLineList);
        // 订单状态与账号关联
        if (null != sta && !StringUtil.isEmpty(sta.getRefSlipCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.RECEIVE.getValue(), creator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        } else if (null != sta && !StringUtil.isEmpty(sta.getCode())) {
            whInfoTimeRefDao.insertWhInfoTime2(sta.getCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.RECEIVE.getValue(), creator.getId(), sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        }

    }



    @Override
    public List<StvLineCommand> findProcurementReturnInboundByStvListId(List<Long> stvListId) {
        return stvLineDao.findProcuremetReturnInboundByStvListId(stvListId, new BeanPropertyRowMapper<StvLineCommand>(StvLineCommand.class));
    }

    @Override
    public List<StaLineCommand> findStalinelist(Long staId, Sort[] sorts) {

        return staLineDao.findStalinelist(staId, sorts, new BeanPropertyRowMapper<StaLineCommand>(StaLineCommand.class));
    }


    @Override
    public Pagination<WhInfoTimeRefCommand> findWhInfoTimeListBySlipCode(int start, int pageSize, String refSlipCode, String code, Long ouId, Sort[] sorts) {
        return whInfoTimeRefDao.findWhInfoTimeListBySlipCode(start, pageSize, refSlipCode, code, ouId, sorts, new BeanPropertyRowMapper<WhInfoTimeRefCommand>(WhInfoTimeRefCommand.class));
    }

    /**
     * 行特殊处理
     */
    @Override
    public Pagination<GiftLineCommand> selectSpecialLog(int start, int pageSize, Long staId, Sort[] sorts) {
        return staDao.selectSpecialLog(start, pageSize, sorts, staId, new BeanPropertyRowMapperExt<GiftLineCommand>(GiftLineCommand.class));
    }


    @Override
    public Pagination<StockTransApplicationCommand> findImperfectListByType(OperationUnit wh, int start, int size, Sort[] sorts) {
        return staDao.findImperfectListByType(start, size, sorts, wh.getId(), new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    @Override
    public List<PickingListCommand> queryStaStatusByCode(String code) {
        return pickingListDao.queryStaStatusByCode(code, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
    }

    @Override
    public StockTransApplication queryStaByCode(String code) {
        return staDao.queryStaByCode(code, new BeanPropertyRowMapperExt<StockTransApplication>(StockTransApplication.class));
    }


    /**
     * 根据作业单staCode查询出下线包裹快递单号的相关信息
     * 
     * @param whId
     * @param pickingListId
     * @param sorts
     * @param rowMapper
     * @return
     */
    @Override
    public StockTransApplicationCommand findStaByOffLine(String code, long whId) {
        return staDao.findStaByOffLine(code, whId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    /**
     * 保存快递订单en与包裹
     * 
     * @param whId
     * @param pickingListId
     * @param sorts
     * @param rowMapper
     * @return
     */
    @Override
    public Map<String, Object> saveTransOrder(TransOrder transOrder, String staIds, Long whOuId) {
        Long code = offLineTransPackageDao.getOrderCode(new SingleColumnRowMapper<Long>(Long.class));
        transOrder.setCode("T" + code);
        Map<String, Object> map = new HashMap<String, Object>();
        // List<String> list = new ArrayList<String>();
        TransOlInterface transInter = transOnLineFactory.getTransOnLine(transOrder.getTransportatorCode(), whOuId);
        if ("JD".equals(transOrder.getTransportatorCode()) || "KERRY_A".equals(transOrder.getTransportatorCode())) {// 过滤京东
            transInter = null;
        }
        TransOrder order = offLineTransOrderDao.save(transOrder);// 保存快递订单
        if (null != staIds) {// 插入sta记录表
            String[] staIdArr = staIds.split(",");
            for (int i = 0; i < staIdArr.length; i++) {
                // staDao.updateStaToId(staIdArr[i], order.getId());
                StockTransApplication sta = staDao.getByCode(staIdArr[i]);// 查询出作业单
                // 插入sta记录表
                TransStaRecord record = new TransStaRecord();
                record.setCode(sta.getCode());
                record.setOrderId(order.getId());
                record.setType(sta.getType().getValue());
                record.setStatus(1);
                staRecordDao.save(record);
            }
        }
        if (transInter == null) {// 判断物流商是否拥有电子面单
            map.put("trans", "no");
        } else {
            for (int i = 0; i < transOrder.getPackageNum(); i++) {// 预先获取运单号插入包裹实体
                StaDeliveryInfo info = transInter.matchingTransNoOffLine(transOrder, whOuId);
                TransPackage pack = new TransPackage();
                pack.setCreateTime(new Date());
                pack.setOpTime(new Date());
                pack.setOrder(order);
                pack.setStatus(0);
                pack.setTransNo(info.getTrackingNo());
                pack.setOpUser(order.getCreateUser());
                pack.setExtTransOrderId(info.getExtTransOrderId());
                offLineTransPackageDao.save(pack);
                map.put("trackingNo", info.getTrackingNo());
                map.put("TransPackage", pack);
                // list.add(orderNo);
            }
            map.put("trans", "yes");
        }
        map.put("order", order);
        return map;
    }

    /**
     * 保存与跟新包裹en
     * 
     * @param whId
     * @param pickingListId
     * @param sorts
     * @param rowMapper
     * @return
     */
    @Override
    public TransPackage saveOffLineTransPackage(TransPackage transPackage, String brand, String skuId2) {
        Date date = new Date();
        transPackage.setCreateTime(date);
        transPackage.setOpTime(date);
        transPackage.setStatus(1);
        TransPackage tPackage = null;
        // 根据sku_code来获取skuId
        Sku sku = skuDao.getByBarcode1(skuId2);
        transPackage.setSkuId(sku.getId());
        if ("1".equals(brand)) {// 跟新
            tPackage = offLineTransPackageDao.getTransPackage(transPackage.getOrder().getId(), new BeanPropertyRowMapperExt<TransPackage>(TransPackage.class));
            if (tPackage != null) {
                offLineTransPackageDao.updateTransPackage(tPackage.getId(), transPackage.getSkuId(), transPackage.getPackageWeight(), transPackage.getVolume());
                tPackage = offLineTransPackageDao.getByPrimaryKey(tPackage.getId());
            }
        } else {// 保存
            tPackage = offLineTransPackageDao.save(transPackage);
        }
        // offLineTransPackageDao.flush();
        TransOrder order = offLineTransOrderDao.getByPrimaryKey(tPackage.getOrder().getId());
        // 更新快递运单与用户出库包裹
        PackageInfo pack = new PackageInfo();
        pack.setCreateTime(new Date());
        pack.setIsChecked(true);
        pack.setLastModifyTime(new Date());
        pack.setVersion(0);
        pack.setLpCode(order.getTransportatorCode());
        pack.setStatus(PackageInfoStatus.OUTBOUND);
        pack.setPackAge(tPackage);
        pack.setSku(sku);
        pack.setTrackingNo(tPackage.getTransNo());
        pack.setWeight(new BigDecimal(tPackage.getPackageWeight()));
        pack.setIsHandover(true);
        pack.setOpUnit(order.getOpUnit());
        PackageInfo pack1 = packageInfoDao.save(pack);
        OutBoundPack out = new OutBoundPack();
        out.setCreatorId(tPackage.getOpUser().getId());
        out.setIsHo(0l);
        out.setTrackingNo(tPackage.getTransNo());
        out.setOuId(order.getOpUnit().getId());
        out.setPackageId(pack1.getId());
        out.setLpcode(order.getTransportatorCode());
        outBoundPackDao.save(out);
        // ////线下包裹出库SF回传

        if ("1".equals(brand)) {// 跟新
            if ("SFDSTH".equals(order.getTransportatorCode()) || "SF".equals(order.getTransportatorCode())) {
                try {
                    creSfOrderQueue(out, pack, tPackage, order);
                } catch (Exception e) {
                    if (logger.isErrorEnabled()) {
                        log.error("creSfOrderQueue:" + tPackage.getTransNo() + e);
                    }
                }
            } else if ("EMS".equals(order.getTransportatorCode())) {
                try {
                    creEmsOrderQueue(out, pack, tPackage, order);
                } catch (Exception e) {
                    if (logger.isErrorEnabled()) {
                        log.error("creEmsOrderQueue:" + tPackage.getTransNo() + e);
                    }
                }
            }
        }
        // packageInfoDao.flush();
        // outBoundPackDao.flush();
        tPackage.setOrder(order);
        return tPackage;
    }

    public void creSfOrderQueue(OutBoundPack out, PackageInfo pack, TransPackage tPackage, TransOrder o) {
        DecimalFormat df = new DecimalFormat("0.00");
        TransSfInfo sfInfo = null;
        BiChannel bi = biChannelDao.getByCode(o.getCostCenterDetail());
        SfConfirmOrderQueue q = new SfConfirmOrderQueue();
        String custId = null;
        ChannelWhRef channelWhRef = null;
        if (bi != null) {
            channelWhRef = refDao.getChannelRef(out.getOuId(), bi.getId());
        } else {
            return;
        }
        if (channelWhRef != null && StringUtils.hasText(channelWhRef.getSfJcustid())) {
            custId = channelWhRef.getSfJcustid();
        } else {
            if (bi != null && StringUtils.hasText(bi.getSfJcustid())) {
                custId = bi.getSfJcustid();
            }
        }
        sfInfo = transSfInfoDao.findTransSfInfoJCustid(custId);
        if (sfInfo == null) {
            sfInfo = transSfInfoDao.findTransSfInfoDefault(true);
        }
        q.setCheckword(sfInfo.getCheckword());
        q.setJcusttag(sfInfo.getjCusttag());
        q.setCreateTime(new Date());
        q.setExeCount(0L);
        q.setMailno(pack.getTrackingNo());
        q.setOrderId(tPackage.getExtTransOrderId());
        q.setStaCode(tPackage.getExtTransOrderId());
        q.setWeight(String.valueOf(tPackage.getPackageWeight()));
        q.setType(1);
        Sku sku = skuDao.getByPrimaryKey(tPackage.getSkuId());
        if (sku.getLength() == null) {
            q.setFilter2("0");
        } else {
            q.setFilter2(df.format(sku.getLength().divide(new BigDecimal(10))));
        }
        if (sku.getWidth() == null) {
            q.setFilter3("0");
        } else {
            q.setFilter3(df.format(sku.getWidth().divide(new BigDecimal(10))));
        }

        if (sku.getHeight() == null) {
            q.setFilter4("0");
        } else {
            q.setFilter4(df.format(sku.getHeight().divide(new BigDecimal(10))));
        }
        sfConfirmOrderQueueDao.save(q);
    }


    public void creEmsOrderQueue(OutBoundPack out, PackageInfo pack, TransPackage tPackage, TransOrder o) {
        Long ouId = out.getOuId();
        Warehouse warehouse = warehouseDao.getByOuId(ouId);
        TransEmsInfo emsInfo = null;
        if (warehouse.getEmsAccount() == null) {
            emsInfo = transEmsInfoDao.findAccountByCmp(false, true, 1);
        } else {
            emsInfo = transEmsInfoDao.findByAccount(false, warehouse.getEmsAccount(), 1);
        }
        if (emsInfo == null) {
            throw new BusinessException(ErrorCode.NO_EMS_ACCOUNT);
        }
        EMSConfirmOrderQueue q = new EMSConfirmOrderQueue();
        q.setBillNo(tPackage.getTransNo());
        q.setStaCode(tPackage.getExtTransOrderId());
        q.setCreateTime(new Date());
        q.setExeCount(0L);
        q.setPassWord(emsInfo.getPassword());
        q.setSysAccount(emsInfo.getAccount());
        q.setType(1);
        DecimalFormat w = new DecimalFormat("0.00");
        Sku l = skuDao.getByPrimaryKey(tPackage.getSkuId());
        q.setWeight(String.valueOf(tPackage.getPackageWeight()));
        boolean isNotInfo = true;
        if (l != null) {
            if (l.getLength() != null) {
                q.setLength(w.format(l.getLength().divide(new BigDecimal(10))));
                isNotInfo = false;
            }
        }
        if (isNotInfo) {
            q.setLength("0");
        }
        emsConfirmOrderQueueDao.save(q);

    }


    public Pagination<TransportatorWeigth> findTransportatorListByWeight(int start, int pagesize, long ouId, String expCode, Sort[] sorts) {
        if ("".equals(expCode)) {
            expCode = null;
        }
        return transportatorWeigthDao.findTransportatorListByWeight(start, pagesize, ouId, expCode, new BeanPropertyRowMapper<TransportatorWeigth>(TransportatorWeigth.class), sorts);
    }

    public void updateTransportatorWeigth(String expCode, String maxWeight, String minWeight, String weightDifferencePercent, String lpCodeWeigthId, long ouId) {
        TransportatorWeigth transportatorWeigth = transportatorWeigthDao.getByPrimaryKey(Long.parseLong(lpCodeWeigthId));
        transportatorWeigth.setCreateTime(new Date());
        transportatorWeigth.setExpCode(expCode);
        transportatorWeigth.setMaxWeight(maxWeight);
        transportatorWeigth.setMinWeight(minWeight);
        transportatorWeigth.setName(expCode);
        transportatorWeigth.setWeightDifferencePercent(weightDifferencePercent);
        transportatorWeigth.setOuId(ouId);
        transportatorWeigthDao.save(transportatorWeigth);
    }


    public void saveTransportatorWeight(String expCode, String maxWeight, String minWeight, String weightDifferencePercent, String lpCodeWeigthId, long ouId) {
        TransportatorWeigth transportatorWeigth = transportatorWeigthDao.findTransportatorWeigth(ouId, expCode, new BeanPropertyRowMapper<TransportatorWeigth>(TransportatorWeigth.class));
        if (null != transportatorWeigth && !"".equals(transportatorWeigth)) {
            transportatorWeigth.setExpCode(expCode);
            transportatorWeigth.setName(expCode);
            transportatorWeigth.setMaxWeight(maxWeight);
            transportatorWeigth.setMinWeight(minWeight);
            transportatorWeigth.setWeightDifferencePercent(weightDifferencePercent);
            transportatorWeigth.setOuId(ouId);
            transportatorWeigthDao.save(transportatorWeigth);
        } else {
            transportatorWeigth = new TransportatorWeigth();
            transportatorWeigth.setExpCode(expCode);
            transportatorWeigth.setName(expCode);
            transportatorWeigth.setMaxWeight(maxWeight);
            transportatorWeigth.setMinWeight(minWeight);
            transportatorWeigth.setWeightDifferencePercent(weightDifferencePercent);
            transportatorWeigth.setOuId(ouId);
            transportatorWeigth.setCreateTime(new Date());
            transportatorWeigthDao.save(transportatorWeigth);
        }
    }

    public boolean checkExpCode(String expCode) {
        boolean msg = false;
        Transportator transportator = transportatorDao.findByCode(expCode);
        if (null != transportator && !"".equals(transportator)) {
            msg = true;
        }
        return msg;
    }

    public void initOwnerCode() {
        if (vmiOwnerCodeCache == null) {

            vmiOwnerCodeCache = chooseOptionManager.getOptionByCategoryCode("3plOutBoundTimeToPac");
        }

        if (vmiOwnerCodeCache == null) {
            vmiOwnerCodeCache = new HashMap<String, String>();
        }
    }

    /**
     * 分页查询线下包裹
     */
    @Override
    public Pagination<TransPackageCommand> getTransPackagePage(int start, int pagesize, long ouId, TransPackageCommand packageCommand, Sort[] sorts) {
        String transNo = null;
        String costCenterType = null;
        String transportatorCode = null;
        String userName = null;
        String businessType = null;
        String costCenterDetail = null;
        Date startTime = null;
        Date endTime = null;

        // var staType = document.getElementById("staType").value;
        // var staCode = document.getElementById("staCode").value;

        String receiverProvince = null;
        String receiverCity = null;
        String receiverArea = null;
        Integer staType = null;
        String staCode = null;
        String slipCode = null;

        if (packageCommand != null) {
            if (!"".equals(packageCommand.getReceiverProvince())) {
                receiverProvince = packageCommand.getReceiverProvince();
            }
            if (!"".equals(packageCommand.getReceiverCity())) {
                receiverCity = packageCommand.getReceiverCity();
            }

            if (!"".equals(packageCommand.getReceiverArea())) {
                receiverArea = packageCommand.getReceiverArea();
            }

            if (packageCommand.getStaType() != null) {
                staType = packageCommand.getStaType();
            }

            if (!"".equals(packageCommand.getStaCode2())) {
                staCode = packageCommand.getStaCode2();
            }
            // ////////
            if (!"".equals(packageCommand.getTransNo())) {
                transNo = packageCommand.getTransNo();
            }
            if (!"".equals(packageCommand.getCostCenterType())) {
                costCenterType = packageCommand.getCostCenterType();
            }
            if (!"".equals(packageCommand.getTransportatorCode())) {
                transportatorCode = packageCommand.getTransportatorCode();
            }
            if (!"".equals(packageCommand.getUserName())) {
                userName = packageCommand.getUserName();
            }
            if (!"".equals(packageCommand.getBusinessType())) {
                businessType = packageCommand.getBusinessType();
            }
            if (!"".equals(packageCommand.getCostCenterDetail())) {
                costCenterDetail = packageCommand.getCostCenterDetail();
            }
            if (!"".equals(packageCommand.getStartTime())) {
                startTime = packageCommand.getStartTime();
            }
            if (!"".equals(packageCommand.getEndTime())) {
                endTime = packageCommand.getEndTime();
            }
            if (!"".equals(packageCommand.getSlipCode())) {
                slipCode = packageCommand.getSlipCode();
            }

        }
        return offLineTransPackageDao.getTransPackagePage(start, pagesize, ouId, transNo, costCenterType, transportatorCode, userName, businessType, costCenterDetail, startTime, endTime, receiverProvince, receiverCity, receiverArea, staType, staCode,
                slipCode, new BeanPropertyRowMapperExt<TransPackageCommand>(TransPackageCommand.class), sorts);
    }


    /**
     * 分页查询QS
     */
    @Override
    public Pagination<QsSkuCommand> getQsSkuPage(int start, int pagesize, long ouId, QsSkuCommand qsSkuCommand, Sort[] sorts) {
        String skuCode = null;

        if (qsSkuCommand != null) {
            if (!"".equals(qsSkuCommand.getSkuCode())) {
                skuCode = qsSkuCommand.getSkuCode();
            }
        }
        return qsSkuDao.getQsSkuPage(start, pagesize, ouId, skuCode, new BeanPropertyRowMapperExt<QsSkuCommand>(QsSkuCommand.class), sorts);
    }

    /**
     * 分页查询sku产地
     */
    @Override
    public Pagination<SkuCountryOfOriginCommand> getSkuCountryOfOriginPage(int start, int pagesize, Long ouId, SkuCountryOfOriginCommand skuCommand, Sort[] sorts) {
        String skuCode = null;
        if (skuCommand != null) {
            if (!"".equals(skuCommand.getSkuCode())) {
                skuCode = skuCommand.getSkuCode();
            }
        }
        return skuDao.getSkuCountryOfOriginPage(start, pagesize, ouId, skuCode, new BeanPropertyRowMapperExt<SkuCountryOfOriginCommand>(SkuCountryOfOriginCommand.class), sorts);
    }

    /**
     * 查看指令明细
     */
    @Override
    public List<StockTransApplicationCommand> queryStas(long id, long orderId, String transNo, Sort[] sorts) {
        List<StockTransApplicationCommand> staList = offLineTransPackageDao.queryBatchSta(orderId, sorts);
        return staList;
    }

    @Override
    public TransPackageCommand getOneTransPackage(long id, String transNo) {
        TransPackageCommand pack = offLineTransPackageDao.getOneTransPackage(transNo, id, new BeanPropertyRowMapperExt<TransPackageCommand>(TransPackageCommand.class));
        TransPackage pack2 = offLineTransPackageDao.getByPrimaryKey(pack.getId());
        pack.setOrder(pack2.getOrder());
        pack2.getOrder().getCode();
        return pack;
    }

    @Override
    public TransPackageCommand getOneTransPackageDetail(long id, String transNo) {
        TransPackageCommand pack = offLineTransPackageDao.getOneTransPackageDetail(transNo, id, new BeanPropertyRowMapperExt<TransPackageCommand>(TransPackageCommand.class));
        return pack;
    }

    /**
     * 
     */
    @Override
    public void updateTransPackage(TransPackage transPackage, String skuId2) {
        Sku sku = skuDao.getByBarcode1(skuId2);
        transPackage.setSkuId(sku.getId());
        offLineTransPackageDao.updateTransPackage(transPackage.getId(), transPackage.getSkuId(), transPackage.getPackageWeight(), transPackage.getVolume());
    }

    @Override
    public StaDeliveryInfoCommand getStaDeliveryInfoCommand(long whOuId) {
        return offLineTransPackageDao.getStaDeliveryInfoCommand(whOuId, new BeanPropertyRowMapperExt<StaDeliveryInfoCommand>(StaDeliveryInfoCommand.class));
    }

    @Override
    public BiChannel getByCode2(String code) {
        return biChannelDao.getByCode(code);
    }

    @Override
    public Long getCompanyIdByWarehouseOuId2(Long whId) {
        return operationUnitDao.getCompanyIdByWarehouseOuId2(whId, new SingleColumnRowMapper<Long>(Long.class));
    }

    @Override
    public TransSfInfo findTransSfInfo(Long cmpOuId) {
        return null;
    }

    @Override
    public TransPackageCommand getOneTransPackage2(TransPackage pg) {
        // Date date = new Date();
        // pg.setCreateTime(date);
        // pg.setOpTime(date);
        // pg.setStatus(1);
        // TransOrder order=offLineTransOrderDao.getByPrimaryKey(pg.getOrder().getId());
        TransPackageCommand pack = offLineTransPackageDao.getOneTransPackage2(pg.getTransNo(), new BeanPropertyRowMapperExt<TransPackageCommand>(TransPackageCommand.class));
        return pack;
    }

    @Override
    public Sku getVolumnByBarCode(String skuId) {
        Sku sku = offLineTransPackageDao.getVolumnByBarCode(skuId, new BeanPropertyRowMapperExt<Sku>(Sku.class));
        return sku;
    }

    @Override
    public BiChannel getChannelByCode(String code) {
        BiChannel channel = biChannelDao.getByCode(code);
        return channel;
    }

    @Override
    public TransStaRecord getOneStaRecord(String code) {
        TransStaRecord record = offLineTransPackageDao.getOneStaRecord(code, new BeanPropertyRowMapperExt<TransStaRecord>(TransStaRecord.class));
        return record;
    }

    @Override
    public String staStateUpdate(StockTransApplicationCommand sta, Long createId, Long ouId) {
        String result = null;
        Warehouse wh = warehouseDao.getByOuId(ouId);
        // 合并订单的主订单不允许取消
        List<StockTransApplication> oldStaList1 = staDao.findStaByNewStaId(sta.getId());
        if (!oldStaList1.isEmpty()) {
            result = "error1";
            return result;

        }
        // 判断作业单的类型是退货入库或者换货出库，且状态为以创建，改为取消已处理
        if ((StockTransApplicationType.INBOUND_RETURN_REQUEST.toString().equals(sta.getType().toString()) || StockTransApplicationType.OUTBOUND_RETURN_REQUEST.toString().equals(sta.getType().toString())) && sta.getStatus().getValue() == 1) {
            staDao.updateStaStatusByid(sta.getId(), 17);
            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, null);
            result = "success1";
            return result;
        }
        // 订单状态为1，改为17（取消已处理）
        if (sta.getStatus().getValue() == 1) {
            // 判断是否是外包仓作业单取消，若果是，要提示 请确认外包仓是否已取消
            if (wh.getVmiSource() != null) {
                staDao.updateStaStatusByid(sta.getId(), 17);
                if (wh != null && StringUtils.hasText(wh.getVmiSource())) {
                    msgOutboundOrderCancelDao.updateStaById(sta.getCode(), DefaultStatus.FINISHED.getValue());
                    whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, sta.getMainWarehouse().getId());

                }
                result = "success2";
            } else {
                List<StockTransApplication> oldStaList = staDao.findStaByNewStaId(sta.getId());
                staDao.updateStaStatusByid(sta.getId(), 17);
                // 如果是2单合并，主订单改为取消已处理
                try {
                    List<StockTransApplication> oldStaList2 = staDao.findStaByNewStaId(sta.getGroupSta().getId());
                    if (oldStaList2.size() == 2) {
                        staDao.updateStaStatusByid(sta.getGroupSta().getId(), 17);
                    }
                } catch (Exception e) {}
                // 剔除出主订单
                staDao.updateGroupStaById(sta.getId());
                if (sta.getIsMerge() != null && sta.getIsMerge()) {
                    for (StockTransApplication s : oldStaList) {
                        if (s.getStatus().equals(StockTransApplicationStatus.OCCUPIED)) {
                            staDao.updateReleaseInventoryByStaId(s.getId());
                            staDao.deleteStvLineByStaId(s.getId());
                            staDao.deleteStvByStaId(s.getId());
                            staDao.updateStaToStatusByStaId(s.getId());
                            if (sta.getMainWarehouse() != null) {
                                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, sta.getMainWarehouse().getId());
                            }
                            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, null);
                            result = "success1";
                        }
                        result = "success1";
                    }
                    // 不是合并作业单
                    if (sta.getStatus().equals(StockTransApplicationStatus.OCCUPIED)) {
                        staDao.updateStaStatusByid(sta.getId(), 17);
                        staDao.updateReleaseInventoryByStaId(sta.getId());
                        staDao.deleteStvLineByStaId(sta.getId());
                        staDao.deleteStvByStaId(sta.getId());
                        staDao.updateStaToStatusByStaId(sta.getId());
                        if (sta.getMainWarehouse() != null) {
                            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, sta.getMainWarehouse().getId());
                        }
                        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, null);
                    }
                    result = "success1";
                }
            }
        }
        if (sta.getStatus().getValue() == 2) {
            // 子订单取消，要释放子订单库存，并剔除主订单

            // 外包仓作业单状态修改，需要提示要提示 请确认外包仓是否已取消
            // 判断是否已加入配货单,配货中且未加入配货批-> 取消已处理,并释放库存
            // 外包仓作业单
            if (wh.getVmiSource() != null) {
                if (wh != null && StringUtils.hasText(wh.getVmiSource())) {
                    msgOutboundOrderCancelDao.updateStaById(sta.getCode(), DefaultStatus.FINISHED.getValue());
                    staDao.updateStaStatusByid(sta.getId(), 17);
                }
                staDao.flush();
                result = "success2";
            } else {

                if (null == sta.getPickingListId()) { // 未加入配货清单
                    // 未加入配货批，状态 改为取消已处理，是否占用库存为false,并释放库存
                    staDao.updateStaStatusByid(sta.getId(), 17);
                    List<StockTransApplication> oldStaList = staDao.findStaByNewStaId(sta.getId());
                    List<StockTransApplication> oldStaList2;
                    try {
                        oldStaList2 = staDao.findStaByNewStaId(sta.getGroupSta().getId());
                        if (oldStaList2.size() == 2) {
                            staDao.updateStaStatusByid(sta.getGroupSta().getId(), 17);
                        }
                    } catch (Exception e) {

                    }
                    staDao.updateGroupStaById(sta.getId());
                    if (sta.getIsMerge() != null && sta.getIsMerge()) {
                        // 如果是合并的作业单，需要子作业单ID取消占用库存
                        for (StockTransApplication s : oldStaList) {
                            if (s.getStatus().equals(StockTransApplicationStatus.OCCUPIED)) {
                                staDao.updateReleaseInventoryByStaId(s.getId());
                                staDao.deleteStvLineByStaId(s.getId());
                                staDao.deleteStvByStaId(s.getId());
                                staDao.updateStaToStatusByStaId(s.getId());
                                if (sta.getMainWarehouse() != null) {
                                    whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, sta.getMainWarehouse().getId());
                                }
                                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, null);
                                result = "success1";
                            }
                        }
                        if (sta.getStatus().equals(StockTransApplicationStatus.OCCUPIED)) {
                            staDao.deleteStvLineByStaId(sta.getId());
                            staDao.deleteStvByStaId(sta.getId());
                            staDao.updateStaToStatusByStaId(sta.getId());
                            if (sta.getMainWarehouse() != null) {
                                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, sta.getMainWarehouse().getId());
                            }
                            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, null);
                            result = "success1";
                        }
                    } else {
                        // 不是合并的作业单
                        if (sta.getStatus().equals(StockTransApplicationStatus.OCCUPIED)) {
                            staDao.updateReleaseInventoryByStaId(sta.getId());
                            staDao.deleteStvLineByStaId(sta.getId());
                            staDao.deleteStvByStaId(sta.getId());
                            staDao.updateStaToStatusByStaId(sta.getId());
                            if (sta.getMainWarehouse() != null) {
                                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, sta.getMainWarehouse().getId());
                            }
                            whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), createId, null);
                        }
                        result = "success1";
                    }

                } else { // 已加入配货清单
                    staDao.updateStaStatusByid(sta.getId(), 15);
                    sta.setStatus(StockTransApplicationStatus.CANCEL_UNDO);
                    if (sta.getMainWarehouse() != null) {
                        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), null, sta.getMainWarehouse().getId());
                    }
                    whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), null, null);
                    result = "success1";
                }
            }
        }
        return result;
    }

    @Override
    public StockTransApplicationCommand getStaById(Long staId) {
        StockTransApplicationCommand sta = staDao.findStaByid1(staId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        return sta;
    }

    @Override
    public Customer getCustomerIsAdidas(SkuCommand proCmd) {
        Customer c = customerDao.getByPrimaryKey(proCmd.getCuId());
        return c;
    }

    @Override
    public Sku judgeSkuBarCode(SkuCommand proCmd) {
        Sku s = skuDao.getByBarcodeNoId(proCmd.getBarCode(), proCmd.getCuId(), proCmd.getId());
        return s;
    }

    @Override
    public Map<String, String> judgeSkuCodeOrCustomerSkuCode(SkuCommand proCmd) {
        Map<String, String> map = new HashMap<String, String>();
        Sku s = skuDao.judgeSkuCodeNoId(proCmd.getCode(), proCmd.getId());
        if (s != null) {
            map.put("brand", "code0");
        } else {
            Sku s1 = skuDao.judgeSkuCustomerSkuCodeNoId(proCmd.getCustomerSkuCode(), proCmd.getId());
            if (s1 != null) {
                map.put("brand", "skuCustomerSkuCode0");
            } else {
                map.put("brand", "1");

            }
        }
        return map;
    }

    @Override
    public Map<String, Object> getNum(Long userId, Long wId) {
        Map<String, Object> map = new HashMap<String, Object>();
        User user = userDao.getByPrimaryKey(userId);
        TransPackageCommand tran = offLineTransPackageDao.getNoNum(userId, new BeanPropertyRowMapperExt<TransPackageCommand>(TransPackageCommand.class));
        map.put("maxNum", user.getMaxNum());
        map.put("num", tran.getOrderId());
        return map;
    }

    /**
     * 通过barCode 和 是否更新到货号 查询
     * 
     * @author LuYingMing
     * @date 2016年6月14日 下午6:49:22
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#findProductForThreeDimensionalData(int,
     *      int, com.jumbo.wms.model.warehouse.ProductThreeDimensionalCommand, loxia.dao.Sort[])
     */
    @Override
    public Pagination<ProductThreeDimensionalCommand> findProductForThreeDimensionalData(int start, int pageSize, ProductThreeDimensionalCommand product, Sort[] sorts) {
        String barCode = null;
        String isSupplierCode = null;
        Pagination<ProductThreeDimensionalCommand> modelPagination = null;
        try {
            if (product != null) {
                if (StringUtils.hasLength(product.getBarCode())) {
                    barCode = product.getBarCode();
                    if (StringUtils.hasLength(product.getIsSupplierCode())) {
                        isSupplierCode = product.getIsSupplierCode();
                        if ("1".equals(isSupplierCode)) {
                            modelPagination = skuDao.findProductBySupplierCodeForPagination(start, pageSize, barCode, new BeanPropertyRowMapperExt<ProductThreeDimensionalCommand>(ProductThreeDimensionalCommand.class), sorts);
                        } else {
                            modelPagination = skuDao.findProductByBarCodeForPagination(start, pageSize, barCode, new BeanPropertyRowMapperExt<ProductThreeDimensionalCommand>(ProductThreeDimensionalCommand.class), sorts);
                        }
                    } else {
                        log.error("isSupplierCode 数据异常~~~~~~~~~~~~~~~");
                    }
                } else {
                    log.error("barCode 数据异常~~~~~~~~~~~~~~~");
                }
            } else {
                log.error("product 数据异常~~~~~~~~~~~~~~~");
            }
        } catch (Exception e) {
            if (logger.isErrorEnabled()) {
                log.error("findProductForThreeDimensionalData Exception:", e);
            }
            log.error(e.getMessage());
        }
        return modelPagination;
    }


    /**
     * @author LuYingMing
     * @date 2016年6月17日 下午12:51:17
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#updateThreeDimensionalData(java.lang.Long,
     *      com.jumbo.wms.model.warehouse.ProductThreeDimensionalCommand,
     *      com.jumbo.wms.model.authorization.User)
     */
    @Override
    public void updateThreeDimensionalData(Long skuId, ProductThreeDimensionalCommand product, User user) {

        BigDecimal convertRatio = new BigDecimal(10);
        try {
            BigDecimal length = product.getLength().multiply(convertRatio);
            BigDecimal width = product.getWidth().multiply(convertRatio);
            BigDecimal height = product.getHeight().multiply(convertRatio);
            Sku sku = skuDao.getByPrimaryKey(skuId);
            sku.setThreeDimensionaOfLastime(new Date());
            sku.setUser(user);
            sku.setLength(length);
            sku.setWidth(width);
            sku.setHeight(height);
            sku.setGrossWeight(product.getGrossWeight());
            skuDao.save(sku);
        } catch (Exception e) {
            log.error(e.getMessage() + "~~~~~~~~~~~" + e.getCause());
        }
    }


    /**
     * @author LuYingMing
     * @date 2016年6月17日 下午2:39:09
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#findProductByBarCode(java.lang.String)
     */
    @Override
    public List<ProductThreeDimensionalCommand> findProductByBarCodeWithCondition(String barCode, String isSupplierCode) {
        List<ProductThreeDimensionalCommand> list = null;
        if (!StringUtil.isEmpty(barCode) && !StringUtil.isEmpty(isSupplierCode)) {
            try {
                if ("1".equals(isSupplierCode)) {
                    list = skuDao.findProductByBarCodeWithSupplierCode(barCode, new BeanPropertyRowMapperExt<ProductThreeDimensionalCommand>(ProductThreeDimensionalCommand.class));
                } else {
                    list = skuDao.findProductByBarCode(barCode, new BeanPropertyRowMapperExt<ProductThreeDimensionalCommand>(ProductThreeDimensionalCommand.class));
                }
            } catch (Exception e) {
                log.error(e.getMessage() + "!!!!!!!!!!!");
            }
        }
        return list;
    }


    /**
     * @author LuYingMing
     * @date 2016年7月12日 下午12:38:57
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#findStaStatusByPickingList(java.lang.Long,
     *      java.lang.Long, java.util.List, loxia.dao.Sort[])
     */
    @Override
    public List<Integer> findStaStatusByPickingList(Long pickingListId, Long ouid, List<Long> plist) {
        List<Integer> list = new ArrayList<Integer>();
        if (plist != null) {
            if (plist.size() == 0) {
                plist = null;
            }
        }
        list = staDao.findStaStatusByPickingList(ouid, pickingListId, plist, new SingleColumnRowMapper<Integer>(Integer.class));
        return list;
    }


    /**
     * @author LuYingMing
     * @date 2016年7月12日 下午2:44:34
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#verifyStatusByPickingList(java.lang.String[],
     *      java.lang.Long, java.lang.Long, java.util.List, loxia.dao.Sort[])
     */
    @Override
    public boolean verifyStatusByPickingList(String[] ids, Long ouid, List<Long> plist) {
        boolean result = false;
        int num = 0, size = 0;
        List<Integer> statusList = new ArrayList<Integer>();
        if (null != ids && ids.length > 0) {
            for (int i = 0; i < ids.length; i++) {
                Long pickingListId = Long.parseLong(ids[i]);
                List<Integer> list = findStaStatusByPickingList(pickingListId, ouid, plist);
                statusList.addAll(list);
            }
        }
        if (null != statusList && statusList.size() > 0) {
            for (int i = 0; i < statusList.size(); i++) {
                size++;
                if (statusList.get(i) == StockTransApplicationStatus.CANCELED.getValue()) { // 取消已处理
                    num++;
                }
            }
        }
        if (size != num) {
            result = true;
        }
        return result;
    }


    @Override
    public boolean testAutoSalesStaOutBound(Long staId) {
        log.info("outbound sta start,id:{}", staId);
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        // adCheckManager.storeLogisticsSend(staId);
        StaDeliveryInfo d = sta.getStaDeliveryInfo();
        PackageInfo pg = new PackageInfo();
        pg.setTrackingNo(sta.getCode());
        pg.setLpCode(d.getLpCode());
        pg.setWeight(new BigDecimal(1.0));
        pg.setLastModifyTime(new Date());
        pg.setStaDeliveryInfo(d);
        packageInfoDao.save(pg);
        sta.setStatus(StockTransApplicationStatus.CHECKED);
        sta.setLastModifyTime(new Date());
        staDao.save(sta);
        d.setTrackingNo(sta.getCode());
        packageInfoDao.flush();
        log.info("outbound sta step1,pg finish,id:{}", staId);
        boolean b = salesStaOutBound(staId, null, null, d.getTrackingNo(), new BigDecimal(1.0), null, false, null);
        log.info("outbound sta end,id:{}", staId);
        return b;
    }

    @Override
    public List<BigDecimal> testFindOcpStaIds() {
        return staDao.findOcpStaIds(new SingleColumnRowMapper<BigDecimal>());
    }


    @Override
    public boolean findInvoiceBySlipCode(String slipcode1) {
        int i = staInvoiceDao.findInvoiceBySlipCode(slipcode1, new SingleColumnRowMapper<Integer>(Integer.class));
        if (i == 0) {
            return false;
        }
        return true;
    }

    @Override
    public List<StockTransApplicationCommand> getNoTransSta(Long orderCount) {
        return staDao.getNoTransSta(orderCount, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }


    /**
     * 查询所有非外包仓仓库
     */
    public List<Long> findAllWarehouseByExcludeVmi() {
        return warehouseDao.getAllWarehouseByExcludeVmi(new SingleColumnRowMapper<Long>(Long.class));
    }

    public List<Long> findAllWarehouseByExcludeVmiNotTask() {
        return warehouseDao.findAllWarehouseByExcludeVmiNotTask(new SingleColumnRowMapper<Long>(Long.class));
    }

    /**
     * 查询所有非外包仓仓库,且非占用库存中的仓库
     */
    public List<Long> findAllWarehouseByStatus() {
        return warehouseDao.findAllWarehouseByStatus(new SingleColumnRowMapper<Long>(Long.class));
    }

    public Integer updateWarehouseOpcStatus(Long status) {
        return warehouseDao.updateWarehouseOpcStatus(status, new SingleColumnRowMapper<Integer>(Integer.class));
    }


    /**
     * 判断当前时间-2分钟，是否在执行时间之前。 是：则跳出等待， 否则继续执行
     * 
     * @param mine
     * @return
     */
    public Boolean ocpIsWaitByOcpStatus(Integer mine, Date exeTime) {
        Date nowDate = new Date();
        Integer ms = mine * 60000;
        Date afterDate = new Date(nowDate.getTime() - ms);
        // 判断当前时间-2分钟，是否在执行时间之前。 是：则跳出等待， 否则继续执行
        return afterDate.before(exeTime);
    }

    /**
     * 修改仓库占用信息
     */
    public void updateIsOcpByOuId(Integer status, Long ouId) {
        try {
            int value = warehouseDao.updateIsOcpByOuId(status, ouId);
            // 如不存在，则新增
            if (value == 0) {
                warehouseDao.insertWarehouseOcpRef(ouId);
            }
        } catch (Exception e) {
            if (logger.isErrorEnabled()) {
                log.error(ouId + " updateIsOcpByOuId is error", e);
            }

        }

    }


    @Override
    public void updateStaDeliveryInfo(StaDeliveryInfoCommand staDeliveryInfo) {
        StaDeliveryInfo staDeliveryInfo1 = staDeliveryInfoDao.getByPrimaryKey(staDeliveryInfo.getId());
        staDeliveryInfo1.setStoreComIsNeedInvoice(true);
        staDeliveryInfoDao.save(staDeliveryInfo1);
    }

    /**
     * 根据extCode2,客户Id,店铺下面的品牌获取商品
     */
    @Override
    public Sku getByExtCode2AndCustomerAndShopId(String extCode2, Long customerId, Long shopId) {
        // 设置开关,等待PAC部署好
        ChooseOption op = chooseOptionDao.findByCategoryCodeAndKey("GetSkuSwitch", "SWITCH");
        if (op == null || "0".equals(op.getOptionValue()) || shopId == null) {
            return skuDao.getByExtCode2AndCustomer(extCode2, customerId);
        } else {
            // List<Sku> skuList = skuDao.getByExtCode2AndCustomerAndShopId(extCode2, customerId,
            // shopId);
            List<Sku> skuList = skuDao.getSkuListByExtCode2AndCustomer(extCode2, customerId);
            if (skuList.isEmpty()) {
                return null;
            } else if (skuList.size() == 1) {
                return skuList.get(0);
            } else {
                Sku sku = null;
                // 如果查询出多条sku, 则根据店铺下面的品牌范围查找
                int count = 0;
                List<Long> brandIds = biChannelBrandRefDao.getBrandIdListByShopId(shopId, new SingleColumnRowMapper<Long>(Long.class));
                if (brandIds == null || brandIds.isEmpty()) {
                    log.error("SKU_REPEAT_AND_NO_BRAND_MATCHING,skuCode:" + extCode2);
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND);
                }
                for (Sku s : skuList) {
                    if (brandIds.contains(s.getBrand().getId())) {
                        sku = s;
                        count++;
                    }
                }
                if (count == 0) {
                    log.error("BRAND_SKU_NOT_FOUND,skuCode:" + extCode2);
                    throw new BusinessException(ErrorCode.SKU_NOT_FOUND);
                }
                // 如果根据店铺下面的品牌范围查找还是有超过1条以上的商品则报错
                if (count > 1) {
                    log.error("BRAND_SKU_REPEAT,skuCode:" + extCode2);
                    throw new BusinessException(ErrorCode.BRAND_SKU_REPEAT, new Object[] {extCode2});
                }
                return sku;
            }
        }

    }

    /**
     * @author LuYingMing
     * @date 2016年8月31日 下午8:40:27
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#releaseInventoryByStaIdAndLocationCode(java.lang.Long,
     *      java.lang.Long, java.lang.String)
     */
    @Override
    public void releaseInventoryByStaIdAndLocationCode(Long staId, Long userId, String appointStorage, Long ouId, String slipCode) {
        StockTransApplication sta = null;
        if (staId != null) {
            sta = staDao.getByPrimaryKey(staId);
        } else {
            sta = staDao.findStaBySlipCode(slipCode);
        }
        if (sta == null) {
            throw new BusinessException(ErrorCode.STA_NOT_FOUND);
        }
        // sta状态检查
        if (!StockTransApplicationStatus.CANCEL_UNDO.equals(sta.getStatus())) {
            throw new BusinessException(ErrorCode.STA_CANCELED_ERROR, new Object[] {sta.getCode()});
        }
        staId = sta.getId();
        StockTransVoucher stv = stvDao.findStvCreatedByStaId(staId);
        if (stv == null) {
            List<Inventory> invList = inventoryDao.findByOccupiedCode(sta.getCode());
            if (invList != null && invList.size() != 0) {
                throw new BusinessException(ErrorCode.STV_NOT_FOUND);
            } else {
                sta.setStatus(StockTransApplicationStatus.CANCELED);
                // 订单状态与账号关联
                whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CANCELED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
                return;
            }
        }
        // 是否合并单
        if (null != sta.getIsMerge() && true == sta.getIsMerge()) {// 合并单
            // 设置合单情况下，释放库存，子单状态修改
            List<StockTransApplication> list = staDao.findGroupStaList(sta.getId());
            if (list != null && list.size() > 0) {
                for (StockTransApplication bean : list) {
                    if (StockTransApplicationStatus.CANCELED.equals(bean.getStatus()) || StockTransApplicationStatus.CREATED.equals(bean.getStatus())) {
                        continue;
                    }
                    // 如果已指定定库位编码
                    if (!StringUtil.isEmpty(appointStorage)) {
                        WarehouseLocation entity = warehouseLocationDao.findwhLocationByCode(appointStorage, ouId);
                        Long locationId = entity.getId();
                        Long districtId = entity.getDistrict().getId();
                        List<Inventory> invList = inventoryDao.findByOccupiedCode(bean.getCode());
                        if (null != invList && invList.size() > 0) {
                            User user = userDao.getByPrimaryKey(userId);
                            int i = 0;
                            for (Inventory inv : invList) {
                                StockTransTxLog st = new StockTransTxLog();
                                st.setBatchCode(inv.getBatchCode());
                                st.setDirection(TransactionDirection.OUTBOUND);
                                st.setDistrictId(inv.getDistrict().getId());
                                st.setExpireDate(inv.getExpireDate());
                                st.setInboundTime(inv.getInboundTime());
                                st.setInvStatusId(inv.getStatus().getId());
                                st.setLocationId(inv.getLocation().getId());
                                st.setOpUserName(user.getLoginName());
                                st.setOwner(inv.getOwner());
                                st.setQuantity(inv.getQuantity());
                                st.setSkuId(inv.getSku().getId());
                                st.setStaCode(inv.getOccupationCode());
                                st.setTransactionTime(new Date());
                                st.setTransactionType(transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CANCEL_RELEASE_INVENTORY_OUT));
                                st.setWarehouseOuId(inv.getOu().getId());
                                stockTransTxLogDao.save(st);
                                st = new StockTransTxLog();
                                st.setBatchCode(inv.getBatchCode());
                                st.setDirection(TransactionDirection.INBOUND);
                                st.setDistrictId(districtId);
                                st.setExpireDate(inv.getExpireDate());
                                st.setInboundTime(inv.getInboundTime());
                                st.setInvStatusId(inv.getStatus().getId());
                                st.setLocationId(locationId);
                                st.setOpUserName(user.getLoginName());
                                st.setOwner(inv.getOwner());
                                st.setQuantity(inv.getQuantity());
                                st.setSkuId(inv.getSku().getId());
                                st.setStaCode(inv.getOccupationCode());
                                st.setTransactionTime(new Date());
                                st.setTransactionType(transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CANCEL_RELEASE_INVENTORY_IN));
                                st.setWarehouseOuId(inv.getOu().getId());
                                stockTransTxLogDao.save(st);
                            }
                            // 执行移动库位操作
                            i = inventoryDao.updateInventoryByLocationMove(bean.getId(), locationId, districtId);
                            if (i == 0) {
                                throw new BusinessException(ErrorCode.NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
                            }
                        }
                    } else {
                        int i = 0;
                        i = inventoryDao.releaseInventoryByStaId(bean.getId());// 释放子作业单占用的库存
                        if (i == 0) {
                            throw new BusinessException(ErrorCode.NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
                        }
                    }
                    // 取消 stv
                    StockTransVoucher stvBean = stvDao.findStvCreatedByStaId(bean.getId());
                    if (stvBean == null) {
                        throw new BusinessException(ErrorCode.STV_NOT_FOUND);
                    }
                    if (null != bean.getResetToCreate() && bean.getResetToCreate()) {
                        stvDao.delete(stvBean);
                        bean.setStatus(StockTransApplicationStatus.CREATED);
                        bean.setLastModifyTime(new Date());
                        bean.setIsNeedOccupied(true);
                        bean.setGroupSta(null);
                        bean.getStaDeliveryInfo().setTrackingNo(null);
                        whInfoTimeRefDao.insertWhInfoTime(bean.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CREATE.getValue(), userId);
                    } else {
                        stvBean.setStatus(StockTransVoucherStatus.CANCELED);
                        stvBean.setLastModifyTime(new Date());
                        stvDao.save(stvBean);
                        // 更新sta状态，取消数量占用
                        bean.setStatus(StockTransApplicationStatus.CANCELED);
                        bean.setLastModifyTime(new Date());
                        bean.setIsNeedOccupied(false);
                        staDao.save(bean);
                        whInfoTimeRefDao.insertWhInfoTime(bean.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CANCELED.getValue(), userId);
                    }
                }
            } else {
                throw new BusinessException(ErrorCode.CHILD_STA_NOT_FOUND, new Object[] {sta.getCode()});
            }
        } else {
            // 非合并单
            // 如果已指定库位编码
            if (!StringUtil.isEmpty(appointStorage)) {
                WarehouseLocation entity = warehouseLocationDao.findwhLocationByCode(appointStorage, ouId);
                Long locationId = entity.getId();
                Long districtId = entity.getDistrict().getId();
                List<Inventory> invList = inventoryDao.findByOccupiedCode(sta.getCode());
                if (null != invList && invList.size() > 0) {
                    User user = userDao.getByPrimaryKey(userId);
                    int i = 0;
                    for (Inventory inv : invList) {
                        StockTransTxLog st = new StockTransTxLog();
                        st.setBatchCode(inv.getBatchCode());
                        st.setDirection(TransactionDirection.OUTBOUND);
                        st.setDistrictId(inv.getDistrict().getId());
                        st.setExpireDate(inv.getExpireDate());
                        st.setInboundTime(inv.getInboundTime());
                        st.setInvStatusId(inv.getStatus().getId());
                        st.setLocationId(inv.getLocation().getId());
                        st.setOpUserName(user.getLoginName());
                        st.setOwner(inv.getOwner());
                        st.setQuantity(inv.getQuantity());
                        st.setSkuId(inv.getSku().getId());
                        st.setStaCode(inv.getOccupationCode());
                        st.setTransactionTime(new Date());
                        st.setTransactionType(transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CANCEL_RELEASE_INVENTORY_OUT));
                        st.setWarehouseOuId(inv.getOu().getId());
                        stockTransTxLogDao.save(st);
                        st = new StockTransTxLog();
                        st.setBatchCode(inv.getBatchCode());
                        st.setDirection(TransactionDirection.INBOUND);
                        st.setDistrictId(districtId);
                        st.setExpireDate(inv.getExpireDate());
                        st.setInboundTime(inv.getInboundTime());
                        st.setInvStatusId(inv.getStatus().getId());
                        st.setLocationId(locationId);
                        st.setOpUserName(user.getLoginName());
                        st.setOwner(inv.getOwner());
                        st.setQuantity(inv.getQuantity());
                        st.setSkuId(inv.getSku().getId());
                        st.setStaCode(inv.getOccupationCode());
                        st.setTransactionTime(new Date());
                        st.setTransactionType(transactionTypeDao.findByCode(Constants.TRANSACTION_TYPE_CANCEL_RELEASE_INVENTORY_IN));
                        st.setWarehouseOuId(inv.getOu().getId());
                        stockTransTxLogDao.save(st);
                    }
                    // 执行移动库位操作
                    i = inventoryDao.updateInventoryByLocationMove(staId, locationId, districtId);
                    if (i == 0) {
                        throw new BusinessException(ErrorCode.NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
                    }
                }
            } else {
                int i = inventoryDao.releaseInventoryByStaId(staId);
                if (i == 0) {
                    throw new BusinessException(ErrorCode.NO_OCCUPIED_INVENTORY, new Object[] {sta.getCode()});
                }
            }
        }
        // 取消stv
        stv.setStatus(StockTransVoucherStatus.CANCELED);
        stv.setLastModifyTime(new Date());
        stvDao.save(stv);
        // 更新sta状态，取消数量占用
        sta.setStatus(StockTransApplicationStatus.CANCELED);
        // 订单状态与账号关联
        whInfoTimeRefDao.insertWhInfoTime2(sta.getRefSlipCode(), WhInfoTimeRefBillType.STA.getValue(), WhInfoTimeRefNodeType.CANCELED.getValue(), userId, sta.getMainWarehouse() == null ? null : sta.getMainWarehouse().getId());
        sta.setLastModifyTime(new Date());
        sta.setIsNeedOccupied(false);
        staDao.save(sta);
        // 重置sn号
        snDao.updateSNStatusByStvIdSql(stv.getId(), SkuSnStatus.USING.getValue());
        try {
            eventObserver.onEvent(new TransactionalEvent(sta));
        } catch (BusinessException e) {
            throw e;
        }
    }

    @Override
    public DeliveryChangeConfigure insertDeliveryChConfing(DeliveryChangeConfigure changeConfigure) {
        DeliveryChangeConfigure changeConfigure1 = deliveryChangeConfigureDao.save(changeConfigure);
        return changeConfigure1;
    }


    @Override
    public List<DeliveryChangeConfigure> findDCCByLpcode(DeliveryChangeConfigure changeConfigure) {

        if (changeConfigure.getLpcode().equals("")) {
            changeConfigure.setLpcode(null);
        }
        if (changeConfigure.getNewLpcode().equals("")) {
            changeConfigure.setNewLpcode(null);
        }
        return deliveryChangeConfigureDao.getDCCByLpcode(changeConfigure.getLpcode(), changeConfigure.getNewLpcode(), new BeanPropertyRowMapper<DeliveryChangeConfigure>(DeliveryChangeConfigure.class));
    }


    @Override
    public void deleteDeliveryChConfing(Long id) {
        deliveryChangeConfigureDao.deleteByPrimaryKey(id);
    }


    @Override
    public StaDeliveryInfo findStaDeliveryInfoByTrackingNo(String trackingNo) {
        return staDeliveryInfoDao.findDeliveryInfoByTrNo(trackingNo, new BeanPropertyRowMapper<StaDeliveryInfo>(StaDeliveryInfo.class));
    }


    @Override
    public Sku findSkuConsumptiveByTrNo(String trackingNo) {
        return skuDao.findSkuByTrackingNo(trackingNo, new BeanPropertyRowMapper<Sku>(Sku.class));
    }


    @Override
    public DeliveryChanngeLog findDeliveryChanngeLogByTrNo(String trackingNo) {
        DeliveryChanngeLog channgeLog = new DeliveryChanngeLog();
        channgeLog = dliveryChanngeLogDao.getDeliveryChanngeLogByTrackingNo(trackingNo, new BeanPropertyRowMapper<DeliveryChanngeLog>(DeliveryChanngeLog.class));
        if (channgeLog == null) {
            channgeLog = dliveryChanngeLogDao.getDeliveryChanngeLogByTrackingNo1(trackingNo, new BeanPropertyRowMapper<DeliveryChanngeLog>(DeliveryChanngeLog.class));
        }
        return channgeLog;
    }

    @Override
    public PackageInfo findPackByTrackingNo(String trackingNo) {
        return packageInfoDao.findByTrackingNo(trackingNo);
    }


    @Override
    public String getDeliveryTrackingNo(Long id) {
        PackageInfo packageInfo = packageInfoDao.findTrackingNoByStaDeId(id);
        return packageInfo.getTrackingNo();
    }


    @Override
    public DeliveryChangeConfigure findDCCByLpcode1(String lpcode) {
        return deliveryChangeConfigureDao.getDCCByLpcode(lpcode, null, new BeanPropertyRowMapper<DeliveryChangeConfigure>(DeliveryChangeConfigure.class)).get(0);
    }


    @Override
    public DeliveryChanngeLog insertDeliverChangeLog(DeliveryChanngeLog changeLog) {
        return dliveryChanngeLogDao.save(changeLog);
    }


    @Override
    public StaDeliveryInfo updateStaDeliveryById(Long id, String newTrackingNo, String lpcode) {
        staDeliveryInfoDao.updateDeliveryTrackingNoById(id, newTrackingNo, lpcode);
        packageInfoDao.updatelpCodeByTrackingNo(lpcode, newTrackingNo);
        StaDeliveryInfo deliveryInfo = staDeliveryInfoDao.getByPrimaryKey(id);
        StockTransApplication sta = staDao.getByPrimaryKey(id);
        if (Transportator.SF.equals(lpcode) || Transportator.SFCOD.equals(lpcode)) {
            deliveryInfo.setTransTimeType(TransTimeType.ORDINARY);
            sta.setDeliveryType(TransDeliveryType.ORDINARY);
        }
        if (Transportator.SFDSTH.equals(lpcode)) {
            deliveryInfo.setTransTimeType(TransTimeType.ORDINARY);
            sta.setDeliveryType(TransDeliveryType.LAND);
        }
        return deliveryInfo;
    }



    @Override
    public PackageInfo updatePackageInfoById(Long id, String trackingNo) {
        PackageInfo packageInfo = packageInfoDao.getByPrimaryKey(id);
        packageInfo.setTrackingNo(trackingNo);
        return packageInfoDao.save(packageInfo);
    }

    /**
     * 根据快递单号查询sta
     * 
     * @param trackingNo
     * @return
     */
    public List<StockTransApplicationCommand> findStaListByTrackingNo1(Long whId, List<Long> idList, String trackingNo, Sort[] sorts) {
        StaDeliveryInfo info = new StaDeliveryInfo();
        List<Integer> statusList = new ArrayList<Integer>();
        // statusList.add(StockTransApplicationStatus.CHECKED.getValue());
        statusList.add(StockTransApplicationStatus.INTRANSIT.getValue());
        statusList.add(StockTransApplicationStatus.FINISHED.getValue());
        info.setTrackingNo(trackingNo);
        List<Integer> typeList = new ArrayList<Integer>();
        typeList.add(StockTransApplicationType.OUTBOUND_SALES.getValue());
        typeList.add(StockTransApplicationType.OUT_SALES_ORDER_OUTBOUND_SALES.getValue());
        typeList.add(StockTransApplicationType.OUTBOUND_RETURN_REQUEST.getValue());
        List<StockTransApplicationCommand> list = staDao.findSalesStaList(null, null, null, true, null, null, null, whId, idList, statusList, null, null, null, null, typeList, null, null, null, // 16
                null, null, null, trackingNo, false, false, false, null, null, null, null, sorts, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
        return list;
    }


    public Zoon findZoonById(Long zoonId) {
        Zoon zoo = zoonDao.getByPrimaryKey(zoonId);
        Zoon zo = new Zoon();
        zo.setCode(zoo.getCode());
        return zo;
    }


    /**
     * @author LuYingMing
     * @see com.jumbo.wms.manager.warehouse.WareHouseManager#findValidityAdjuseByPage(int, int,
     *      com.jumbo.wms.model.warehouse.InventoryCommand, java.lang.Long, loxia.dao.Sort[])
     */
    @Override
    public Pagination<InventoryCommand> findValidityAdjustByPage(int start, int pageSize, InventoryCommand inv, Long whOuId, Sort[] sorts) {
        if (inv != null) {
            if (!StringUtils.hasText(inv.getBarCode())) {
                inv.setBarCode(null);
            }
            if (!StringUtils.hasText(inv.getSkuCode())) {
                inv.setSkuCode(null);
            }
            if (!StringUtils.hasText(inv.getSkuName())) {
                inv.setSkuName(null);
            }
            if (!StringUtils.hasText(inv.getSupplierSkuCode())) {
                inv.setSupplierSkuCode(null);
            }
            if (!StringUtils.hasText(inv.getInvOwner())) {
                inv.setInvOwner(null);
            }
            if (!StringUtils.hasText(inv.getLocationCode())) {
                inv.setLocationCode(null);
            }
            if (null == inv.getInventoryStatusId()) {
                inv.setInventoryStatusId(null);
            }
            if (inv.getExtCode2() != null) {
                if ("".equals(inv.getExtCode2())) {
                    inv.setExtCode2(null);
                }
            }
            if (null == inv.getMinPDate()) {
                inv.setMinPDate(null);
            }
            if (null == inv.getMaxPDate()) {
                inv.setMaxPDate(null);
            }
            if (null == inv.getMinExpDate()) {
                inv.setMinExpDate(null);
            }
            if (null == inv.getMaxExpDate()) {
                inv.setMaxExpDate(null);
            }
        } else {
            inv = new InventoryCommand();
        }
        // 封装参数
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("BARCODE", inv.getBarCode());
        params.put("SKUCODE", inv.getSkuCode());
        params.put("SKUNAME", inv.getSkuName());
        params.put("SUPPLIERSKUCODE", inv.getSupplierSkuCode());
        params.put("INVOWNER", inv.getInvOwner());
        params.put("LOCATIONCODE", inv.getLocationCode());
        params.put("STATUSID", inv.getInventoryStatusId());
        params.put("EXTCODE2", inv.getExtCode2());
        params.put("MINPDATE", inv.getMinPDate());
        params.put("MAXPDATE", inv.getMaxPDate());
        params.put("MINEXPDATE", inv.getMinExpDate());
        params.put("MAXEXPDATE", inv.getMaxExpDate());
        params.put("whOuId", whOuId);
        return inventoryDao.findValidityAdjustByPage(start, pageSize, params, sorts, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }

    /**
     * 根据条件查询历史PDA
     */
    @Override
    public Pagination<StockTransApplicationCommand> pdaQueryOrderList(int start, int size, Long ouId, Date createTime, Date endCreateTime, Date finishTime, Date endFinishTime, Date orderCreateTime, Date toOrderCreateTime,
            StockTransApplicationCommand sta, Sort[] sorts) {
        Pagination<StockTransApplicationCommand> list = new Pagination<StockTransApplicationCommand>();
        String code = null;
        String slipCode1 = null;

        String refSlipCode = null;
        String owner = null;
        Integer status = null;
        Integer intType = null;
        if (sta != null) {
            status = sta.getIntStaStatus();
            intType = sta.getIntStaType();
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode();
            }
            if (StringUtils.hasText(sta.getSlipCode1())) {
                slipCode1 = sta.getSlipCode1() + "%";
            }

            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner();
            }

            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
        }
        list =
                staDao.findpdaQueryLists(start, size, ouId, createTime, endCreateTime, finishTime, endFinishTime, code, refSlipCode, slipCode1, owner, status, intType, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                        StockTransApplicationCommand.class));

        return list;
    }


    /**
     * 根据条件查询历史PDA 收货明细
     */
    @Override
    public Pagination<StaCartonCommand> getPdaDetail(int start, int size, Long staId, Sort[] sorts) {
        Pagination<StaCartonCommand> staCartonCommand = new Pagination<StaCartonCommand>();
        staCartonCommand = staCartonDao.queryStaCartonList(start, size, staId, new BeanPropertyRowMapperExt<StaCartonCommand>(StaCartonCommand.class), sorts);
        if (null != staCartonCommand && null != staCartonCommand.getItems() && !"".equals(staCartonCommand.getItems()) && staCartonCommand.getItems().size() > 0) {
            List<StaCartonCommand> staCartonCommandList = staCartonCommand.getItems();
            for (StaCartonCommand staCarton : staCartonCommandList) {
                if (null != staCarton.getExpDate() && !"".equals(staCarton.getExpDate())) {
                    Sku sku = skuDao.getByPrimaryKey(staCarton.getSkuId());
                    if (null != sku && null != sku.getValidDate() && !"".equals(sku.getValidDate())) {
                        staCarton.setProductionDate(getNDay(staCarton.getExpDate(), sku.getValidDate()));
                    }
                }

            }
        }
        return staCartonCommand;
    }

    @Override
    public Pagination<StaOpLogCommand> getPdaSNDetail(int start, int size, Long staId, Sort[] sorts) {
        Pagination<StaOpLogCommand> staCartonCommand = new Pagination<StaOpLogCommand>();
        staCartonCommand = staOpLogDao.queryStaCartonSNList(start, size, staId, new BeanPropertyRowMapperExt<StaOpLogCommand>(StaOpLogCommand.class), sorts);
        if (null != staCartonCommand && null != staCartonCommand.getItems() && !"".equals(staCartonCommand.getItems()) && staCartonCommand.getItems().size() > 0) {
            List<StaOpLogCommand> staCartonCommandList = staCartonCommand.getItems();
            for (StaOpLogCommand staCarton : staCartonCommandList) {
                if (null != staCarton.getExpDate() && !"".equals(staCarton.getExpDate())) {
                    Sku sku = skuDao.getByPrimaryKey(staCarton.getSkuId());
                    if (null != sku && null != sku.getValidDate() && !"".equals(sku.getValidDate())) {
                        staCarton.setProductionDate(getNDay(staCarton.getExpDate(), sku.getValidDate()));
                    }
                }
                if (null != staCarton.getDmgType() && !"".equals(staCarton.getDmgType()) && !"其他".equals(staCarton.getDmgType())) {
                    staCarton.setDmgType(biChannelImperfectDao.getByPrimaryKey(Long.parseLong(staCarton.getDmgType())).getName());
                }
                if (null != staCarton.getDmgReason() && !"".equals(staCarton.getDmgReason()) && !"其他".equals(staCarton.getDmgReason())) {
                    staCarton.setDmgReason(biChannelImperfectLineDao.getByPrimaryKey(Long.parseLong(staCarton.getDmgReason())).getName());
                }

            }
        }
        return staCartonCommand;
    }


    @Override
    public Pagination<StaOpLogCommand> showShelvesDetail(int start, int size, Long staId, Sort[] sorts) {
        Pagination<StaOpLogCommand> staCartonCommand = new Pagination<StaOpLogCommand>();
        staCartonCommand = staOpLogDao.showShelvesDetail(start, size, staId, new BeanPropertyRowMapperExt<StaOpLogCommand>(StaOpLogCommand.class), sorts);
        if (null != staCartonCommand && null != staCartonCommand.getItems() && !"".equals(staCartonCommand.getItems()) && staCartonCommand.getItems().size() > 0) {
            List<StaOpLogCommand> staCartonCommandList = staCartonCommand.getItems();
            for (StaOpLogCommand staCarton : staCartonCommandList) {
                if (null != staCarton.getExpDate() && !"".equals(staCarton.getExpDate())) {
                    Sku sku = skuDao.getByPrimaryKey(staCarton.getSkuId());
                    if (null != sku && null != sku.getValidDate() && !"".equals(sku.getValidDate())) {
                        staCarton.setProductionDate(getNDay(staCarton.getExpDate(), sku.getValidDate()));
                    }
                }
            }
        }
        return staCartonCommand;
    }

    @Override
    public Pagination<StaOpLogCommand> showShelvesSNDetail(int start, int size, Long staId, Sort[] sorts) {
        Pagination<StaOpLogCommand> staCartonCommand = new Pagination<StaOpLogCommand>();
        staCartonCommand = staOpLogDao.showShelvesSNDetail1(start, size, staId, new BeanPropertyRowMapperExt<StaOpLogCommand>(StaOpLogCommand.class), sorts);
        if (null != staCartonCommand && null != staCartonCommand.getItems() && !"".equals(staCartonCommand.getItems()) && staCartonCommand.getItems().size() > 0) {
            List<StaOpLogCommand> staCartonCommandList = staCartonCommand.getItems();
            for (StaOpLogCommand staCarton : staCartonCommandList) {
                if (null != staCarton.getExpDate() && !"".equals(staCarton.getExpDate())) {
                    Sku sku = skuDao.getByPrimaryKey(staCarton.getSkuId());
                    if (null != sku && null != sku.getValidDate() && !"".equals(sku.getValidDate())) {
                        staCarton.setProductionDate(getNDay(staCarton.getExpDate(), sku.getValidDate()));
                    }
                }
                if (null != staCarton.getDmgType() && !"".equals(staCarton.getDmgType()) && !"其他".equals(staCarton.getDmgType())) {
                    staCarton.setDmgType(biChannelImperfectDao.getByPrimaryKey(Long.parseLong(staCarton.getDmgType())).getName());
                }
                if (null != staCarton.getDmgReason() && !"".equals(staCarton.getDmgReason()) && !"其他".equals(staCarton.getDmgReason())) {
                    staCarton.setDmgReason(biChannelImperfectLineDao.getByPrimaryKey(Long.parseLong(staCarton.getDmgReason())).getName());
                }
            }
        }
        return staCartonCommand;
    }

    // esprit转店 查询
    @Override
    public Pagination<EspritStoreCommand> findEspritStoreByParams(int start, int size, Long ouId, EspritStoreCommand esprit, Sort[] sorts) {
        String name = null;
        String code = null;
        String cityCode = null;
        String contacts = null;
        String telephone = null;
        String userName = null;
        String gln = null;
        String cityGln = null;


        if (esprit != null) {
            if (!"".equals(esprit.getName())) {// 门店名称
                name = esprit.getName();
            }
            if (!"".equals(esprit.getCode())) {// 门店编码
                code = esprit.getCode();
            }
            if (!"".equals(esprit.getCityCode())) {// 城市编码
                code = esprit.getCityCode();
            }
            if (!"".equals(esprit.getContacts())) {// 联系人
                contacts = esprit.getContacts();
            }
            if (!"".equals(esprit.getTelephone())) {// 电话
                telephone = esprit.getTelephone();
            }
            if (!"".equals(esprit.getUserName())) {// 用户名
                userName = esprit.getUserName();
            }
            if (!"".equals(esprit.getGln())) {// gln编码
                gln = esprit.getGln();
            }
            if (!"".equals(esprit.getCityGln())) {// 城市gln编码
                cityGln = esprit.getCityGln();
            }
        }
        return espritStoreDao.findEspritStoreByParams(start, size, ouId, name, code, cityCode, contacts, telephone, userName, gln, cityGln, new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class), sorts);
    }

    @Override
    public String saveEsprit(EspritStoreCommand esprit) {
        EspritStore espritNew = new EspritStore();
        if ("1".equals(esprit.getType())) {
            EspritStoreCommand es1 = espritStoreDao.findEspritEn(esprit.getName(), null, null, null, null, new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 门店名称
            EspritStoreCommand es2 = espritStoreDao.findEspritEn(null, esprit.getCode(), null, null, null, new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 门店编码
            // EspritStoreCommand es3 = espritStoreDao.findEspritEn(null, null,
            // esprit.getCityCode(), null, null, new
            // BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 城市编码
            EspritStoreCommand es4 = espritStoreDao.findEspritEn(null, null, null, esprit.getGln(), null, new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 门店gln

            if (es1 != null) {
                return "1";
            }
            if (es2 != null) {
                return "2";
            }
            // if (es3 != null) {
            // return "3";
            // }
            if (es4 != null) {
                return "4";
            }

        } else {// 修改
            EspritStoreCommand es1 = espritStoreDao.findEspritEn(esprit.getName(), null, null, null, esprit.getId(), new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 门店名称
            EspritStoreCommand es2 = espritStoreDao.findEspritEn(null, esprit.getCode(), null, null, esprit.getId(), new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 门店编码
            // EspritStoreCommand es3 = espritStoreDao.findEspritEn(null, null,
            // esprit.getCityCode(), null, esprit.getId(), new
            // BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// 城市编码
            EspritStoreCommand es4 = espritStoreDao.findEspritEn(null, null, null, esprit.getGln(), esprit.getId(), new BeanPropertyRowMapperExt<EspritStoreCommand>(EspritStoreCommand.class));// gln

            if (es1 != null) {
                return "1";
            }
            if (es2 != null) {
                return "2";
            }
            // if (es3 != null) {
            // return "3";
            // }
            if (es4 != null) {
                return "4";
            }
        }
        try {
            PropertyUtil.copyProperties(esprit, espritNew);
        } catch (IllegalAccessException e) {
            if (logger.isErrorEnabled()) {
                log.error("saveEsprit IllegalAccessException:" + esprit.getCode(), e);
            }
        } catch (InvocationTargetException e) {
            if (logger.isErrorEnabled()) {
                log.error("saveEsprit InvocationTargetException:" + esprit.getCode(), e);
            }
        } catch (NoSuchMethodException e) {
            if (logger.isErrorEnabled()) {
                log.error("saveEsprit NoSuchMethodException:" + esprit.getCode(), e);
            }
        }
        espritStoreDao.save(espritNew);
        return null;
    }

    @Override
    public String delEsprit(List<Long> ids) {
        if (ids.size() > 0) {
            espritStoreDao.deleteAllByPrimaryKey(ids);
        }
        // for (Long long1 : ids) {
        //
        // }
        return null;
    }

    public Date getNDay(Date date, Integer factor) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DATE, -factor);
        return calendar.getTime();
    }

    @Override
    public String getStaDel(Long staId) {
        StaDeliveryInfo d = staDeliveryInfoDao.getByPrimaryKey(staId);
        if (StringUtil.isEmpty(d.getTrackingNo())) {// yes null
            return "2";
        } else {// no null
            return "1";
        }
    }


    @Override
    public PackageInfo getPackInfoById(Long id) {
        return packageInfoDao.getByPrimaryKey(id);
    }



    @Override
    public void synchroDeliveryInfo(String lpcode, String newTransNo, Long whOuId, StockTransApplicationCommand sta) {
        // 同步物流商发货接口
        TransOlInterface transol = transOnLineFactory.getTransOnLine1(lpcode, whOuId);
        if (transol != null) {
            transol.setRegistConfirmOrder(staDao.getByPrimaryKey(sta.getId()), newTransNo);
        }
    }

    /**
     * 导入转店商品目标店铺
     */
    @SuppressWarnings("unchecked")
    public ReadStatus importSkuTargetOwner(File file, Long ouId) throws Exception {
        log.debug("===========userWarehouseRefImport start============");
        Map<String, Object> beans = new HashMap<String, Object>();
        List<TransferOwnerTargetCommand> roleList = null;
        List<TransferOwnerTarget> totList = new ArrayList<TransferOwnerTarget>();

        ReadStatus rs = null;
        try {
            rs = skuTargetOwnerReader.readSheet(new FileInputStream(file), 0, beans);
            if (ReadStatus.STATUS_SUCCESS != rs.getStatus()) {
                return rs;
            }
            String type = (String) beans.get("type");
            roleList = (List<TransferOwnerTargetCommand>) beans.get("data");
            rs = checkSkuTargetOwner(roleList, totList, rs, type, ouId);
            if (rs.getStatus() != ReadStatus.STATUS_SUCCESS) {
                return rs;
            }
            for (TransferOwnerTarget tot : totList) {
                TransferOwnerTarget t = transferOwnerTargetDao.getTransferOwnerTarget(tot.getSkuId(), tot.getSourceOwner(), tot.getTargetOwner(), ouId);
                if (t != null) {
                    if (tot.getTargetRatio() == 0) {
                        transferOwnerTargetDao.delete(t);
                    } else {
                        t.setTargetRatio(tot.getTargetRatio());
                        transferOwnerTargetDao.save(t);

                    }
                    continue;
                }
                transferOwnerTargetDao.save(tot);
            }
            return rs;
        } catch (Exception e) {
            log.error("", e);
            throw e;
        }
    }

    public ReadStatus checkSkuTargetOwner(List<TransferOwnerTargetCommand> totcList, List<TransferOwnerTarget> totList, ReadStatus rs, String type, Long ouId) {
        Map<String, Map<String, TransferOwnerTargetCommand>> ratioMap = new HashMap<String, Map<String, TransferOwnerTargetCommand>>();
        for (TransferOwnerTargetCommand totc : totcList) {

            BiChannel bi = biChannelDao.getByCode(totc.getSourceOwner());

            if (bi == null) {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.SOURCE_OWNER_NOT_EXIT, new Object[] {totc.getSourceOwner()}));
                continue;
            }
            Customer c = bi.getCustomer();

            Sku sku = null;
            if ("SKU条码".equals(type)) {
                sku = skuDao.getByBarcode(totc.getSkuCode(), c.getId());
            } else {
                sku = skuDao.getByCode(totc.getSkuCode());
            }
            if (sku == null) {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.EI_SKU_NOTEXISTS, new Object[] {totc.getSkuCode()}));
                continue;
            } else {
                totc.setSkuId(sku.getId());
            }

            BiChannel tobi = biChannelDao.getByCode(totc.getTargetOwner());

            if (tobi == null) {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.TARGET_OWNER_NOT_EXIT, new Object[] {totc.getTargetOwner()}));
                continue;
            }

            if (totc.getTargetRatio() == null || totc.getTargetRatio() < 0) {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.TARGET_OWNER_RATIO, new Object[] {totc.getTargetRatio()}));
                continue;
            }

            Map<String, TransferOwnerTargetCommand> targetOwnerRatio = ratioMap.get(totc.getSourceOwner() + totc.getSkuId());
            if (targetOwnerRatio == null) {
                targetOwnerRatio = new HashMap<String, TransferOwnerTargetCommand>();
                ratioMap.put(totc.getSourceOwner() + totc.getSkuId(), targetOwnerRatio);
            }

            if (targetOwnerRatio.get(totc.getTargetOwner()) == null) {
                targetOwnerRatio.put(totc.getTargetOwner(), totc);
            } else {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.TARGET_SOURCE_EXIT, new Object[] {totc.getSourceOwner(), totc.getSkuCode(), totc.getTargetOwner()}));
            }


        }
        if (rs.getStatus() != ReadStatus.STATUS_SUCCESS) {
            return rs;
        }

        // 计算比例是否超过百分百
        for (String key : ratioMap.keySet()) {
            String sourceOwner = null;
            Long skuId = null;
            String skuCode = null;
            List<TransferOwnerTarget> tList = null;
            Integer ratio = 0;
            for (String key2 : ratioMap.get(key).keySet()) {
                TransferOwnerTargetCommand totc = ratioMap.get(key).get(key2);
                if (tList == null) {
                    sourceOwner = totc.getSourceOwner();
                    skuId = totc.getSkuId();
                    skuCode = totc.getSkuCode();
                    tList = transferOwnerTargetDao.findTargetRatioBySourceAndSku(skuId, sourceOwner, ouId, new BeanPropertyRowMapper<TransferOwnerTarget>(TransferOwnerTarget.class));
                }
                if (tList != null) {

                    int size = tList.size();
                    for (int i = 0; i < size; i++) {
                        TransferOwnerTarget tot = tList.get(i);
                        if (tot.getTargetOwner().equals(totc.getTargetOwner())) {
                            tList.remove(tot);
                            i--;
                            size--;
                            break;
                        }
                    }
                }
                ratio = ratio + totc.getTargetRatio();

                TransferOwnerTarget t = new TransferOwnerTarget();
                t.setSkuId(skuId);
                t.setSourceOwner(sourceOwner);
                t.setTargetOwner(totc.getTargetOwner());
                t.setTargetRatio(totc.getTargetRatio());
                t.setOuId(ouId);
                totList.add(t);
            }
            if (tList != null) {
                for (TransferOwnerTarget t : tList) {
                    ratio = ratio + t.getTargetRatio();
                }
            }
            if (ratio > 100) {
                rs.setStatus(-2);
                rs.addException(new BusinessException(ErrorCode.TARGET_OWNER_RATIO_HIGH, new Object[] {sourceOwner, skuCode}));
            }


        }

        return rs;
    }


    /**
     * 获取所有的来源店铺
     * 
     * @return
     */
    public List<TransferOwnerTargetCommand> findAllSourceOwner(Long ouId) {
        return transferOwnerTargetDao.findAllSourceOwner(ouId, new BeanPropertyRowMapper<TransferOwnerTargetCommand>(TransferOwnerTargetCommand.class));
    }

    /**
     * 获取所有的目标店铺
     * 
     * @param sourceOwner
     * @return
     */
    public List<TransferOwnerTargetCommand> findAllTargetOwner(String sourceOwner, Long ouId) {
        return transferOwnerTargetDao.findAllTargetOwner(ouId, sourceOwner, new BeanPropertyRowMapper<TransferOwnerTargetCommand>(TransferOwnerTargetCommand.class));
    }

    /**
     * 保存
     * 
     * @param tos
     * @return
     */
    public String insertTransferOwnerSource(TransferOwnerSource tos) {
        if (tos.getId() == null) {
            TransferOwnerSource old = transferOwnerSourceDao.getByOwnerSourceAndTargetOwner(tos.getOwnerSource(), tos.getTargetOwner(), tos.getOuId());
            if (old != null) {
                return "此来源店铺和目标店铺对应的优先店铺已经存在！";
            }
        }
        transferOwnerSourceDao.save(tos);
        return null;
    }

    /**
     * 优先店铺列表
     * 
     * @param start
     * @param pageSize
     * @return
     */
    public Pagination<TransferOwnerSourceCommand> findTransferOwnerSource(int start, int pageSize, Long ouId) {
        return transferOwnerSourceDao.findTransferOwnerSource(start, pageSize, ouId, new BeanPropertyRowMapper<TransferOwnerSourceCommand>(TransferOwnerSourceCommand.class));
    }

    /**
     * 删除优先店铺配置
     * 
     * @param id
     */
    public void deleteTransferOwnerSource(Long id) {
        transferOwnerSourceDao.deleteByPrimaryKey(id);
    }

    /**
     * 删除目标店铺比例
     * 
     * @param id
     */
    public void deleteTransferOwnerTarget(List<Long> ids) {
        transferOwnerTargetDao.deleteAllByPrimaryKey(ids);
    }

    /**
     * 商品目标店铺分配比例列表
     * 
     * @param start
     * @param pageSize
     * @return
     */
    public Pagination<TransferOwnerTargetCommand> findTransferOwnerTarget(int start, int pageSize, Map<String, Object> m) {
        return transferOwnerTargetDao.findTransferOwnerTarget(start, pageSize, m, new BeanPropertyRowMapper<TransferOwnerTargetCommand>(TransferOwnerTargetCommand.class));
    }

    /**
     * 修改目标店铺比例
     * 
     * @param totList
     */
    public void updateTransferOwnerTarget(List<TransferOwnerTargetCommand> totList) {
        for (TransferOwnerTargetCommand totc : totList) {
            Sku sku = skuDao.getByCode(totc.getSkuCode());

            TransferOwnerTarget tot = transferOwnerTargetDao.getTransferOwnerTarget(sku.getId(), totc.getSourceOwner(), totc.getTargetOwner(), totc.getOuId());
            tot.setTargetRatio(totc.getTargetRatio());
            transferOwnerTargetDao.save(tot);
        }
    }

    @Override
    public void updateDeliveryInfo(Long id) {
        RecieverInfo info = recieverInfoDao.getByPrimaryKey(id);
        AdvanceOrderAddInfo addInfo = addInfoDao.getByPrimaryKey(info.getAddInfo().getId());
        if (addInfo != null) {
            StockTransApplication sta = staDao.findStaByReSlipCode(addInfo.getOrderCode());
            if (sta != null) {
                sta.getStaDeliveryInfo().setLpCode(info.getLpcode());
                sta.getStaDeliveryInfo().setCity(info.getRecieverCity());
                sta.getStaDeliveryInfo().setCountry(info.getRecieverCountry());
                sta.getStaDeliveryInfo().setProvince(info.getRecieverProvince());
                sta.getStaDeliveryInfo().setDistrict(info.getRecieverDistrict());
                sta.getStaDeliveryInfo().setAddress(info.getRecieverAddress());
                sta.getStaDeliveryInfo().setTelephone(info.getRecieverTelephone());
                sta.getStaDeliveryInfo().setMobile(info.getRecieverMobilePhone());
                sta.getStaDeliveryInfo().setReceiver(info.getRecieverName());
                sta.getStaDeliveryInfo().setZipcode(info.getRecieverZipCode());
                List<PackageInfo> packageInfos = packageInfoDao.findByStaId(sta.getId());
                if (packageInfos.size() > 0) {
                    packageInfos.get(0).setOldTrackingNo(packageInfos.get(0).getTrackingNo());
                    packageInfos.get(0).setOldLpcode(packageInfos.get(0).getLpCode());
                    sta.getStaDeliveryInfo().setTrackingNo(null);
                    sta.getStaDeliveryInfo().setExtTransOrderId(null);
                    sta.getStaDeliveryInfo().setTransCityCode(null);
                    try {
                        transOlManager.matchingTransNo(sta.getId());
                    } catch (Exception e) {
                        if (logger.isErrorEnabled()) {
                            log.error("updateDeliveryInfo Exception,id : {},", id, e);
                        }
                    }

                    packageInfos.get(0).setTrackingNo(sta.getStaDeliveryInfo().getTrackingNo());
                    packageInfos.get(0).setLpCode(sta.getStaDeliveryInfo().getLpCode());
                    packageInfoDao.save(packageInfos.get(0));
                    addInfo.setStatus(2);
                    // addInfoDao.save(addInfo);
                    info.setStatus(1);
                } else {
                    addInfo.setStatus(0);
                    info.setStatus(1);
                    // addInfoDao.save(addInfo);
                    return;
                }

            }
        }
    }


    @Override
    public String delQsSkuBinding(List<String> ids, User u, OperationUnit op) {
        for (String string : ids) {
            Long id = Long.valueOf(string);
            qsSkuDao.deleteByPrimaryKey(id);
        }
        return "1";
    }


    @Override
    public MsgRtnOutbound saveMsgRtnOut(MsgRtnOutbound msg) {
        MsgRtnOutbound m = msgRtnOutboundDao.save(msg);
        return m;
    }

    @Override
    public String delSkuCountryOfOrigin(List<String> ids, User u, OperationUnit op) {
        if (ids != null && ids.size() < 1000) {
            List<Long> list = new ArrayList<Long>();
            for (String string : ids) {
                Long id = Long.valueOf(string);
                list.add(id);
            }
            skuDao.delSkuCountryOfOrigin(list);
        } else if (ids != null && ids.size() >= 1000) {
            List<Long> list = new ArrayList<Long>();
            for (int i = 0; i < ids.size(); i++) {
                Long id = Long.valueOf(ids.get(i));
                list.add(id);
                if (list.size() == 1000) {
                    skuDao.delSkuCountryOfOrigin(list);
                    list.clear();
                }
                if (i == ids.size() - 1 && !list.isEmpty()) {
                    skuDao.delSkuCountryOfOrigin(list);
                }
            }
        }
        return "1";
    }

    public String outBoundByPistList(String pickListCode, Long ouId, Long userId, String barCode, BigDecimal weigth) {
        PickingListCommand p = pickingListDao.findSinglePickListByCode(pickListCode, ouId, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
        Warehouse w = warehouseDao.getByOuId(ouId);
        Sku sku = skuDao.getByBarCodeAndCustomer(barCode, w.getCustomer().getId());
        if (null != sku) {
            if (!SkuSpType.CONSUMPTIVE_MATERIAL.equals(sku.getSpType())) {
                return "不是耗材";
            }
        } else {
            return "耗材不存在";
        }
        if (null != weigth) {
            if (weigth.compareTo(new BigDecimal(100)) > 0) {
                return "重量超过100";
            }

        } else {
            return "重量不能为空";
        }
        if (null != p && !"".equals(p)) {
            if (2 == p.getStatusInt() || 8 == p.getStatusInt()) {
                List<StockTransApplicationCommand> staList = staDao.findStaByPickList(p.getId(), ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
                if (null != staList && staList.size() > 0) {

                    List<AutoOutBoundEntity> autoOutBoundEntityList = new ArrayList<AutoOutBoundEntity>();
                    for (StockTransApplicationCommand list : staList) {
                        if (null != list.getIntStaStatus() && 2 == list.getIntStaStatus()) {
                            autoOutBoundEntityList.clear();
                            AutoOutBoundEntity autoOutBoundEntity = new AutoOutBoundEntity();
                            autoOutBoundEntity.setOuId(ouId);
                            autoOutBoundEntity.setStaId(list.getId());
                            autoOutBoundEntity.setSystemKey(list.getSystemKey());
                            autoOutBoundEntity.setTrackingNo(list.getTrackingNo());
                            autoOutBoundEntity.setUserId(userId);
                            autoOutBoundEntity.setWeight(weigth);
                            autoOutBoundEntity.setSkuId(sku.getId());
                            autoOutBoundEntity.setQty(1L);
                            autoOutBoundEntityList.add(autoOutBoundEntity);
                            checkListManager.outBoundByPistListToMq(autoOutBoundEntityList);
                        }
                    }
                }
            } else {
                return "批次号状态不正确";
            }
        } else {
            return "批次号不存在";
        }
        return "成功";
    }


    @Override
    public void occupiedInventoryByStaToMqUpdateSta(StockTransApplication sta, String ocpCode) {
        if (StringUtil.isEmpty(ocpCode)) {
            sta.setOcpBatchCode(null);
            sta.setOcpCode(null);
        } else {
            sta.setOcpBatchCode(ocpCode);
            sta.setOcpCode(ocpCode);
            sta.setLastModifyTime(new Date());
        }
    }

    public String findPistListStatus(Long ouId, String pistListCode) {
        String flag = null;
        PickingListCommand p = pickingListDao.findSinglePickListByCode(pistListCode, ouId, new BeanPropertyRowMapperExt<PickingListCommand>(PickingListCommand.class));
        if (null != p && !"".equals(p)) {
            if ("10".equals(p.getStatusInt() + "")) {
                Long countNum = staDao.findStaByPickingListId(p.getId(), ouId, new SingleColumnRowMapper<Long>(Long.class));
                flag = "此批次已经完成-" + countNum;
            } else if ("2".equals(p.getStatusInt() + "")) {
                Long countNum = staDao.findStaByPickingListId(p.getId(), ouId, new SingleColumnRowMapper<Long>(Long.class));
                flag = "此批次配货中-" + countNum;
            } else if ("8".equals(p.getStatusInt() + "")) {
                Long countNum = staDao.findStaByPickingListId(p.getId(), ouId, new SingleColumnRowMapper<Long>(Long.class));
                flag = "此批次部分完成中-" + countNum;
            }
        } else {
            flag = "批次号不存在";
        }
        return flag;

    }

    /**
     * 获取运单号 BY MQ
     * 
     * @param orderCount
     * @return
     */
    public List<Long> findNoTransStaByMq(Long orderCount) {
        return staDao.findNoTransStaByMq(orderCount, new SingleColumnRowMapper<Long>(Long.class));
    }

    @Override
    public void importLfSta(String staCode, String wls, String ydh, Double weight, String field, String ctnType) {
        warehouseDao.insertLfRtnOutbound(staCode, wls, ydh, weight, field, ctnType);
        if (!StringUtil.isEmpty(ctnType)) {
            // 插入明细表
            warehouseDao.insertLfRtnLine(field, ctnType);
        }
    }

    @Override
    public List<InventoryOccupyCommand> findSalesOutboundToOccupyInventoryNew(Integer saleOcpType, Long staId, String wooCode) {
        // return inventoryDao.findSalesOutboundToOccupyInventoryNew(saleOcpType, staId, wooCode,
        // new BeanPropertyRowMapperExt<InventoryOccupyCommand>(InventoryOccupyCommand.class));
        return null;
    }



    public void autoOutBoundByAll(String message) {
        List<StaAdditionalLine> saddlinesList = new ArrayList<StaAdditionalLine>();
        List<AutoOutBoundEntity> autoOutBoundEntityList = com.baozun.utilities.json.JsonUtil.readList(message, AutoOutBoundEntity.class);
        try {
            if (null != autoOutBoundEntityList && autoOutBoundEntityList.size() > 0) {
                StockTransApplication sta = staDao.getByPrimaryKey(autoOutBoundEntityList.get(0).getStaId());
                if (!StockTransApplicationStatus.OCCUPIED.equals(sta.getStatus())) {
                    log.info("autoOutBoundByAllStaStatus" + sta.getStatus());
                } else {
                    if (null != autoOutBoundEntityList.get(0).getSystemKey() && !"".equals(autoOutBoundEntityList.get(0).getSystemKey()) && "adidas".equals(autoOutBoundEntityList.get(0).getSystemKey())) {
                        OrderCheckCommand checkOrder = new OrderCheckCommand();
                        checkOrder.setStaId(autoOutBoundEntityList.get(0).getStaId());
                        checkOrder.setPickingType(1);
                        checkOrder.setTransNo(autoOutBoundEntityList.get(0).getTrackingNo());
                        boolean b = adCheckManager.isAdPreSale(autoOutBoundEntityList.get(0).getStaId());
                        if (b) {
                            adCheckManager.storeLogisticsSend(autoOutBoundEntityList.get(0).getStaId(), false);
                            adCheckManager.ifExistsLineCanncel(checkOrder, autoOutBoundEntityList.get(0).getUserId(), autoOutBoundEntityList.get(0).getOuId());
                        }
                        outboundInfoManager.doCheckBySta(checkOrder, autoOutBoundEntityList.get(0).getUserId(), autoOutBoundEntityList.get(0).getOuId(), null, null);
                    } else {
                        // 核对
                        checkSingleSta(autoOutBoundEntityList.get(0).getStaId(), autoOutBoundEntityList.get(0).getTrackingNo(), null, null, autoOutBoundEntityList.get(0).getUserId());
                    }
                    StaAdditionalLine s = new StaAdditionalLine();
                    s.setQuantity(autoOutBoundEntityList.get(0).getQty());
                    s.setSku(skuDao.getByPrimaryKey(autoOutBoundEntityList.get(0).getSkuId()));
                    saddlinesList.add(s);
                    // 称重 出库
                    Map<String, Object> rs =
                            salesStaOutBoundHand(autoOutBoundEntityList.get(0).getStaId(), autoOutBoundEntityList.get(0).getUserId(), null, autoOutBoundEntityList.get(0).getOuId(), autoOutBoundEntityList.get(0).getTrackingNo(), autoOutBoundEntityList
                                    .get(0).getWeight(), saddlinesList, false, null);
                    if (rs != null) {
                        if ((Boolean) rs.get("bool")) {} else {
                            findUnCheckedPackageBySta(autoOutBoundEntityList.get(0).getStaId());
                        }
                    }
                }
            }
        } catch (BusinessException e) {
            log.error("autoOutBoundByAlle" + autoOutBoundEntityList.get(0).getStaId(), e);
        } catch (Exception e1) {
            log.error("autoOutBoundByAlle1" + autoOutBoundEntityList.get(0).getStaId(), e1);
        }
    }

    @Override
    public List<StockTransApplicationCommand> findStaByPickingListCode(String pickCode, Long ouId) {
        return staDao.findCancelStaByPickingCode(pickCode, ouId, new BeanPropertyRowMapper<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }

    /**
     * 查询批次是否是澳门件
     */
    @Override
    public Boolean queryIsMacaoOrder(String slipCode) {
        Boolean flag = false;
        List<StockTransApplication> stas = staDao.findBySlipCode(slipCode);
        if (stas != null && !stas.isEmpty()) {
            for (StockTransApplication sta : stas) {
                if (sta.getIsMacaoOrder().booleanValue()) {
                    flag = true;
                    break;
                }
            }
        }
        return flag;
    }

    /**
     * gucci退仓指令
     * 
     * @param start
     * @param pageSize
     * @param startTime
     * @param endTime
     * @param slipCode
     * @param toLoction
     * @return
     * @throws JSONException
     */
    public Pagination<VmiRtoCommand> findGucciRtnList(int start, int pageSize, Date startTime, Date endTime, String slipCode, String toLoction) throws JSONException {
        Pagination<VmiRtoCommand> list = vmiRtoDao.findVmiRtoByGucci(start, pageSize, startTime, endTime, slipCode, toLoction, new BeanPropertyRowMapper<VmiRtoCommand>(VmiRtoCommand.class));
        List<VmiRtoCommand> vrcList = list.getItems();
        if (vrcList != null && vrcList.size() > 0) {
            for (VmiRtoCommand vrc : vrcList) {
                if (!StringUtil.isEmpty(vrc.getExtMemo())) {
                    try {

                        JSONObject inObj = new loxia.support.json.JSONObject(vrc.getExtMemo());
                        String address = inObj.get("toLocation") == null ? null : inObj.get("toLocation").toString();
                        if (!StringUtil.isEmpty(address)) {
                            vrc.setToLocation(address);
                        }
                    } catch (Exception e) {}
                }
            }
        }
        return list;
    }

    /**
     * gucci退仓指令明细
     * 
     * @param start
     * @param pageSize
     * @param rtoId
     * @return
     * @throws JSONException
     */
    public Pagination<VmiRtoLineCommand> findGucciRtoLineList(int start, int pageSize, Long rtoId) {
        Pagination<VmiRtoLineCommand> list = vmiRtoLineDao.findRtoLinePageByRtoId(start, pageSize, rtoId, new BeanPropertyRowMapper<VmiRtoLineCommand>(VmiRtoLineCommand.class));
        return list;
    }

    @Transactional(readOnly = true)
    @Override
    public Pagination<StockTransApplicationCommand> findOutboundPickingTaskList(int start, int pageSize, StockTransApplicationCommand staCmd, Long ouid, Sort[] sorts) {

        Date startCreateTime = null;
        Date endCreateTime = null;
        Integer intStatus = null;
        String owner = null;
        String code = null;
        String refSlipCode = null;
        Integer intStaType = null;
        if (staCmd != null) {
            if (staCmd.getStartCreateTime() != null) {
                startCreateTime = staCmd.getStartCreateTime();
            }
            if (staCmd.getEndCreateTime() != null) {
                endCreateTime = staCmd.getEndCreateTime();
            }
            if (StringUtils.hasLength(staCmd.getOwner())) {
                owner = staCmd.getOwner();
            }
            if (staCmd.getIntStaType() != null) {
                intStaType = staCmd.getIntStaType();
            }
            if (staCmd.getIntStaStatus() != null) {
                intStatus = staCmd.getIntStaStatus();
            }
            if (StringUtils.hasLength(staCmd.getCode())) {
                code = staCmd.getCode() + "%";
            }
            if (StringUtils.hasLength(staCmd.getRefSlipCode())) {
                refSlipCode = staCmd.getRefSlipCode() + "%";
            }
        }
        return staDao.findOutboundPickingTaskStaListPage(start, pageSize, startCreateTime, endCreateTime, owner, intStaType, intStatus, code, refSlipCode, ouid, sorts, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(
                StockTransApplicationCommand.class));
    }



    @Override
    public Pagination<StaLineCommand> getOutboundDetailList(int start, int pageSize, Long staid, Sort[] sorts) {
        return staLineDao.getOutboundDetailList(start, pageSize, staid, sorts, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }


    public StaLfCommand findOutBound(Long staId) {
        return staLfDao.findOutBound(staId, new BeanPropertyRowMapperExt<StaLfCommand>(StaLfCommand.class));
    }

    public Boolean findCrwStaByStaId(Long staId) {
        Boolean msg = false;
        StockTransApplication sto = staDao.getByPrimaryKey(staId);
        if (null != sto && sto.getStatus().getValue() != 10) {
            msg = true;
        }
        return msg;
    }


    public Boolean saveCrwStaByStaId(Long staid, Long lfId, String crd, String nfsStoreCode, String city, String zip, String address1, String address2, String address3, String address4) {
        Boolean msg = false;
        StaLf staLf = staLfDao.getByPrimaryKey(lfId);
        if (null != staLf) {
            staLf.setCrd(crd);
            staLf.setNfsStoreCode(nfsStoreCode);
            staLf.setCity(city);
            staLf.setZip(zip);
            staLf.setAddress1(address1);
            staLf.setAddress2(address2);
            staLf.setAddress3(address3);
            staLf.setAddress4(address4);
            staLfDao.save(staLf);
            StockTransApplication sto = staDao.getByPrimaryKey(staid);
            sto.getStaDeliveryInfo().setCity(city);
            sto.getStaDeliveryInfo().setZipcode(zip);
            StringBuffer address = new StringBuffer();
            if (null != address1 && "" != address1) {
                address.append(address1);
            }
            if (null != address2 && "" != address2) {
                address.append(address2 + " ");
            }
            if (null != address3 && "" != address3) {
                address.append(address3 + " ");
            }
            if (null != address4 && "" != address4) {
                address.append(address4 + " ");
            }
            sto.getStaDeliveryInfo().setAddress(address.toString());
            staDao.save(sto);
            msg = true;
        }
        return msg;
    }

    @Override
    public List<InventoryCommand> findInventoryBatchLockList(String locationCode, String skuCode, Long shopId, Long ouid, Long inventoryStatusId, String productionDate, String expireDate) {
        String lc = null;
        Long invs = null;
        String pd = null;
        String ed = null;
        String sc = null;
        if (!StringUtil.isEmpty(locationCode)) {
            lc = locationCode;
        }
        if (!StringUtil.isEmpty(skuCode)) {
            sc = skuCode;
        }
        if (null != inventoryStatusId) {
            invs = inventoryStatusId;
        }
        if (!StringUtil.isEmpty(productionDate)) {
            pd = productionDate;
        }
        if (!StringUtil.isEmpty(expireDate)) {
            ed = expireDate;
        }
        return inventoryDao.findInventoryBatchLockList(lc, sc, shopId, ouid, invs, pd, ed, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }


    @Override
    public List<InventoryCommand> findInventoryBatchLockListByInvIds(String invIds, Long ouid) {
        List<Long> ids = null;
        if (!StringUtil.isEmpty(invIds)) {
            ids = new ArrayList<Long>();
            String[] id = invIds.split(",");
            for (String i : id) {
                ids.add(Long.parseLong(i));
            }
        }
        return inventoryDao.findInventoryBatchLockListByInvIds(ids, ouid, new BeanPropertyRowMapperExt<InventoryCommand>(InventoryCommand.class));
    }


    @Override
    public Pagination<DeliveryChanngeLogCommand> findDeliveryChanngeLogCommandList(int start, int pageSize, Sort[] sorts, Long ouId, DeliveryChanngeLogCommand deCommand) {
        String staCode = null;
        String slipCode = null;
        String slipCode1 = null;
        String trackingNo = null;
        String newTranckingNo = null;
        String lpCode = null;
        String newLpcode = null;
        String channel = null;
        if (deCommand != null) {
            if (StringUtils.hasText(deCommand.getStaCode())) {
                staCode = "%" + deCommand.getStaCode() + "%";
            }
            if (StringUtils.hasText(deCommand.getSlipCode())) {
                slipCode = "%" + deCommand.getSlipCode() + "%";
            }
            if (StringUtils.hasText(deCommand.getSlipcode1())) {
                slipCode1 = "%" + deCommand.getSlipcode1() + "%";
            }
            if (StringUtils.hasText(deCommand.getTrackingNo())) {
                trackingNo = "%" + deCommand.getTrackingNo() + "%";
            }
            if (StringUtils.hasText(deCommand.getNewTrackingNo())) {
                newTranckingNo = "%" + deCommand.getNewTrackingNo() + "%";
            }
            if (StringUtils.hasText(deCommand.getLpcode())) {
                lpCode = deCommand.getLpcode();
            }
            if (StringUtils.hasText(deCommand.getNewLpcode())) {
                newLpcode = deCommand.getNewLpcode();
            }
            if (StringUtils.hasText(deCommand.getChannel())) {
                channel = deCommand.getChannel();
            }


        }
        return delogDao.getDeliveryChanngeLogList(start, pageSize, ouId, sorts, channel, staCode, slipCode, slipCode1, lpCode, trackingNo, newLpcode, newTranckingNo, deCommand.getStartDate(), deCommand.getEndDate(),
                new BeanPropertyRowMapper<DeliveryChanngeLogCommand>(DeliveryChanngeLogCommand.class));
    }


    @Override
    public StockTransApplication findSta(Long staId) {
        StockTransApplication sta = staDao.getByPrimaryKey(staId);
        StockTransApplication sta1 = new StockTransApplication();
        sta1.setId(staId);
        sta1.setOwner(sta.getOwner());
        return sta1;
    }


    @Override
    public List<PickingListCommand> getExportAgv(String plCode, String areaCode) {
        if ("".equals(areaCode)) {
            areaCode = null;
        }
        return pickingListDao.getExportAgv(areaCode, plCode, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
    }


    @Override
    public void saveCommomAgvOutBound(Long staId, Long pId) {
        List<PickingListCommand> pl = pickingListDao.saveCommomAgvOutBound(pId, new BeanPropertyRowMapper<PickingListCommand>(PickingListCommand.class));
        AgvOutBound agvOutBound = null;
        AgvOutBoundLine agvOutBoundLine = null;
        Map<String, Long> map = new HashMap<String, Long>();
        for (PickingListCommand pickingListCommand : pl) {
            if (map.get(pickingListCommand.getStaCode()) == null) {
                AgvOutBound a = agvOutBoundDao.getAgvOutBoundByStaCode(pickingListCommand.getStaCode(), new BeanPropertyRowMapper<AgvOutBound>(AgvOutBound.class));
                if (a == null) {
                    agvOutBound = new AgvOutBound();
                    agvOutBound.setCreateTime(new Date());
                    agvOutBound.setOutBoundTime(new Date());
                    agvOutBound.setPlCode(pickingListCommand.getCode());
                    agvOutBound.setStaCode(pickingListCommand.getStaCode());
                    agvOutBound.setStatus(0);
                    agvOutBound.setErrorCount(0);
                    agvOutBound.setStaType(pickingListCommand.getStaType());
                    agvOutBound = agvOutBoundDao.save(agvOutBound);
                    map.put(pickingListCommand.getStaCode(), agvOutBound.getId());
                } else {
                    break;
                }
            }
            agvOutBoundLine = new AgvOutBoundLine();
            agvOutBoundLine.setCreateTime(new Date());
            agvOutBoundLine.setQuantity(Long.valueOf(pickingListCommand.getQuantity()));
            agvOutBoundLine.setExpireDate(pickingListCommand.getExpireDate());
            agvOutBoundLine.setAgvId(map.get(pickingListCommand.getStaCode()));
            agvOutBoundLine.setSkuId(pickingListCommand.getSkuId());
            agvOutBoundLineDao.save(agvOutBoundLine);
        }
    }


    @Override
    public boolean cancelAgv(String staCode, Long ouId) {
        Warehouse w = warehouseDao.getByOuId(ouId);
        if (w.getIsAgv() != null && w.getIsAgv()) {
            log.error("cancelAgv" + staCode);
            com.baozun.ecp.ip.command.agv.Response response = wms3AdapterInteractManager.agvCancle(staCode);
            MongoAGVMessage mdbm = new MongoAGVMessage();
            mdbm.setStaCode(staCode);
            mdbm.setMsgType("cancelAgv1");
            mdbm.setOtherUniqueKey(staCode);
            mdbm.setMsgBody(com.baozun.utilities.json.JsonUtil.writeValue(response));
            mdbm.setSendTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            mongoOperation.save(mdbm);
            String re = null;
            List<Response.OrderResponse> lss = response.getOrderResponse();
            for (Response.OrderResponse orderResponse : lss) {
                re = orderResponse.getErrorCode();
            }
            if ("ERROR_CANCEL_ORDERS_RESULT".equals(re)) {// 取消失败（业务失败） 插入推送
                // 实现取消接口 如果取消ok 继续 如果失败 插入中间表 推送 进行取消处理
                StockTransApplication sta = staDao.queryStaByCode(staCode, new BeanPropertyRowMapperExt<StockTransApplication>(StockTransApplication.class));
                List<AgvOutBoundLineDto> ls = agvOutBoundDao.agvByStaCodeAndPlCodeInBound(staCode, null, new BeanPropertyRowMapper<AgvOutBoundLineDto>(AgvOutBoundLineDto.class));
                InboundAgvToHub inboundAgvToHub = new InboundAgvToHub();
                inboundAgvToHub.setApiName("cancelAgv");
                inboundAgvToHub.setStaId(sta.getId());
                inboundAgvToHub.setCreateTime(new Date());
                inboundAgvToHub.setErrorCount(0L);
                inboundAgvToHub.setStatus(1L);
                inboundAgvToHub.setType("采购入库");
                Boolean b = true;
                for (AgvOutBoundLineDto agvOutBoundLineDto : ls) {
                    if (b) {
                        inboundAgvToHub = inboundAgvToHubDao.save(inboundAgvToHub);
                        b = false;
                    }
                    InboundAgvToHubLine inboundAgvToHubLine = new InboundAgvToHubLine();
                    inboundAgvToHubLine.setInAgvId(inboundAgvToHub.getId());
                    inboundAgvToHubLine.setQty(agvOutBoundLineDto.getQuantity());
                    inboundAgvToHubLine.setSkuId(agvOutBoundLineDto.getSkuId());
                    Sku sku = skuDao.getByPrimaryKey(agvOutBoundLineDto.getSkuId());
                    if (sku.getStoremode().equals(InboundStoreMode.SHELF_MANAGEMENT)) {
                        inboundAgvToHubLine.setExpireDate(agvOutBoundLineDto.getExpireDateStr());
                    }
                    inboundAgvToHubLineDao.save(inboundAgvToHubLine);
                }

            }

        }
        return false;
    }


    @Override
    public List<SkuReplenishmentCommand> findReplenishSuggest(Long ouId, String staCode) {
        return staErrorLineDao.findReplenishSummarySuggest(ouId, staCode, new BeanPropertyRowMapperExt<SkuReplenishmentCommand>(SkuReplenishmentCommand.class));
    }

    @Override
    public Pagination<RelationNike> findRelationNikeByOuid(int start, int size, Sort[] sorts, Long id, RelationNike relationNike) {
        String sysPid = null;
        String enPid = null;
        if (relationNike != null) {
            if (StringUtils.hasText(relationNike.getSysPid())) {
                sysPid = "%" + relationNike.getSysPid() + "%";
            }
            if (StringUtils.hasText(relationNike.getEnPid())) {
                enPid = "%" + relationNike.getEnPid() + "%";
            }

        }

        return relationNikeDao.findRelationNikeByOuid(start, size, sorts, id, sysPid, enPid, new BeanPropertyRowMapperExt<RelationNike>(RelationNike.class));
    }


    @Override
    public RelationNike getSysCaseNumber(String caseNumber, Long ouId) {
        if (relationNikeDao.getByEnPidNoOu(caseNumber).size() == 0) {
            return null;
        }
        return relationNikeDao.getByEnPidNoOu(caseNumber).get(0);
    }


    @Override
    public Pagination<AdPackageLineDealDto> adPackageList(String adOrderId, String wmsOrderId, String extended, String adOrderType, Integer status, String trankNo, String lpCode, Date fromTime, Date endTime, Integer opStatus, String skuId, int start,
            int size, Sort[] sorts) {
        if (!StringUtils.hasText(adOrderId)) {
            adOrderId = null;
        }
        if (!StringUtils.hasText(wmsOrderId)) {
            wmsOrderId = null;
        }
        if (!StringUtils.hasText(extended)) {
            extended = null;
        }
        if (!StringUtils.hasText(adOrderType)) {
            adOrderType = null;
        }
        if (!StringUtils.hasText(trankNo)) {
            trankNo = null;
        }
        if (!StringUtils.hasText(skuId)) {
            skuId = null;
        }
        if (!StringUtils.hasText(lpCode)) {
            lpCode = null;
        }
        if (status == null || status == 0) {

            status = null;
        }
        if (opStatus == null || opStatus == 2) {

            opStatus = null;
        }
        return adPackageLineDealDao.adPackageList(start, size, new BeanPropertyRowMapperExt<AdPackageLineDealDto>(AdPackageLineDealDto.class), sorts, adOrderId, wmsOrderId, extended, adOrderType, status, trankNo, lpCode, fromTime, endTime, opStatus,
                skuId);
    }


    @Override
    public AdPackageLineDeal adPackageDetail(Long id) {
        return adPackageLineDealDao.adPackageDetail(id, new BeanPropertyRowMapper<AdPackageLineDeal>(AdPackageLineDeal.class));
    }


    @Override
    public Pagination<AdPackageLineDealLogDto> adPackageLog(String adOrderId, int start, int size, Sort[] sorts) {
        // TODO Auto-generated method stub
        return adPackageLineDealLogDao.adPackageLog(start, size, new BeanPropertyRowMapperExt<AdPackageLineDealLogDto>(AdPackageLineDealLogDto.class), sorts, adOrderId);
    }


    @Override
    public void adPackageCommit(Long id, String wmsStatus, String remark, String userName) {
        adPackageLineDealDao.adPackageCommit(id, wmsStatus, remark, userName);
    }


    @Override
    public void insertAdPackageLog(Long id) {
        AdPackageLineDeal adPackageLineDeal = adPackageLineDealDao.adPackageDetail(id, new BeanPropertyRowMapper<AdPackageLineDeal>(AdPackageLineDeal.class));
        AdPackageLineDealLog adPackageLineDealLog = new AdPackageLineDealLog();
        adPackageLineDealLog.setAdOrderId(adPackageLineDeal.getAdOrderId());
        adPackageLineDealLog.setReturnInstruction(adPackageLineDeal.getReturnInstruction());
        adPackageLineDealLog.setExtended(adPackageLineDeal.getExtended());
        adPackageLineDealLog.setLpCode(adPackageLineDeal.getLpCode());
        adPackageLineDealLog.setTrankNo(adPackageLineDeal.getTrankNo());
        adPackageLineDealLog.setCreateTime(adPackageLineDeal.getCreateTime());
        adPackageLineDealLog.setLastUpdateTime(new Date());
        adPackageLineDealLog.setAdOrderType(adPackageLineDeal.getAdOrderType());
        adPackageLineDealLog.setAdStatus(adPackageLineDeal.getAdStatus());
        adPackageLineDealLog.setStatus(adPackageLineDeal.getStatus());
        adPackageLineDealLog.setOpUser(adPackageLineDeal.getOpUser());
        adPackageLineDealLog.setSkuId(adPackageLineDeal.getSkuId());
        adPackageLineDealLog.setQuantity(adPackageLineDeal.getQuantity());
        adPackageLineDealLog.setWmsStatus(adPackageLineDeal.getWmsStatus());
        adPackageLineDealLog.setWmsOrderType(adPackageLineDeal.getWmsOrderType());
        adPackageLineDealLog.setRemark(adPackageLineDeal.getRemark());
        adPackageLineDealLog.setWmsOrderId(adPackageLineDeal.getWmsOrderId());
        adPackageLineDealLog.setType(1);
        adPackageLineDealLog.setOpStatus(adPackageLineDeal.getOpStatus());
        adPackageLineDealLog.setAdRemark(adPackageLineDeal.getAdRemark());
        adPackageLineDealLog.setIsSend(adPackageLineDeal.getIsSend());
        adPackageLineDealLog.setNum(adPackageLineDeal.getNum());
        adPackageLineDealLogDao.save(adPackageLineDealLog);

    }


    @Override
    public Pagination<StockTransApplicationCommand> findPoStaList(int start, int size, Long ouId, Sort[] sorts, StockTransApplicationCommand sta) {
        String code = null;
        String slipCode1 = null;
        String refSlipCode = null;
        String owner = null;
        if (sta != null) {
            if (StringUtils.hasText(sta.getCode())) {
                code = sta.getCode() + "%";
            }
            if (StringUtils.hasText(sta.getSlipCode1())) {
                slipCode1 = sta.getSlipCode1() + "%";
            }
            if (StringUtils.hasText(sta.getOwner())) {
                owner = sta.getOwner() + "%";
            }
            if (StringUtils.hasText(sta.getRefSlipCode())) {
                refSlipCode = sta.getRefSlipCode() + "%";
            }
        }
        return staDao.findPoStaList(start, size, owner, code, refSlipCode, slipCode1, ouId, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class), sorts);
    }


    @Override
    public List<StaLineCommand> findPoLineStaList(Long staId) {
        return staLineDao.findPoLineStaList(staId, new BeanPropertyRowMapperExt<StaLineCommand>(StaLineCommand.class));
    }



    public Warehouse findWareHouseById(Long ouId) {
        return warehouseDao.getByOuId(ouId);
    }
    
    public ChooseOption getChooseOptionCache(String strCode) {
        if (StringUtil.isEmpty(strCode)) return null;
        ChooseOption result = chooseOptionCache.get(strCode);
        // 缓存中的数据不存在或者已过期
        if (result == null) {
            result = cacheChooseOption(strCode);
        }
        return result;
    }

    private synchronized ChooseOption cacheChooseOption(String strCode) {
        ChooseOption result = chooseOptionDao.findByCategoryCodeAndKey("snOrExpDate", "1");
        chooseOptionCache.put(strCode, result, 10 * 60 * 1000);
        return result;
    }


    @Override
    public List<StarbucksIcePackage> findStarbucksIcePackage() {
        String key = "StarbucksIcePackage";
        List<StarbucksIcePackage> sList = starbucksIcePackageMap.get(key);
        if(null == sList) {
            sList = starbucksIcePackageDao.findStarbucksIcePackage(new BeanPropertyRowMapperExt<StarbucksIcePackage>(StarbucksIcePackage.class));
            starbucksIcePackageMap.put(key, sList, 60 * 60 * 1000);
        }
        return sList;
    }


    @Override
    public StockTransApplicationCommand findStarbucksDetail(String code) {
        return staDao.findStarbucksDetail(code, new BeanPropertyRowMapperExt<StockTransApplicationCommand>(StockTransApplicationCommand.class));
    }
   
    @Override
    public void updateBaoShuiOutStaLine(Long baoShuiOutStaLineId, Long gQty) {
        customsDeclarationLineDao.getByPrimaryKey(baoShuiOutStaLineId).setGqty(gQty);
    }


    @Override
    public void updateBaoShuiOutSta(CustomsDeclarationDto cd) {
        CustomsDeclaration cdd= customsDeclarationDao.getByPrimaryKey(cd.getId()); 
        cdd.setGrossWt(cd.getGrossWt());
        cdd.setWrapType(cd.getWrapType());
        cdd.setLicensePlateNumber(cd.getLicensePlateNumber());
        cdd.setStatus(1);
    }


    @Override
    public void updateWeight(Long ouId) {
        //查询所有sku不完整的报关头
        List<CustomsDeclaration> cuList = customsDeclarationDao.findCustomsDeclarationLackSku(ouId,new BeanPropertyRowMapper<CustomsDeclaration>(CustomsDeclaration.class));
        for (CustomsDeclaration customsDeclaration : cuList) {
            //删除明细
            customsDeclarationLineDao.deleteCustomsDeclarationLineByCusId(customsDeclaration.getId());
            List<StaLine> staLineList = staLineDao.findByStaId(staDao.getByCode(customsDeclaration.getWmsCode()).getId());
            for (StaLine staLine : staLineList) {
              List<SkuDeclaration> skuList= skuDeclarationDao.findSkuDeclarationMoreLocation(staLine.getSku().getCode(), new BeanPropertyRowMapper<SkuDeclaration>(SkuDeclaration.class));
              //重新插入报关明细   
              for (SkuDeclaration skuDeclaration : skuList) {
                    CustomsDeclarationLine cd = new CustomsDeclarationLine();
                    cd.setCustomsDeclarationId(customsDeclaration.getId());
                    cd.setSkuCode(skuDeclaration.getSkuCode());
                    cd.setUpc(skuDeclaration.getUpc());
                    cd.setDeclPrice(skuDeclaration.getDeclPrice());
                    cd.setPlanQty(staLine.getQuantity());
                    cd.setGqty(staLine.getCompleteQuantity());
                      customsDeclarationLineDao.save(cd);
                }
            }
        }
        customsDeclarationDao.countCustomsDeclarationWeight(ouId);
    }
	
	@Override
    public Pagination<WmsCancelOrder> findCancelSta(int start, int size, String staCode, String slipCode, String owner, int status, Date startTime, Date endTime, Long ouId, Sort[] sorts) {
        if (!StringUtils.hasText(staCode)) {
            staCode = null;
        }
        if (!StringUtils.hasText(slipCode)) {
            slipCode = null;
        }
        if (!StringUtils.hasText(owner)) {
            owner = null;
        }
        if (startTime == null) {
            startTime = new Date((new Date().getTime() - 1000 * 60 * 60 * 24 * 90L));
        }
        if (endTime == null) {
            endTime = new Date();
        }
        if (!StringUtils.hasText(status + "")) {
            status = 20;
        }
        Pagination<WmsCancelOrder> page = wmsCancelOrderDao.findDeliveryFailureSta(start, size, owner, staCode, slipCode, ouId, startTime, endTime, status, new BeanPropertyRowMapperExt<WmsCancelOrder>(WmsCancelOrder.class), sorts);
     /*   if (page.getItems() != null) {
            for (WmsCancelOrder order : page.getItems()) {
                WmsCancelOrder order1 = wmsCancelOrderDao.findWmsCancelOrderByStaCode(order.getStaCode());
                if (order1 != null) {
                    order.setId(order1.getId());
                }
            }
        }*/
        return page;
    }


    @Override
    public List<WmsCancelOrderLine> findCancelStaLine(Long id) {
        List<WmsCancelOrderLine> list= wmsCancelOrderLineDao.findCancelLine1(id, new BeanPropertyRowMapperExt<WmsCancelOrderLine>(WmsCancelOrderLine.class));
        if(list!=null&&list.size()>0){
            return list;
        }
        return wmsCancelOrderLineDao.findCancelLine(id, new BeanPropertyRowMapperExt<WmsCancelOrderLine>(WmsCancelOrderLine.class));
    }


    @Override
    public void saveCancelStaInfo(WmsCancelOrder cancelOrder, List<WmsCancelOrderLine> list) {
        WmsCancelOrder wc = wmsCancelOrderDao.findWmsCancelOrderByStaCode(cancelOrder.getStaCode());
        if (wc != null) {
            cancelOrder.setId(wc.getId());
        }else{
            cancelOrder.setId(null);  
        }
        StockTransApplication sta=staDao.getByCode(cancelOrder.getStaCode());
        sta=staDao.getByPrimaryKey(sta.getId());
        cancelOrder.setSlipCode1(sta.getSlipCode1());
        cancelOrder.setWhCode(sta.getMainWarehouse().getCode());
        wmsCancelOrderDao.save(cancelOrder);
        for (WmsCancelOrderLine wmsCancelOrderLine : list) {
            wmsCancelOrderLine.setCancelOrderId(cancelOrder.getId());
            wmsCancelOrderLineDao.save(wmsCancelOrderLine);
        }
    }
    public List<SkuRfid> findRfidResult(String skuBarCode, List<String> rfid) {
         return null;
	}
    @Override
    public void saveAndSendCancelStaInfo(WmsCancelOrder cancelOrder, List<WmsCancelOrderLine> list) {
        saveCancelStaInfo(cancelOrder, list);
        StockTransApplication sta = staDao.getByCode(cancelOrder.getStaCode());
        wmsCancelOrderDao.flush();
        // 发送取消单成功，执行库内取消
        if(sta.getSystemKey()!=null&&"".equals("toms")){
            hubWmsService.wmsCancelOrder(sta.getSystemKey(), cancelOrder.getStaCode(), cancelOrder.getSlipCode1());//OMS订单取消
        }else{
            rmiService.cancelOrder(cancelOrder.getSlipCode());//pacs取消
        }
        // 库内取消单同步hub
        orderCancel2Adapter(cancelOrder.getId(),sta);
    }
    
    private String orderCancel2Adapter(Long id, StockTransApplication sta) {
        WmsCancelOrder ca = wmsCancelOrderDao.getByPrimaryKey(id);
        String result = "";
        if (ca != null) {
            List<WmsCancelOrderLine> calList = wmsCancelOrderLineDao.findCancelLineBycaId(id);
            MissingOrder mo = new MissingOrder();
            MissingOrders mos = new MissingOrders();
            mo.setOrderCode(ca.getSlipCode());
            mo.setPlatformOrderCode(ca.getSlipCode1());
            mo.setStoreCode(ca.getOwner());
            mo.setWhCode(ca.getWhCode());
            for (WmsCancelOrderLine wmsCancelOrderLine : calList) {
                MissingOrder.MissingOrderDetailInfo moDe = new MissingOrder.MissingOrderDetailInfo();
                moDe.setSkuCode(wmsCancelOrderLine.getSkuCode());
                moDe.setBarCode(wmsCancelOrderLine.getBarCode());
                moDe.setPlanQty(wmsCancelOrderLine.getPlanQty());
                moDe.setActualQty(wmsCancelOrderLine.getUsableQty());
                moDe.setMissingQty(wmsCancelOrderLine.getLackQty());
                moDe.setMissingReason(wmsCancelOrderLine.getReason());
                mo.getMissingOrderDetailInfo().add(moDe);
            }
       
            mos.getMissingOrder().add(mo);
            if (sta.getSystemKey() != null && "".equals("toms")) {
                mos.setSourceMarkCode("route_toms");
            } else {
                mos.setSourceMarkCode("routePacs");
            }
            com.baozun.ecp.ip.command.response.Response re = null;
            try {
                re = wms3AdapterInteractManager.wmsStoreCancelNoticeHub(mos);
            } catch (Exception e) {
                result = "接口调用失败";
                log.error("wmsStoreCancelNoticeHub invoke failed", e);
                throw e;
            }
            // 发送成功
            if (re.getResponse() != null && re.getResponse().equals("1")) {
                ca.setStatus(10);
                result = "success";
            } else {
                throw new BusinessException(re.getErrorMsg());
            }
        }
        return result;
    }


    @Override
    public List<CustomsDeclarationLineCommand> queryBaoShuiOutStaLineList(Long id, String skuCode, String upc) {
        if(StringUtils.hasText(skuCode)){
            skuCode="%"+skuCode+"%"; 
        }else{
            skuCode=null;
        }
        if(StringUtils.hasText(upc)){
            upc="%"+upc+"%";
        }else{
            upc=null;
        }
        return customsDeclarationLineDao.getCustomsDeclarationLine(id,skuCode,upc,new BeanPropertyRowMapper<CustomsDeclarationLineCommand>(CustomsDeclarationLineCommand.class));
    }


   
    @Override
    public Sku findSkuRfidByBarCode(String barCode, Long ouId) {
        // TODO Auto-generated method stub
        Long customerId = wareHouseManagerQuery.getCustomerByWhouid(ouId);
        return skuDao.getByBarcode(barCode, customerId);
    }
}
