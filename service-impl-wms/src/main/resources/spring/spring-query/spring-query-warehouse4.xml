<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="StvLine.findStvLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							sku.id as skuId,
							status.id as intInvstatus,
							stv.owner,
							cnl.name shopName,
							sku.bar_code as barCode,
							sku.jm_code as jmcode,
							sku.key_properties as keyProperties,
							sku.name as skuName,
							sku.supplier_code as supplierCode,
							status.name as intInvstatusName,
							stv.quantity,
							stv.sku_cost,
							stv.batch_code
						from 
							(
								select
									stvl.owner,
									sku.id as skuId,
									stvl.batch_code,
									stvl.SKU_COST,
									status.id as statusId,
									sum(stvl.quantity) as quantity
								from
									t_wh_stv stv,
									t_wh_stv_line stvl,
									T_BI_INV_SKU sku,
									t_wh_inventory_status status
								where
									stv.id=stvl.stv_id
									and stvl.sku_id=sku.id
									and stvl.inv_status_id=status.id
									and stv.direction=2
									and stv.sta_id=:staId
								group by 
									stvl.owner,stvl.batch_code,sku.id,status.id,stvl.SKU_COST
							) stv,
							T_BI_INV_SKU sku,
							t_wh_inventory_status status,
							t_bi_channel cnl
						where 
							sku.id=stv.skuId
							and stv.statusId=status.id
							and stv.owner = cnl.code
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findInboundStvLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
	l.id,
	sku.bar_code as barCode,
	sku.code as skuCode,
	sku.jm_code as jmCode,
	sku.key_properties as keyProperties,
	sku.name as skuName,
	sku.supplier_code as supplierCode,
	sku.ext_code1 as extCode1,
	status.name as intInvstatusName,
	l.owner,
	cnl.name shopName,
	l.receipt_qty as receiptQty,
	l.remain_plan_qty as remainPlanQty,
	l.difference_qty as differenceQty,
	(nvl(l.quantity,0) - nvl(l.ADDED_QTY,0)) as overplusAddedQty,
	l.quantity
from 
	t_wh_stv_line l,
	t_bi_channel cnl,
	T_BI_INV_SKU sku,
	t_wh_inventory_status status
where 
	sku.id=l.sku_id
	and cnl.code = l.owner
	and l.inv_status_id=status.id
	and l.stv_id=:stvId
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findInboundStvLineHand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sku.id,
       sku.id as skuId,
       sku.bar_code as barCode,
       sku.supplier_code as supplierCode,
       sku.key_properties as keyProperties,
       sku.name as skuName,
       s.name as intInvstatusName,
       loc.code as locationCode,
       l.QUANTITY - nvl(l.added_qty, 0) as quantity,
       l.added_qty as addedQty,
       decode(sku.store_mode,33,'1','0') as isShelfManagement,
       sku.is_sn_sku as isSnSku,
        sku.sn_type as snType,
       INV_STATUS_ID as intInvstatus
  from T_BI_INV_SKU sku,  t_wh_stv_line l
  left join t_wh_inventory_status s
    on l.inv_status_id = s.id
  left join t_wh_location loc
    on l.location_id = loc.id
 where sku.id = l.sku_id
   and l.stv_id = :stvId
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findQtySkuByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT sum(l.quantity) quantity,s.name intInvstatusName,sku.ext_code2 extCode2
					FROM t_wh_stv stv,t_wh_stv_line l,t_bi_inv_sku sku,T_WH_INVENTORY_STATUS s
					WHERE stv.id=l.stv_id
					      and stv.status=10 
					      AND l.sku_id=sku.id
					      AND l.inv_status_id= s.id
					      AND stv.sta_id= :staId
					GROUP BY s.name,sku.ext_code2      
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findPdaInboundLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
  pda.id as id,
  pda.user_name as userName,
  location_code as locationCode,
  sku.bar_code,
  sku.code,
  sku.jm_code,
  sku.key_properties,
  sku.name,
  sku.supplier_code,
  operate.user_name as operateName,
  decode(pda.pda_upload_qty,null,pda.qty,pda.pda_upload_qty) as planQty,
  nvl(adjust_qty,0) as differenceQty,
  qty as addedQty
from 
  T_BI_INV_SKU sku,
  (
    select pdal.id,pdal.OPERATE_USER_ID,pda.user_name,pdal.location_code,pdal.sku_code,qty,adjust_qty,pda_upload_qty from 
    t_wh_stv stv,
    t_wh_sta sta,
    t_wh_pda_order pda,
    t_wh_pda_order_line pdal
    where 
    sta.id=stv.sta_id
    and sta.code=pda.order_code
    and pda.id=pdal.pda_order_id
    and (pda.status = 1 or pda.status = 0 or pda.status = 5)
    and (pdal.status =1 or pdal.status is null)
    and pda.type=3
    #if($pdaId)
    	and pda.id=:pdaId
    #end
    #if($locationCode)
    	and pdal.location_code like :locationCode
    #end
    and stv.id=:stvId
    
  ) pda
  left join t_au_user operate on OPERATE_USER_ID = operate.id
where 
sku.code=pda.sku_code
#if($barCode)
 	and sku.bar_code like :barCode
#end
#if($supplierCode)
 	and sku.supplier_code like :supplierCode
#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findPdaInboundNotDifLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
  sku.id,
  sku.bar_code as barCode,
  sku.code as skuCode,
  sku.jm_code as jmCode,
  sku.key_properties as keyProperties,
  sku.name as skuName,
  sku.supplier_code as supplierCode,
  l.quantity - nvl(l.added_qty,0) as remainPlanQty,
  pdal.qty as addedQty 
from 
  (
    select 
    l.stv_id,l.sku_id,sum(l.quantity) as quantity,sum(l.added_qty) as added_qty 
    from t_wh_stv_line l 
    where  l.stv_id=:stvId
  group by l.stv_id,l.sku_id
  ) l,
  T_BI_INV_SKU sku,
  (
    select pdal.sku_code,sum(qty) as qty from 
      t_wh_stv stv,
      t_wh_sta sta,
      t_wh_pda_order pda,
      t_wh_pda_order_line pdal
      where 
      sta.id=stv.sta_id
      and sta.code=pda.order_code
      and pda.id=pdal.pda_order_id
      and (pda.status = 1 or pda.status = 0 or pda.status = 5)
      and (pdal.status = 1 or pdal.status is null)
      and pda.type=3
      and stv.id=:stvId
      group by pdal.sku_code
  ) pdal
where sku.id=l.sku_id
and sku.code=pdal.sku_code
and (l.quantity - nvl(l.added_qty,0)) = pdal.qty
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findPdaInboundDifLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select tb.*,(tb.remainPlanQty - addedQty) as differenceQty from 
(
(
select
  sku.id,
  sku.bar_code as barCode,
  sku.code as skuCode,
  sku.jm_code as jmCode,
  sku.key_properties as keyProperties,
  sku.name as skuName,
  sku.supplier_code as supplierCode,
  nvl(l.quantity,0) - nvl(l.added_qty,0) as remainPlanQty,
  pdal.qty as addedQty 
from 
  (
    select 
    l.stv_id,l.sku_id,sum(l.quantity) as quantity,sum(l.added_qty) as added_qty 
    from t_wh_stv_line l 
    where  l.stv_id=:stvId
  group by l.stv_id,l.sku_id
  ) l,
  T_BI_INV_SKU sku
  left join (
    select pdal.sku_code,sum(qty) as qty from 
      t_wh_stv stv,
      t_wh_sta sta,
      t_wh_pda_order pda,
      t_wh_pda_order_line pdal
      where 
      sta.id=stv.sta_id
      and sta.code=pda.order_code
      and pda.id=pdal.pda_order_id
      and (pda.status = 1 or pda.status = 0 or pda.status = 5)
      and (pdal.status = 1 or pdal.status is null)
      #if($locationCode)
         and pdal.location_code like :locationCode
      #end
      and pda.type=3
      and stv.id=:stvId
      group by pdal.sku_code
  ) pdal on sku.code=pdal.sku_code
where sku.id=l.sku_id
and l.quantity != pdal.qty
#if($barCode)
 	and sku.bar_code like :barCode
#end
#if($supplierCode)
 	and sku.supplier_code like :supplierCode
#end
)
union all
(
select
  sku.id,
  sku.bar_code ,
  sku.code,
  sku.jm_code,
  sku.key_properties,
  sku.name,
  sku.supplier_code,
  0,
  pda.qty
from 
  T_BI_INV_SKU sku,
  (
    select pdal.sku_code,sum(qty) as qty from 
    t_wh_stv stv,
    t_wh_sta sta,
    t_wh_pda_order pda,
    t_wh_pda_order_line pdal
    where 
    sta.id=stv.sta_id
    and sta.code=pda.order_code
    and pda.id=pdal.pda_order_id
    and (pda.status = 1 or pda.status = 0 or pda.status = 5)
    and (pdal.status = 1 or pdal.status is null)
    #if($locationCode)
    	and pdal.location_code like :locationCode
    #end
    and pda.type=3
    and stv.id=:stvId
    group by pdal.sku_code
  ) pda
where 
sku.code=pda.sku_code
#if($barCode)
 	and sku.bar_code like :barCode
#end
#if($supplierCode)
 	and sku.supplier_code like :supplierCode
#end
and sku.id not in (select sku_id from t_wh_stv_line where stv_id=:stvId)
)
) tb
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.findConfirmDiversity" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
	l.id,
	sku.bar_code as barCode,
	sku.code as skuCode,
	sku.jm_code as jmCode,
	sku.key_properties as keyProperties,
	sku.name as skuName,
	sku.supplier_code as supplierCode,
	sku.ext_code1 as extCode1,
	status.name as intInvstatusName,
	cnl.name owner,
	l.receipt_qty as receiptQty,
	l.remain_plan_qty as remainPlanQty,
	l.difference_qty as differenceQty,
	l.added_qty as addeQty,
	l.quantity
from 
	t_wh_stv_line l,
	t_bi_channel cnl,
	T_BI_INV_SKU sku,
	t_wh_inventory_status status
where 
	sku.id=l.sku_id
	and cnl.code = l.owner
	and l.inv_status_id=status.id
	and l.stv_id=:stvId
	and (l.difference_qty is null or l.difference_qty != 0)
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findInBoundIsSN" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select rownum             as id,
       sku.bar_code       as barCode,
       sku.code           as skuCode,
       sku.jm_code        as jmCode,
       sta.code           as staCode,
       sku.key_properties as keyProperties,
       sku.name           as skuName,
       sku.supplier_code  as supplierCode,
       sku.ext_code1      as extCode1,
       decode(sku.Store_Mode,33,'是','否') as isShelfManagement,
       status.name        as intInvstatusName,
       l.owner,
       l.receiptQty,
       l.remainPlanQty,
       l.differenceQty,
       l.addeQty,
       l.quantity
  from (select l.sku_id,
               l.inv_status_id,
               c.name as owner,
               l.stv_id as stvId,
               sum(l.receipt_qty) as receiptQty,
               sum(l.remain_plan_qty) as remainPlanQty,
               sum(l.difference_qty) as differenceQty,
               sum(l.added_qty) as addeQty,
               sum(l.quantity) as quantity
          from t_wh_stv_line l,t_bi_channel c
         where nvl(l.quantity, 0) > nvl(l.added_qty, 0)
           and c.code=l.owner
              #if($stvId)
           and l.stv_id = :stvId
              #else
           and l.stv_id in (-1
                            #foreach($id in $stvListId)
                              ,$id
                            #end)
        #end
         group by l.sku_id, l.inv_status_id, c.name,l.stv_id) l,
       T_BI_INV_SKU sku,
       t_wh_inventory_status status,
       t_wh_stv stv,
       t_wh_sta sta
 where sku.id = l.sku_id
 	and l.stvId=stv.id
 	and stv.sta_id=sta.id
   and l.inv_status_id = status.id
      #if("$!isSkuSn"=="true")
   and sku.Is_Sn_Sku = 1
      #else
   and (sku.is_sn_sku is null or sku.is_sn_sku = 0)
#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findInBound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select rownum             as id,
       sku.bar_code       as barCode,
       sku.code           as skuCode,
       sku.jm_code        as jmCode,
       sta.code           as staCode,
       sku.key_properties as keyProperties,
       sku.name           as skuName,
       sku.supplier_code  as supplierCode,
       sku.ext_code1      as extCode1,
       decode(sku.Store_Mode,33,'是','否') as isShelfManagement,
       status.name        as intInvstatusName,
       l.owner,
       l.receiptQty,
       l.remainPlanQty,
       l.differenceQty,
       l.addeQty,
       l.quantity
  from (select l.sku_id,
               l.inv_status_id,
               c.name as owner,
               l.stv_id as stvId,
               sum(l.receipt_qty) as receiptQty,
               sum(l.remain_plan_qty) as remainPlanQty,
               sum(l.difference_qty) as differenceQty,
               sum(l.added_qty) as addeQty,
               sum(l.quantity) as quantity
          from t_wh_stv_line l,t_bi_channel c
         where nvl(l.quantity, 0) > nvl(l.added_qty, 0)
           and c.code=l.owner
              #if($stvId)
           and l.stv_id = :stvId
              #else
           and l.stv_id in (-1
                            #foreach($id in $stvListId)
                              ,$id
                            #end)
        #end
         group by l.sku_id, l.inv_status_id, c.name,l.stv_id) l,
       T_BI_INV_SKU sku,
       t_wh_inventory_status status,
       t_wh_stv stv,
       t_wh_sta sta
 where sku.id = l.sku_id
 	and l.stvId=stv.id
 	and stv.sta_id=sta.id
   and l.inv_status_id = status.id
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findInventInBoundIsSN" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select rownum             as id,
       sku.bar_code       as barCode,
       sku.code           as skuCode,
       sku.jm_code        as jmCode,
       sku.key_properties as keyProperties,
       sku.name           as skuName,
       sku.supplier_code  as supplierCode,
       sku.ext_code1      as extCode1,
       decode(sku.Store_Mode,33,'是','否') as isShelfManagement,
       status.name        as intInvstatusName,
       l.owner,
       l.completeQuantity,
       (nvl(l.quantity, 0) - nvl(l.completeQuantity, 0)) as quantity
  from (select l.sku_id,
               l.inv_status_id,
               c.code as owner,
               sum(l.COMPLETE_QUANTITY) as completeQuantity,
               sum(l.quantity) as quantity
          from t_wh_sta_line l,t_bi_channel c,t_wh_sta sta
         where nvl(l.quantity, 0) > nvl(l.COMPLETE_QUANTITY, 0)
           and c.code= case
       when sta.type in (32,90,91)
       then sta.addi_owner
       else l.owner
       end  and sta.id = l.sta_id
              #if($staId)
           and l.sta_id = :staId
              #else
           and l.sta_id in (-1
                            #foreach($id in $staListId)
                              ,$id
                            #end)
        #end
         group by l.sku_id, l.inv_status_id, c.code) l,
       T_BI_INV_SKU sku,
       t_wh_inventory_status status
 where sku.id = l.sku_id
   and l.inv_status_id = status.id
      #if("$!isSkuSn"=="true")
   and sku.Is_Sn_Sku = 1
      #else
   and (sku.is_sn_sku is null or sku.is_sn_sku = 0)
#end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findConfirmDiversityError" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
	l.id,
	sku.bar_code as barCode,
	sku.code as skuCode,
	sku.jm_code as jmCode,
	sku.key_properties as keyProperties,
	sku.name as skuName,
	sku.supplier_code as supplierCode,
	sku.ext_code1 as extCode1,
	status.name as intInvstatusName,
	l.owner,
	l.receipt_qty as receiptQty,
	l.remain_plan_qty as remainPlanQty,
	l.difference_qty as differenceQty,
	l.quantity
from 
	t_wh_stv_line l,
	T_BI_INV_SKU sku,
	t_wh_inventory_status status
where 
	sku.id=l.sku_id
	and l.inv_status_id=status.id
	and (nvl(l.quantity,0) >  l.remain_Plan_qty or l.quantity is null or l.quantity <= 0)
	and l.stv_id=:stvId
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WarehouseLocation.findLocationByLocationCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
						select 
							loc.id,
							loc.code,
							decode(inv.qty,null,0,inv.qty) as inventoryNum
						from
							t_wh_location loc
							left join(
								select 
									sum(inv.quantity) qty,
									inv.location_id,
									inv.ou_id 
								from 
									t_wh_sku_inventory inv 
								where 
									inv.location_id is not null 
								group by 
									ou_id,inv.location_id
							) inv on loc.id = inv.location_id and loc.ou_id = inv.ou_id
						where 
							loc.is_Available=1
							and nvl(loc.is_locked,0)=0
							and loc.ou_id =:ouId
							and loc.code=:locCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineByStaIdAndDirection" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							stvl.batch_code,
							stvl.SKU_COST,
							stvl.owner,
							stvl.quantity,
							stvl.inv_status_id as intInvstatus,
							stvl.sku_id,
							loc.code as locationCode,
							stvl.inbound_time as inBoundTime,
							stvl.STALINE_ID as stalineId,
							stvl.expire_date as expireDate,
							to_char(stvl.expire_date,'yyyyMMdd') as strExpireDate,
							stvl.valid_date as validDate  
						from 
							t_wh_sta sta,
							t_wh_stv stv,
							t_wh_stv_line stvl,
							t_wh_location loc
						where
							sta.id=stv.sta_id
							and stvl.location_id=loc.id
							and stv.id=stvl.stv_id
							and stv.DIRECTION=:direction
							and sta.id=:staId
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findLocationByLikeCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select loc.id,loc.code from t_wh_location loc where loc.is_Available=1 and  nvl(loc.is_locked,0)=0 and loc.ou_id=:ouId and upper(loc.code) like upper(:code)
						]]>
			</value>
		</constructor-arg>
	</bean>




	<bean id="Sku.findSkuByLikeCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							sku.id,sku.code
						from
							t_wh_sku_inventory inv,
							T_BI_INV_SKU sku,
							t_wh_location loc
						where
							inv.sku_id=sku.id
							and loc.IS_AVAILABLE = 1
							and nvl(loc.is_locked,0) = 0
							and inv.location_id=loc.id
							and (inv.is_occupied is null or inv.is_occupied=0)
							and inv.ou_id=:ouId
							and sku.code like :skuCode
						group by sku.id,sku.code
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyCodeByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct sku.id as ID,sku.code as CODE from t_wh_sku_inventory inv,t_bi_inv_sku sku where sku.id = inv.sku_id and inv.ou_id = :ouid]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyBarcodeByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct sku.id as ID,sku.bar_code as CODE from t_wh_sku_inventory inv,t_bi_inv_sku sku where sku.id = inv.sku_id and inv.ou_id = :ouid]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyCodeNeedSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.id as ID, sku.code as CODE
									  from T_BI_INV_SKU sku
									 where sku.is_sn_sku = 1
									 #if($customerId)
									   and sku.customer_id = :customerId
									  #end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyCodeNotNeedSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.id as ID, sku.code as CODE
									  from T_BI_INV_SKU sku
									 where (sku.is_sn_sku = 0 or sku.is_sn_sku is null)
									 #if($customerId)
									   and sku.customer_id = :customerId
									  #end
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyBarcodeNeedSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.id as ID, sku.bar_code as CODE
								  from T_BI_INV_SKU sku
								 where sku.is_sn_sku = 1
				                   #if($customerId)
				                     and sku.customer_id = :customerId
				                    #end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyBarcodeNotNeedSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.id as ID, sku.bar_code as CODE
					  from T_BI_INV_SKU sku
					 where (sku.is_sn_sku = 0 or sku.is_sn_sku is null)
					                    #if($customerId)
					                     and sku.customer_id = :customerId
					                    #end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findProductForBoxByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select p.bar_code,p.id,p.code,p.name,p.supplier_code supplierCode,p.box_qty boxQty,p.update_time updateTime
				 from t_bi_inv_sku p where 1 = 1
		          #if($code)
		            and p.jm_code like :code
		          #end          
		          #if($supplier)
      				 and p.supplier_code like :supplier
				  #end
				  #if($name)
					 and p.name like :name
				  #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSkuByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct sku.jm_code code
					from t_wh_stv_line l,t_bi_inv_sku sku
					where sku.id=l.sku_id
					and (sku.height is null or sku.gross_weight is null)
					and l.stv_id=:stvId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckLine.findinvCheckLineDetialByInvCheckId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select cl.id as id,lo.code as locationCode,d.code as districtCode, d.name as districtName
						from T_WH_INV_CHECK_LINE cl,
						t_wh_location lo,t_wh_district d
							where cl.location_id = lo.id
							and cl.district_id = d.id
							and cl.inv_check_id = :invcheckid
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckLine.updateDistrictByInvCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_inv_check_line l set l.district_id = (select loc.district_id from t_wh_location loc where loc.id = l.location_id) where l.inv_check_id = :icId and l.location_id is not null]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckLine.insertLineByIc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[insert into t_wh_inv_check_line(ID,LOCATION_ID,version,inv_check_id) values(s_t_wh_inv_check_line.nextval,:locId,0,:icId)]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckLine.findLocMap" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select loc.id AS ID,loc.code as CODE from T_WH_INV_CHECK_LINE icl,t_wh_location loc where loc.id= icl.location_id and icl.inv_check_id  = :icId]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheck.findInventoryCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select ic.code as code, ic.create_time as createTime,ic.remork as remork,ic.status as intStatus,
						ic.confirm_user as confirmUser, u.user_name as creatorName
						from T_WH_INV_CHECK ic, t_au_user u 
							where ic.creator_id = u.id (+)
							and ic.id = :invcheckid
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheck.findICById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select ic.id,ic.code as code, ic.create_time as createTime,ic.remork as remork,ic.status as intStatus,ic.slip_code as slipCode
						from T_WH_INV_CHECK ic where ic.id = :invcheckid 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheck.findIMaxTransactionTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select max(tlog.tran_time) as manager_time
					from 
					t_wh_st_log tlog ,
					T_WH_INV_CHECK inv 
					where inv.id = tlog.inventory_check_id 
					and tlog.tran_time>sysdate-90
					and inv.id = :invcheckid 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean
		id="InventoryCheckDifferenceLine.findInvCheckCountNoLocationByInvCheckId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select  sku.code as skuCode,
	        sku.bar_code as barcode,
	        sku.name as skuName,
	        checinv.quantity,
	        sku.id as id 
			from 
			(
			   select  
			       k.id as skuid,       
			       sum(d.quantity) as quantity
			   from T_WH_INV_CHECK_DIF_LINE d,
			        T_BI_INV_SKU k
			      where d.sku_id = k.id
			      and d.inv_check_id = :invCkId
			      and d.quantity !=0
			      group by k.id
			) checinv,                    
			  T_BI_INV_SKU sku
			where sku.id = checinv.skuid

						]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheckDifferenceLine.findInvCkDifLineByInvCkId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select d.id as id, d.quantity as quantity, k.code as skuCode,k.bar_code as barcode,
						k.name as skuName,lo.code as locationCode, inv.name as invStatusName,d.sku_cost,d.owner,k.Ext_Code2 extensionCode2,
						TO_CHAR(d.expire_date,'YYYY-MM-DD') as sexpireDate 
							from T_WH_INV_CHECK_DIF_LINE d,
									T_BI_INV_SKU k, 
									t_wh_location lo, 
									T_WH_INVENTORY_STATUS inv
							where d.sku_id = k.id
							and d.status_id = inv.id(+)
							and d.location_id = lo.id
							and d.inv_check_id = :invCkId
						]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheckMoveLine.findInvCheckMoveLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select sku.code as skuCode,sku.bar_code as barcode,sku.name skuName,li.quantity,status.name as invStatusName,lo.code as
 						locationCode,sta.code as staCode,li.expire_date from T_WH_INV_CHECK_MOVE_LINE li,
						t_bi_inv_sku sku,T_WH_INVENTORY_STATUS status,t_wh_location lo,t_wh_sta sta where li.sku_id=sku.id and
 						li.status_id=status.id and li.location_id=lo.id and li.sta_id=sta.id
							and li.inv_check_id = :invCkId
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceLine.saveCKinvCheckDifLine"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						insert into T_WH_INV_CHECK_DIF_LINE (id,QUANTITY,Version,Inv_Check_Id,Location_Id,Sku_Id,Status_Id,Owner,Sku_Cost)
						  select S_T_WH_INV_CHECK_DIF_LINE.NEXTVAL,inv.qty,0, :invCheckId, loc.id , sku.id ,:statusId,:owner,0
						  from t_ck_inventory_data inv ,t_wh_location loc,
						  t_bi_inv_sku sku 
						  where loc.code=inv.branch_code and loc.ou_id= :ouId and loc.is_available=1
						  and sku.bar_code=inv.sku_code and inv.status= :status
						  and inv.batch_num= :batchNum
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceLine.findCheckOverageByInvCk"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
	d.id as id, 
	d.quantity as quantity, 
	k.code as skuCode,
	k.bar_code as barcode,
	k.name as skuName,
	lo.code as locationCode, 
	inv.name as invStatusName,
	c.name as owner
from 
    T_BI_INV_SKU k, 
    t_wh_location lo,
    T_WH_INV_CHECK_DIF_LINE d
    left join T_WH_INVENTORY_STATUS inv on d.status_id = inv.id
    left join t_wh_sku_inventory_cost cost on d.sku_id=cost.sku_id and cost.comp_ou_id=:compId
    left join (
        select max(owner) as owner,sku_id from 
            (
            select max(inv.inv_owner) as owner ,inv.sku_id
            from t_wh_sku_inventory inv 
            where inv.ou_id=:ouId
            and inv.inv_owner is not null 
            and inv.quantity > 0
            group by inv.sku_id
            union
            select max(log.owner) as owner,log.sku_id 
            from 
            t_wh_st_log log
            where 
            log.direction=1
            and log.wh_id=:ouId
            group by log.sku_id
            )
        group by sku_id
    ) tb on  tb.sku_id=d.sku_id
    left join T_BI_CHANNEL c on tb.owner = c.code
where d.sku_id = k.id
and d.location_id = lo.id
and d.quantity > 0
and d.inv_check_id = :invCkId
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceLine.createByInnentory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into T_WH_INV_CHECK_DIF_LINE
select s_T_WH_INV_CHECK_DIF_LINE.Nextval,-inv.quantity,0,inv.district_id,ic.id,inv.location_id,inv.sku_id,inv.status_id,inv.inv_owner,null from
t_wh_sku_inventory inv,
t_wh_inv_check ic
where inv.occupation_code=ic.code
and ic.code=:icCode
						]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheckDifferenceLine.deleteById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
delete T_WH_INV_CHECK_DIF_LINE where id = :id
						]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="InventoryCheck.findAllinventoryCheckByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select c.id,c.code as code, c.confirm_user as confirmUser, u.user_name as creatorName,
							c.create_time as createTime,c.status as intStatus
							from t_wh_inv_check c,t_au_user u
							where c.creator_id = u.id(+)
							#if($startDate)
								and c.create_time >= :startDate
							#end
							#if($endDate)
							    and c.create_time <= :endDate
							#end
							#if($code)
							    and c.code like :code
							#end
							#if($creatorName)
							   and Upper(u.user_name) like Upper(:creatorName)
							#end
							#if($confirmUser)
								and Upper(c.confirm_user) like Upper(:confirmUser)
							#end
							#if($intStatus)
								and c.status = :intStatus
							#end
							and c.ou_id = :ouid
							and (c.type=1
							or c.type=5)
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheck.findAllVMIinventoryCheckByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select c.id,c.code as code, c.confirm_user as confirmUser ,
							c.create_time as createTime,c.status as intStatus, c.slip_code as slipCode,c.status as status1,
							 b.name as owner,t.option_value as reasonCode
							from 
              				t_wh_inv_check c left join t_sys_choose_option t on c.reason_code = t.option_key and t.category_code = 'converseADJReason',
				          t_bi_channel b
							where 
                  			c.shop_id = b.id
							#if($startDate)
								and c.create_time >= :startDate
							#end
							#if($endDate)
							    and c.create_time <= :endDate
							#end
							#if($code)
							    and c.code like :code
							#end
							#if($slipCode)
							    and c.slip_code like :slipCode
							#end
							#if($code)
							    and c.code like :code
							#end
							#if($intStatus)
								and c.status = :intStatus
							#end
							#if($owner)
								and b.id = :owner
							#end
							and c.ou_id = :ouid
							and c.type=2
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllSkuMapByWhouId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select distinct sku.id,sku.name,sku.bar_code barcode,sku.code,sku.jm_code jmcode,sku.key_properties keyproperties
            from t_wh_sku_inventory inv, t_wh_location l,T_BI_INV_SKU sku,t_bi_warehouse wh
            where inv.ou_id = :WhouId
              #if($owner)
                  and inv.inv_owner=:owner
              #end
                  and inv.location_id = l.id 
                  and inv.sku_id =sku.id
                  and wh.ou_id = inv.ou_id
                  and nvl(sku.customer_id,0) = nvl(wh.customer_id,0)
                  and l.is_available = 1
                  and nvl(l.is_locked,0)=0
                  and (inv.occupation_code is null or inv.occupation_code = '')
                  and exists(select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt 
                        where lt.location_id = l.id and lt.transtype_id = tt.id
                        and tt.code = 'TRANSIT_CROSS_OUT')
            order by sku.id]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select ID,CODE from T_BI_INV_SKU sku where sku.customer_id = :customerId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyExtCode2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select ID,EXT_CODE2 from T_BI_INV_SKU sku where sku.customer_id = :customerId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyCodeByOuWithSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 select distinct sku.id as ID, sku.bar_code as CODE
  from t_wh_sku_inventory inv, t_bi_inv_sku sku,t_wh_inv_check_line l
 where sku.id = inv.sku_id
   and l.location_id = inv.location_id
   and l.inv_check_id = :icid
   and inv.ou_id = :ouid
      #if("$!isSnSku"=="true")
   and sku.is_sn_sku = 1
      #elsif("$!isSnSku"=="false")
   and (sku.is_sn_sku = 0 or sku.is_sn_sku is null)
#end

							    ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findVmiAdjSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select distinct sku.id as ID, sku.bar_code as CODE
  from T_WH_INV_CHECK             inv,
       T_WH_INV_CK_DIF_TOTAL_LINE line,
       t_bi_inv_sku               sku
 where line.sku_id = sku.id
   and inv.id = line.inv_check_id
   and inv.id = :invCKID
							    ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findAllKeyBarcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select ID,BAR_CODE as CODE from T_BI_INV_SKU sku where sku.customer_id = :customerId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select sn.sn as sn,
                				sn.id as id,
                				sku.bar_code as barcode,
                				sn.card_status as cStatus,
                				sku.sn_type as snType,
                				sku.sp_type as spType,
                				sn.sta_id as staId
                			from T_WH_SKU_SN sn,t_bi_inv_sku sku
							where sn.sku_id = sku.id
								  and sn.sn = :sn
							      and sn.ou_id = :ouid
							      and sn.status = :status
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findSnByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select sn.sn as sn
                				
                			from T_WH_SKU_SN sn
							where 
								  sn.sn = :sn
							      and sn.ou_id = :ouid
							    
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sn.sn as sn,
					sn.sku_id as id
					from T_WH_SKU_SN sn
					where sn.sn = :sn
					and sn.ou_id = :ouid
					and sn.status = :status
					and sn.sku_id=:skuId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findSnImpCountByStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select count(1) from t_wh_sku_sn sn where sn.stv_id = :stvid]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateStatusBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sku_sn set status = :status,stv_id = :stvid where sn = :sn]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateStatusBySnAndSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sku_sn set status = :status,stv_id = :stvid,sta_id =:staId where sn = :sn]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateOutBoundSnRevertByStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sku_sn set status = 5 where stv_id = :stvid]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findAllSnByStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sn.sn as CODE, sku.id as ID
  from t_wh_stv_line l, t_bi_inv_sku sku,t_wh_sku_sn sn
 where l.sku_Id = sku.id
   and sn.ou_id = :ouid
   and sku.is_sn_sku = 1
   and sn.sku_id = sku.id
   and l.stv_id = :stvid
							     ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findAllSnByStvWithStatusExt" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sn.sn || '_' || sn.batch_code as CODE, sku.id as ID
  from t_wh_stv_line l, t_bi_inv_sku sku, t_wh_sku_sn sn
 where l.sku_Id = sku.id
   and sku.is_sn_sku = 1
   and sn.sku_id = sku.id
   and l.batch_code = sn.batch_code
   and sn.status = :status
   and sn.ou_id = :ouid
   and l.stv_id = :stvid
							     ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findAllSnByStvWithStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sn.sn as CODE, sku.id as ID
  from t_wh_stv_line l, t_bi_inv_sku sku, t_wh_sku_sn sn
 where l.sku_Id = sku.id
   and sn.status = :status
   and sn.ou_id = :ouid
   and sku.is_sn_sku = 1
   and sn.sku_id = sku.id
   and l.stv_id = :stvid
							     ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findAllSnListByStvWithStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select distinct sn.id, sn.sn,sn.sku_id skuid,sku.product_id as maSkuId
  from t_wh_stv_line l, t_bi_inv_sku sku, t_wh_sku_sn sn
 where l.sku_Id = sku.id
   and sn.status = :status
   and l.stv_id = :stvid
   and sn.stv_id = l.stv_id
   and sku.is_sn_sku = 1
   and sn.sku_id = sku.id
							     ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findAllSnListByStaWithStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sn.sn,sku.bar_code as barcode
from 
t_wh_sta_line l,
t_bi_inv_sku sku,
t_wh_sku_sn sn
where 
l.sku_Id = sku.id
and sn.sku_id=sku.id
and sn.status = :status
and sn.ou_id = :ouId
and l.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.findAllByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sn.sn as CODE ,sn.sku_id as ID from t_wh_sku_sn sn where sn.ou_id = :ouId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceSnLine.deleteByIc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete t_wh_inv_check_dif_sn_line l where l.inv_check_id =:icId]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findInboundLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select stal.*,sku.id skuId,sku.name,sku.key_properties,sku.bar_code,sku.supplier_code,cnl.name channelName from
t_wh_sta_line stal
left join t_bi_inv_sku sku on stal.sku_id=sku.id,
t_bi_channel cnl
where 
stal.sta_id=:staId
and cnl.code = stal.owner
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findGiftMemoByPkId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	select e.sta_line_id id,n.sku_id skuId,n.quantity,e.memo extMemo from t_wh_gift_line e left join t_wh_sta_line n on n.id = e.sta_line_id
left join t_wh_sta a on a.id = n.sta_id
		where a.picking_list_id =:pkId
    order by e.sta_line_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineByGiftMemo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
    select e.id from t_wh_sta a left join t_wh_sta_line e on e.sta_id = a.id where a.slip_code =:slipCode and e.id =:staLineId
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findSkuAndQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku_id,sum(l.quantity) as quantity from
t_wh_sta_line l
where 
l.sta_id=:staId
group by l.sku_id

                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findNotFoundSalesAvailInvBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select line.skuId as skuId,
                                nvl(nvl(inv.AVAIL_QTY,-line.qty),-1) as quantity 
                             from (
                                     select 
                                     #if("$!isMainOwner"=="true")
	                             		sta.owner,
									#else
										l.owner as owner,
									#end
                                     l.quantity as qty,
                                     l.sku_id as skuId,
                                     sta.main_wh_id as whOuId
                                     from t_wh_sta sta,t_wh_sta_line l
                                     where sta.id=l.sta_id and sta.id = :staId
                             ) line
                             left join v_wh_inventory_summary inv 
                             		on inv.qty > 0 
                             		#if("$!isMainOwner"=="true")
                             			and inv.owner = :mainOwner
									#else
										and inv.owner = line.owner
									#end
                             		and inv.sku_Id = line.skuId 
                             		and inv.wh_ouid = line.whOuId
                         where nvl(nvl(inv.AVAIL_QTY,-line.qty),-1) < 0]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findOutOfCossStaNotFinishedListByType"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[  
select staa.id,staa.code,staa.updateTime,staa.createTime, staa.processstatus,staa.addiName,staa.creater,sum(totalSkuQty) totalSkuQty,invStrutsName,memo,staa.ownerOuName,staa.Addiownerouname
from 
(  
select sta.id,sta.code,nvl(sta.OUTBOUND_TIME,sta.create_time)  as updatetime, sta.create_time createtime,invstatus.name as invStrutsName,
sta.status  as processstatus,warehouse.name addiName,
opuser.user_name creater,stal.QUANTITY as totalSkuQty,
owner.ownerOuName,
addiOwner.Addiownerouname,
sta.memo
from 
t_wh_sta_line stal,t_wh_sta sta,
T_AU_OPERATION_UNIT warehouse,
T_WH_INVENTORY_STATUS invstatus,
T_AU_USER opuser,
(
select info.code,  
'['||cho.option_value||']'||shop.name as ownerOuName 
from t_au_operation_unit shop,
t_bi_channel info,
T_SYS_CHOOSE_OPTION cho 
where
cho.category_code = 'companyShopPlatformType'
and info.platform_type = cho.option_key
and info.ou_id = shop.id
and info.life_cycle_status = 1
) owner,
(
select info.code,  
'['||cho.option_value||']'||shop.name as addiOwnerOuName 
from t_au_operation_unit shop,
t_bi_channel info,
T_SYS_CHOOSE_OPTION cho 
where
cho.category_code = 'companyShopPlatformType'
and info.platform_type = cho.option_key
and info.ou_id = shop.id
and info.life_cycle_status = 1
) addiOwner
where sta.id=stal.sta_id
and STA.ADDI_STATUS_ID = INVSTATUS.ID(+)
and sta.CREATOR_ID = opuser.id(+)
and STA.ADDI_WH_ID = warehouse.id
and sta.MAIN_WH_ID=:addiWarehouse
and sta.type = :type
and sta.owner = owner.code(+)
and sta.addi_owner = addiOwner.code(+)
and (sta.STATUS = 1 or sta.status = 2)

) staa
group by staa.id,code,updatetime,createtime,processstatus,addiName,creater,memo,ownerOuName,Addiownerouname,invStrutsName
                   
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findOutOfCossStaNotFinishedListByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	 				select t.id, t.code code, t.createTime createTime,  t.processstatus executeStatus,  t.addiName targetWarehouse, 
	 				 sum(t.totalSkuQty) planQty,  memo
	                   from ( select sta.id,
	                        sta.code,
	                        sta.create_time createtime,
	                        sta.status  as processstatus,
	                        warehouse.name addiName,
	                        stal.QUANTITY as totalSkuQty,
	                        sta.memo
	                    from 
		                    t_wh_sta sta,
		                    t_wh_sta_line stal,
		                    T_AU_OPERATION_UNIT warehouse,
		                    T_WH_INVENTORY_STATUS invstatus
	                    where sta.id=stal.sta_id
	                      and STA.ADDI_STATUS_ID = INVSTATUS.ID(+)
	                      and sta.MAIN_WH_ID = :ouid              
	                      and sta.id = :staid
	                      ) t
	                      group by t.id,t.code,t.createtime, t.processstatus, t.addiName, t.memo
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findOutOfAddWhIdNotFinishedListByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	 				select t.id, t.code code, t.createTime createTime,  t.processstatus executeStatus,  t.addiName targetWarehouse, 
	 				 sum(t.totalSkuQty) planQty,  memo
	                   from ( select sta.id,
	                        sta.code,
	                        sta.create_time createtime,
	                        sta.status  as processstatus,
	                        warehouse.name addiName,
	                        stal.QUANTITY as totalSkuQty,
	                        sta.memo
	                    from 
		                    t_wh_sta sta,
		                    t_wh_sta_line stal,
		                    T_AU_OPERATION_UNIT warehouse,
		                    T_WH_INVENTORY_STATUS invstatus
	                    where sta.id=stal.sta_id
	                      and STA.ADDI_STATUS_ID = INVSTATUS.ID(+)
	                      and sta.MAIN_WH_ID = :ouid              
	                      and sta.id = :staid
	                      and sta.addi_wh_id=warehouse.id
	                      ) t
	                      group by t.id,t.code,t.createtime, t.processstatus, t.addiName, t.memo
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- vmi 退仓 -->
	<bean id="StockTransApplication.findVmiReturnOutBoundSendInfoByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select  sysdate as createTime, sta.code, d.address as targetAddress,
			           d.receiver as principal,
			           case when d.mobile is null then d.telephone
			           when d.telephone is null then d.mobile
					       else d.telephone || ',' || d.mobile end as principalPhone                                    
			             from t_wh_sta sta left join t_wh_sta_delivery_info d on sta.id=d.id
			             where sta.id = :staid
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 移库出库送货信息-打印 -->
	<bean id="StockTransApplication.findOutOfCossOutBoundSendInfoByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select  sysdate as createTime,
			        sta.code,
			        w.address as targetAddress,
			        w.pic as principal,
			        w.pic_contact as principalPhone,
			        w.oth_contact1 as otherPhone1,
			        w.oth_contact2 as otherPhone2,
			        w.oth_contact3 as otherPhone3
			       from t_wh_sta sta left join t_bi_warehouse w on sta.addi_wh_id = w.ou_id  
			       where sta.id = :staid
                 ]]>
			</value>
		</constructor-arg>
	</bean>




	<!-- vmi 退仓 -->
	<bean id="StockTransApplication.findVmiReturnOccupyInventoryByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                
                 select t.id, t.code code, t.createTime createTime, 
                     t.processstatus executeStatus,  
                     t.addiName targetWarehouse,  
                     sum(t.totalSkuQty) planQty,  memo
                     from ( select sta.id,
                          sta.code,
                          sta.create_time createtime,
                          sta.status  as processstatus,
                          warehouse.name addiName,
                          nvl(stal.QUANTITY,0) as totalSkuQty,
                          sta.memo
                      from 
                        t_wh_sta sta,
                        t_wh_sta_line stal,
                        T_AU_OPERATION_UNIT warehouse,
                        T_WH_INVENTORY_STATUS invstatus
                      where 
                        sta.id=stal.sta_id
                        and stal.inv_status_id = invstatus.id
                        and STA.Main_Wh_Id = warehouse.id
                        and sta.MAIN_WH_ID = :ouid 
                        and sta.id = :staid
                        ) t
                        group by t.id,t.code,t.createtime, t.processstatus, t.addiName, t.memo
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.deleteStvLineByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete from T_WH_STV_LINE stvline where stvline.STV_ID =:stvId
	               ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.deleteStaLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete from T_WH_STA_LINE staline where staline.STA_ID =:staId]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.createByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                insert into T_WH_STA_Line(id,owner,quantity,version,Inv_Status_Id,sku_id,sta_id)
               select s_T_WH_STA_LINE.Nextval,newstal.inv_owner,newstal.quantity,newstal.version,newstal.status_id, 
                         newstal.sku_id,newstal.sta_id
               from (
               		select inv.inv_owner,1 version,inv.status_id,inv.Sku_Id,sum(inv.quantity) quantity,sta.id as sta_id
                	from t_wh_sku_inventory inv,t_wh_sta sta
                	where inv.occupation_code = sta.code
                		and sta.id= :staId
                	group by inv.inv_owner,inv.status_id,inv.Sku_Id,sta.id) newstal 
                	]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.findToInboundSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select lg.sku_id skuId,lg.sn,sku.bar_code as barcode
from 
     t_wh_sku_sn_log lg,
     t_bi_inv_sku sku     
where sku.id = lg.sku_id
      and lg.direction =2
      and lg.stv_id in (
			#foreach( $id in $outStv )
		         $id ,
		    #end
		    -1 
      )
#if($inStv)
minus
select lg.sku_id,lg.sn,sku.bar_code
from t_wh_sku_sn_log lg,
     t_bi_inv_sku sku     
where sku.id = lg.sku_id
      and lg.direction =1
      and lg.stv_id in (
      	#foreach( $id in $inStv )
		    $id ,
		#end
		-1 
      )
#end
      ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findAllAvailLocations" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select location.id, location.code from T_WH_LOCATION location  
						 where LOCATION.OU_ID = :ouid
       							and LOCATION.IS_AVAILABLE = 1
       							and nvl(LOCATION.is_locked,0)=0
       							and upper(LOCATION.CODE) like upper(:code)
       							order by location.code]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WarehouseLocation.findMateWLListbyCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select location.id, location.code from T_WH_LOCATION location,T_WH_LOCATION_TRANSTYPE s 
						 where LOCATION.OU_ID = :ouId
       							and LOCATION.IS_AVAILABLE = 1
       							and nvl(LOCATION.is_locked,0)=0
       							and upper(LOCATION.CODE) like upper(:code)
       							and S.TRANSTYPE_ID = :typeId
       							and location.id = S.LOCATION_ID
       							order by location.id]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findMateWLListbyOwnerCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct l.id, l.code
                        from t_wh_sku_inventory inv, t_wh_location l,T_WH_LOCATION_TRANSTYPE s
                        where  inv.ou_id = :ouId
                              and (inv.occupation_code is null or inv.occupation_code = '')
                              and INV.INV_OWNER  = :owner
                              and l.CODE like :code
                              and l.is_available = 1
                              and nvl(l.is_locked,0)=0
                              and inv.location_id = l.id 
                              and S.TRANSTYPE_ID = :typeId
                              and l.id = S.LOCATION_ID 
                        order by l.id ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuAll" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							sku.id,
							sku.code,
							sku.bar_code as barCode,
	            sku.jm_code as jmCode,
              sku.supplier_code as supplierCode,
              sku.key_properties as keyProperties,
              sku.name,
              sku.EXT_CODE1 as extensionCode1,
              sku.store_mode as storeModeValue,
              brand.name as brandName,
              
              (SELECT (SELECT C.NAME
                            FROM T_WH_SKU_SIZE_CONFIG C
                           WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
                             AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
                        FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize,
               (case sku.sp_type 
			      when 1 then '是'
			    else '否' end) as isConsumable
                        
            from 
              t_bi_inv_sku sku,
              t_bi_brand brand
            where 
              sku.brand_id=brand.id
							#if($code)
							   and sku.code like :code
							#end
							#if($jmCode)
							   and sku.jm_code like  '%'||:jmCode
							#end
							#if($barCode)
							   and sku.bar_code like :barCode
							#end
							#if($supplierCode)
							   and sku.supplier_code like :supplierCode
							#end
							#if($keyProperties)
							   and sku.key_properties like :keyProperties
							#end
							#if($name)
							   and sku.name like :name
							#end
							#if($brandName)
							   and brand.name =substr(:brandName,0,length(:brandName)-1)
							#end
							#if("$!isConsumable" == "1")
							   and sku.sp_type = 1
							#end
							#if("$!isConsumable" == "0")
							   and (sku.sp_type is null or sku.sp_type != 1)
							#end
						]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="Sku.findSkubySkuCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							sku.id,
							sku.code,
							'MSR定制订单' as skuTypeName
							

            from 
              t_bi_inv_sku sku
              
            where 
              sku.SP_TYPE=7 
							#if($code)
							   and sku.code like :code
							#end
							
						]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.updateStvLineOwnerBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					UPDATE T_WH_STA_Line stal set STAL.OWNER=null where stal.sta_id= :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuBarcode.deleteBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_bi_inv_sku_barcode where sku_id=:skuId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLinesListByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select stvl.id            id,
       disc.code          districtCode,
       location.code      locationCode,
       SKU.BAR_CODE       barCode,
       SKU.JM_CODE        jmCode,
       SKU.KEY_PROPERTIES keyProperties,
       SKU.NAME           skuName,
       INVSTATS.NAME      intInvstatusName,
       STVL.QUANTITY      quantity,
       sku.is_sn_sku      as isSnSku
  from T_WH_STV_Line         stvl,
       T_WH_DISTRICT         disc,
       T_WH_LOCATION         location,
       T_BI_INV_SKU          sku,
       T_WH_INVENTORY_STATUS invStats
 where STVL.STV_ID = :stvId
   and STVL.DISTRICT_ID = disc.id
   and STVL.LOCATION_ID = location.id
   and STVL.SKU_ID = sku.id
   and STVL.INV_STATUS_ID = invStats.id
				]]>
			</value>
		</constructor-arg>
	</bean>



   <bean id="StvLine.findAgvTransitInnerByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                  
            select line.quantity,line.sku_id,loc.is_mixtime as isMixTime,line.expire_date,line.production_date  from 
            t_wh_stv stv,t_wh_stv_line line,t_wh_location loc,t_wh_transaction_type type where loc.id=line.location_id
            and  stv.id=line.stv_id and stv.status=10  
            and  stv.direction=1 and stv.id=:stvId 
            and  type.id=stv.transtype_id 
            and  type.code='TRANSIT_INNER_IN'
                  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.findAgvStvLinesListByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                  
            select line.quantity,line.sku_id,loc.is_mixtime as isMixTime,line.expire_date,line.production_date  from 
            t_wh_stv stv,t_wh_stv_line line,t_wh_location loc where loc.id=line.location_id
            and  stv.id=line.stv_id and stv.status=10  
            and stv.type=11 and stv.direction=1 and stv.id=:stvId
                  
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineListByStvIdGroupBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select l.sku_id, sum(l.quantity) as quantity
				  from t_wh_stv_line l, t_bi_inv_sku sku
				 where l.sku_id = sku.id
				   and sku.is_sn_sku = 1
				   and l.stv_id = :stvId
				 group by l.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findAllByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select stvl.* from t_wh_stv_line stvl, t_wh_stv stv
				       where stvl.stv_id = stv.id
		               and stv.status != 0
					   and stv.sta_id = :staid
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgRtnOutboundLine.findByMsgRtnOutboundByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  select t.*, nvl(t.qty,0) as qty, sku.id as skuId from T_WH_MSG_RTN_OUTBOUND_LINE t , T_WH_MSG_RTN_OUTBOUND msg, t_bi_inv_sku sku 
		               where t.sku_code = sku.code 
		               and t.msg_outbound_id = msg.id
		               and msg.sta_code =:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutboundLine.findByMsgRtnOutboundId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select t.*, sku.id as skuId from T_WH_MSG_RTN_OUTBOUND_LINE t ,t_bi_inv_sku sku 
				       where t.sku_code = sku.code 
				       and t.msg_outbound_id = :msgid
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.findAllByStaIdSort" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select stvl.*, nvl(stvl.quantity,0) as quantity from t_wh_stv_line stvl, t_wh_stv stv
               where stvl.stv_id = stv.id
               and stv.sta_id = :staid
               and stv.status = 1
               order by stvl.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select sku.bar_code 
						       ,sku.code as skuCode
						       ,sku.name as skuName
						       ,sku.supplier_code
						       ,l.quantity
						       ,l.sku_id
						       ,l.staline_id
						       ,l.owner
						       ,l.id
						from t_wh_stv_line l,t_bi_inv_sku sku, t_wh_stv stv
						where l.stv_id = stv.id 
						  and l.sku_id = sku.id
						  and stv.status = 1
						  and stv.sta_id = :staId	
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findOutboundStvLinesByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select sku.bar_code 
						       ,sku.code as skuCode
						       ,sku.name as skuName
						       ,sku.supplier_code
						       ,sku.ext_code2 as extCode2
						       ,l.inv_status_id as invS 
						       ,l.quantity
						       ,l.sku_id
						       ,l.staline_id
						       ,l.owner
						       ,l.id
						from t_wh_stv_line l,t_bi_inv_sku sku, t_wh_stv stv
						where l.stv_id = stv.id 
						  and l.sku_id = sku.id
						  and stv.status = 10
						  and stv.direction = 2
						  and stv.sta_id = :staId	
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPackingByBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[SELECT   crtuser.USER_NAME crtUserName, OPERUSER.USER_NAME operUserName
    				FROM(SELECT   PICKINGLIST.OUT_CREATER_ID crtId,
                         PICKINGLIST.OUT_OPERATOR_ID operid
                  FROM   t_wh_sta_picking_list pickinglist
                 WHERE   PICKINGLIST.id = :id ) pl
           		 		LEFT JOIN T_AU_USER crtuser  ON pl.crtId = CRTUSER.ID
           		 		LEFT JOIN T_AU_USER operuser ON pl.operid = operuser.ID
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.updateSNStatusByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update T_WH_SKU_SN set status=:status,version=version+1,last_modify_time=sysdate  where stv_id=:stvid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.unbindInvalidCard" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update T_WH_SKU_SN set stv_id=null,sta_id=null,version=version+1,last_modify_time=sysdate  
							where ID IN (
							      SELECT sn.id 
							      FROM T_WH_SKU_SN sn,t_bi_inv_sku sku 
							      WHERE sn.sku_id=sku.id 
							      		AND sn.card_status NOT IN (1,2)
							            AND sku.interface_type IS NOT NULL 
							            AND sku.interface_type !=1
							            AND sn.stv_id = :stvid
							)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateInboundByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update T_WH_SKU_SN set status=:status,version=version+1,BATCH_CODE=:batchCode where stv_id=:stvid
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateInboundByStvIdSql2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update T_WH_SKU_SN set status=:status,version=version+1,BATCH_CODE=:batchCode,stv_id=:newStvId where stv_id=:oldStvId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateTransitCrossInByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update T_WH_SKU_SN set status=:status,version=version+1 where stv_id=:stvid
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateTransitCrossInByStvIdSql2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update T_WH_SKU_SN set status=:status,version=version+1,stv_id=:newStvId where stv_id=:oldStvId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findSnSkuQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				select count(1) from  
			 		t_wh_sku_sn sn ,
          			t_bi_inv_sku sku,
          			T_WH_STV v
			 	where sn.stv_id = v.id 
          		and sn.sku_id = sku.id
			 	and sn.ou_id = :ouid
          		and v.sta_id = :staID
          		and v.status != 10
			 	and sn.sn is not null group by sn.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.deleteSNByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ delete from T_WH_SKU_SN where STV_ID=:stvid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.deleteByIc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete t_wh_sku_sn sn where exists(
       						select 1 from t_wh_inv_check_dif_sn_line l where l.sn = sn.sn and l.INV_CHECK_ID = :icid)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.createByIc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[insert into t_wh_sku_sn(id,ou_id,sku_id,sn,inv_ck_id,status,version,batch_code)
							select s_t_wh_sku_sn.nextval,ic.ou_id,l.sku_id,l.sn,ic.id,5,0, :batchCode
							from t_wh_inv_check_dif_sn_line l,t_wh_inv_check ic
							where l.inv_check_id = ic.id
							      and l.type = 1
							      and ic.id = :icid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.createSnByInboudImport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[insert into t_wh_sku_sn(id,ou_id,sku_id,stv_id,sn,status,version)
                			values(S_T_WH_SKU_SN.nextval, :ouid, :skuid, :stvid, :sn, 1, 0)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.createSnImport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[insert into t_wh_sku_sn(id,ou_id,sku_id,sn,status,version)
                			values(S_T_WH_SKU_SN.nextval, :ouid, :skuid, :sn, 5, 1)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.createSnBysnNumber" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[insert into t_wh_sku_sn(id,ou_id,sku_id,stv_id,sn,status,version)
                			values(S_T_WH_SKU_SN.nextval, :ouid, :skuid, :stvid, :sn, 1, 0)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.deleteSnByStvAndSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	delete from T_WH_SKU_SN where ou_id = :ouid and STV_ID=:stvid and sku_id = :skuid
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStockSuggestByProduct" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			          select sku.code as skuCode,sku.bar_code as barCode,sku.supplier_code as supplierCode,tmp.districtCode,tmp.locationCode
			          from t_bi_inv_sku sku
			          left join (
			               select d.code as districtCode,loc.code as locationCode ,inv.sku_id,s.product_id as product_id
			               from t_wh_sku_inventory inv,t_wh_district d,t_wh_location loc,t_bi_inv_sku s
			               where inv.location_id = loc.id
			                     and inv.district_id = d.id
			                     and s.id = inv.sku_id
			                     and d.type = 10
			                     and inv.ou_id = :ouId) tmp on tmp.product_id = sku.product_id
			          where sku.id = :skuId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStockSuggestBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sku.code as skuCode,sku.bar_code as barCode,sku.supplier_code as supplierCode,tmp.districtCode,tmp.locationCode
					from t_bi_inv_sku sku
					left join (
					     select d.code as districtCode,loc.code as locationCode ,inv.sku_id
					     from t_wh_sku_inventory inv,t_wh_district d,t_wh_location loc
					     where inv.location_id = loc.id
					           and inv.district_id = d.id
					           and d.type = 10
					           and inv.sku_id = :skuId
					           and inv.ou_id = :ouId) tmp on tmp.sku_id = sku.id
					where sku.id = :skuId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findPickingReplenishQtyBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.id as skuId,
       d.code as districtCode,
       sku.code as skuCode,
       sku.bar_code as barCode,
       sku.supplier_code as supplierCode,
       case
         when floor(cfg.max_qty / nvl(sku.box_qty, 1)) = 0 then
          cfg.max_qty
         else
          floor(cfg.max_qty / nvl(sku.box_qty, 1)) * nvl(sku.box_qty, 1)
       end as quantity
  from t_wh_picking_replenish_cfg cfg
  left join (select inv.sku_id as sku_id,
                    inv.district_id as district_id,
                    sum(nvl(inv.quantity, 0)) qty
               from t_wh_sku_inventory inv, t_wh_district d
              where inv.district_id = d.id
                and d.type = 1
                and (inv.occupation_code is null or inv.occupation_code = '')
                and inv.sku_id = :skuId
                and inv.ou_id = :ouId
              group by inv.sku_id, inv.district_id) inv
    on cfg.sku_id = inv.sku_id
   and inv.district_id = cfg.district_id
 inner join t_bi_inv_sku sku
    on sku.id = cfg.sku_id
 inner join t_wh_district d
    on d.id = cfg.district_id
   and d.type = 1
 where cfg.ou_id = :ouId
   and cfg.sku_id = :skuId
   and nvl(inv.qty, 0) = 0
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findGILocationByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.name as skuCode,
sku.bar_code as barCode,
loc.code as locationCode,
stvLine.Quantity from 
t_wh_stv_line stvline,
t_bi_inv_sku sku,
t_wh_location loc,
t_wh_district dis
where
stvLine.Location_Id=loc.id
and stvLine.Sku_Id=sku.id
and loc.district_id=dis.id
and dis.type='5'
and stvLine.Stv_Id=:stvId
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.findRecevingMoveOutboundSuggest" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sku.id as skuId,d.code as districtCode,loc.code as locationCode,
							sku.code as skuCode,sku.bar_code as barCode,
							sku.supplier_code as supplierCode,sum(inv.quantity) as quantity
					from t_wh_sku_inventory inv,
					     t_wh_district d,
					     t_wh_location loc,
					     t_bi_inv_sku sku
					where inv.district_id = d.id
					      and d.type = 5
					      and inv.sku_id = sku.id
					      and inv.location_id = loc.id
					      and inv.ou_id = :ouId
					      #if($districtCode)
					      	and d.code like '$districtCode%'
					      #end
					      #if($locationCode)
					      	and loc.code like '$locationCode%'
					      #end
					      #if($skuCode)
					      	and sku.code like '$skuCode%'
					      #end
					      #if($barCode)
					      	and sku.bar_code like '$barCode%'
					      #end
					      #if($supplierCode)
					      	and sku.supplier_code like '$supplierCode%'
					      #end
					group by sku.id,d.code,loc.code,sku.code,sku.bar_code,sku.supplier_code
					order by d.code,loc.code,sku.code
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findBatchCodeByStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select l.batch_code from t_wh_stv_line l where l.stv_id = :stvid
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.createInSnByOutStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				insert into t_wh_sku_sn(id,sn,status,version,ou_id,sku_id,stv_id,batch_code)
				select s_t_wh_sku_sn.nextval,lg.sn,1,0, :ouid ,lg.sku_id, :stvId ,lg.batch_code 
				from 
					t_wh_sku_sn_log lg,
					t_bi_inv_sku sku,
					t_wh_stv stv,
					t_wh_sta sta
				where stv.id = lg.stv_id
					and sta.id = stv.sta_id
					and stv.direction = 2
					and sku.id = lg.sku_id
					and sta.id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateSNStvIdByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				update t_wh_sku_sn sn set sn.stv_id=:newStvId where sn.stv_id=:stvId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.updateSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                update T_WH_SKU_SN t set t.SKU_ID =:skuid where t.sn=:sn
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="SkuSnLog.findOutboundSnBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select distinct lg.sn,sku.code as skuCode,sku.bar_code as barcode,lg.batch_code as batchCode,sku.id as skuId,stvl.staline_id as staId
from 
	t_wh_sku_sn_log lg,
	t_bi_inv_sku sku,
	t_wh_sta sta,
	t_wh_stv stv
	left join t_wh_stv_line stvl on stvl.stv_id=stv.id
where 
	stv.id = lg.stv_id
	and sta.id = stv.sta_id
	and sku.id = lg.sku_id
	and sta.id = :staid
	and stvl.sku_id=lg.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.findOutboundSnBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select id,sn from t_wh_sku_sn_log where stv_id = :stvId and sku_id = :skuId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.findSNBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select distinct lg.sn,sku.bar_code as barcode,lg.batch_code as batchCode,lg.sku_id as skuId
from 
  t_wh_sku_sn_log lg,
  t_bi_inv_sku sku,
  t_wh_sta sta,
  t_wh_stv stv
where 
  stv.id = lg.stv_id
  and lg.sku_id=sku.id
  and sta.id = stv.sta_id
  and stv.direction = 2
  and sta.id = :staid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnLog.findSNBySlipcode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.bar_code as barcode,tlog.sn from 
t_Wh_Sku_Sn_Log tlog,
t_bi_inv_sku sku,
t_Wh_Stv stv,
T_WH_STA sta
where tlog.stv_id = stv.id
and stv.sta_id=sta.id
and tlog.sku_id=sku.id
and stv.direction=2
and sta.slip_code1=:slipcode
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.findSnLogBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select distinct lg.sn,sku.bar_code as barcode,lg.batch_code as batchCode,sku.id as skuId,stvl.staline_id as staId
from 
	t_wh_sku_sn_log lg,
	t_bi_inv_sku sku,
	t_wh_sta sta,
	t_wh_stv stv
	left join t_wh_stv_line stvl on stvl.stv_id=stv.id
where 
	stv.id = lg.stv_id
	and sta.id = stv.sta_id
	and stv.direction = 2
	and sku.id = lg.sku_id
	and sta.id =:staId
	and stvl.sku_id=lg.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="SkuSnLog.createOutboundByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                INSERT INTO T_WH_SKU_SN_LOG (
						   ID, DIRECTION, OU_ID, 
						   SKU_ID, SN, STV_ID, 
						   TRANSACTION_TIME,BATCH_CODE,CARD_STATUS) 
					 select S_T_WH_SKU_SN_LOG.nextval,2,sn.OU_ID,
						 sn.SKU_ID,sn.SN,sn.STV_ID,
						 sysdate,sn.batch_code,sn.card_status
						 from T_WH_SKU_SN sn where sn.STV_ID=:stvid

                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaCheckLog.insertStaCheckLogByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                INSERT INTO T_WH_STA_CHECK_LOG (
						   ID, log_date, order_code, 
						   SKU_ID, SN, sta_code,qty) 
					 select seq_t_wh_sta_check_log.nextval,sysdate,:orderCode,
						 sn.SKU_ID,sn.SN,:staCode,1
						 from T_WH_SKU_SN sn where sn.STV_ID=:stvid

                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaCheckLog.findSnBySkuIdAndSlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select sn from T_WH_STA_CHECK_LOG t where t.sn is not null and t.order_code=:orderCode 
                  and t.sku_id=:skuId group by sn having sum(qty)>0
                
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaCheckLog.findRfidBySkuIdAndSlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select rfid from T_WH_STA_CHECK_LOG t where t.rfid is not null and t.order_code=:orderCode 
                  and t.sku_id=:skuId group by rfid having sum(qty)>0
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaCheckLog.findExpDateBySkuIdAndSlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                
                select exp_date,sum(qty) as qty  from wms.T_WH_STA_CHECK_LOG t where t.order_code=:orderCode and t.sku_id=:skuId
                group by exp_date having sum(qty)>0
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	

	<bean id="SkuSnLog.insertOutboundByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	INSERT INTO T_WH_SKU_SN_LOG (
						   ID, DIRECTION, OU_ID, 
						   SKU_ID, SN, STV_ID, 
						   TRANSACTION_TIME) 
					 select S_T_WH_SKU_SN_LOG.nextval,2,a.main_wh_id,
						 sku.id,n.SN,v.id,
						 sysdate
						 from T_WH_MSG_RTN_SN_DETAIL n  left join T_WH_MSG_RTN_OUTBOUND d on d.id = n.out_id
					left join t_wh_sta a on a.code = d.sta_code left join t_wh_stv v on v.sta_id = a.id
					left join t_bi_inv_sku sku on sku.code = n.sku_code
					where a.id = :staid
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="SkuSnLog.createInboundLogByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                      INSERT INTO T_WH_SKU_SN_LOG (ID, DIRECTION, OU_ID, SKU_ID, SN, STV_ID,TRANSACTION_TIME,BATCH_CODE,Sku_Cost) 
		           select S_T_WH_SKU_SN_LOG.nextval,1,sn.OU_ID,sn.SKU_ID,sn.SN,sn.STV_ID,sysdate,:batchCode,l.sku_cost
		             from T_WH_SKU_SN sn,(select stv_id,sku_id,max(sku_cost) as sku_cost from t_wh_stv_line group by stv_id,sku_id) l
		             where sn.STV_ID=:stvid
	                   and l.stv_id = sn.STV_ID
	                   and sn.sku_id = l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.createInboundLogByStvIdSql2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                      INSERT INTO T_WH_SKU_SN_LOG (ID, DIRECTION, OU_ID, SKU_ID, SN, STV_ID,TRANSACTION_TIME,BATCH_CODE,Sku_Cost) 
		           select S_T_WH_SKU_SN_LOG.nextval,1,sn.OU_ID,sn.SKU_ID,sn.SN,sn.STV_ID,sysdate,:batchCode,l.sku_cost
		             from T_WH_SKU_SN sn,(select stv_id,sku_id,max(sku_cost) as sku_cost from t_wh_stv_line group by stv_id,sku_id) l
		             where sn.STV_ID=:newStvId
	                   and l.stv_id = sn.STV_ID
	                   and sn.sku_id = l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.createTransitCrossLogByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				INSERT INTO T_WH_SKU_SN_LOG (ID, DIRECTION, OU_ID, SKU_ID, SN, STV_ID,TRANSACTION_TIME,BATCH_CODE,Sku_Cost) 
				select S_T_WH_SKU_SN_LOG.nextval,stv.direction,sn.OU_ID,sn.SKU_ID,sn.SN,sn.STV_ID,sysdate,sn.batch_code,l.sku_cost
				from T_WH_SKU_SN sn,(select stv_id,sku_id,max(sku_cost) as sku_cost from t_wh_stv_line group by stv_id,sku_id) l,t_wh_stv stv
				where sn.STV_ID=:stvid
				and stv.id=l.stv_id
				and l.stv_id = sn.STV_ID
				and sn.sku_id = l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.createTransitCrossLogByStvIdSql2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				INSERT INTO T_WH_SKU_SN_LOG (ID, DIRECTION, OU_ID, SKU_ID, SN, STV_ID,TRANSACTION_TIME,BATCH_CODE,Sku_Cost) 
				select S_T_WH_SKU_SN_LOG.nextval,stv.direction,sn.OU_ID,sn.SKU_ID,sn.SN,sn.STV_ID,sysdate,sn.batch_code,l.sku_cost
				from T_WH_SKU_SN sn,(select stv_id,sku_id,max(sku_cost) as sku_cost from t_wh_stv_line group by stv_id,sku_id) l,t_wh_stv stv
				where sn.STV_ID=:newStvId
				and stv.id=l.stv_id
				and l.stv_id = sn.STV_ID
				and sn.sku_id = l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="SkuSnLog.createLogByIc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                insert into t_wh_sku_sn_log(id,direction,ou_id,sku_id,sn,transaction_time,inv_ck_id,batch_code,sku_cost)
					select s_t_wh_sku_sn_log.nextval,l.type,ic.ou_id,l.sku_id,l.sn,sysdate,ic.id,decode(l.type,2,sn.batch_code, :batchCode ) as batchCode ,decode(l.type,1,line.sku_cost,c.sku_cost) as skuCost
					from 
					t_wh_inv_check ic
					inner join t_wh_inv_check_dif_sn_line l on  l.inv_check_id = ic.id
					left join T_AU_OPERATION_UNIT a on a.id=ic.ou_id
					left join T_AU_OPERATION_UNIT b on a.parent_ou_id=b.id
					left join t_wh_sku_sn sn on sn.sn=l.sn and l.type=2
					left join (select inv_check_id,sku_id,max(sku_cost) sku_cost from T_WH_INV_CHECK_DIF_LINE l group by inv_check_id,sku_id having count(l.location_id) =1) line on l.sku_id=line.sku_id and ic.id=line.inv_check_id and l.type=1
					left join (select comp_ou_id,sku_id,max(sku_cost) sku_cost from t_wh_sku_inventory_cost group by comp_ou_id,sku_id) c on c.sku_id=l.sku_id and b.parent_ou_id=c.comp_ou_id and l.type=2
					where ic.id =:icid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnLog.createLogByStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[INSERT INTO T_WH_SKU_SN_LOG (ID, DIRECTION, OU_ID, SKU_ID, SN, STV_ID,TRANSACTION_TIME) 
							select S_T_WH_SKU_SN_LOG.nextval,t.DIRECTION,sn.OU_ID,sn.SKU_ID,sn.SN,sn.STV_ID,sysdate
							from T_WH_SKU_SN sn,t_wh_stv stv,t_wh_transaction_type t
							where sn.STV_ID=:stvId
							      and stv.TRANSTYPE_ID = t.id
							      and sn.stv_id = stv.id
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.deletePackageInfoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[delete T_WH_PACKAGE_INFO  where STA_DELIVERY_INFO_ID= :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaAdditionalLine.deleteStaAddLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[delete T_WH_STA_ADD_LINE  where STA_ID = :staid
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaAdditionalLine.findTrackingAndSkuByStuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT L.TRACKING_NO  AS trackingValue, 
         					 WM_CONCAT(s.bar_code) AS skuCode
     				  FROM T_WH_STA_ADD_LINE L, T_BI_INV_SKU s 
    				 WHERE L.STA_ID = :staId AND l.sku_id = s.id
    			     GROUP BY L.TRACKING_NO
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaAdditionalLine.updateTrackingAndSkuByStuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  UPDATE T_WH_STA STA
     					 SET STA.TRACKING_AND_SKU = :trackingAndSku
   					   WHERE STA.ID = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="StaCancel.findByStaCancelId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  
				   select c.owner,c.id,c.quantity,c.sku_id,c.create_date,c.order_line_no,c.order_source_platform,
				   c.is_short_picking  from t_wh_sta_cancel c where c.order_cancel_id=:orderCancelId
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.insertPackageInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[insert into T_WH_PACKAGE_INFO(ID,LPCODE,TRACKING_NO,version,STA_DELIVERY_INFO_ID) values(S_T_WH_PACKAGE_INFO.nextval,:lpcode,:trackingNo,0,:staId)]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.findNotOperateInstructionFileName"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ins.file_name
					  from T_IT_VMI_INSTRUCTION ins
					 where ins.sta_id is null
					   and ins.staline_id is null
					   and ins.CHECK_ID is null
					   and ins.ICLINE_ID is null
					   and ins.import_time > add_months(sysdate,-3)
						#if($insType)
						     and ins.type= :insType
						#end
					 group by ins.file_name
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.findUnDoInboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ins.sta_slip_code
					  from T_IT_VMI_INSTRUCTION ins
					 where ins.sta_id is null
					   and ins.staline_id is null
					   and ins.CHECK_ID is null
					   and ins.ICLINE_ID is null
					   and ins.sta_slip_code is not null
						#if($insType)
						     and ins.type= :insType
						#end
					 group by ins.sta_slip_code
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ConverseVmiStockIn.findCartonNoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select t.CARTON_NO  from t_converse_vmi_stockin t where t.sta_id is null
				and t.staline_id is null group by t.CARTON_NO 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ConverseVmiStockIn.updateConverseVmiStockIn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update t_converse_vmi_stockin t set t.staline_id=:staLineId,t.sta_id=:staId
				where  t.CARTON_NO =:cartonNo
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ConverseVmiStockIn.findConverseByCartonNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select t.*  from  t_converse_vmi_stockin t where t.CARTON_NO =:cartonNo and t.staline_id is not null and t.sta_id is not null
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPOrder.findNotOperateOrderSeqNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ord.header_sequencenumber
		                 from t_esprit_order ord
		                 where ord.sta_id is null
		                 and ord.staline_id is null
		                 group by ord.header_sequencenumber
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPOrder.findOrdersGroupBySeqNumAndPO" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ord.header_sequencenumber as headerSequenceNumber,
							ord.OD_PO as odPO,ord.OD_STATUSINEDIFILE
		                 from t_esprit_order ord
		                 where ord.sta_id is null
		                 and ord.staline_id is null
		                 #if($status)
						     and upper(ord.OD_STATUSINEDIFILE)= upper(:status)
						#end
						and (ord.sta_status=1 or ord.sta_status is null)
		                 group by ord.header_sequencenumber,ord.OD_PO ,ord.OD_STATUSINEDIFILE
					]]>
			</value>
		</constructor-arg>
	</bean>

    <bean id="ESPOrder.findOrderAsnByPo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
				
				      select t.id,t.od_sku,t.od_orderqty from T_ESPRIT_ORDER t where t.od_po=:po
					
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPTransferOrder.getPoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct ord.OD_PO
			            from t_esprit_transfer_order ord
			           where ord.TRANSFER_STA_ID= :staId
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPDelivery.getDeliverySequence" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select S_T_ESPRIT_DELIVERY_SEQ.NEXTVAL from dual
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPDelivery.getDeliveryNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select S_T_ESPRIT_DEL_DELIVERYNO.NEXTVAL from dual
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPOrder.getStaIdBySeqNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct ord.sta_id from t_esprit_order ord 
                 where ord.header_sequencenumber= :seqNum 
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPTransferOrder.findTransferOrdsGroupBySeqNumAndPO"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ord.header_sequencenumber,ord.OD_PO
			            from t_esprit_transfer_order ord
			           where ord.TRANSFER_STA_ID is null
			           and ord.TRANSFER_WH_STA_LINE_ID is null
			           and ord.STA_ID is not null
			           and ord.STALINE_ID is not null
			           group by ord.header_sequencenumber,ord.OD_PO
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPTransferOrder.findStaIdNotGenerateTransfer" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ord.STA_ID
			            from t_esprit_transfer_order ord
			           where ord.TRANSFER_STA_ID is null
			           and ord.TRANSFER_WH_STA_LINE_ID is null
			           and ord.inv_check is null
			           and ord.STA_ID is not null
			           and ord.STALINE_ID is not null
			           group by ord.STA_ID
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPTransferOrder.findInvIdNotGenerateTransfer" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ord.inv_check
			            from t_esprit_transfer_order ord
			           where ord.TRANSFER_STA_ID is null
			           and ord.TRANSFER_WH_STA_LINE_ID is null
			           and ord.STA_ID is null
			           and ord.STALINE_ID is null
			           and ord.inv_check is not null
			           group by ord.inv_check
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPTransferOrder.getTONodeByStaID" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct ord.header_tonode
                  from t_esprit_Transfer_order ord
                 where ord.STA_ID= :staId 
                 
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPTransferOrder.getTONodeByInvID" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct ord.header_tonode
                  from t_esprit_Transfer_order ord
                 where ord.INV_CHECK= :invId 
                 
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.findFailedSkuBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ select ins.UPC from T_IT_VMI_INSTRUCTION ins 
						  where 
						  ins.file_name=:fileName
						  and not exists (
						  select sku.bar_code from t_bi_inv_sku sku where sku.bar_code=ins.upc)
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.findGroupInstructionByFileName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ select ins.upc as skuCode,ins.type as vmiType,ins.TO_LOCATION as toLocation,sum(ins.quantity) as quantity,ins.sta_id as sta,
						ins.INNER_SHOP_CODE as innerShopCode
						from T_IT_VMI_INSTRUCTION ins 
						where ins.file_Name = :fileName 
						and ins.sta_id is null and ins.staLine_id is null 
						and ins.CHECK_ID is null and ins.ICLINE_ID is null
						group by ins.upc,ins.type,ins.to_location,ins.sta_id,ins.INNER_SHOP_CODE
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.findGroupInstructionBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ select ins.upc as skuCode,ins.type as vmiType,ins.TO_LOCATION as toLocation,sum(ins.quantity) as quantity,ins.sta_id as sta,
						ins.INNER_SHOP_CODE as innerShopCode
						from T_IT_VMI_INSTRUCTION ins 
						where ins.sta_slip_code = :slipCode 
						and ins.sta_id is null and ins.staLine_id is null 
						and ins.CHECK_ID is null and ins.ICLINE_ID is null
						group by ins.upc,ins.type,ins.to_location,ins.sta_id,ins.INNER_SHOP_CODE
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.updateDNSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ update T_IT_VMI_INSTRUCTION t set t.sta_id= :staId ,staLine_id= :staLineId where t.file_name=:fileName
							and t.upc= :upc
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIInstruction.updateDNStaBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ update T_IT_VMI_INSTRUCTION t set t.sta_id= :staId ,staLine_id= :staLineId where t.sta_slip_code=:slipCode
							and t.upc= :upc
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIReceiveInfo.findStaIdListByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select info.sta_id 
				from T_IT_VMI_RECEIVE_INFO info 
				where 1 = 1
				  #if($status)
				  	and info.status=: status
				  #end
 				group by info.sta_id
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIReceiveInfo.findReceiveInfoGroupByTranId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select info.to_location as toLocation,
				       info.tx_date as txDate,
				       decode(info.type, 1, '01', '00') as stdNO,
				       decode(info.type, 1, '00001', '00000') as userKo,
				       info.tran_id as tranid,
				       sum(info.quantity) as quantity
				  from t_IT_vmi_receive_info info
				 where 1 = 1
				 	#if ($vender)
				   		and info.vender = :vender
				   	#end
				   
				   	#if ($status)
				   		and info.status = :status
				   	#end
				   	#if ($toLocation)
				   		and info.to_location = :toLocation
				   	#end
				  
				 group by info.tran_id,
				          info.to_location,
				          info.tx_date,
				          info.sta_id,
				          info.type
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIReceiveInfo.findNewTolocationByVender" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select info.to_location as toLocation
				  from t_it_vmi_receive_info info
				 where 1 = 1 and info.status=0
				 	#if ($vender)
				   		and info.vender = :vender
				   	#end
				 group by info.to_location
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ITVMIReceiveInfo.findInnerShopCodeFromReceiving" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select info.code
         			 from t_it_vmi_receive_info info
         			 where 1 = 1 and info.status=0
				 	 group by info.code
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="ITVMIReceiveInfo.updateReceiveInfoStatusByVender" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ update t_it_vmi_receive_info set status=:toStatus 
                			where 
                			status=:status 
                			and vender=:vender 
                			and to_location=:toLocation
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransDeliveryCfg.findTransCfgByWhOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,t.exp_code,t.full_name,nvl(tdc.sendQty,0) as sendQty,nvl(tdc.quantity,-1) as quantity from 
					T_MA_TRANSPORTATOR t
					left join V_wh_trans_delivery_cfg tdc on t.id=tdc.transId and tdc.whOuId=:whouid
					where
					t.life_cycle_status=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransDeliveryCfg.findTransCfgByWhOuIdAndLpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,tr.exp_code as expCode from T_WH_TRANS_DELIVERY_CFG t ,T_MA_TRANSPORTATOR tr 
					where t.trans_id = tr.id and t.ou_id = :whouid 
					#if($lpCode)
						and tr.exp_code = :lpCode
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.findSnPoSoLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select * from (
select
distinct
sn.id,
sn.sn as sn,
sku.name as supportName,
sku.code as skuCode,
sku.bar_code as barcode,
sku.name as skuName,
sta.slip_code as slipCode,
sta.code as staCode,
sta.type as staType,
sn.card_status intCardStatus,
ck.code as invCkCode
from 
t_wh_sku_sn sn
left join t_wh_stv stv on sn.stv_id = stv.id
left join t_wh_inv_check ck on ck.id = sn.inv_ck_id
left join t_wh_sta sta on stv.sta_id = sta.id,
t_bi_inv_sku sku,
t_bi_brand b
where sku.id = sn.sku_id
and sn.ou_id = :ouid
#if($jmskucode)
	and sku.code like :jmskucode
#end
#if($barcode)
	and sku.bar_code like :barcode
#end
#if($skuName)
	and sku.name like :skuName
#end
#if($cardStatus)
	and sn.card_status= :cardStatus
#end
#if($sn)
	and sn.sn like :sn
#end
)
					      
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSnLog.findSnLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
l.id,
l.sn,
l.batch_code as batchCode,
stv.code as staCode,
sku.code as skuCode,
sku.bar_code as barcode,
sku.jm_code as jmCode,
sku.name as skuName,
ck.code as invCkCode,
l.transaction_time,
l.direction as directionInt,
decode(l.direction,1,'入库',2,'出库','') as directionString
from 
t_wh_sku_sn_log l,
t_bi_inv_sku sku,
(select t.id,t1.code from t_wh_stv t,t_wh_sta t1 where sta_id=t1.id) stv,
t_wh_inv_check ck
where 
l.sku_id=sku.id
and l.ou_id=:ouid
and l.stv_id = stv.id(+)
and l.inv_ck_id=ck.id(+)
#if($staCode)
	and stv.code like :staCode
#end
#if($direction)
	and l.direction = :direction
#end
#if($skuName)
	and sku.name like :skuName
#end
#if($barcode)
	and sku.bar_code like :barcode
#end
#if($skuCode)
	and sku.bar_code like :skuCode
#end
#if($sn)
	and l.sn like :sn
#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="District.findAllProvince" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct area.province as province from t_sys_area area where area.district is not null
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransDeliveryCfg.findUsingByWhou" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select c.exp_code as CODE,c.transId as ID
						from v_wh_trans_delivery_cfg c 
						where c.whOuId = :whOuId
      					and c.sendQty < c.quantity
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findPoInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select ou.name as whName,
                 sta.order_create_time as applyTime,
                 s.name as shopName,
                 sta.payment_time as paymentDate,
                 sta.arrive_time as planTime,
                 sta.supplier_name as supportName,
                 sta.payment_type as paymentType,
                 sta.slip_code as code,
                 sta.memo as remark,
                 '' as arrivalType
          from t_wh_sta sta,
               t_au_operation_unit ou,
               t_bi_channel s
          where sta.main_wh_id = ou.id
                and s.code = sta.owner	
					      and sta.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findPoConfirmStvLineBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select rownum as "index",
       sku.name as skuName,
       sku.code as skuCode,
       b.name as brand,
       sku.supplier_code as supplierCode,
       nvl(l.quantity, 0) as planQty,
       nvl(l.complete_quantity, 0) as totalQty,
       nvl(t.qty, 0) as quantity,
       t.batchCode as batchCode
  from t_wh_sta      sta,
       t_bi_inv_sku  sku,
       t_bi_brand    b,
       t_wh_sta_line l
  left join (select stv.business_seq_no as batchCode,
                    stvl.staline_id     as id,
                    stvl.quantity       as qty
               from t_wh_stv stv,
                    t_wh_stv_line stvl,
                    (select id
                       from (select id
                               from t_wh_stv stv1
                              where stv1.sta_id = :staId
                              order by stv1.create_time desc)
                      where rownum = 1) stv2
              where stv.id = stvl.stv_id
                and stv.sta_id = :staId
                and stv2.id = stv.id             
             ) t
    on t.id = l.id
 where sta.id = :staId
   and l.sta_id = sta.id
   and l.sku_id = sku.id
   and b.id = sku.brand_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findSkuStoreMode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct l.sku_id as SKU_ID, sku.store_mode as STORE_MODE
					  from t_wh_stv_line l, t_bi_inv_sku sku
					 where sku.id = l.sku_id
					   and l.stv_id = :stvid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findInboundErrorLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select distinct upper(inv.sku_id || '_' || loc.code) as code
from t_wh_sku_inventory inv, t_wh_location loc
where loc.id = inv.location_id
and inv.quantity > 0
and exists (
select 1
from t_wh_stv_line l
where l.sku_id = inv.sku_id
and l.stv_id = :stvid
)
and inv.ou_id = :ouid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findErrorSkuLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select distinct upper(inv.sku_id || '_' || inv.location_id || '_' || store_mode || '_' || decode(store_mode,22,inv.batch_code, TO_CHAR(inv.expire_date,'YYYYMMDD'))) as code
from t_wh_sku_inventory inv, t_bi_inv_sku sku
where inv.sku_id=sku.id
and inv.quantity > 0
and sku.store_mode in (33,22)
and inv.ou_id = :ouid
and exists (
select 1
from t_wh_stv_line l
where l.sku_id = sku.id
and l.stv_id = :stvid
)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findLocationWithcapacityByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.id as id,
							l.is_available,
							l.is_locked,
							decode(nvl(l.capacity * l.capacity_ratio/100,0),0,null,nvl(l.capacity * l.capacity_ratio/100,0))-nvl(sum(inv.quantity),0) as capacity
					from t_wh_sku_inventory inv,t_wh_location l
					where l.id = inv.location_id(+)
							and l.code = :locCode
							and l.ou_id = :ouid
					group by l.id,l.capacity * l.capacity_ratio/100,l.is_available,l.is_locked
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findIsSupportTranstype" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.location_id from T_WH_LOCATION_TRANSTYPE t where t.location_id = :locid and t.transtype_id = :typeid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransDeliveryCfg.updateTransDeliveryCfg" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_wh_trans_delivery_cfg(id,quantity,version,ou_id,trans_id) values(s_t_wh_trans_delivery_cfg.nextval,:qty ,0 ,:whOuId ,:transId )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 处理 -->
	<bean id="PdaPostLog.updateLocationPostPdaLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_pda_post_log  lg set lg.location_id = 
					       (select loc.id from t_wh_location loc where loc.code = lg.location_code and loc.ou_id = :ouid) 
					where lg.code = :staCode and lg.status = 1 and lg.location_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.updateSkuPostPdaLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			 update t_wh_pda_post_log  lg set lg.sku_id = (
			       select sku.id from t_wh_sta sta,t_wh_stv stv,t_wh_stv_line l,t_bi_inv_sku sku
			       where sta.id = stv.sta_id
			       		 and stv.status = 1
			       		 and (lg.post_code = sku.bar_code or lg.post_code = sku.code)
			             and stv.id = l.stv_id
			             and sku.id = l.sku_id
			             and sta.code = :staCode
					)
			where lg.code = :staCode and lg.status = 1 and lg.sku_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.updateAddSkuBarCodePostPdaLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 update t_wh_pda_post_log  lg set lg.sku_id = (
				        select sn.sku_id 
				        from t_bi_inv_sku_barcode sn
				        where
				         	sn.barcode = lg.post_code
				         	and exists(
				              select 1 
				              from t_wh_sta sta,t_wh_sta_line l
				              where sta.id = l.sta_id
				                    and l.sku_id = sn.sku_id
				                    and sta.code = :staCode
				        )
					)
					where lg.sku_id is null 
				    and lg.code = :staCode and lg.status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.updateSkuBySNPostPdaLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			 update t_wh_pda_post_log  lg set lg.sku_id = (
		        select sn.sku_id 
		        from t_wh_sku_sn sn
		        where
		         	sn.sn = lg.post_code
		         	and exists(
		              select 1 
		              from t_wh_sta sta,t_wh_sta_line l
		              where sta.id = l.sta_id
		                    and l.sku_id = sn.sku_id
		                    and sta.code = :staCode
		        )
			)
			where lg.sku_id is null 
		    and lg.code = :staCode and lg.status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgInvoice.findVMIInvoice" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
	inv.*
from 
	T_WH_MSG_INVOICE inv
where 
  inv.source= :source
	#if($fromDate)
		and inv.create_time >= :fromDate
	#end
	#if($endDate)
		and inv.create_time <= :endDate
	#end    
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 删除 -->
	<bean id="PdaPostLog.deletePostPdaErrorLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_pda_post_log lg set lg.status = 0
					where (lg.sku_id is null or lg.location_id is null ) 
						and lg.code = :staCode
						and lg.status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 导出 -->
	<bean id="PdaPostLog.findPdaErrorLogByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select lg.*
						from t_wh_pda_post_log lg 
						where (lg.sku_id is null or lg.location_id is null ) and lg.code = :staCode
							and lg.status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.queryPdaCodeByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select lg.pad_code from t_wh_pda_post_log lg ,t_wh_sta sta
where lg.location_id is not null
and lg.status = 1
and lg.code = sta.code
and sta.id= :staId
group by lg.pad_code
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="PdaPostLog.deleteAllLogByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_pda_post_log set status = 0,user_id = :userid where code = :code and status = 1 and status !=10
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.findByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						lg.id ,lg.code,
						lg.pad_code as pdaCode,
						lg.create_time,
						sku.name as skuName,
						sku.code as skuCode,
						sku.bar_code as skuBarcode,
						loc.code as locCode,
						sku.SUPPLIER_CODE as skuSupplierCode,
						lg.qty,
						s.name as invStatusName,
						tnum.num
					from 
						t_wh_pda_post_log lg,
						t_bi_inv_sku sku,
						t_wh_location loc,
						t_wh_inventory_status s,
						(select pad_code,code,sum(qty) as num from t_wh_pda_post_log where status=1 and location_id is not null and sku_id is not null group by pad_code,code) tnum
					where lg.sku_id = sku.id
						and tnum.pad_code=lg.pad_code
						and lg.location_id = loc.id
						and lg.inv_status_id = s.id (+)
						and lg.status = 1
						and lg.status != 10
						and tnum.code=lg.code
						and lg.code = :code
						#if($fromDate)
							and lg.create_time >= :fromDate
						#end
						#if($toTime)
							and lg.create_time < :toDate
						#end
						#if($skuName)
							and sku.name like '%$skuName%'
						#end
						#if($skuBarcode)
							and sku.bar_code like '%$skuBarcode%'
						#end
						#if($skuCode)
							and sku.code like '%$skuCode%'
						#end
						#if($skuSupplierCode)
							and sku.SUPPLIER_CODE like '%$skuSupplierCode%'
						#end
						#if($locCode)
							and loc.code like '%$locCode%'
						#end
						#if($invStatusName)
							and s.name like '%$invStatusName%'
						#end
						#if($pdaCode)
							and lg.pad_code like '%$pdaCode%'
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.findPdaLogwithGroup" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select lg.code,sku.name as skuName,sku.code as skuCode,
			                 sku.supplier_code as skuSupplierCode,
			                 sku.key_properties as skukeyProperties,
			                 sku.bar_code as skubarcode,
			                 loc.code as locCode,
			                 sum(lg.qty) as qty
					from t_wh_pda_post_log lg,t_bi_inv_sku sku,t_wh_location loc
					where lg.code = :code
						  and sku.id = lg.sku_id
						  and loc.id = lg.location_id
					    and lg.status = 1
					    and lg.status != 10
					    group by lg.code,sku.name,sku.code,sku.supplier_code,sku.key_properties,loc.code,sku.bar_code
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.finishLogByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_pda_post_log lg set lg.status = 10 where lg.code = :code and lg.status = 1 
					#if($pdaCode)
						and lg.pad_code=:pdaCode
					#end
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaPostLog.findPdaPostLogByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select lg from PdaPostLog lg where lg.status=1 and lg.loc is not null and lg.code=:code 
					#if($pdaCode)
						and lg.pdaCode=:pdaCode
					#end
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineByPdaPostLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select l.id,l.quantity,l.inv_status_id as intInvstatus,l.sku_id,l.owner,l.stv_id,l.transtype_Id,l.wh_id,l.sku_cost,l.staline_id,l.direction as directionInt from 
(select * from t_wh_pda_post_log lg where lg.code=:code
#if($pdaCode)
and lg.pad_code=:pdaCode
#end
) pda,
t_wh_stv_line l where
l.stv_id=:stvId
and pda.sku_id=l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>
    
    <bean id="StvLine.findSnSkuByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select case when sku.is_sn_sku>0 then 1 else 0 end as  isSnSkuBoolean   from t_wh_stv_line line,t_bi_inv_sku sku where sku.id=line.sku_id 
                      and sku.is_sn_sku=1 and line.stv_id=:stvId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.findExpDateByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select case when count(1)>0 then 1 else 0 end as isSn  from t_wh_stv_line line,t_bi_inv_sku sku where sku.id=line.sku_id 
                      and  sku.store_mode=33 and line.stv_id=:stvId 
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StvLine.findNikeRfidByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select case when count(1)>0 then 1 else 0 end as isRfid  from t_wh_stv_line line,t_bi_inv_sku sku where sku.id=line.sku_id 
                      and  sku.is_rfid=1 and line.stv_id=:stvId
                ]]>
			</value>
		</constructor-arg>
	</bean>

    <bean id="StvLine.findExpDateByStvId1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select line.sku_id as skuId,line.quantity,line.expire_date  from t_wh_stv_line line,t_bi_inv_sku sku where sku.id=line.sku_id 
                      and  sku.store_mode=33 and line.stv_id=:stvId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	

	<bean id="StvLine.findByPdaLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select lg.sku_id,lg.location_id,lg.qty as quantity,l.quantity as planQty,l.id,
					       l.inv_status_id as intInvstatus,l.owner,l.stv_id,l.transtype_Id,l.wh_id,l.sku_cost,l.staline_id,l.direction as directionInt
					from(
					  select lg.sku_id,lg.location_id,sum(lg.qty) as qty
					  from t_wh_pda_post_log lg
					  where lg.status = 1
					  		and lg.status != 10
					        and lg.code = :code
					        #if($pdaCode)
								and lg.pad_code=:pdaCode
							#end
					  group by lg.code,lg.sku_id,lg.location_id
					  )lg ,t_wh_stv_line l,t_wh_stv stv
					where lg.sku_id = l.sku_id
					      and l.stv_id = stv.id
					      and stv.id = :stvId
					      and stv.sta_id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findErrorSkuQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select l.sku_id,nvl(l.qty,0) as planQty,nvl(lg.qty,0) as quantity,sku.name as skuName,sku.code as skuCode
						from (select l.sku_id,sum(l.quantity) as qty 
						     from t_wh_stv_line l
						     where l.stv_id = :stvid
						     group by l.sku_id) l,
						     (select lg.sku_id,sum(lg.qty) as qty
						      from t_wh_pda_post_log lg 
						      where lg.code = :code
						      #if($pdaCode)
								and lg.pad_code=:pdaCode
							  #end
						            and lg.status = 1
						      group by lg.sku_id)lg,
						      t_bi_inv_sku sku
						where lg.sku_id(+) = l.sku_id
							  and sku.id = l.sku_id
						      and nvl(l.qty,0) - nvl(lg.qty,0) != 0
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findErrorSnSkuQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.id as sku_id,
       nvl(sn.qty, 0) as planQty,
       nvl(lg.qty, 0) as quantity,
       sku.name as skuName,
       sku.code as skuCode
  from t_bi_inv_sku sku,
       (select lg.sku_id, sum(lg.qty) as qty
          from t_wh_pda_post_log lg
         where lg.code = :code 
         #if($pdaCode)
           and lg.pad_code = :pdaCode 
         #end
           and lg.status = 1
         group by lg.sku_id) lg,
       (select s.sku_id, count(1) as qty
          from t_wh_sku_sn s
         where s.stv_id = :stvid
           and s.status = 1
         group by s.sku_id) sn
 where sku.Is_Sn_Sku = 1
   and sku.id = lg.sku_id(+)
   and sku.id = sn.sku_id(+)
   and nvl(lg.qty, 0) - nvl(sn.qty, 0) != 0
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByPdaCodeQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select l1.id,l1.quantity-l2.quantity as quantity
from 
t_wh_stv_line l1,
t_wh_stv_line l2 
where l1.staline_id=l2.staline_id
and l1.stv_id=:stvId
and l2.stv_id=:newStvId

                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findPlanExeQtyByPda" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select l.sku_id,nvl(l.qty,0) as planQty,nvl(lg.qty,0) as quantity,
							sku.name as skuName,
							sku.code as skuCode,
							sku.bar_code as barCode,
							sku.supplier_code as supplierCode,
							sku.key_properties as keyProperties
						from (select l.sku_id,sum(l.quantity) as qty 
						     from t_wh_stv_line l
						     where l.stv_id = :stvid
						     group by l.sku_id) l,
						     (select lg.sku_id,sum(lg.qty) as qty
						      from t_wh_pda_post_log lg 
						      where lg.code = :code
						            and lg.status = 1
						      group by lg.sku_id)lg,
						      t_bi_inv_sku sku
						where lg.sku_id(+) = l.sku_id
							  and sku.id = l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifTotalLine.findvmiicLineByInvCheckId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               select sku.bar_code as skuBarCode ,sku.name as skuName, line.quantity as quantity ,sku.code as skuCode
				from T_WH_INV_CK_DIF_TOTAL_LINE line,
					T_BI_INV_SKU sku
					where 
					sku.id=line.sku_id
					and 
					line.inv_check_id=:invcheckid
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifTotalLine.findLineNotInOrders" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               select line.*
				from T_WH_INV_CK_DIF_TOTAL_LINE line , T_WH_INV_CHECK ic where line.inv_check_id=ic.id and ic.id= :icId
				and ic.slip_code= :poNum and line.SKU_ID not in 
				(select sku.id from t_esprit_order ord ,T_BI_INV_SKU sku where sku.BAR_CODE=ord.OD_SKU and ord.od_po= :poNum)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifTotalLine.findvmiicLineByInvCheckIdAndQty"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               select sku.code as skuCode ,sku.bar_code as skuBarCode,sku.name as skuName, 
               case when line.quantity>=0 
     				then line.quantity 
				     else (0-line.quantity)
				     end as quantity
			   from T_WH_INV_CK_DIF_TOTAL_LINE line,
					T_BI_INV_SKU sku
					where 
					sku.id=line.sku_id
					and 
					line.inv_check_id=:invcheckid
					#if ($qtyStatus==true)
						and line.quantity >0
					#else 
						and line.quantity <= 0
					#end

                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifTotalLine.findVmiAdjSkuQuantity" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sku.bar_code as Code ,sum(line.quantity) as ID
             	 from T_WH_INV_CHECK inv ,T_WH_INV_CK_DIF_TOTAL_LINE line,t_bi_inv_sku sku
              	where line.sku_id=sku.id
                    and inv.id=line.inv_check_id
                    #if($type==true)
                    	and line.quantity>0
                    #else
                    	and line.quantity<=0
                    #end
                    and inv.id= :invCKID
                    group by sku.bar_code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromCKData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct pro.colour_code as color,pro.sizes_code as "size" ,1 as salesModel, 'charleskeith' as brandCode,pro.ORIGINAL_SP as listPrice,
					        pro.prod_code as supplierCode, pro.sku_code as barCode,pro.short_desc as name,pro.sku_code as extensionCode1
					        from t_ck_inventory_data inv ,t_ck_product_data pro where inv.sku_code=pro.sku_code
							and not exists (
							select * from t_bi_inv_sku sku where sku.bar_code=inv.sku_code
							)]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromMASStockData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select pro.COLOR_DESC as colorDesc,pro.color as color,pro.sizep|| ' ' ||pro.sizes as "size" ,1 as salesModel, '马莎' as brandCode,
                      decode(color,'',decode(pro.stroke, '', pro.article_no, pro.stroke),
                                      decode(pro.dept,'','',pro.dept)
                                      ||
                                      decode(pro.dept,'',pro.stroke,
                                                             decode(pro.stroke,'','','\'||pro.stroke))
                                      ||decode(pro.stroke,'',pro.color,
                                               decode(pro.color,'','','\'||pro.color)) 
                                               
                             )as supplierCode,
                      pro.article_no as barCode,pro.article_desc as name,
                      pro.article_no as extensionCode1,
                      pro.article_no as extensionCode2,
                      pro.ern11 as extensionCode3
                      from t_mas_product_data pro where pro.article_no= :skuCode
                      and pro.ern11 is not null
                      order by pro.create_time desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromITData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select SUBSTR(sku.SKUKO ,-6,3) as color , SUBSTR(sku.SKUKO ,-3,3) as "size" ,2 as salesModel,
		      			brand.brandname as brandCode , plu.pluko as supplierCode,
		      			sku.skuko as barCode,plu.name as name,sku.skuko as extensionCode1,
		      			sku.skuko as extensionCode2
		 				from t_it_sku_data sku ,t_it_plu_data plu ,t_it_brand_data brand
		 				where plu.pluno=sku.pluno and sku.skuko= :skuCode and brand.brandcode=brand_id]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromCoachData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.color as color,
						       sku.master_size as "size",
						       sku.style as supplierCode,
						       1 as salesModel,
						       'COACH' as brandCode,
						       sku.style_desc as name,
						       sku.upccode as barCode,
						       sku.upccode as extensionCode2,
						       sku.department remark1
						  from t_coach_product_data sku
						 where sku.upccode = :skuCode
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromMasData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.COLOR_DESC as color, 1 as salesModel,
						       sku.SIZEP || ' ' || sku.SIZES as "size",
						       sku.DEPT||sku.STROKE||sku.COLOR as supplierCode,
						       'MAS' as brandCode,
						       sku.ARTICLE_DESC as name,
						       sku.ARTICLE_NO as barCode,
						       sku.ARTICLE_NO as extensionCode1,
						       sku.ARTICLE_NO as extensionCode2,
						       sku.ern11 as extensionCode3
						  from T_MAS_PRODUCT_DATA sku
						 where sku.ARTICLE_NO = :skuCode order by sku.create_time
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromESPData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.sku_color as color , sku.sku_size as "size" ,1 as salesModel,sku.sku_id extensionCode2,
                  sku.S_STYLEDESC1 as name, sku.S_BRAND as brandcode, 
                  sku.sku_id as barCode,sku.S_styleno as supplierCode,
                  sku.S_ORIGINALLISTEDRETAIL as listPrice,
                  sku.S_LANDEDCOST as fob,
                  season.season_seasonyear as seasonYear ,season.season_seasoncode as seasonCode,
                  decode( instr(sku.s_line, 'A') ,0,sku.s_line,substr(sku.s_line, 1, instr(sku.s_line, 'A') -1)) as division,
                  sku.version as skuVersion, sku.sku_id as extensionCode1,
                  '{"seasonYear"'|| :maohao ||'"'||season.season_seasonyear||'","seasonCode"'|| :maohao ||'"'||season.season_seasoncode
                  ||'","buyingSeasonDesc"'|| :maohao ||'"'||season.season_buyingseasondesc ||'","sellingSeasonDesc"'|| :maohao ||'"'||season.season_sellingseasondesc
                  ||'","sellingFromDate"'|| :maohao ||'"'||season.season_sellingfromdate||'","sellingToDate"'|| :maohao ||'"'||season.season_sellingtodate||'"}' as seasonJSON
	                from t_esprit_style sku ,
					(select distinct seas.season_seasonyear season_seasonyear, seas.season_seasoncode as season_seasoncode
                  , seas.season_buyingseasondesc as season_buyingseasondesc ,seas.season_sellingseasondesc as season_sellingseasondesc ,
                  seas.season_sellingfromdate as season_sellingfromdate,
                  seas.season_sellingtodate as season_sellingtodate from t_esprit_season seas) season
	               where sku.s_seasonyear=season.season_seasonyear(+)
	                 and sku.s_seasoncode=season.season_seasoncode(+)
                	 and sku.sku_id= :skuCode
                	order by sku.version desc
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromConverseData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.color as color , sku.STYLE_SIZE as "size" ,sku.retail_price as listPrice,2 as salesModel,
	                'CONVERSE' as brandCode , sku.styleid||sku.color  as supplierCode,
	                sku.ean_code as barCode,sku.endescription as name,sku.ean_code as extensionCode1,
	                sku.ean_code as extensionCode2,
	                sku.upc_code as extensionCode3
		            from T_CONVERSE_STYLE sku 
		            where sku.ean_code= :skuCode order by sku.version desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromCCHData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select sku.color_code as color , sku.cn_size as "size" ,1 as salesModel,sku.isp as listPrice,
                  'cache-cache' as brandCode , sku.product_code  as supplierCode,
                  sku.items_barcode as barCode,sku.description as name,
                  sku.items_barcode as extensionCode1,sku.sku_code as extensionCode2
                from T_CACHE_PRODUCT_DATA sku 
            where sku.items_barcode= :skuCode order by sku.create_time desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromPhilipsData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  select 1 as salesModel,
                  '飞利浦_1' as brandCode , sku.artice_number  as supplierCode,
                  sku.sku_code as barCode,sku.description as name,
                  sku.sku_code as extensionCode1,sku.sku_code as extensionCode2,
                  sku.barcode as extensionCode3,sku.length as length,sku.width as width,
                  sku.height as height,sku.gross_weight as grossWeight,
                  sku.net_weight as netWeight
                  from T_PHILIPS_MASTER sku
                  where sku.sku_code= :skuCode order by sku.create_time desc 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromConverseEANData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.color as color , sku.STYLE_SIZE as "size" ,sku.retail_price as listPrice,
	                'CONVERSE' as brandCode , sku.styleid||sku.color as supplierCode,
	                decode(sku.ean_code,'', :skuCode,sku.ean_code) as barCode,
	                sku.endescription as name,
	                decode(sku.ean_code,'', :skuCode,sku.ean_code) as extensionCode1,
	                decode(sku.ean_code,'', :skuCode,sku.ean_code) as extensionCode2,
	                sku.upc_code as extensionCode3
		            from T_CONVERSE_STYLE sku 
		            where sku.styleid= :styleId and sku.color= :color and sku.style_size= :styleSize
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromLevis" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
			              pr.size_list as "size",
			              'Levi''s' as brandCode,
			              pr.product_code as supplierCode,
			              pr.barcode_list as barCode,
			              pr.product_desc as name,
			              pr.product_desc as enName,
			              replace(product_code,'-','')||'0'||replace(size_list,' ','') extensionCode2,
			              1 as salesModel,
			              decode(pr.md_price,null, tt.mdprice,pr.md_price) as listPrice
			            from t_levis_product_reference pr 
			            left join (
			                        select distinct p0.product_code productcode, p0.md_price mdprice
			                        from t_levis_md_price p0,
			                             (select p1.product_code code, max(p1.start_date) md
			                              from t_levis_md_price p1
			                              group by p1.product_code
			                              ) t
			                    where p0.product_code=t.code and p0.start_date=t.md
			            ) tt on pr.product_code=tt.productcode
			            where replace(product_code,'-','')||'0'||replace(size_list,' ','') = :extcode2
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="LevisDeliveryOrder.createDeliveryReceive" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_levis_delivery_receive(id,seq_no,create_time,store_code1,store_code2,product_code,inseam_code,size_code,quantity,order_code,po_code,sta_id,type,sku_id,shop_id)
					select s_t_levis_delivery_receive.nextval,S_t_levis_dr_seq_no.nextval,sysdate,do.store_code1,do.store_code2,do.product_code,do.inseam_code,do.size_code,do.quantity,do.order_code,do.po_code,do.sta_id,'20',l.sku_id,s.id
					from t_levis_delivery_order do,
					     t_wh_sta_line l,
					     t_wh_sta sta,
					     t_bi_channel s
					where do.sta_id = :staId
					  and l.id = do.STA_LINE_ID
					  and sta.id = l.sta_id
					  and s.code = sta.owner
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="LevisDeliveryOrder.findAdjReceviceSeq" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_t_levis_dr_seq_no.nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LevisDeliveryOrder.createAdjReceive" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_levis_delivery_receive(id,seq_no,create_time,store_code1,store_code2,product_code,inseam_code,size_code,quantity,order_code,po_code,sta_id,type,sku_id,shop_id)
					select s_t_levis_delivery_receive.nextval,:seq,sysdate,do.store_code1,do.store_code2,do.product_code,do.inseam_code,do.size_code,do.quantity - l.complete_quantity,do.order_code,do.po_code,do.sta_id,'95',l.sku_id,s.id
					from t_levis_delivery_order do,
					     t_wh_sta_line l,
					     t_wh_sta sta,
					     t_bi_channel s
					where do.sta_id = :staId
					      and sta.id = l.sta_id
					      and sta.owner = s.code
					      and l.sta_id = do.sta_id
					      and l.id = do.sta_line_id
					      and do.quantity - l.complete_quantity > 0
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="LevisDeliveryOrder.createInvCkReceive" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_levis_delivery_receive(id,seq_no,create_time,store_code1,store_code2,product_code,quantity,inv_ck_id,type,sku_id,shop_id)
select 
    s_t_levis_delivery_receive.nextval,
    decode(ck.inv_type,2,decode(ck.slip_code,null,S_T_LEVIS_TRF_SEQ_NO.Nextval,
    case when  instr(ck.slip_code,'IDS')>0 then SUBSTR(ck.slip_code ,5) else ck.slip_code end ),S_t_levis_dr_seq_no.Nextval),
    sysdate,
    s.vmi_code,
    decode(ck.inv_type,2,'0020023525',s.vmi_code),
    sku.ext_code2,
    case when l.quantity > 0 then l.quantity else l.quantity * (-1) end,
    ck.id,
    decode(ck.inv_type,2,(case when l.quantity > 0 then '40' else '45' end),(case when l.quantity > 0 then '60' else '61' end)),
    l.sku_id,s.id
from 
    t_wh_inv_check ck,
    t_wh_inv_ck_dif_total_line l,
    t_bi_channel s,
    t_bi_inv_sku sku
where 
    ck.id = l.inv_check_id
    and ck.shop_id = s.id
    and l.sku_id = sku.id
    and ck.id = :invckid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="LevisDeliveryOrder.createTransOut" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				insert into t_levis_delivery_receive(id,seq_no,create_time,store_code1,store_code2,product_code,quantity,sta_id,type,sku_id,shop_id)
				select s_t_levis_delivery_receive.nextval,nvl(sta.slip_code,S_t_levis_dr_seq_no.Nextval),sysdate,s.vmi_code,s2.vmi_code,sku.ext_code2,l.quantity,sta.id,'45',l.sku_id,s.id
				from t_wh_sta_line l,
				     t_wh_sta sta,
				     t_bi_inv_sku sku,
				     t_bi_channel s,
				     t_bi_channel s2
				where sta.id = :staId
				  and l.sku_id = sku.id
				  and sta.id = l.sta_id
				  and s.vmi_code !=s2.vmi_code
				  and s2.code = sta.addi_owner
				  and s.code = sta.owner
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="LevisDeliveryOrder.createTransIn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          insert into t_levis_delivery_receive(id,seq_no,create_time,store_code1,store_code2,product_code,quantity,sta_id,type,sku_id,shop_id)
			          select s_t_levis_delivery_receive.nextval,nvl(sta.slip_code,S_t_levis_dr_seq_no.Nextval),sysdate,s.vmi_code,s2.vmi_code,sku.ext_code2,l.quantity,sta.id,'40',l.sku_id,s.id
			          from t_wh_sta_line l,
			               t_wh_sta sta,
			               t_bi_inv_sku sku,
			               t_bi_channel s,
                     t_bi_channel s2
			          where sta.id = :staId
			            and l.sku_id = sku.id
			            and sta.id = l.sta_id
			            and s.vmi_code != s2.vmi_code
		                and s.code = sta.addi_owner
		                 and s2.code = sta.owner
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="LevisDeliveryOrder.createRtnReceive" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_levis_delivery_receive(id,seq_no,create_time,store_code1,store_code2,product_code,quantity,sta_id,type,sku_id,shop_id)
					select s_t_levis_delivery_receive.nextval,nvl(sta.slip_code,S_t_levis_dr_seq_no.Nextval),sysdate,s.vmi_code,s.vmi_code,sku.ext_code2,l.complete_quantity,sta.id,'95',l.sku_id,s.id
					from t_wh_sta sta,
					     t_wh_sta_line l,
					     t_bi_inv_sku sku,
					     t_bi_channel s
					where sta.id = l.sta_id
					      and sku.id = l.sku_id
					      and l.complete_quantity>0
					      and s.code = sta.owner
					      and sta.id = :staid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeStockReceive.findNikeStockReceivesUnWrite" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     select t.* from T_NIKE_STOCK_RECEIVE t where (t.type = 1 or t.type =2)  and t.status = 1
					]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- nike sta -->
	<bean id="NikeVmiStockInCommand.findNikeVmiStockIn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     select t.reference_no
			             from T_NIKE_VMI_STOCKIN t
			             where t.sta_id is null
			             and t.staline_id is null
			             and t.status != 10
			             and t.brand is null
			               group by t.reference_no
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- nike sta brand -->
		<bean id="NikeVmiStockInCommand.findNikeVmiStockInBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     select t.reference_no
			             from T_NIKE_VMI_STOCKIN t
			             where t.sta_id is null
			             and t.staline_id is null
			             and t.status != 10
			             and t.brand = '1'
			               group by t.reference_no
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="AutoPlConfig.getAotoPlConfigCommand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					t.id as id,
					t.next_execute_time as nextExecuteTime,
					t.role_id as autoPlr,
					t.interval_minute as intervalMinute,t.status as status,t.is_single_task as isSingleTask 
					from t_wh_auto_pl_config t where t.wh_ou_id = :ouid 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeStockReceive.findNikeReturnReceivesUnWrite" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select  t.* from t_wh_receive_confirmation t where t.type = :type and t.status = 1				     
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeStockReceive.updateStatusNikeReturnReceiveHasWriteFile"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				update t_wh_receive_confirmation t set t.status = :finishStatus where t.id = :id    
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeCheckReceive.updateToWriteStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_CHECK_RECEIVE t set t.status = :toWriteStatus where t.status = :writeStatus
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeCheckReceive.updateToWriteFinishDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     update T_NIKE_CHECK_RECEIVE t set t.finish_date = sysdate where t.status = :status
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeCheckReceive.findNikeCheckReceive" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
select c.id,c.check_code,c.owner_code,c.status,c.manual_type,c.upc,
       c.create_date,c.finish_date,c.quantity,
       c.operator,c.remark,shop.name as owner 
from T_NIKE_CHECK_RECEIVE c,t_bi_channel shop
where 
c.owner_code = shop.vmi_code
and c.type = 2
#if($checkCode)
	and c.check_Code like :checkCode
#end
#if($ownerCode)
	and c.owner_Code like :ownerCode
#end
#if($owner)
	and shop.code like :owner
#end
#if($upc)
	and c.upc like :upc
#end
#if($status)
	and c.status = :status
#end
#if($manualType)
	and c.manual_type = :manualType
#end
#if($createDate)
	and c.create_date >= :createDate
#end
#if($endCreateDate)
	and c.create_date <= :endCreateDate
#end
#if($finishDate)
	and c.finish_date >= :finishDate
#end
#if($endFinishDate)
	and c.finish_date <= :endFinishDate
#end
#if($operator)
	and upper(c.operator) like upper(:operator)
#end


				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeCheckReceive.findNikeCheckReceiveFileNO" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select S_T_NIKE_CHECK_RECEIVE_FILE_NO.NEXTVAL from dual
				]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- 转店退仓 || 退大仓 -->

	<bean id="NikeReturnReceive.updateToWriteStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update t_wh_receive_confirmation t set t.status = :toWriteStatus where t.type = :type and t.status = :createStatus
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="NikeReturnReceive.findToWriteFile" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    select t.* from t_wh_receive_confirmation t where t.status = :toWriteStatus and t.type = :type
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeReturnReceive.unitTestGetNikeReturnReceiveByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    select t.* from t_wh_receive_confirmation t,t_wh_sta sta  where t.reference_no=sta.slip_code and sta.id = :staId
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeReturnReceive.updateToFinishStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update t_wh_receive_confirmation t 
				    set t.status =:finishStatus  
				    where t.type =:type  
				    and t.status =:toWriteStatus
				    #if($referenceNo)
						and t.reference_no = :referenceNo
					#end
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="NikeVmiStockInCommand.findNikeVmiStockInByRefNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     select t.id,t.reference_no, t.sta_id, t.staline_id,t.item_ean_upc_code, t.quantity, t.from_location,t.to_location,t.sap_carton,t.brand
						 from T_NIKE_VMI_STOCKIN t
						 where t.sta_id is null
						   and t.staline_id is null
						   and t.reference_no = :refNo
						   #if($brand)
							and t.brand = :brand
						   #end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeVmiStockInCommand.updateStaIdByRefNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     update T_NIKE_VMI_STOCKIN t
					      set t.sta_id = :staId, t.staline_id = :staLineId
					      where t.sta_id is null
					      and t.staline_id is null
					      and t.item_ean_upc_code = :itemEanUpcCode
					      and t.reference_no = :referenceNo
					      #if($brand)
							and t.brand = :brand
						   #end
					]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="NikeVmiStockInCommand.insertNikeVmiStockInRecode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    insert into T_NIKE_VMI_STOCKIN_RECODE select n.* from T_NIKE_VMI_STOCKIN n where n.reference_no=:referenceNo and n.sta_id =:staId 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	

	<bean id="NikeStockReceive.updateStatusByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update t_wh_sta t set t.vmi_rc_status = :vmiRcStatus where t.id = :staId
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeStockReceive.updateStatusHasWriteFile" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_STOCK_RECEIVE t set t.status = :finishStatus where t.id = :id
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="NikeStockReceive.updateNikeInBoundRevToWriteStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				 update T_NIKE_STOCK_RECEIVE t set t.status = :toWriteStatus 
			        where t.status = 1 and t.brand is null and t.type = :type
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeStockReceive.updateNikeInBoundRevToWriteStatusBrand"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				 update T_NIKE_STOCK_RECEIVE t set t.status = :toWriteStatus 
			        where t.status = 1 and t.brand = '1' and t.type = :type
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	

	<bean id="NikeStockReceive.updateNikeTransferRevToWriteStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				 update T_NIKE_STOCK_RECEIVE t set t.status = :toWriteStatus ,
           			t.sap_carton = (select max(s.sap_carton) from T_NIKE_VMI_STOCKIN s where s.reference_no = t.reference_no )
				 	where t.status = 1 and t.brand is null and t.type = :type
        			and exists (select 1 from T_NIKE_VMI_STOCKIN s where s.reference_no = t.reference_no) 
					]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- =============todo -->
	<bean id="NikeStockReceive.updateToWriteStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_STOCK_RECEIVE t set t.status = :toWriteStatus where t.status = 1				    
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="NikeStockReceive.findToWriteFile" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    select t.* from T_NIKE_STOCK_RECEIVE t where t.status = :toWriteStatus and t.brand is null
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="NikeStockReceive.findToWriteFileBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    select   t.*   from T_NIKE_STOCK_RECEIVE t where t.status = :toWriteStatus and t.brand='1'
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeStockReceive.findToWriteFileByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				      select r.sap_carton,r.color_code,r.cs2000_item_code,r.from_location,r.inseam_code,r.item_ean_upc_code,r.line_sequence_no,r.quantity,r.receive_date,r.reference_no,r.sap_d_n_no
				      ,r.size_code,r.to_location,r.total_line_sequence_no,r.version,r.create_time,r.qualifier from wms.T_NIKE_VMI_STOCKIN r,(
					   select distinct t.sta_id  from T_NIKE_STOCK_RECEIVE t where t.status = :toWriteStatus and t.brand='1'
					   ) a where r.sta_id=a.sta_id and r.brand='1'
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeStockReceive.updateToFinishStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_STOCK_RECEIVE t set t.status = :finishStatus where t.brand is null and  t.status = :toWriteStatus
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="NikeStockReceive.updateToFinishStatusBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_STOCK_RECEIVE t set t.status = :finishStatus where t.brand ='1' and  t.status = :toWriteStatus
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findReturnMaxWarehouseOrder"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				
				select sta.slip_code refSlipCode,sta.code code from t_wh_sta sta where sta.slip_code=:refSlipCode and sta.type in (101,102) and sta.status<>17
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findReturnExecuteSuccess" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				
				select sta.slip_code refSlipCode,sta.code code from t_wh_sta sta where sta.code=:code and sta.type in (101,102) and sta.status in (4,10)
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ESPOrder.findESPOrderCommandByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ord.*, table1.stalineId, table1.skuId ,
					table1.barCode,table1.totalQuantity ,table1.whId from  
					(SELECT stvl.staline_id as stalineId ,stvl.sku_id as skuId ,
				       sku.bar_code as barCode ,sum(stvl.quantity) as totalQuantity, 
				       stv.wh_id as whId
				FROM t_wh_stv_line stvl, t_bi_inv_sku sku ,t_wh_stv stv                          
				WHERE stvl.sku_id=sku.id and stv.id=stvl.stv_id
				and stvl.stv_id = :stvId
				group by stvl.staline_id ,stvl.sku_id,sku.bar_code, stv.wh_id)table1,t_esprit_order ord  
				where ord.staline_id=table1.stalineId]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="ESPOrder.findESPOrderCommandByStvId1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select  table1.stalineId, table1.skuId ,
					table1.barCode,table1.totalQuantity ,table1.whId from  
					(SELECT stvl.staline_id as stalineId ,stvl.sku_id as skuId ,
				       sku.bar_code as barCode ,sum(stvl.quantity) as totalQuantity, 
				       stv.wh_id as whId
				FROM t_wh_stv_line stvl, t_bi_inv_sku sku ,t_wh_stv stv                          
				WHERE stvl.sku_id=sku.id and stv.id=stvl.stv_id
				and stvl.stv_id = :stvId and stv.status=10 and stv.type=11
				group by stvl.staline_id ,stvl.sku_id,sku.bar_code, stv.wh_id)table1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ESPOrder.findESPOrderCommandByStvId3" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select   table1.skuId ,
					table1.barCode,table1.totalQuantity ,table1.whId from  
					(SELECT stvl.sku_id as skuId ,
				       sku.bar_code as barCode ,sum(stvl.quantity) as totalQuantity, 
				       stv.wh_id as whId
				FROM t_wh_stv_line stvl, t_bi_inv_sku sku ,t_wh_stv stv,t_wh_sta sta                          
				WHERE stvl.sku_id=sku.id and stv.id=stvl.stv_id and sta.id=stv.sta_id
				and sta.id = :staId and stv.status=10 and stv.type=11
				group by stvl.sku_id,sku.bar_code, stv.wh_id)table1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ESPOrder.findESPOrderCommandByStvId2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
				   select   table1.skuId ,
           table1.barCode,sum(table1.totalQuantity) as totalQuantity,table1.whId from  
           ( 
                    select sku.id as skuId,sku.bar_code as barCode,stv.wh_id as whId,line.quantity as totalQuantity 
                    from t_wh_stv stv ,t_wh_stv_line line,t_bi_inv_sku sku 
                    where stv.id=line.stv_id and sku.id=line.sku_id and stv.type=11 and stv.status=10 
                    and stv.sta_id in (select id  from t_wh_sta  where  group_sta_id=:staId)
                    union all 
                    (select sku.id as skuId,sku.bar_code as barCode,stv.wh_id as whId,line.quantity as totalQuantity 
                     from t_wh_stv stv ,t_wh_stv_line line,t_bi_inv_sku sku 
                     where stv.id=line.stv_id and sku.id=line.sku_id and stv.type=11 and stv.status=10 
                     and stv.sta_id=:staId
                     )
            )table1  group by table1.skuId,table1.barCode,table1.whId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStockTransByslipcode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ select * from 
t_wh_sta sta,
t_wh_stv stv,
t_wh_st_log l
where
sta.id=stv.sta_id
and stv.id=l.stv_id
and l.direction=2
and sta.code='H200000285707'
and sta.slip_code1 = :slipCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeTransferReceive.findVmiCodeByWhId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ select info.vmi_code from t_bi_channel info where info.id =:whId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeTransferReceive.findSeqRefNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ select SEQ_NikeTransferReceive_refno.Nextval from dual]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCommandFromNikeData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select substr(t1.material_number,-3) as color,
			                   '耐克NIKE' as brandCode,
			                   t1.long_material_name_english as name,
			                   t1.material_number as supplierCode,
			                   substr(t2.upc,3) as barCode,
			                   t2.upc as extensionCode2,
			                   t2.US_SIZE_DESCRIPTION "size",
			                   t2.material_number || '-' || t2.US_SIZE_DESCRIPTION as extensionCode1,
			                   2 as salesModel,
			                   t1.category_code as extProp1,
			                   t1.gender_age as extProp2
									  from t_nike_cdb_data t1, T_NIKE_INT_PRODUCT_SIZE_DATA t2
									  where t1.material_number = t2.material_number
									   and t2.upc = :extcode2]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSKUCodefromEspOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select distinct t.od_sku
				  from t_esprit_order t
				 where t.od_po = :po
				   and not exists(
				       select 1 from t_bi_inv_sku sku where sku.bar_code = t.od_sku
				   )
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.updateStaLineCompleteQuantity" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update T_WH_STA_LINE set COMPLETE_QUANTITY=:completeQuantity
                        where id=:id
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutbound.findVmiMsgOutbound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sta.id as staId,
						       t.lp_code as lpCode,
						       t.tracking_no as trackingNo,
						       t.weight as weight,
						       sta.main_wh_id as ouId,
						       sta.creator_id as creatorId,
						       t.id
						  from t_wh_msg_rtn_outbound t, t_wh_sta sta
						 where t.sta_code = sta.code and t.status in(0,1,-1) and t.id =:msgId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutbound.findVmiMsgOutboundByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.id
						  from t_wh_msg_rtn_outbound t
						 where t.sta_code = :staCode ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrder.findShopByOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.code member_name, t.name shop_id
								  from t_bi_channel t
								 where t.code = :owner ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutbound.findAllVmiMsgOutbound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.id,t.sta_code,t.type
						  from t_wh_msg_rtn_outbound t
						 where t.status in(0,1,-1) 
						 	and t.create_time >= sysdate - 10
						 	and  (t.is_mq is null or  t.is_mq='0')
						 	and t.source =:source]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutbound.findAllVmiMsgOutboundByRowNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.id,t.sta_code,t.type
						  from t_wh_msg_rtn_outbound t,t_wh_sta sta
						 where t.status in(0,1,-1) 
			                   and t.sta_code=sta.code
			                   and sta.status not in (17,15)
							 	and t.create_time >= sysdate - 10
							 	and (t.is_mq is null or t.is_mq ='0')
							 	and (t.error_count < 5 or t.error_count is null)
							 	and t.source =:source
							 	and rownum<=:rowNum
							 	order by t.id desc
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgRtnOutbound.updateStatusByID" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_msg_rtn_outbound msg
								   set msg.status = :sta,update_time = sysdate, version = version + 1
								 where msg.id = :msgId ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgRtnOutbound.updateStatusByIDMq" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_msg_rtn_outbound msg
						 set msg.status = :sta,update_time = sysdate, version = version + 1,msg.error_count=nvl(msg.error_count,0)+1,msg.mq_error_count=nvl(msg.mq_error_count,0)+1,msg.mq_status=null 
						 where msg.id = :msgId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrderLine.findeMsgOutLintBymsgOrderId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                   select m.id as id,k.name as skuName,k.code as skuCode ,m.unit_price as unitPrice,m.quantity as qty
						  from T_WH_MSG_OUTBOUND_ORDER_LINE m, t_bi_inv_sku k
						 where m.sku_id = k.id
						   and m.msg_outorder_id = :msgOrderId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.findVmiMsgInboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select r.id,r.sta_code, r.create_time from T_WH_MSG_INBOUND_ORDER r ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.updateIDSASNStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update t_wh_msg_inbound_order io set io.status=:updateStatus
				where 
					#if($status==1)
						(io.status=1 or io.status=0)
						and io.type != 41
						and exists (select * from t_wh_sta sta,T_BI_WAREHOUSE wh where wh.ou_id=sta.main_wh_id and upper(wh.vmi_source) = 'IDS' and io.sta_code=sta.code)
					#else
						io.status=:status
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrderLine.findVmiMsgInboundOrderLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select ol.id,
						       ol.inv_status_id    as invStatusId,
						       sku.bar_code        as barCode,
						       sku.code            as spuCode,
						       sku.ext_code1 as ecode,
						       sku.ext_code2 as ecode2,
						       ol.qty,
						       sku.name            as skuName,
						       case when sts.is_forsale = 1 then '良品' else '残次品' end as invStsName
						  from t_Wh_Msg_Inbound_Order_Line ol
						  left join t_wh_inventory_status sts on ol.inv_status_id = sts.id
						  join t_bi_inv_sku sku on ol.sku_id = sku.id
						  where ol.msg_inorder_id = :msgId
			    ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgSKUSync.findVmiMsgSKUSync" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.id, sku.BAR_CODE,sku.bar_code2 as barCode2,sku.sku_code, sku.sku_name,sku.BRAND_NAME,sku.type intType,sku.is_sn isSn,sku.sf_flag  from T_WH_MSG_SKU_SYNC sku where sku.source=:source and sku.status in(0,1) ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgSKUSync.findSKUSyncBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select S_T_SKU_SYNC_BATCH.Nextval from dual]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgSKUSync.updateBatchNoByID" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_SKU_SYNC r set r.batch_id=:batchNo , r.update_time=sysdate where r.id=:SKUSyncId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInventoryStatus.findMsgInvStatusByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select s.*
from T_WH_MSG_INVENTORY_STATUS s
,T_WH_INVENTORY_STATUS i
,t_wh_msg_inbound_order msg
where s.whstatus=i.id 
and s.source=msg.source 
and ((msg.sourcewh is null and s.sourcewh is null) or (msg.sourcewh is not null and msg.sourcewh=s.sourcewh ))
and msg.sta_code=:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrderLine.findRtnOrderLineByRId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select l.* from T_WH_MSG_RTN_INBOUND_LINE l where l.msg_rtn_inorder_id=:rtnInId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrder.saveByIDSREC" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_wh_msg_rtn_inbound 
(id,create_time,inbound_time,source,sourcewh,sta_code,status,type,version)
select s_t_wh_msg_rtn_inbound.nextval,sysdate,rec.receiptdate, :source ,null,rec.externreceiptkey, :status ,sta.type,0
from 
t_ids_outbound_rec rec,
t_wh_sta sta where rec.externreceiptkey=sta.code 
and rec.status=:recStatus
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrderLine.saveByIDSRECLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_wh_msg_rtn_inbound_line
(id,barcode,out_status,qty,sku_code,sku_id,inv_status_id,msg_rtn_inorder_id)
select s_t_wh_msg_rtn_inbound_line.Nextval,sku.bar_code,null,recl.qtyreceived,sku.code,sku.id,stal.inv_status_id,hd.id from 
t_ids_outbound_rec_line recl ,
t_wh_msg_rtn_inbound hd,
t_wh_sta_line stal,
t_bi_inv_sku sku
where 
recl.sku=sku.ext_code2
and recl.externreceiptkey=hd.sta_code
and recl.externlineno=stal.id
and not exists (select 1 from t_wh_msg_rtn_inbound_line rtnl where rtnl.msg_rtn_inorder_id=hd.id)
and hd.status=1
and recl.status=:status
				]]>
			</value>
		</constructor-arg>
	</bean>


	<!--start etam -->
	<bean id="MsgRtnReturn.saveForEtam" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
			insert into t_wh_msg_rtn_return t 
			( id,create_time,version,status,source,source_wh,sta_code,type)
			values
			(S_t_wh_msg_rtn_return.Nextval, sysdate, 0, 1 ,:vmiSource ,null, :staCode, :type)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnReturnLine.saveForEtamLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					insert into T_WH_MSG_RTN_RETURN_LINE 
						( id, version, sku_id, inv_status_id, qty, return_id)
						select S_T_WH_MSG_RTN_RETURN_LINE.Nextval, 0, :skuId, :invStatusId, 
						:quantity, rt.id from t_wh_msg_rtn_return rt where rt.sta_code = :staCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnReturn.updateFinishByStacode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
			 		update t_wh_msg_rtn_return  set status = 10 where sta_code = :staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnReturn.updateFinishBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
			 		update t_wh_msg_rtn_return set sta_code= :staCode , status = 10 where id = :returnId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!--end etam -->
	<bean id="MsgRtnReturn.saveByIDSSHP" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_wh_msg_rtn_return 
(id,create_time,version,source,source_wh,sta_code,status,type)
select s_t_wh_msg_rtn_return.nextval,sysdate,0 , :source  ,null,shp.externreceiptkey, :status ,sta.type
from 
t_ids_outbound_shp shp,
t_wh_sta sta where shp.externreceiptkey=sta.code 
and shp.status=:recStatus

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnReturnLine.saveByIDSSHPLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_wh_msg_rtn_return_line
(id,version,sku_id,inv_status_id,qty,return_id)
select s_t_wh_msg_rtn_return_line.Nextval,0,stal.sku_id,stal.inv_status_id,shpl.shippedqty, hd.id from 
t_ids_outbound_shp_line shpl ,
t_wh_msg_rtn_return hd,
t_wh_sta_line stal
where 
shpl.externreceiptkey=hd.sta_code
and shpl.externlineno=stal.id
and not exists (select 1 from t_wh_msg_rtn_return_line rtnl where rtnl.return_id=hd.id)
and hd.status=1
and shpl.status=:status
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgRtnAdjustment.saveByIDSADJ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_wh_msg_rtn_adjustment 
(id,create_time,version,status,source,source_wh,ids_key,effective_date,r_entity_id,owner_wh_source)
select s_t_wh_msg_rtn_adjustment.nextval,sysdate,0, :status , :source , null,adj.adjustmentkey, adj.effectivedate,null,adj.adjustmenttype
from 
t_ids_outbound_adj adj
where adj.status=:recStatus
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnAdjustmentLine.saveByIDSADJLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
insert into t_wh_msg_rtn_adjustment_line
(id,version,sku_id,inv_status_id,qty,adjustment_id,ids_line_id)
select s_t_wh_msg_rtn_adjustment_line.Nextval,0,sku.id,hd.statusId,adjl.qty,hd.id,adjl.adjustmentlinenumber from 
t_ids_outbound_adj_line adjl ,
(
select adj.*,status.id as statusId from 
t_wh_msg_rtn_adjustment adj,
t_ids_outbound_adj tb,
T_BI_WAREHOUSE wh,
T_AU_OPERATION_UNIT temp,
(select ou_id,decode(is_forsale,1,'BS08','BS08D') as facility,min(id) as id from T_WH_INVENTORY_STATUS where is_available=1 group by ou_id,is_forsale) status,
T_AU_OPERATION_UNIT ou 
where wh.ou_id=ou.id
and wh.vmi_source=adj.source
and tb.adjustmentkey=adj.ids_key
and status.ou_id=temp.parent_ou_id
and ou.parent_ou_id=temp.id
and tb.facility = status.facility
) hd,
t_bi_inv_sku sku
where 
adjl.sku=sku.ext_code2
and adjl.adjustmentkey = hd.ids_key
and not exists (select 1 from t_wh_msg_rtn_adjustment_line al where al.adjustment_id=hd.id)
and adjl.status=:status
				]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="MsgRtnInboundOrderLine.updateSkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_RTN_INBOUND_LINE l set l.sku_id=:skuId where l.id=:rtnInId ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnInboundOrder.updateOrderStauts" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_RTN_INBOUND r set r.status=:whstatus where r.id=:rtnOrderId ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GodivaInventoryAdjustment.updateGodAdjustInvCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_GDV_INVENTORY_ADJUSTMENT t set t.inventorycheck_code=:invCode where t.id=:adjustId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgType.findTypeBySourceandType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.Source_Type from T_WH_MSG_TYPE t where t.source=:Source and t.Sta_Type=:type ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgType.findTypeBySourceandType2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.Sta_Type from T_WH_MSG_TYPE t where t.source=:Source and t.source_type=:type ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findMsgOutboundOrderId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.id from T_WH_MSG_OUTBOUND_ORDER t where t.status in(0,1) and t.source=:source and create_time >= sysdate - 10]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.updateStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_OUTBOUND_ORDER t set t.status =:sta,t.update_time=sysdate where t.id=:msgId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.updateStatusBySourceANDStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_OUTBOUND_ORDER t set t.status = :toStatus,t.update_time=sysdate 
					where t.source= :vmiSource and t.status= :fromStatus ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.updateMsgInboundStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_INBOUND_ORDER o set o.status=:status where o.id=:inOrderId]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnInboundOrder.updateOrderStautsByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_RTN_INBOUND r set r.status=:status where r.sta_code=:staCode ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrder.updateOrderStautsBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_RTN_INBOUND r set r.status=:status where r.slip_code=:slipCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.updateStatusBySourceANDSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_INBOUND_ORDER t set t.status = :toStatus
					where t.source= :vmiSource and t.status= :fromStatus ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.findMsgInboundByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select o from MsgInboundOrder o where 
				o.source=:source 
				#if("$!isAll"!="true")
					and o.type <> 41
				#end
				#if($status==1)
					and (o.status=0 or o.status=1)
				#else
					and o.status=:status
				#end
				#if($sourceWH)
					and o.sourceWh = :sourceWH
				#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundReturn.findMsgOutboundReturnIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.id from t_wh_msg_outbound_rtn t where (t.status = 0 or t.status = 1) and t.source=:source]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundReturn.findMsgOutboundReturnByMsgId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select o.ID,
       o.ADDRESS,
       o.CITY,
       o.COUNTRY,
       o.DISTRICT,
       o.LPCODE,
       o.MOBILE,
       o.PROVINCE,
       o.RECEIVER,
       o.REMARK,
       o.SOURCE,
       o.SOURCEWH,
       o.STA_CODE,
       o.STATUS,
       o.TELEPHONE,
       o.TOTALACTUAL,
       o.TRANSFER_FEE,
       o.ZIPCODE,
       o.TYPE,
       o.VERSION,
       o.BATCH_ID,
       o.STA_TYPE,
       o.CREATE_TIME,
       o.UPDATE_TIME,
       o.WLB_CODE,
       decode(di.Store_Com_Is_Need_Invoice,'1','需要开票','无需开票' ) as isCashsale,
       s.owner as staOwner,
       s.slip_code as staRefSlipCode,
       s.create_time as staCreateTime,
       s.total_actual as staTotalActual
  from t_wh_msg_outbound_rtn o, t_wh_sta_delivery_info di, t_wh_sta s
 where o.sta_code = s.code
   and di.id = s.id
   and o.id = :msgId
 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundReturnLine.findeMsgOutLintBymsgReturnId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select m.id as id,k.name as skuName,k.code as skuCode ,m.unit_price as unitPrice,m.quantity as qty
						  from T_WH_MSG_OUTBOUND_RTN_LINE m, t_bi_inv_sku k
						 where m.sku_id = k.id
						   and m.msg_outorder_id = :msgReturnId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updateStaStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_STA a set a.status=:status where a.slip_code=:slipCode ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgInventoryStatus.findInventoryStatusByBzStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select s.vmi_status from T_WH_MSG_INVENTORY_STATUS s where s.source=:source and s.whstatus=:whstatus ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgSKUSync.updateStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_SKU_SYNC t set t.status =:sta , t.update_time=sysdate where t.id=:msgId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgSKUSync.updateStatusByBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_SKU_SYNC t set t.status =:status,t.update_time=sysdate where t.batch_id=:batchNo]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgOutboundOrderCancel.findVmiMsgRtnOutboundByStaCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.id
						  from T_WH_MSG_OUTBOUND_ORDER_CANCEL t
						 where t.sta_code = :staCode and t.STATUS=:sta ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ESPOrder.updateOrderStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
			update T_ESPRIT_ORDER ord set ord.STA_STATUS= :staStatus where
					ord.HEADER_SEQUENCENUMBER= :seqNum and ord.od_po= :poNum and upper(ord.OD_STATUSINEDIFILE)= upper(:status)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnInboundOrder.findInboundByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select o.id,
o.create_time as createTime,
o.inbound_time as inboundTime,
o.source,
o.sourcewh,
o.sta_code as staCode,
o.batch_code as batchCode,
o.slip_code as slipCode,
o.shopid,
o.remark from T_WH_MSG_RTN_INBOUND o where o.source=:Source and o.STATUS in(0,1) ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaFrozenList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select s.* from T_WH_STA s where s.status=25 and s.type=41 order by s.slip_code ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findSOOutboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							       t.sta_type,
							       t.batch_id,
							       t.version,
							       t.type,
							       t.zipcode,
							       nvl(t.transfer_fee,0) as transferFee,
							       t.totalactual,
							       t.telephone,
							       t.sta_code,
							       t.sourcewh,
							       t.source,
							       t.remark,
							       t.receiver,
							       t.province,
							       t.mobile,
							       t.lpcode,   
							       t.district,
							       t.country,
							       t.city,
							       t.address,
							       t.shop_id shopId,
							       t.outer_order_code as outerOrderCode,
                                   t.order_cratedate as orderCrateDate,
                                   t.is_cod_order,
                                   t.member_email,
                                   t.slip_code slipCode,
                                   t.payment_type paymentType,
							       t.id,
							       t.trans_no,
                                   t.sf_city_code,
							       t.user_id userId,
							       t.userid_english,
                                   t.receiver_english,
                                   t.province_english,
                                   t.city_english,
                                   t.district_english,
                                   t.address_english
							         from t_wh_msg_outbound_order t
                 where 
					#if($struts==1)
						(t.STATUS=0 or t.STATUS=1)
					#else
						t.status=:struts
					#end
					#if($sourceWH)
						and t.sourcewh = :sourceWH
					#end
					#if("$!islocked"=="true")
                        and (t.is_locked=0 or t.is_locked is null)
                    #end
					and t.source = :source
					and t.sta_type in(21,22,25,42)
					#if($num)
						and rownum <= :num
					#else
						and rownum <= (select o.option_value from  t_sys_choose_option o where o.option_key='IDS' and o.category_code='idsrownum') 
					#end
					order by t.id asc
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findSOByOwnerSource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
t.sta_type,
t.batch_id,
t.version,
t.type,
t.zipcode,
t.transfer_fee,
t.totalactual,
t.telephone,
t.sta_code,
t.sourcewh,
t.source,
t.remark,
t.receiver,
t.province,
t.mobile,
t.lpcode,   
t.district,
t.country,
t.city,
t.address,
t.shop_id shopId,
t.id
from t_wh_msg_outbound_order t,
t_bi_channel shop 
where t.shop_id=shop.id
and  t.source = :whSource
#if($struts==1)
	and (t.STATUS=0 or t.STATUS=1)
#else
	and t.status=:struts
#end
#if($ownerSource)
	and shop.vmi_wh_source=:ownerSource
#end
#if("$!isAll"!="true")
	and t.sta_type in(21,22,25,42,201,202,204,205,206,210,212,214,216,218)
#end
and rownum <= (select option_value from t_sys_choose_option where category_code='gqsscmRowNum' and option_key='gqsscm')
order by t.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select S_T_OUTBOUND_ORDER_batch.Nextval from dual]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findBatchNoPre" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select S_T_OUTBOUND_ORDER_PRE_batch.Nextval from dual]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgOutboundOrder.findOutboundOrderBySource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                    
                    select id from t_wh_msg_outbound_order t where (t.STATUS=0 or t.STATUS=1) 
                        and t.batch_id IS NULL
				        and t.source = :source
				        and (t.is_locked = 0 or t.is_locked is null)
				        and t.sta_type in(21,22,25,42)
				        

                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.updateMsgOutboundOrderBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				UPDATE t_wh_msg_outbound_order o SET o.batch_id= :batchNo,o.status=2 
				WHERE o.id IN (
				select   t.id
				from t_wh_msg_outbound_order t
				where  #if($struts==1)
				          (t.STATUS=0 or t.STATUS=1)
				       #else
				         t.status=:struts
				       #end
				       #if($sourceWH)
				          and t.sourcewh = :sourceWH
				       #end
				        AND t.batch_id IS NULL
				        and t.source = :source
				        and (t.is_locked = 0 or t.is_locked is null)
				        and t.sta_type in(21,22,25,42)
				        and rownum <=50
				) 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.updateMsgOutboundOrderBatchNo2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				UPDATE t_wh_msg_outbound_order o SET o.batch_id= :batchNo,o.status=2 
				WHERE o.id IN (
				select   t.id
				from t_wh_msg_outbound_order t
				where  #if($struts==1)
				          (t.STATUS=0 or t.STATUS=1)
				       #else
				         t.status=:struts
				       #end
				       #if($sourceWH)
				          and t.sourcewh = :sourceWH
				       #end
				        AND t.batch_id IS NULL
				        and t.source = :source
				        and (t.is_locked = 0 or t.is_locked is null)
				        and t.sta_type in(21,22,25,42)
				        and rownum <=:num
				) 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findMsgOutboundOrderBatchNoBySource"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				SELECT o.batch_id batchId
				FROM t_wh_msg_outbound_order o
				WHERE o.status=2
				      AND o.source= :source
				group by o.batch_id
				]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="MsgOutboundOrder.updateBatchNoByID" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_OUTBOUND_ORDER r set r.batch_id=:batchNo,r.status=:sta,r.update_time=sysdate where r.id=:msgId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.updateStatusByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_OUTBOUND_ORDER t set t.status =:sta,t.update_time=sysdate where t.STA_CODE=:staCode]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgOutboundOrder.updateStatusByBatchId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_OUTBOUND_ORDER t set t.status =:status,t.update_time=sysdate where t.batch_id=:batchNo ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.updateStatusByBatchId2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE T_WH_MSG_OUTBOUND_ORDER t set t.status =:status,t.update_time=sysdate where t.status not in ('7')  and t.batch_id=:batchNo ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgOutboundOrder.clearStatusAndBatchByBatchId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE  t_wh_msg_outbound_order oo SET oo.status =:status WHERE oo.batch_id= :batchNo ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.updateInboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_INBOUND_ORDER o set o.batch_id=:batchId,o.status=:status where o.id=:oId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.updateInboundOrderStatusByStaCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_INBOUND_ORDER o set o.status=:status where o.sta_code=:staCode ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.updateInboundOrderStatusByBatchId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_MSG_INBOUND_ORDER o set o.status=:status where o.batch_id=:batchId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.findInOrderBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select S_T_INBOUND_ORDER_BATCH.Nextval from dual]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrder.findMsgOutboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							       t.sta_type,
							       t.batch_id,
							       t.version,
							       t.type,
							       t.zipcode,
							       t.transfer_fee,
							       t.totalactual,
							       t.telephone,
							       t.sta_code,
							       t.sourcewh,
							       t.source,
							       t.remark,
							       t.receiver,
							       t.province,
							       t.mobile,
							       t.lpcode,
							       t.district,
							       t.country,
							       t.city,
							       t.address,
							       t.id,
							       t.shop_id
							         from t_wh_msg_outbound_order t
                 where 
					#if($status==1)
						(t.STATUS=0 or t.STATUS=1)
					#else
						t.status=:status
					#end
					#if("$!isAll"!="true")
						and t.sta_type not in (21,22,25,42)
					#end
					and t.source = :source
					#if($sourceWH)
						and t.SOURCEWH =:sourceWH
					#end
					
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ConverseVmiReceive.findReceiveInfosByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.TRANSFER_PREFIX as transferPrefix,t.carton_number as cartonNumber,
				to_date(to_char(t.receive_date,'yyyyMMdd'),'yyyyMMdd') as receiveDate,t.from_location as fromLocation,
				t.to_location as toLocation,t.inseam_code as inseamCode,
				t.item_ean_upc_code as itemEanUpcCode,t.total_line_sequence_no as totalLineSequenceNO,
				t.transfer_no as transferNO,t.sap_carton as sapCarton,
				t.bin as bin,sum(t.quantity) as quantity from t_converse_vmi_receive t where t.status = :status and t.type = :type
				group by  t.TRANSFER_PREFIX ,t.carton_number,
				to_char(t.receive_date,'yyyyMMdd'),t.from_location,
				t.to_location,t.inseam_code,
				t.item_ean_upc_code,t.total_line_sequence_no,
				t.transfer_no,t.sap_carton,
				t.bin
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ConverseVmiReceive.updateReceiveInfoStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_converse_vmi_receive t set t.status = :toStatus where t.status = :fromStatus and t.type = :type
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ConverseVmiAdjustment.findAdjustmentInfosByStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t.* from t_converse_vmi_adjustment t where t.status = :status
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaOcpLine.deleteStaOcpLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete from T_WH_STA_OCP_LINE staline where staline.STA_ID =:staId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.getRtwDiekingBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select S_T_WH_RTW_DIEKING_BATCH_CODE.Nextval from dual]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.getLocationIdByStaCodePickZoon" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						l.zoon_id
					from (
						select 
						inv.location_id as location_id,
						l.zoon_id as zoon_id
						from t_wh_sku_inventory inv,
						t_wh_location l
						where 
						inv.occupation_code = :staCode
						and inv.ou_id = :ouid
						and l.id = inv.location_id 
						group by l.zoon_id,inv.location_id
					) l 
					group by l.zoon_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.getLocationIdByStaCodeZoon" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							l.pzoon_id
						from (
								select 
								inv.location_id as location_id,
								pzoon.wh_zoon_id as pzoon_id
								from t_wh_sku_inventory inv,
								t_wh_location l,
								t_wh_pick_zoon pzoon,
								t_wh_zoon zoon
								where 
								inv.occupation_code = :staCode
								and inv.ou_id = :ouid
								and l.id = inv.location_id 
								and l.zoon_id = pzoon.id 
								and pzoon.wh_zoon_id = zoon.id
								group by pzoon.wh_zoon_id,inv.location_id
						) l 
						group by l.pzoon_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.getRtwDiekingLineByStaCodeAndLoctionIds"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					sku.id as skuId,
					sku.code as skuCode,
					sku.bar_code as skuBarCode,
					sku.name as skuName,
					sku.supplier_code as skuSupplierCode,
					sku.key_properties as skuKeyProperties,
					inv.invStatus as skuInvStatus,
					l.id as locationId,
					l.code as locationCode,
					pzoon.code as diekingAreaCode,
					zoon.code as whAreaCode,
					i.quantity as planQuantity
					from t_wh_location l,
					t_bi_inv_sku sku,
					t_wh_pick_zoon pzoon,
					t_wh_zoon zoon,
					t_wh_sku_inventory i,
					(
						  select 
						  inv.id as id,inv.location_id as locationId,invs.name as invStatus,inv.sku_id as skuId
						  from t_wh_sku_inventory inv,
						  t_wh_inventory_status invs,
						  t_bi_inv_sku sku,
						  t_wh_location l,
						  t_wh_pick_zoon pzoon,
						  t_wh_sta sta,
              			  t_wh_sta_line line
						  where
						  sta.code = :staCode
						  and sta.main_wh_id =  :ouid 
			              and sta.code = inv.occupation_code 
			              and sta.id = line.sta_id 
			              and line.id in (
		                        #foreach( $id in $staLineId )
		                                $id ,
		                        #end
		                        -1)
		                  and line.sku_id = sku.id
						  and inv.sku_id = sku.id
						  #if($supplierCode)
							and 	sku.supplier_code = :supplierCode
						  #end
						  and inv.status_id = invs.id 
						  and inv.location_id = l.id
						  and l.zoon_id = pzoon.id
						  #if($zoonid)
						  	and l.zoon_id = :zoonid
						  #end
						  #if($pzoonid)
						  	and pzoon.wh_zoon_id = :pzoonid
						  #end
						  group by inv.sku_id,inv.location_id,inv.status_id,invs.name,inv.id
					) inv
					where 
					inv.locationId = l.id 
					and sku.id = inv.skuId 
					and i.id = inv.id
					and pzoon.id = l.zoon_id
					and zoon.id = pzoon.wh_zoon_id
					order by pzoon.code asc,l.sort asc,l.code asc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.getRtwDiekingIdsByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						d.id
						from t_wh_rtw_dieking d
						where 
						d.sta_code =  :staCode
						and d.main_wh_id = :ouid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.updateRtwDiekingPlanQtyById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	       <![CDATA[
				update t_wh_rtw_dieking d set d.plan_quantity = (
					select sum(l.plan_quantity) from t_wh_rtw_dieking_line l where l.rtw_dieking_id = :id
				) where d.id = :id
	         ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findIsFinishedByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	       <![CDATA[
			  select sta.id from t_wh_sta sta where sta.id=:sta_id and sta.status=10
	         ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findStarbucksDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	       <![CDATA[
			 select s.owner as owner,d.PROVINCE as reCity from t_wh_sta s,t_wh_sta_delivery_info d where s.id=d.id and s.code= :code
	         ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findIsNotFinishedByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	       <![CDATA[
			  select sta.id from t_wh_sta sta where sta.id=:sta_id and sta.status!=10
	         ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findReturnOutWhPickingInfoByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select 
                	sta.slip_Code1 as pplNo,
                	sta.slip_Code2 as returnCode,
                	sta.code as orderKey,
                	lf.address1 as address1,
                	lf.address2 as address2,
                	lf.address3 as address3,
                	lf.address4 as address4,
                	lf.crd as expectedTime,
                	lf.nfs_store_code customer,
                	lf.trans_method,lf.is_more_wh,ou.code whCode
                	from 
                	t_wh_sta sta,
                	t_wh_sta_lf lf ,
                	t_au_operation_unit ou
                	where 
                	lf.sta_id=sta.id 
                	and sta.main_wh_id=ou.id
                	and sta.id= :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="RtwDieking.getSkuIdByStaCodeSkuSupplierCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          select 
			          	sku.supplier_code
			          from 
				          t_wh_sku_inventory inv,
				          t_bi_inv_sku sku 
			          where 
						inv.occupation_code = :staCode
						and inv.ou_id = :ouid
			            and inv.sku_id = sku.id 
			            group by sku.supplier_code
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtwDieking.getRepeatRtwDiekingLineByRtwDiekingId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
								select listagg(l.id,'-') within group(order by l.id) || '⊥' || sum(l.plan_quantity) 
									from wms.t_wh_rtw_dieking_line l 
									where l.rtw_dieking_id=:id
									group by sku_id,location_id,sku_inv_status
				]]>
			</value>
		</constructor-arg>
	</bean>


</beans>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
