<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	

	<!-- 页面查询追加查询条件：行业、是否包含大件商品 KJL修改只针对模式一 -->
	<bean id="StockTransApplication.findSalesStaListPageNewModel1"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							#if($skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
								distinct
							#end
							id,code,refSlipCode,createTime,businessSeqNo,arriveTime,
							inboundTime,intStatus,intType,owner,lpcode,stvTotal,shopId,pickingCode,receiver,trackingNo,memo,isNeedInvoice
						from(
							select 
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								dryInfo.Store_Com_Is_Need_Invoice as isNeedInvoice,
								sta.OWNER owner,
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            sta.sku_qty stvTotal,
					            sta.owner shopId
					        from 
					          t_wh_sta sta
					            #if($skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
		                            left join t_wh_sta_line l on l.sta_id=sta.id
	                                left join t_bi_inv_sku sku on sku.id = l.sku_id
					            #end
					            #if($industryId)
					             	inner join t_bi_channel s on sta.owner = s.code
					             	inner join t_au_operation_unit shopau on s.ou_id = shopau.id
					            #end
					            left join t_bi_channel shop on sta.owner = shop.code
					            left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id,
					            	T_WH_STA_DELIVERY_INFO dryInfo
					            #if($trackingNo)
					            	,(select pg.sta_delivery_info_id as stdId from t_wh_package_info pg 
					            	 where
			                    		#if($isLike)
			                    			pg.tracking_no like :trackingNo
			                    		#else
			                    			pg.tracking_no = :trackingNo
			                    		#end
					            	 group by pg.sta_delivery_info_id) package
					            #end	
			                    where 
			                    	sta.MAIN_WH_ID=:mainWarehouse
			                    	and sta.id=dryInfo.id
			           				#if($skuQty)
				                    	#if("$!skuQty"=="1")
				                    		and sta.sku_qty = $skuQty
				                    	#end
				                    	#if("$!skuQty"=="2")
				                    		and sta.sku_qty <>1
				                    	#end
				                    #end
			                    	#if($skuName)
			                    		and sku.name like '$skuName%'
			                    	#end
			                    	#if($skuCode)
			                    		and sku.jm_code = '$skuCode'
			                    	#end
									#if($skuCodeList)
			                    		and ( 1 != 1
			                    		#foreach($skuTmp in $skuCodeList )
			                    			or sku.jm_code = '$skuTmp'
			                    		#end
			                    		)
			                    	#end
			                    	#if($skuJmCode)
			                    		and sku.jm_code like '$skuJmCode%'
			                    	#end
			                    	#if($skuKeyProperties)
			                    		and sku.key_properties like '$skuKeyProperties%'
			                    	#end
			                    	#if($skuBarCode)
			                    		and sku.bar_code like '$skuBarCode%'
			                    	#end
			                    	
			                    	#if($province)
			                    		and dryInfo.province like :province
			                    	#end
									#if($cities)
			                    		and ( 1 != 1
			                    		#foreach($city in $cities )
			                    			or dryInfo.city like '%$city%'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isLpcodeNotNull || "$!isLpcodeNotNull"=="false")
				                    	#if("$!isLpcodeNotNull"=="true")
				                    		and dryInfo.lpcode is not null
				                    	#else
				                    		and dryInfo.lpcode is null
				                    	#end
				                    #end
			                    	#if($pickingMode)
			                    		and pl.picking_mode = :pickingMode
			                    	#end
			                    	#if($skus)
			                    		and sta.skus like :skus
			                    	#end
			                    	#if ($isCkSameSeqNoSta)
				                    	and not exists (
				                    		select 1 from t_wh_sta sta1 
				                    		where sta.bi_seq_no = sta1.bi_seq_no and sta1.status != 10 and sta1.type = 41
				                    		#if($fromDate)
					                    		and sta1.create_time >= :fromDate
					                    	#end
					                    	#if($toDate)
					                    		and sta1.create_time <=:toDate
					                    	#end
				                    		#if(!$fromDate && !$toDate)
												and sta1.create_time > sysdate - 91
											#end
				                    		)
			                    	#end
			                    	#if($trackingNo)
			                    		and dryInfo.id = package.stdId
			                    	#end
			                    	and (1 !=1 
			                    		#foreach($status in $statusList)
			                    			or sta.status=$status       
			                    		#end
			                    	)
			                    	#if($fromDate)
			                    		and sta.create_time >= :fromDate
			                    	#end
			                    	#if($toDate)
			                    		and sta.create_time <=:toDate
			                    	#end
			                    	#if(!$fromDate && !$toDate)
										and sta.create_time > sysdate - 91
									#end
			                    	#if($code)
			                    		and sta.code like :code
			                    	#end
			                    	#if($refSlipCode)
			                    		and sta.SLIP_CODE like :refSlipCode
			                    	#end
			                    	and(1 != 1
			                    		#foreach($type in $typeList)
			                    			or sta.type = $type
			                    		#end
			                    	)
			                    	#if("$!isNeedInvoice"=="true")
			                    		and dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice	
			                    	#end
			                    	#if("$!isNeedInvoice"=="false")
			                    		and (dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice or dryInfo.Store_Com_Is_Need_Invoice is null)
			                    	#end
			                    	#if($pickingListCode)
			                    		and pl.code like :pickingListCode
			                    	#end
			                    	#if($lpCode)
			                    		and dryInfo.LPCODE = :lpCode
			                    	#end
			                    	#if($receiver)
			                    		and dryInfo.receiver like :receiver
			                    	#end
			                    	
			                    	
			                    	#if($shopInnerCodes)
			                    		and ( 1 != 1
			                    		#foreach($innercode in $shopInnerCodes)
			                    			or sta.owner = '$innercode'
			                    		#end
			                    		)
			                    	#end
			                    	#if($shopId)
							           and  sta.owner = :shopId
							        #end
							        #if($isSpPg)
				                    	#if("$!isSpPg"=="true")
								           and  sta.IS_SPECIAL_PACKAGING = 1
								        #end
				                    	#if("$!isSpPg"=="false")
								           and (sta.IS_SPECIAL_PACKAGING = 0 or sta.IS_SPECIAL_PACKAGING is null)
								        #end
								    #end
			                    	#if($checkPickingList)
			                    		and sta.PICKING_LIST_ID is null
			                    	#end
			                    	#if("$!isSnSta"=="true")
			                    		and sta.is_sn = 1
									#end
			                    	#if("$!isSnSta"=="false")
			                    		and (sta.is_sn = 0 or sta.is_sn is null)
									#end
									#if($industryId)
										and shopau.parent_ou_id = :industryId
									#end
									#if($skuMaxLength)
										#if("$!skuMaxLength"=="1")
											and nvl(sta.sku_max_length,0) >= (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
										#if("$!skuMaxLength"=="0")
											and nvl(sta.sku_max_length,0) < (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
									#end
			                    	) tmp
			                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
		<!-- 自动创建配货单：增加查询条件：行业、是否为大件商品 fanht  分页-->
	<bean id="StockTransApplication.findSalesStaListForModel1ByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							#if($skus || ($skuQty && "$!skuQty"=="1") || $skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
								distinct 
							#end
							#if($skuQty)
								#if("$!skuQty"=="1")
									pro_id,
									sku_id,
								#end
							#end
							id,code,refSlipCode,createTime,businessSeqNo,arriveTime,
							inboundTime,intStatus,intType,owner,lpcode,stvTotal,shopId,
							isManualWeighing,
							pickingCode,receiver,trackingNo,memo,isNeedInvoice,mainName
						from(
							select 
								#if($skuQty)
									#if("$!skuQty"=="1")
										sku.product_id pro_id,
										sku.id sku_id,
									#end
								#end
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								dryInfo.Store_Com_Is_Need_Invoice as isNeedInvoice,
								sta.OWNER owner,
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            sta.sku_qty stvTotal,
					            nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,
					            sta.OWNER shopId,
					            unit.name mainName
					        from 
					          t_wh_sta sta
					           left join t_au_operation_unit unit on unit.id=sta.MAIN_WH_ID
					            #if($skus ||($skuQty && "$!skuQty"=="1")|| $skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
		                            left join t_wh_sta_line l on l.sta_id=sta.id
	                                left join t_bi_inv_sku sku on sku.id = l.sku_id
					            #end
					            #if($industryId)
					             	inner join t_bi_channel s on sta.owner = s.code
					             	inner join t_au_operation_unit shopau on s.ou_id = shopau.id
					            #end
					            left join T_BI_WAREHOUSE wh on wh.OU_ID=sta.MAIN_WH_ID
					            left join t_bi_channel shop on sta.owner = shop.code
					            left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id,
					          T_WH_STA_DELIVERY_INFO dryInfo
					            #if($trackingNo)
					            	,(select pg.sta_delivery_info_id as stdId from t_wh_package_info pg 
					            	 where
			                    		#if($isLike)
			                    			pg.tracking_no like :trackingNo
			                    		#else
			                    			pg.tracking_no = :trackingNo
			                    		#end
					            	 group by pg.sta_delivery_info_id) package
					            #end	
			                    where 
			                    1=1	
                                #if($mainWarehouse)
			                    and	sta.MAIN_WH_ID=:mainWarehouse
			                    #end
			                    #if($wids)
			                    and	sta.MAIN_WH_ID in ( 
                              #foreach( $whid in $wids)
		    	         	$whid ,
					         #end
                              -1 )
			                    #end
			                    	and sta.id=dryInfo.id
			                    	#if($skuQty)
			                    		#if("$!skuQty"=="1")
			                    			and sta.sku_qty = 1
			                    		#end
			                    		#if("$!skuQty"=="2")
			                    			and sta.sku_qty <>1
			                    		#end
			                    	#end
			                    	#if($skuName)
			                    		and sku.name like '$skuName%'
			                    	#end
			                    	#if($skuCode)
			                    		and sku.jm_code = '$skuCode'
			                    	#end
									#if($skuCodeList)
			                    		and ( 1 != 1
			                    		#foreach($skuTmp in $skuCodeList )
			                    			or sku.jm_code = '$skuTmp'
			                    		#end
			                    		)
			                    	#end
			                    	#if($skuJmCode)
			                    		and sku.jm_code like '$skuJmCode%'
			                    	#end
			                    	#if($skuKeyProperties)
			                    		and sku.key_properties like '$skuKeyProperties%'
			                    	#end
			                    	#if($skuBarCode)
			                    		and sku.bar_code like '$skuBarCode%'
			                    	#end
			                    	#if($province)
			                    		and dryInfo.province like :province
			                    	#end
									#if($cities)
			                    		and ( 1 != 1
			                    		#foreach($city in $cities )
			                    			or dryInfo.city like '%$city%'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isLpcodeNotNull || "$!isLpcodeNotNull"=="false")
			                    		#if("$!isLpcodeNotNull"=="true")
			                    			and dryInfo.lpcode is not null
			                    		#else
			                    			and dryInfo.lpcode is null
			                    		#end
			                    	#end
			                    	#if($pickingMode)
			                    		and pl.picking_mode = :pickingMode
			                    	#end
			                    	#if($skus)
			                    		and sta.skus like :skus
			                    	#end
			                    	#if($isNotGroup && "$!isNotGroup"=="true")
			                    		and sta.group_sta_id is null
			                    	#end
			                    	#if ($isCkSameSeqNoSta)
				                    	and not exists (
				                    		select 1 from t_wh_sta sta1 
				                    		where sta.bi_seq_no = sta1.bi_seq_no and sta1.status != 10 and sta1.type = 41
				                    		#if($fromDate)
					                    		and sta1.create_time >= :fromDate
					                    	#end
					                    	#if($toDate)
					                    		and sta1.create_time <=:toDate
					                    	#end
				                    		#if(!$fromDate && !$toDate)
							            		and sta1.create_time > sysdate - 91
							            	#end
				                    		)
			                    	#end
			                    	#if($trackingNo)
			                    		and dryInfo.id = package.stdId
			                    	#end
			                    	and (1 !=1 
			                    		#foreach($status in $statusList)
			                    			or sta.status=$status       
			                    		#end
			                    	)
			                    	#if($fromDate)
			                    		and sta.create_time >= :fromDate
			                    	#end
			                    	#if($toDate)
			                    		and sta.create_time <=:toDate
			                    	#end
			                    	#if(!$fromDate && !$toDate)
			                    		and sta.create_time > sysdate - 91
			                    	#end
			                    	#if($code)
			                    		and sta.code like :code
			                    	#end
			                    	#if($refSlipCode)
			                    		and sta.SLIP_CODE like :refSlipCode
			                    	#end
			                    	and(1 != 1
			                    		#foreach($type in $typeList)
			                    			or sta.type = $type
			                    		#end
			                    	)
			                    	#if("$!isNeedInvoice"=="true")
			                    		and dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice
			                    	#end
			                    	#if("$!isNeedInvoice"=="false")
			                    		and (dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice or dryInfo.Store_Com_Is_Need_Invoice is null)
			                    	#end
			                    	#if($pickingListCode)
			                    		and pl.code like :pickingListCode
			                    	#end
			                    	#if($lpCode)
			                    		and dryInfo.LPCODE = :lpCode
			                    	#end
			                    	#if($receiver)
			                    		and dryInfo.receiver like :receiver
			                    	#end
			                    	
			                    	#if($shopInnerCodes)
			                    		and ( 1 != 1
			                    		#foreach($innercode in $shopInnerCodes)
			                    			or sta.owner = '$innercode'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isSpPg)
								        #if("$!isSpPg"=="true")
								           and  sta.IS_SPECIAL_PACKAGING = 1
								        #end
								        #if("$!isSpPg"=="false")
								           and  (sta.IS_SPECIAL_PACKAGING = 0 or sta.IS_SPECIAL_PACKAGING is null)
								        #end
							        #end
							        #if($shopId)
			                    		and  sta.owner = :shopId
			                    	#end
			                    	#if($checkPickingList)
			                    		and sta.PICKING_LIST_ID is null
			                    	#end
			                    	#if("$!isSnSta"=="true")
			                    		and sta.is_sn = 1
									#end
			                    	#if("$!isSnSta"=="false")
			                    		and (sta.is_sn = 0 or sta.is_sn is null)
									#end
									#if($industryId)
										and shopau.parent_ou_id = :industryId
									#end
									#if($skuMaxLength)
										#if("$!skuMaxLength"=="1")
											and nvl(sta.sku_max_length,0) >= (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
										#if("$!skuMaxLength"=="0")
											and nvl(sta.sku_max_length,0) < (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
									#end
			              ) tmp
			                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 自动创建配货单：增加查询条件：行业、是否为大件商品 fanht -->
	<bean id="StockTransApplication.findSalesStaListForModel1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							#if($skus || ($skuQty && "$!skuQty"=="1") || $skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
								distinct 
							#end
							#if($skuQty)
								#if("$!skuQty"=="1")
									pro_id,
									sku_id,
								#end
							#end
							id,code,refSlipCode,createTime,businessSeqNo,arriveTime,
							inboundTime,intStatus,intType,owner,lpcode,stvTotal,shopId,
							isManualWeighing,
							pickingCode,receiver,trackingNo,memo,isNeedInvoice,mainName
						from(
							select 
								#if($skuQty)
									#if("$!skuQty"=="1")
										sku.product_id pro_id,
										sku.id sku_id,
									#end
								#end
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								dryInfo.Store_Com_Is_Need_Invoice as isNeedInvoice,
								sta.OWNER owner,
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            sta.sku_qty stvTotal,
					            nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,
					            sta.OWNER shopId,
					            unit.name mainName
					        from 
					          t_wh_sta sta
					           left join t_au_operation_unit unit on unit.id=sta.MAIN_WH_ID
					            #if($skus ||($skuQty && "$!skuQty"=="1")|| $skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
		                            left join t_wh_sta_line l on l.sta_id=sta.id
	                                left join t_bi_inv_sku sku on sku.id = l.sku_id
					            #end
					            #if($industryId)
					             	inner join t_bi_channel s on sta.owner = s.code
					             	inner join t_au_operation_unit shopau on s.ou_id = shopau.id
					            #end
					            left join T_BI_WAREHOUSE wh on wh.OU_ID=sta.MAIN_WH_ID
					            left join t_bi_channel shop on sta.owner = shop.code
					            left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id,
					          T_WH_STA_DELIVERY_INFO dryInfo
					            #if($trackingNo)
					            	,(select pg.sta_delivery_info_id as stdId from t_wh_package_info pg 
					            	 where
			                    		#if($isLike)
			                    			pg.tracking_no like :trackingNo
			                    		#else
			                    			pg.tracking_no = :trackingNo
			                    		#end
					            	 group by pg.sta_delivery_info_id) package
					            #end	
			                    where 
			                    1=1	
                                #if($mainWarehouse)
			                    and	sta.MAIN_WH_ID=:mainWarehouse
			                    #end
			                    #if($wids)
			                    and	sta.MAIN_WH_ID in ( 
                              #foreach( $whid in $wids)
		    	         	$whid ,
					         #end
                              -1 )
			                    #end
			                    	and sta.id=dryInfo.id
			                    	#if($skuQty)
			                    		#if("$!skuQty"=="1")
			                    			and sta.sku_qty = 1
			                    		#end
			                    		#if("$!skuQty"=="2")
			                    			and sta.sku_qty <>1
			                    		#end
			                    	#end
			                    	#if($skuName)
			                    		and sku.name like '$skuName%'
			                    	#end
			                    	#if($skuCode)
			                    		and sku.jm_code = '$skuCode'
			                    	#end
									#if($skuCodeList)
			                    		and ( 1 != 1
			                    		#foreach($skuTmp in $skuCodeList )
			                    			or sku.jm_code = '$skuTmp'
			                    		#end
			                    		)
			                    	#end
			                    	#if($skuJmCode)
			                    		and sku.jm_code like '$skuJmCode%'
			                    	#end
			                    	#if($skuKeyProperties)
			                    		and sku.key_properties like '$skuKeyProperties%'
			                    	#end
			                    	#if($skuBarCode)
			                    		and sku.bar_code like '$skuBarCode%'
			                    	#end
			                    	#if($province)
			                    		and dryInfo.province like :province
			                    	#end
									#if($cities)
			                    		and ( 1 != 1
			                    		#foreach($city in $cities )
			                    			or dryInfo.city like '%$city%'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isLpcodeNotNull || "$!isLpcodeNotNull"=="false")
			                    		#if("$!isLpcodeNotNull"=="true")
			                    			and dryInfo.lpcode is not null
			                    		#else
			                    			and dryInfo.lpcode is null
			                    		#end
			                    	#end
			                    	#if($pickingMode)
			                    		and pl.picking_mode = :pickingMode
			                    	#end
			                    	#if($skus)
			                    		and sta.skus like :skus
			                    	#end
			                    	#if($isNotGroup && "$!isNotGroup"=="true")
			                    		and sta.group_sta_id is null
			                    	#end
			                    	#if ($isCkSameSeqNoSta)
				                    	and not exists (
				                    		select 1 from t_wh_sta sta1 
				                    		where sta.bi_seq_no = sta1.bi_seq_no and sta1.status != 10 and sta1.type = 41
				                    		#if($fromDate)
					                    		and sta1.create_time >= :fromDate
					                    	#end
					                    	#if($toDate)
					                    		and sta1.create_time <=:toDate
					                    	#end
				                    		#if(!$fromDate && !$toDate)
							            		and sta1.create_time > sysdate - 91
							            	#end
				                    		)
			                    	#end
			                    	#if($trackingNo)
			                    		and dryInfo.id = package.stdId
			                    	#end
			                    	and (1 !=1 
			                    		#foreach($status in $statusList)
			                    			or sta.status=$status       
			                    		#end
			                    	)
			                    	#if($fromDate)
			                    		and sta.create_time >= :fromDate
			                    	#end
			                    	#if($toDate)
			                    		and sta.create_time <=:toDate
			                    	#end
			                    	#if(!$fromDate && !$toDate)
			                    		and sta.create_time > sysdate - 91
			                    	#end
			                    	#if($code)
			                    		and sta.code like :code
			                    	#end
			                    	#if($refSlipCode)
			                    		and sta.SLIP_CODE like :refSlipCode
			                    	#end
			                    	and(1 != 1
			                    		#foreach($type in $typeList)
			                    			or sta.type = $type
			                    		#end
			                    	)
			                    	#if("$!isNeedInvoice"=="true")
			                    		and dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice
			                    	#end
			                    	#if("$!isNeedInvoice"=="false")
			                    		and (dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice or dryInfo.Store_Com_Is_Need_Invoice is null)
			                    	#end
			                    	#if($pickingListCode)
			                    		and pl.code like :pickingListCode
			                    	#end
			                    	#if($lpCode)
			                    		and dryInfo.LPCODE = :lpCode
			                    	#end
			                    	#if($receiver)
			                    		and dryInfo.receiver like :receiver
			                    	#end
			                    	
			                    	#if($shopInnerCodes)
			                    		and ( 1 != 1
			                    		#foreach($innercode in $shopInnerCodes)
			                    			or sta.owner = '$innercode'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isSpPg)
								        #if("$!isSpPg"=="true")
								           and  sta.IS_SPECIAL_PACKAGING = 1
								        #end
								        #if("$!isSpPg"=="false")
								           and  (sta.IS_SPECIAL_PACKAGING = 0 or sta.IS_SPECIAL_PACKAGING is null)
								        #end
							        #end
							        #if($shopId)
			                    		and  sta.owner = :shopId
			                    	#end
			                    	#if($checkPickingList)
			                    		and sta.PICKING_LIST_ID is null
			                    	#end
			                    	#if("$!isSnSta"=="true")
			                    		and sta.is_sn = 1
									#end
			                    	#if("$!isSnSta"=="false")
			                    		and (sta.is_sn = 0 or sta.is_sn is null)
									#end
									#if($industryId)
										and shopau.parent_ou_id = :industryId
									#end
									#if($skuMaxLength)
										#if("$!skuMaxLength"=="1")
											and nvl(sta.sku_max_length,0) >= (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
										#if("$!skuMaxLength"=="0")
											and nvl(sta.sku_max_length,0) < (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
									#end
			              ) tmp
			                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MasterData.findMasterDataListByStats" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select  
                	        d.id,
                	        d.source,
                	        d.color,
                	        d.size1 as "size",
                	        d.list_price,
                	        d.brand as brandCode,
                	        d.article_number as supplierCode,
                            d.barcode as barCode,
                            d.name, 
                            d.barcode as extensionCode1,
                            d.upc as extensionCode2,
                            d.en_name enName
                    from T_VMI_MASTER_DATA d
                    where  d.upc=:upc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GuessProductMasterData.findGuessProductByUpc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select trim(sku.color_desc) as color , trim(sku.size_desc) as "size" ,trim(sku.cn_msrp) as listPrice,2 as salesModel,
                  '盖尔斯' as brandCode , trim(sku.product_code)  as supplierCode, trim(sku.product_desc) as enName,
                  trim(sku.bar_code) as barCode,'GUESS '||trim(sku.product_code) as name,trim(sku.bar_code) as extensionCode1,
                  trim(sku.short_sku) as extensionCode2
                          from T_GUESS_PRODUCT_MASTER_DATA sku
                          where trim(sku.short_sku)=:shortsku
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- FXL -->
	<bean id="SkuCategories.findAllCategories" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select  id as id ,SKU_CATEGORIES_NAME as skuCategoriesName from T_MA_SKU_CATEGORIES
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="SkuCategories.findSkuCategoryList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						ca.* 
					from 
						T_MA_SKU_CATEGORIES ca 
						start with ca.parent_sku_categories_id is null 
						connect by ca.parent_sku_categories_id = prior ca.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="SkuCategories.updateSkuCategory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update
						T_MA_SKU_CATEGORIES sc
					set 
						sc.is_picking_categories=:isPick,
						sc.sku_categories_name = :name,
						sc.sed_pickingsku_qty = :qty,
						sc.sku_max_limit =:skuMaxLimit
					where 
						sc.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="SkuCategories.updateSkuCategoriesById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update
						T_MA_SKU_CATEGORIES sc
					set 
						sc.is_picking_categories=0
					where 
						sc.id in(
							select 
								sc1.id
							from
								T_MA_SKU_CATEGORIES sc1
							where sc1.id <> :id
							start with sc1.id = :id
							connect by sc1.parent_sku_categories_id = prior sc1.id
						)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL 根据传入的商品分类id查看该分类下是否还有商品 -->
	<bean id="Sku.getProductByCategoryId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						pro.id as id 
					from 
						t_bi_inv_sku pro 
					where 
						pro.sku_categories_id in(
							select 
								sc.id 
							from 
								T_MA_SKU_CATEGORIES sc 
							start with sc.id = :id
							connect by prior sc.id = sc.parent_sku_categories_id
						)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL 根据Id删除分类信息 -->
	<bean id="SkuCategories.removeCategoryById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from T_MA_SKU_CATEGORIES sc where sc.id in 
					(select sc.id from T_MA_SKU_CATEGORIES sc start with sc.id = :id
					connect by prior sc.id = sc.parent_sku_categories_id)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MasterData.updateMasterDataStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_VMI_MASTER_DATA d set d.status=:status where d.id=:mid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="GuessSalesorderData.findGuessSalesorderDatas" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,
					      d.store_code,
					      d.transre_ference,
					      d.bar_code,
					      d.prod_total,
					      d.rcpt_note2 rcptNote2,
					      d.trans_date transDate,
					      d.trans_time,
					      d.qty ,
					      d.price_sold,
					      d.amount_discount amountDiscount,
					      d.reason_code reasonCode,
					      d.tender_code,
					      d.rcpt_note1 rcptNote1 ,
					      d.rtype rType,
					      d.order_id orderId
                    from t_guess_salesorder_data d where d.status=1 order by d.create_time
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GuessSalesorderData.insertGuessReport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
  insert into T_GUESS_SALESORDER_DATA(id,status,Create_Time,Order_Id,Rtype,Store_Code,Transre_Ference,Bar_Code,Prod_Total,RCPT_NOTE2,Trans_Date,Trans_Time,Qty,Price_Sold,Amount_Discount,REASON_CODE,Tender_Code,RCPT_NOTE1)
   select S_T_GUESS_SALESORDER_DATA.Nextval,1,t.Create_Time,Order_Id,Rtype,storeCode,transFeference,Barcode,totalAmount,RCPT_NOTE2,Trans_Date,Trans_Time,skuQty,selPrice,AMOUNT_DISCOUNT,ReasonCode,Tender_Code,RCPT_NOTE1 from (        
     select
           so.delivery_time Create_Time,
           so.id Order_Id,
           '' Rtype,
           '170' as storeCode ,
           so.outer_order_code  transFeference,
           bisku.ext_code2 Barcode,
           so.total_actual totalAmount,
           so.actual_transfer_fee RCPT_NOTE2,
           to_char(so.delivery_time, 'yyyymmdd') Trans_Date,
           to_char(so.delivery_time, 'hh24miss')  Trans_Time,
           sol.requested_qty as skuQty,
           sol.actual_price as selPrice,
           decode(sc.list_price,0,0,(sc.list_price-sol.actual_price)*sol.requested_qty) AMOUNT_DISCOUNT ,
           '' ReasonCode,
           'ALIP' Tender_Code,
           so.code RCPT_NOTE1
      from t_so_sales_order   so
          join  t_so_so_line sol on( so.id=sol.so_id)
          join  t_ma_sku_reference skur on(skur.jmsku_code = sol.jmsku_code)
          join  t_ma_sku   sku on (sku.id = skur.sku_id)
          join t_bi_channel shop on(shop.id = so.shop_id)
          join t_ma_sku_cost sc on sc.id = sku.id
          join  t_bi_inv_sku bisku on (bisku.code=skur.jmsku_code)
     where  so.rtn_request_id is null 
         and (so.status = 6 or so.status = 15 or so.status=12)
         and so.delivery_time >=:today and so.delivery_time<:now
         and shop.id=2862
    union all
       select 
           rr.inbound_time Create_Time,
           rr.id Order_Id,
           'R' Rtype,
           '170' as storeCode ,
           rootSo.outer_order_code  transFeference,
           bisku.ext_code2 Barcode,
           (select 
                -sum(soline.actual_price*rl.requested_qty) 
                  from t_so_return_request sorr
                  join t_so_return_request_line rl on rl.rr_id = sorr.id
                  join t_so_sales_order rootSo on rootSo.id = sorr.so_id
                  join t_so_so_line soline on soline.id=rl.so_line_id where sorr.id=rr.id)  as  totalAmount,
            0  RCPT_NOTE2,
            to_char(rr.inbound_time, 'yyyymmdd') Trans_Date,
            to_char(rr.inbound_time, 'hh24miss') Trans_Time,
            0-rl.requested_qty as skuQty,
            soline.actual_price as selPrice,
            0 AMOUNT_DISCOUNT ,
            'R'||substr(rr.return_reason, 3) ReasonCode,
            'ALIP' Tender_Code,
            'R'||rr.code RCPT_NOTE1
      from t_so_return_request rr
            join t_so_return_request_line rl on rl.rr_id = rr.id
            join t_so_sales_order rootSo on rootSo.id = rr.so_id
            join t_so_so_line soline on soline.id=rl.so_line_id
            join t_ma_sku sku on sku.id = rl.sku_id
            join t_ma_sku_reference skur on skur.jmsku_code=rl.jmsku_code
            join t_ma_sku_cost sc on sc.id = sku.id
            join  t_bi_inv_sku bisku on (bisku.code=skur.jmsku_code)
            join t_bi_channel info on info.id = rootSo.shop_id
     where     
           (rr.status = 20 or rr.status=17 or rr.status=16)  and info.id=2862
     and rr.inbound_time >=:today and rr.inbound_time<:now
    union all             
     select  
          rr.outbound_time Create_Time,
          rr.id Order_Id,
          'E' Rtype,
          '170' as storeCode ,
           rootSo.outer_order_code  transFeference,
           bisku.ext_code2 Barcode,
           (select 
                   sum(soline.actual_price*rl.requested_qty) 
          from t_so_return_request sorr
                  join t_so_return_request_line rl on rl.rr_id = sorr.id
                  join t_so_sales_order rootSo on rootSo.id = sorr.so_id
                  join t_so_so_line soline on soline.id=rl.so_line_id where sorr.id=rr.id) as totalAmount,
           0 RCPT_NOTE2,
           to_char(rr.outbound_time, 'yyyymmdd') Trans_Date,
           to_char(rr.outbound_time, 'hh24miss') Trans_Time,
           rl.requested_qty as skuQty,
           soline.actual_price as selPrice,
           decode(sc.list_price,0,0,(sc.list_price-soline.actual_price)*soline.requested_qty) AMOUNT_DISCOUNT,
           ''  ReasonCode,
           'ALIP' Tender_Code,
           rr.code RCPT_NOTE1
    from t_so_return_request rr
          join t_so_return_request_line rl on rl.rr_id = rr.id
          join t_so_sales_order rootSo on rootSo.id = rr.so_id
          join t_so_so_line soline on soline.id=rl.so_line_id
          join t_ma_sku sku on sku.id = rl.chg_sku_id
          join t_ma_sku_reference skur on skur.jmsku_code=rl.chg_jmsku_code
          join t_ma_sku_cost sc on sc.id = sku.id
          join t_bi_channel info on info.id = rootSo.shop_id
          join  t_bi_inv_sku bisku on (bisku.code=skur.jmsku_code)
    where 
            rr.type = 2 and info.id=2862
           and (rr.status = 20 or rr.status=17)
           and rr.outbound_time>=:today and rr.outbound_time<:now
       ) t
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiInventorySnapshotData.updateVmiInventorySnapshotStaCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      	update T_VMI_INV_SNAPSHOT_DATA t set t.sta_code=:staCode,t.vmi_status=10 where t.id=:vId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiInventorySnapshotData.updateVmiInventorySnapshotStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      	update T_VMI_INV_SNAPSHOT_DATA t set t.vmi_status=:status where t.id=:vId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiInventorySnapshotData.findVmiInventorySnapshotData"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			     select
                          d.id,
                          d.create_time,
                          d.inventory_status as inventoryStatusId,
                          d.source,
                          d.store_code storeCode,
                          d.warehouse,
                          d.file_name fileName, 
                          d.upc,
                          d.onhand_qty-nvl(a.quantity,0) onhandQty
                   from T_VMI_INV_SNAPSHOT_DATA d
                   left join (
                              select sum(t.quantity) quantity,
                                     s.ext_code2,
                                     t.status_id 
                              from T_WH_SKU_INVENTORY t
                   join t_bi_inv_sku s on (s.id=t.sku_id)
                   where t.inv_owner=:invOwner and t.ou_id=:ouId  and t.status_id is not null group by s.ext_code2,t.status_id ) a on (d.upc=a.ext_code2 and d.inventory_status=a.status_id)
                   where  d.onhand_qty-nvl(a.quantity,0)!=0 and d.vmi_status=1 and d.file_name=:fileName
             union all
                   select
                          d.id,
                          d.create_time,
                          a.status_id as inventoryStatusId,
                          d.source,
                          d.store_code storeCode,
                          d.warehouse,
                          d.file_name fileName, 
                          d.upc,
                          -nvl(a.quantity,0) onhandQty
                   from T_VMI_INV_SNAPSHOT_DATA d
                   join (
                              select sum(t.quantity) quantity,
                                     s.ext_code2,
                                     t.status_id 
                              from T_WH_SKU_INVENTORY t
                   join t_bi_inv_sku s on (s.id=t.sku_id)
                   where t.inv_owner=:invOwner and t.ou_id=:ouId and t.status_id is not null group by s.ext_code2,t.status_id ) a on (d.upc=a.ext_code2 and d.inventory_status!=a.status_id)
                   join (select COUNT(*), d.upc from T_VMI_INV_SNAPSHOT_DATA d where d.vmi_status=1 and d.file_name=:fileName group by d.upc having COUNT(*)=1) c on (c.upc=d.upc)
                   where d.vmi_status=1 and d.file_name=:fileName
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrder.updateMsgoutboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      	update T_WH_MSG_OUTBOUND_ORDER t set t.status=:status  where t.id=:mId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- KJL PDA接口功能 获取物流单号与物流商关系 -->
	<bean id="StaDeliveryInfo.getTransNoForPda" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
					  sta.main_wh_id||di.lpcode mapKey,
					  sta.main_wh_id uniqueCode,
					  di.lpcode lpCode,
					  pa.tracking_no transNo,
					  di.receiver receiver,
					  di.weight weight
					from 
					  t_wh_sta sta,
					  T_WH_STA_DELIVERY_INFO di,
					  T_WH_PACKAGE_INFO pa
					where
					  di.id = sta.id
					  and (sta.status=4 or sta.status = 3)
					  and pa.sta_delivery_info_id = di.id
					  and pa.status = 5
					  and not exists(select 1 from T_WH_STA_HO_LIST_LINE line where line.sta_id = pa.sta_delivery_info_id and line.tracking_no = pa.tracking_no)
					  and sta.OUTBOUND_TIME >= :startTime
					  and sta.OUTBOUND_TIME <= :endTime
					  and sta.create_time >= sysdate - 91
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--KJL NIKE官网订单查询 -->
	<bean id="StockTransApplication.findStaBySlipCodeAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						st.id as id,
						st.code as code,
						st.status as intStaStatus,
						st.type as intType,
						st.cancel_time as cancelTime from(
						select * from t_wh_sta sta 
						where sta.type = 25 or (sta.Slip_Type = 4 and (sta.type = 41 or sta.type = 42)) 
					)st where st.type = :type
					and st.slip_code=:orderCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaCreateQueue.findBySlipCodeNike" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sq.id as id from T_WH_STA_CREATE_QUEUE sq where sq.slip_code = :slipCode and sq.source=:source
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PdaOrder.getPdaOrderByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select order_code from t_wh_pda_order where order_code =:code and type = 1 and status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL 查询所有商品大小件分类 -->
	<bean id="SkuSizeConfig.selectAllConfig" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_SKU_SIZE_CONFIG
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL根据最大值查询所有商品大小件分类 -->
	<bean id="SkuSizeConfig.findSizeBySkuQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select g.name from t_wh_sku_size_config g where g.max_size>:skuMaxLength and g.min_size<=:skuMaxLength
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据idList 查找SKu的基本信息 KJL -->
	<bean id="Sku.getSkuByIdList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id as id,name||'|'||bar_Code as name from t_bi_inv_sku where id in(
						#foreach($sid in $idList)
                  			$sid,       
                  		#end
                  		-1) 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 查询已知仓库的所有秒杀商品 KJL -->
	<bean id="SecKillSkuCommand.selectAllSecKillSkuByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from t_wh_sec_kill_sku where ou_id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新已删除秒杀商品对应的Sta KJL -->
	<bean id="StockTransApplication.updateStaTypeSecKill" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta set 
					#if("$!isSedKill"=="true")
					    is_sed_kill = 1,picking_type = 30 where
					#else
					    is_sed_kill = 0,picking_type = case when sku_qty = 1 then 1 else 10 end where is_sed_kill = 1 and 
					#end
					main_wh_id = :ouId and skus = :skus 
					and (status = 1 or status = 20 or status = 2)
					and (is_sn = 0 or is_sn is null)
					and picking_list_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询秒杀商品是否存在 KJL -->
	<bean id="SecKillSku.getSecKillSkuByOuAndName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,skus,is_system from t_wh_sec_kill_sku where ou_id=:ouId and skus = :skus
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新系统秒杀为手工秒杀 KJL -->
	<bean id="SecKillSku.updateIsSystemById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sec_kill_sku set is_system = 0 where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 删除秒杀商品 sta加入配货单时 -->
	<bean id="SecKillSku.deleteSecSkillSkuIsSystemByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from 
				    	t_wh_sec_kill_sku sc
					where 
				       	sc.skus = :skus
						and sc.ou_id =:ouId
				      	and sc.is_system = 1
						and not exists(
						  	select 
						      	sta.id 
						    from 
						      	t_wh_sta sta
						  	where 
						    	sta.skus = :skus
						    	and sta.main_wh_id = :ouId
								and sta.is_sed_kill = 1
								and sta.picking_type = 30
								and sta.status <> 17
								and sta.picking_list_id is null
						) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.getAllStaByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select 
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								sta.OWNER owner,
								sta.pg_index as "index",
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            staQty.sta_total stvTotal,
					            shop.name shopId
		                    from 
		                    	t_wh_sta sta
			                    	left join t_bi_channel shop on sta.owner = shop.code
			                    	left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id
			                    	left join ((select sta2.id as sta_id,sum(stal.QUANTITY) as sta_total from t_wh_sta sta2,t_wh_sta_line stal where sta2.id=stal.sta_id group by sta2.id) staQty )
			                    		on sta.id=staQty.sta_id
		                    		,T_WH_STA_DELIVERY_INFO dryInfo
		                    where 
		                    	sta.MAIN_WH_ID=:ouId
		                    	and sta.id=dryInfo.id
		                    	and sta.PICKING_LIST_ID = :plId						
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaDeliverCommand.findAllStaByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.slip_code as slipCode,
						dryInfo.tracking_no as transNo 
					from 
						t_wh_sta sta,
						t_wh_sta_delivery_info dryInfo 
					where 
						sta.picking_list_id = :id 
						and sta.id = dryInfo.id
					order by sta.pg_index
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StockTransApplication.findStaBySlipCodeAndPid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_sta where PICKING_LIST_ID = :pId and slip_code = :slipCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StaDeliveryInfo.updateTransNoBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_STA_DELIVERY_INFO set TRACKING_NO = :transNo where id = (select id from t_wh_sta where slip_code = :slipCode and PICKING_LIST_ID is not null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PickingList.getAllSecKillPickingListByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						pl.id as id,
						pl.code as code,
						pl.lpcode as lpcode,
						pl.status as intStatus,
						pl.plan_bill_count as planBillCount,
						pl.plan_sku_qty as planSkuQty,
						pl.check_bill_count as checkBillCount,
						pl.check_sku_qty as checkSkuQty,
						pl.create_time as createTime
					from 
					  	t_wh_sta_picking_list pl
					where
					  	pl.check_mode = 8
					  	and pl.wh_id = :ouId
  						and pl.status in (2,10)
  						and not exists(
  							select tracking_no from T_WH_STA_DELIVERY_INFO where tracking_no is null and id in (select id from t_wh_sta where picking_list_id = pl.id)
  						) 
  						#if($fromTime)
  							and pl.create_time >= :fromTime
  						#end
  						#if($toTime)
  							and pl.create_time <= :toTime
  						#end
  						#if($code)
  							and pl.code =:code
  						#end
  						#if($status)
  							and pl.status = :status
  						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PickingList.getAllSecKillPickingListByStatusopc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						pl.id as id,
						pl.code as code,
						pl.lpcode as lpcode,
						pl.status as intStatus,
						pl.plan_bill_count as planBillCount,
						pl.plan_sku_qty as planSkuQty,
						pl.check_bill_count as checkBillCount,
						pl.check_sku_qty as checkSkuQty,
						pl.create_time as createTime,
						pl.WH_id as whid
					from 
					  	t_wh_sta_picking_list pl
					where
					  	pl.check_mode = 8
  						and pl.status in (2,10)
  						and not exists(
  							select tracking_no from T_WH_STA_DELIVERY_INFO where tracking_no is null and id in (select id from t_wh_sta where picking_list_id = pl.id)
  						) 
  						#if($fromTime)
  							and pl.create_time >= :fromTime
  						#end
  						#if($ouId)
                        and pl.wh_id = :ouId
  						#end
  						#if($wids)
  						and pl.wh_id in ( 
                #foreach( $whid in $wids)
		    		$whid ,
					#end
                      -1 )
  						#end
  						#if($toTime)
  							and pl.create_time <= :toTime
  						#end
  						#if($code)
  							and pl.code =:code
  						#end
  						#if($status)
  							and pl.status = :status
  						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StaLine.getStaPickingListPgIndex" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					  line.sku_id as id,
					  sku.code as skuCode,
					  sku.supplier_code as supplierCode,
					  sku.name as skuName,
					  sku.bar_code as barCode,
					  sku.KEY_PROPERTIES as keyProperties,
					  line.quantity as quantity,
					  line.complete_quantity as completeQuantity
					from 
					  t_wh_sta_line line,
					  t_bi_inv_sku sku,
					  t_wh_sta sta
					where
					  sta.picking_list_id = :id
					  and sta.pg_index = (select min(pg_index) from t_wh_sta where picking_list_id = :id)
					  and line.sta_id = sta.id
					  and line.sku_id = sku.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StaLine.updateCQEqualQByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta_line line set line.complete_quantity = line.quantity where line.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StaDeliveryInfo.getTransNoById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select de.tracking_no from t_wh_sta_delivery_info de where de.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StockTransApplication.findStaByPid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.id from t_wh_sta sta where sta.picking_list_id = :pId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PickingList.updatePickingListByHandOverList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_STA_PICKING_LIST set HAND_ID = null where HAND_ID = :hoId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PickingList.getHandOverIdByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select hand_id from t_wh_sta_picking_list where id = :pId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PickingList.getWhidBypickid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.wh_id from t_wh_sta_picking_list t where t.code = :pcode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="WhTransProvideNo.getTranNoByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select trans_no from
					(select trans_no from t_wh_trans_provide_no where rownum<=500 and lpcode=:lpcode and sta_id is null and (is_cod = 0 or is_cod is null) order by dbms_random.value) 
				where rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="WhTransProvideNo.getTranNoByLpcodeSf" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			  select trans_no from
          (select trans_no from t_wh_trans_provide_no where rownum<=500 and lpcode=:lpcode and sta_id is null and checkbox_sf=1 and jcustid is null and (is_cod = 0 or is_cod is null) order by dbms_random.value) 
				where rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="WhTransProvideNo.getTranNoByLpcodeSfMu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			  select trans_no from
          (select trans_no from t_wh_trans_provide_no where rownum<=500 and lpcode=:lpcode and sta_id is null and checkbox_sf=0 and jcustid is null and (is_cod = 0 or is_cod is null) order by dbms_random.value) 
				where rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 月结账号查询订单 -->
	<bean id="WhTransProvideNo.getTranNoByLpcodeJcustidSf" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			  select trans_no from
          (select trans_no from t_wh_trans_provide_no where rownum<=500 and lpcode=:lpcode and sta_id is null and jcustid=:jcustId and checkbox_sf=1 and (is_cod = 0 or is_cod is null) order by dbms_random.value) 
				where rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 月结账号查询订单  母单号-->
	<bean id="WhTransProvideNo.getTranNoByLpcodeJcustidSfMu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			  select trans_no from
          (select trans_no from t_wh_trans_provide_no where rownum<=500 and lpcode=:lpcode and sta_id is null and jcustid=:jcustId and checkbox_sf=0 and (is_cod = 0 or is_cod is null) order by dbms_random.value) 
				where rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- Juke -->
	<bean id="WhTransProvideNo.getTranNoByLpcodeAndRegionCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select trans_no from
					(select trans_no from t_wh_trans_provide_no where rownum<=500 
						and lpcode=:lpcode 
						and sta_id is null 
						#if($regionCode)
			            and regionCode=:regionCode
			            #else
			            and regionCode is null
			            #end
						order by dbms_random.value) 
				where rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="WhTransProvideNo.getJdTranNoByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select trans_no from
					(select trans_no from t_wh_trans_provide_no where rownum<=500 
					and sta_id is null 
					and lpcode=:lpcode 
					#if($owner)
					and owner= :owner
					#end
					#if($isCod)
					and is_cod=:isCod 
					#end
					and exp_time >= sysdate
					order by dbms_random.value) 
				where rownum=1	
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="PickingList.findCheckoutPickingByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						pl.id as id,
						pl.code as code,
						pl.lpcode as lpcode,
						pl.status as intStatus,
						pl.plan_bill_count as planBillCount,
						pl.plan_sku_qty as planSkuQty,
						pl.check_bill_count as checkBillCount,
						pl.check_sku_qty as checkSkuQty,
						pl.create_time as createTime,
						tran.name as skuCode,
						pl.WH_id whid,
						(select count(id) from t_wh_sta where picking_list_id = pl.id and (status = 15 or status = 17)) isHaveCancel
					from 
					  	t_wh_sta_picking_list pl,
					  	t_ma_transportator tran
					where
					  	pl.check_mode = 8
  						and pl.status in (2,10)
  						and not exists(
  							select tracking_no from T_WH_STA_DELIVERY_INFO where tracking_no is null and id in (select id from t_wh_sta where picking_list_id = pl.id)
  						) 
  						and pl.code =:code
  						and tran.exp_code = pl.lpcode
  						#if($whId)
  							and pl.wh_id = :whId
  						#else
  							and pl.wh_id in(
	  							#foreach($id in $idList)
	  								$id,
	  							#end
	  							-1
	  						)
  						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GuessSalesorderData.updateGuessSalesorderinfoById"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
          update t_guess_salesorder_data d set d.status=10,d.updatedate=sysdate where d.id=:gid
        ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiInventorySnapshotData.updateInventorySnapshotByfileName"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
					update T_VMI_INV_SNAPSHOT_DATA d set d.vmi_status=:status where d.file_name=:fileName
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 推荐库位 KJL 推荐7天内最近的销售相关出库库位 -->
	<bean id="StockTransTxLog.getRecommendLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select location_id from(
						select lg.location_id from 
							T_WH_ST_LOG lg,
							T_WH_TRANSACTION_TYPE ttype
					    where 
						    lg.WH_ID = :whId
						    and lg.SKU_ID = :skuId
						    and lg.TRANSTYPE_ID = ttype.id
						    and ttype.code='SALES_OUTBOUND'
						    and lg.TRAN_TIME>=(sysdate-7)
						    order by lg.TRAN_TIME desc
					)where rownum = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 推荐库位 KJL 推荐拣货区库位存在良品库位 -->
	<bean id="Inventory.getRecommendLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select location_id from(
						select inv.location_id from 
					       t_wh_sku_inventory inv,
					       T_WH_DISTRICT dis,
					       T_WH_INVENTORY_STATUS status
						where 
					       inv.ou_id = :whId 
					       and inv.sku_id = :skuId
					       and inv.DISTRICT_ID =  dis.id 
					       and dis.type = 1
					       and inv.status_id = status.id
					       and status.IS_FORSALE = 1
					       and status.is_available = 1
					)where rownum = 1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- KJL 根据当前作业单号查询PDA操作表中是否有未处理的单据 -->
	<bean id="PdaOrder.findPdaOrderByCodeAndTypeStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_pda_order where order_code =:code and type = 1 and status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL -->
	<bean id="StockTransApplication.updateSomeStaToSecKillOrder"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta set is_sed_kill = 1,picking_type = 30 where skus = :skus and status in(1,2,20) and (is_special_packaging is null or is_special_packaging=0) and main_wh_id = :ouId and picking_list_id is null and (is_sn = 0 or is_sn is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrderLine.findReturnOrderDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						line.sku_code,
						line.location_code,
						sum(nvl(line.qty,0)) qty
					from 
						t_wh_pda_order_line line
					where 
						line.pda_order_id = :orderId 
					group by(line.sku_code,line.location_code) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrderLine.findByOrderCodeAndStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
line.*
from 
t_wh_pda_order pda,
t_wh_pda_order_line line
where 
pda.id=line.pda_order_id
and pda.order_code=:orderCode
and pda.status in (
#foreach($status in $pdaStatus)
	$status,
#end
-19
)
and pda.type =:pdaType
and (line.status = 1 or line.status is null)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaOrderLine.findShelevesPdaLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select pdal.* from 
t_wh_pda_order pda,
t_wh_pda_order_line pdal,
(
select
  l.skuCode,
  order_code
from 
  (
    select 
     sku.code as skuCode,sum(l.quantity) as quantity,sum(l.added_qty) as added_qty 
    from t_wh_stv_line l,
    t_bi_inv_sku sku
    where l.sku_id=sku.id 
    and l.stv_id=:stvId
  group by sku.code
  ) l,
  (
    select pda.order_code,pdal.sku_code,sum(qty) as qty from
      t_wh_pda_order pda,
      t_wh_pda_order_line pdal
      where pda.id=pdal.pda_order_id
      and (pda.status = 1 or pda.status = 0 or pda.status = 5)
      and (pdal.status = 1 or pdal.status is null)
      and pdal.qty > 0
      and pda.type=3
      and pda.order_code=:staCode
    group by pda.order_code,pdal.sku_code
  ) pdal
where l.skuCode=pdal.sku_code
and (l.quantity - nvl(l.added_qty,0)) = pdal.qty
) tb
where pda.id=pdal.pda_order_id
and tb.order_code = pda.order_code
and (pda.status = 1 or pda.status = 0 or pda.status = 5)
and (pdal.status = 1 or pdal.status is null)
and pda.type=3
and pdal.sku_code=tb.skuCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaOrderLineSn.findSnByPdaOrderLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from t_wh_pda_order_line_sn where pda_order_line_id = :plId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL 查询可用SN号 -->
	<bean id="SkuSn.getSkuSnByWhId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sn.sn 
					from 
						T_WH_SKU_SN sn,
						t_bi_inv_sku sku 
					where 
						sn.ou_id = :whId 
						and sn.sku_id = sku.id 
						and sku.code =:skuCode 
						and sn.status = 5
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL 根据仓库id 查询可用SN号 -->
	<bean id="SkuSn.getSkuSnBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
					skusn.id id, 
						skusn.sn sn,   
						sku.code code,
						sku.bar_code barcode
					from 
						T_WH_SKU_SN skusn,
						T_BI_INV_SKU sku
					where
						skusn.ou_id = :whId 
					    and skusn.sku_id = sku.id 
						and skusn.sn =:skuCode 
						and skusn.status = 5
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- KJL 根据仓库id 查询可用SN号2 -->
	<bean id="SkuSn.getSkuSnBySku2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
					skusn.id id, 
						skusn.sn sn,   
						sku.code code,
						sku.bar_code barcode
					from 
						T_WH_SKU_SN skusn,
						T_BI_INV_SKU sku
					where
						skusn.ou_id = :whId 
					    and skusn.sku_id = sku.id 
						and skusn.sn =:skuCode 
						and skusn.status = 5
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- KJL 更新SN -->
	<bean id="SkuSn.updateSnByOuAndStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update 
						T_WH_SKU_SN sn 
					set 
						sn.status = 1,sn.stv_id =:stvId 
					where 
						sn.ou_id = :ouId 
						and sn.sn in(
							select ls.sn_code from t_wh_pda_order_line_sn ls,t_wh_pda_order_line pl where ls.pda_order_line_id = pl.id and pl.pda_order_id = :poId
						)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.getPartlyOutboundInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						inv.id,
						inv.quantity,
						sku.code skuCode,
						loc.code locationCode,
						tq.qty changeQty
					from
						t_wh_sku_inventory inv,
						t_wh_sta sta,
						t_bi_inv_sku sku,
						t_wh_location loc,
						t_wh_inventory_status ivnsta,
						(
							select 
						    	sku_id,
						    	location_id,
						    	sum(qty) qty
						  	from 
						    (
						    select 
						    	inv.sku_id,inv.location_id,sum(inv.quantity) qty
						    from 
							    t_wh_sku_inventory inv,
							    t_wh_sta sta
						    where 
						    	inv.occupation_code = sta.code
							    and sta.id = :staId
							group by (inv.sku_id,inv.location_id)
						    union all
						    select
						    	sku.id sku_id,loc.id location_id,-sum(pl.qty) qty
						    from
							    t_bi_inv_sku sku,
							    t_wh_pda_order_line pl,
							    t_wh_location loc
						    where 
							    pl.pda_order_id = :plId
							    and pl.sku_code = sku.code
							    and pl.location_code = loc.code
							    and loc.ou_id = :ouId
						    group by(sku.id,loc.id)
						    )tb
						  group by(sku_id,location_id)
						  having sum(qty)>0
						)tq
					where inv.sku_id = tq.sku_id and inv.location_id = tq.location_id
					and inv.occupation_code = sta.code
					and sta.id = :staId
					and inv.location_id = loc.id
					and inv.sku_id = sku.id
					and inv.status_id = ivnsta.id
					order by inv.id,nvl(ivnsta.IS_FORSALE,0) for update of inv.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 释放库存 KJL -->
	<bean id="Inventory.updateInventoryById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update 
						T_WH_SKU_INVENTORY
           			set 
           				occupation_code = null,
           				IS_OCCUPIED = null 
           				#if($qty)
  							,quantity = :qty
  						#end
         			where id = :invId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.insertNewInventory" class="loxia.dao.support.DynamickQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_WH_SKU_INVENTORY
			         (id,
			          batch_code,
			          sku_id,
			          quantity,
			          district_Id,
			          location_id,
			          Ou_Id,
			          Status_Id,
			          Inv_Owner,
			          Inbound_Time,
			          Sku_Cost,
			          Occupation_Code,
			          Is_Occupied)
			       select
						S_T_Wh_Inventory.Nextval,
						i_rec.batch_code,
						i_rec.sku_id,
						:qty,
						i_rec.district_Id,
						i_rec.location_id,
						i_rec.Ou_Id,
						i_rec.status_Id,
						i_rec.Inv_Owner,
						i_rec.Inbound_Time,
						i_rec.Sku_Cost,
						i_rec.occupation_code,
						1
			       from 
			       	t_wh_sku_inventory i_rec
			       where 
			        i_rec.id = :invId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 预售订单取消插入新的库存 -->
		<bean id="Inventory.insertNewInventoryPre" class="loxia.dao.support.DynamickQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				insert into t_wh_sku_inventory (id,batch_code,inbound_time,is_occupied,occupation_code,inv_owner,quantity,sku_cost,district_id,
location_id,ou_id,sku_id,status_id,version,production_date,valid_date,expire_date,ocp_code
) select S_T_Wh_Inventory.Nextval,l.batch_code,l.inbound_time,'1',l.sta_code,l.owner,l.quantity,null,l.district_id,l.location_id,l.wh_id,l.sku_id,l.invs_tatus_id,
null,l.production_date,l.valid_date,l.expire_date,l.ocp_code
 from t_wh_st_log l where l.sta_code=:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.insertNewStvLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_wh_stv_line
			          (id,
			           direction,
			           owner,
			           quantity,
			           sku_cost,
			           version,
			           district_id,
			           inv_status_id,
			           location_id,
			           sku_id,
			           stv_id,
			           transtype_id,
			           wh_id)
			        select
			           s_t_wh_stv_line.nextval,
			           2,
			           i_rec.inv_owner,
			           i_rec.quantity,
			           i_rec.sku_cost,
			           0,
			           i_rec.district_id,
			           i_rec.status_id,
			           i_rec.location_id,
			           i_rec.sku_id,
			           :stvId,
			           :typeId,
			           i_rec.ou_id
			        from 
			        	t_wh_sku_inventory i_rec
			        where 
			        	i_rec.id = :invId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.selectErrorSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select stragg(sku_id || '/' || qty)
					from (
						select sku_id as sku_id, sum(qty) as qty
					        from (
					        		select inv.sku_id as sku_id, inv.quantity as qty
					                from t_wh_sku_inventory inv, t_wh_sta sta
					                where inv.occupation_code = sta.code
					                and sta.id = :staId
					                union all
					                  select l.sku_id, l.quantity
					                    from t_wh_stv stv, t_wh_stv_line l
					                   where stv.id = :stvId
					                     and stv.id = l.stv_id
					                  union all
					                  select l.sku_id, -l.quantity
					                    from t_wh_sta sta, t_wh_sta_line l
					                   where sta.id = l.sta_id
					                     and sta.id = :staId) t
					           group by sku_id
					          having sum(qty) != 0) t
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 汇总PDA 上传的盘点明细 KJL -->
	<bean id="PdaOrderLine.findInventoryCheckDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
    					line.sku_code,line.location_code,sum(line.qty) qty
					from 
    					t_wh_pda_order_line line 
					where 
						line.pda_order_id = :poId 
						group by (line.sku_code,line.location_code)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PdaOrderLine.updatePdaOrderLineStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 update t_wh_pda_order_line line set status=:status where id=:lineId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrderCancel.updateMsgOrderCancelById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[update T_WH_MSG_OUTBOUND_ORDER_CANCEL l set l.status=:sta,l.update_time=sysdate where l.id=:msgId ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PriceData.findPriceDatabystartDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	                <![CDATA[
	        select   d.ID      ,
			         d.ARTICLE_NUMBER ,
			         d.BAR_CODE       ,
			         d. CREATE_TIME    ,
			         d.PRICE          ,
			         d. SOURCE         ,
			         d. START_DATE     ,
			         d. UPC            
	       from T_VMI_PRICE_DATA d where d.status=1 and d.start_date=to_date(:startDate,'yyyy-MM-dd')
	                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PriceData.updateStatePriceDatabyId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	                <![CDATA[
	             update T_VMI_PRICE_DATA d set d.status=:status where d.id=:pid
	                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhReplenish.findAllReplenishOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
	  					select 
	  						wr.id,
	  						wr.code,
	  						wr.create_time,
	  						wr.status as intStatus,
	  						wr.type as intType,
	  						wr.warning_pre 
	  					from 
	  						t_wh_replenish wr 
	  					where 
	  						wr.ou_id = :ouId
	  						and wr.create_time>(sysdate-10)
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ReplenishSkuCommand.findRePlenishSkuByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
	  					select 
       						erl.sku_id skuId,
       						sum(erl.quantity) qty 
       						#if("$!isShare"=="false")
       						,sta.owner innerShopCode
       						#end
						from 
							t_wh_sta sta,
							t_wh_sta_error_line erl 
						where 
							sta.status = 20 
							and sta.main_wh_id = :ouId 
							and erl.sta_id = sta.id
						group by (erl.sku_id #if("$!isShare"=="false")
       						,sta.owner
       						#end)
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findCanReplenishInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
	  					select 
						    sum(inv.quantity) quantity,
						    dis.code districtCode, 
						    loc.code locationCode
						from 
						    t_wh_sku_inventory inv,
						    t_wh_district dis,
						    t_wh_location loc,
						    t_wh_inventory_status status
						where 
						    inv.sku_id =:skuId
						    and inv.ou_id=:ouId
						    #if($shop)
						    and inv.inv_owner = :shop
						    #end
						    and inv.status_id = status.id
						    and status.is_forsale = 1
						    and inv.district_id = dis.id
						    and inv.location_id = loc.id
						    and (inv.is_occupied is null or inv.is_occupied = 0)
						    and dis.type = 10
						group by (dis.code,loc.code #if($shop),inv.inv_owner #end)
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.getPickingInventoryBySkuAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
	  					select 
							nvl(sum(nvl(quantity,0)),0) quantity
						from 
							t_wh_sku_inventory inv,
							t_wh_district dis
						where
							inv.sku_id=:skuId
							and inv.ou_id=:ouId
							and inv.district_id = dis.id
							and dis.id = :disId
							#if($shop)
							and inv.INV_OWNER = :shop
							#end
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.getStockInventoryBySkuAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
	  					select 
							sum(nvl(quantity,0)) quantity
						from 
							t_wh_sku_inventory inv,
							t_wh_district dis,
							t_wh_inventory_status status
						where
							inv.sku_id=:skuId
							and inv.ou_id=:ouId
							and inv.district_id = dis.id
							and dis.type = 10
							and inv.status_id = status.id
							and status.is_forsale = 1
							#if($shop)
							and inv.INV_OWNER = :shop
							#end
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.findInInventoryLoc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
	  					select code from(
							select loc.code code from 
							    T_WH_ST_LOG lg,
							    T_WH_TRANSACTION_TYPE ttype,
							    t_wh_location loc
						    where 
						      	lg.WH_ID = :ouId
						      	and lg.SKU_ID = :skuId
						     	and lg.DISTRICT_ID =:disId
						     	#if($shop)
						     		and lg.owner =:shop
						     	#end
						      	and lg.TRANSTYPE_ID = ttype.id
						      	and lg.location_id =loc.id
						      	and ttype.code='SALES_OUTBOUND'
						      	and lg.TRAN_TIME>=(sysdate-3)
						      	order by lg.TRAN_TIME desc
						)where rownum <= 3
						union
						select code from(
						   select loc.code code
						   from
						   t_wh_sku_inventory inv,
						   t_wh_location loc
						   where
						   inv.district_id = :disId
						   and inv.ou_id = :ouId
						   and inv.sku_id = :skuId
						   #if($shop)
						   		and inv.INV_OWNER =:shop
						   #end
						   and inv.location_id = loc.id
						   and inv.quantity>0
						)where rownum <= 3
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingReplenishCfg.findCfgBySkuAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t from PickingReplenishCfg t where t.ou.id =:ouId and t.sku.id = :skuId #if($shop) and t.owner = :shop #end]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ReplenishSkuCommand.findNeedReplenishSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
					  distinct
					  cfg.sku_id skuId
					  #if("$!isShare"=="false")
					  	,cfg.shop_owner as innerShopCode
					  #end
					from 
					T_WH_PICKING_REPLENISH_CFG cfg
					where
					cfg.ou_id = :ouId
					#if("$!isShare"=="false")
					  	and cfg.shop_owner is not null
					#end
					#if("$!isShare"=="true")
						and cfg.shop_owner is null
					#end
					and exists(
					    select 
					          lg.id
					    from
					          T_WH_ST_LOG lg,
					          T_WH_TRANSACTION_TYPE ttype,
					          T_WH_PICKING_REPLENISH_CFG cfg
					    where
					    lg.district_id =  cfg.district_id
					    and lg.sku_id = cfg.sku_id
					    and lg.wh_id = cfg.ou_id
					    #if("$!isShare"=="false")
					  	and lg.owner = cfg.shop_owner
					  	#end
					    and lg.transtype_id = ttype.id
					    and ttype.code='SALES_OUTBOUND'
					    and lg.tran_time>=(sysdate-1000)
					)
					and 
					    cfg.max_qty* #if($warnPre) :warnPre #else cfg.warning_pre #end >=
					    (select sum(nvl(inv.quantity,0)) from 
					    t_wh_sku_inventory inv where inv.sku_id = cfg.sku_id and inv.district_id = cfg.district_id and inv.ou_id = cfg.ou_id
					    #if("$!isShare"=="false")
					  	and inv.inv_owner = cfg.shop_owner
					  	#end
					    )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhReplenish.updateStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update  t_Wh_Replenish set status = :status where id =:wrId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhReplenishLine.findWhReplenishLienById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						line.id id,
						sku.bar_code barCode,
						line.out_dis_code outDistrictCode,
						line.out_location_code outLocationCode,
						line.out_loc_inv outLocCurrentInv,
						line.out_qty outQty,
						line.in_dis_code inDistrictCode,
						line.max_store maxStore,
						line.in_dis_inv inDisCurrentInv,
						line.warning_pre warningPre,
						line.in_location_code inLocationCode,
						line.in_location_code1 inLocationCode1,
						line.in_location_code2 inLocationCode2,
						line.in_qty inQty
					from 
						t_wh_replenish_line line,
						t_bi_inv_sku sku
					where
						line.wr_id = :wrId
						and line.sku_id = sku.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.updateStatusByHandOverListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							 update 
          					T_WH_PACKAGE_INFO pginfo 
         			 set 
         			 		pginfo.status = :status,last_modify_time = sysdate 
        			 where id in (
						   select 
								o.id from T_WH_STA_HO_LIST_LINE e 
						   left join
						 		T_WH_PACKAGE_INFO o on o.HO_LIST_LINE_ID = e.id
						   where 
								e.ho_list_id  = :handId
						)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 原始更改packageInfo状态 -->
		<bean id="PackageInfo.updateStatusByHandOverListId2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						 update 
          					T_WH_PACKAGE_INFO pginfo 
         			 set 
         			 		pginfo.status = :status,last_modify_time = sysdate 
        			 where id in (
						   select 
								o.id from T_WH_STA_HO_LIST_LINE e 
						   left join
						 		T_WH_PACKAGE_INFO o on o.sta_delivery_info_id = e.sta_id
						   where 
								e.ho_list_id  = :handId
								and o.tracking_no = e.tracking_no
						)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.updateTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_PACKAGE_INFO set tracking_no = :trackingNo,last_modify_time = sysdate where id = :pId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findAllHandStaByHandList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id
					from
						t_wh_sta sta
					where
						sta.id in (select distinct p.sta_delivery_info_id from T_WH_STA_HO_LIST_LINE hl LEFT JOIN T_WH_PACKAGE_INFO p ON hl.id=p.HO_LIST_LINE_ID where hl.ho_list_id = :handId)
						and not exists(
							select 
								pg.id
							from 
								T_WH_PACKAGE_INFO pg
							where 
								pg.sta_delivery_info_id = sta.id
								and pg.status <> :status
						)
				]]>
			</value>
		</constructor-arg>
	</bean>
		<bean id="StockTransApplication.findAllHandStaByHandList2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id
					from
						t_wh_sta sta
					where
						sta.id in (select distinct hl.sta_id from T_WH_STA_HO_LIST_LINE hl where hl.ho_list_id = :handId)
						and not exists(
							select 
								pg.id
							from 
								T_WH_PACKAGE_INFO pg
							where 
								pg.sta_delivery_info_id = sta.id
								and pg.status <> :status
						)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="StockTransApplication.findAllHandStaByHandListO2O" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				                  select s.id
                    FROM t_wh_sta s
                    WHERE
                    s.TANS_ORDER_ID IS NOT NULL AND
                    s.TANS_ORDER_ID IN
                         (  SELECT a3.order_id FROM T_WH_STA_HO_LIST_LINE a1 LEFT JOIN T_WH_PACKAGE_INFO a2 ON a1.id=a2.HO_LIST_LINE_ID LEFT JOIN T_WH_TRANS_PACKAGE a3 on a3.id=a2.TANS_PG_ID
							WHERE a1.ho_list_id =:handId  AND ( a2.is_handover <> 0 OR  a2.is_handover is null)
                            )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.findErrorPackageInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							pa.id
						from
							T_WH_PACKAGE_INFO pa
						where
							pa.id in (
							#foreach($id in $tnList)
								$id,
							#end
							-1) 
							and exists (select line.id from t_wh_sta_ho_list_line line where line.sta_id = pa.sta_delivery_info_id and line.tracking_no = pa.tracking_no) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverListLine.deleteByHandId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_sta_ho_list_line line where line.ho_list_id = :handId 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverList.findHandOverListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						hoList.id 
					from 
						t_wh_sta_ho_list hoList
					where exists (
      					select ll.id from t_wh_sta_ho_list_line ll where ll.ho_list_id = hoList.id and ll.tracking_no in (
      						select pi.tracking_no from t_wh_package_info pi where pi.sta_delivery_info_id = :staId and pi.status = :status
      					)
      				) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverListLine.deleteHandOverListLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_sta_ho_list_line ll where ll.tracking_no in(
						select pi.tracking_no from t_wh_package_info pi where pi.sta_delivery_info_id = :staId and pi.status = :status
      				)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.findFinishPackBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select pi.id from t_wh_package_info pi where pi.sta_delivery_info_id = :staId and pi.status = :status
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.deleteByStaIdAndStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_package_info pi where pi.sta_delivery_info_id = :staId and pi.status = :status
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.newPackageInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_wh_package_info (id,lpcode,tracking_no,sta_delivery_info_id,weight,transfer_cost,version,create_time,is_checked,status,last_modify_time,ou_id,is_handover) 
					values(s_t_wh_package_info.nextval,:lpcode,:transNo,:staId,:weight,0,0,sysdate,:isChecked,:status,sysdate,:wId,1)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaDeliveryInfo.updateByPrimaryKey" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta_delivery_info set lpcode = :lpcode,tracking_no = :transNo where id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findSalesStaByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						nvl(ware.is_need_wrapstuff,0) isNeedWrapstuff,
						nvl(ware.is_manual_weighing,0) isManualWeighing,
						sta.id id,
						sta.code code,
						sta.SLIP_CODE refSlipCode,
						sta.owner shopId,
						dryInfo.lpcode lpcode,
						sku.bar_code skuName,
						sta.IS_PRE_SALE as isPreSale,
						c.is_haocai as isHaoCai
					from 
						t_wh_package_info pg,
						t_wh_sta sta,
						t_bi_channel c,
						T_BI_WAREHOUSE ware,
						T_WH_STA_DELIVERY_INFO dryInfo,
						t_wh_sta_picking_list pl,
						t_bi_inv_sku sku
					where
						sta.status in (
							#foreach($ss in $statusList)
							    $ss,
							#end
							-1
						)
						#if($status)
							and pg.status = :status
						#end
						
						and dryInfo.id = sta.id
						and pg.sta_delivery_info_id = dryInfo.id
						and pg.tracking_no = :trackingNo
						and ware.ou_id = sta.main_wh_id
						and sta.picking_list_id = pl.id(+)
						and (pl.check_mode is null or pl.check_mode not in(6,8))
						and sta.package_sku_id = sku.id(+)
						and sta.owner=c.code(+)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findExportSalesSendOutInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
sta.owner,
sta.code,
sta.slip_code as refSlipCode,
sta.slip_code2 as outerOrderCode,
'销售出库' as strType,
nvl(sta.total_actual,0) + nvl(di.transfer_fee,0) as totalActual,
sta.total_actual as skuTotalActual,
di.transfer_fee as transferFee,
sta.sku_qty as skuQty,
sta.create_time as createTime,
sku.supplier_code as supplierCode,
sku.name as skuName,
sku.code as skuCode,
sku.bar_code as barCode,
l.quantity,
di.receiver,
di.telephone,
di.mobile,
di.province,
di.city,
di.district,
di.address,
di.zipcode,
sta.memo
from 
t_wh_sta_line l,
t_bi_inv_sku sku,
t_wh_sta_delivery_info di,
t_wh_sta sta
where 
sta.id=di.id
and sta.id=l.sta_id
and sku.id=l.sku_id
and sta.create_time > sysdate - 120
and sta.status = 2
and (sta.type = 21 or sta.type=25)
and sta.picking_list_id=:plId
union all 
select 
sta.owner,
sta.code,
sta.slip_code as refSlipCode,
sta.slip_code2 as outerOrderCode,
'换货出库' as strType,
nvl(sta.total_actual,0) + nvl(di.transfer_fee,0) as totalActual,
sta.total_actual as skuTotalActual,
di.transfer_fee as transferFee,
sta.sku_qty as skuQty,
sta.create_time as createTime,
sku.supplier_code as supplierCode,
sku.name as skuName,
sku.code as skuCode,
sku.bar_code as barCode,
l.quantity,
di.receiver,
di.telephone,
di.mobile,
di.province,
di.city,
di.district,
di.address,
di.zipcode,
sta.memo
from 
t_wh_sta_line l,
t_bi_inv_sku sku,
t_wh_sta_delivery_info di,
t_wh_sta sta
where 
sta.id=di.id
and sta.id=l.sta_id
and sku.id=l.sku_id
and sta.create_time > sysdate - 120
and sta.type = 42
and sta.status = 2
and sta.picking_list_id=:plId

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findExportreturnRegisterInfo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sta.create_time   as createTime,
       sta.code,
       sta.slip_code1         as outerOrderCode,
       sta.slip_code     as refSlipCode,
       ''   as optionValue,
       sku.bar_code      as barCode,
       sku.code          as skuCode,
       sku.supplier_code as supplierCode,
       sku.name          as skuName,
       invSta.Name       as invStrutsName,
       l.quantity
  from t_wh_sta_line         l,
       t_wh_inventory_status invSta,
       t_bi_inv_sku          sku,
       t_wh_sta              sta
 where l.inv_status_id = invSta.Id
   and sta.id = l.sta_id
   and sku.id = l.sku_id
   and sta.status = 1
   and sta.type = 41
   and sta.main_wh_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findCreatePKListAllSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
sta.id
from 
t_wh_sta sta
where 
(sta.status = 1 or sta.status = 20)
and (sta.type = 21 or sta.type=25 or sta.type = 42)
and sta.picking_list_id is null
and (sta.is_Locked = 0 or sta.is_Locked is null)
and sta.main_wh_id=:ouId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.getCancelStaListPgIndex" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						sta.id id,
						sta.pg_index pgIndex,
						sta.code code,
						sta.slip_code slipCode,
						sta.owner owner,
						sta.status intStatus
					from 
					t_wh_sta sta
					where 
					sta.picking_list_id = :id
					and sta.status in(
						#foreach($status in $statusList)
							$status,
						#end
						-1
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updatePickingListIdById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta set picking_list_id = null where id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findIfExistsCancelSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(id) from t_wh_sta where status in(
						#foreach($status in $statusList)
							$status,
						#end
						-1
					)and picking_list_id = :plId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaHandOverLine.getDetailList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select trans_no from t_wh_pda_handover_line where pda_order_id = :poId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrderLineSn.findSnByPdaOrderId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sn.sn_code 
					from 
						t_wh_pda_order_line_sn sn,
						t_wh_pda_order_line line
					where
						sn.pda_order_line_id = line.id
						and line.pda_order_id = :plId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaHandOverLine.findPdaHandOverLogLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,trans_no from t_wh_pda_handover_line where pda_order_id = :pId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrder.getErrorPdaLogList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					  ord.id id,
					  nvl(nvl(ord.order_code,ord.slip_code),ord.lpcode||'-PDAORDER'||ord.id) orderCode,
					  ord.create_time createTime,
					  ord.status intStatus,
					  ord.memo memo
					from 
					  t_wh_pda_order ord
					where
					  ord.create_time>sysdate -300
					  and ord.ou_id = :ouId
					  and ord.status in(
						  #foreach($status in $statusList)
						       $status,
						  #end
					  -2)
					  and ord.type in(
					      #foreach($type in $typeList)
					          $type,
					      #end
					  -1)
					  #if($beginTime)
					  	and ord.create_time>=:beginTime
					  #end
					  #if($endTime)
					  	and ord.create_time<=:endTime
					  #end
					  #if($code)
					  	and ord.order_code = :code
					  #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrder.updateStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_pda_order set status = 1 where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrderLine.getErrorPdaLogDetailList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					  pl.id,
					  pl.sku_code,
					  pl.location_code,
					  pl.inv_status,
					  pl.direction intDirection,
					  au.user_name userName,
					  pl.qty
					from 
					  t_wh_pda_order_line pl,
					  t_au_user au
					where pl.operate_user_id = au.id(+)
					and pl.pda_order_id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrderLine.updateErrorPdaLineLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_pda_order_line set location_code =:orderCode where id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findErrorSnInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						line.id
					from 
						t_wh_sta_line line,
						t_bi_inv_sku sku,
						T_WH_SKU_SN sn
					where line.sta_id = :staId
						and line.sku_id=sku.id
						and sku.is_sn_sku = 1
						and sn.sku_id = sku.id
						and sn.sn in (
							#foreach($sn in $snList)
								'$sn',
							#end
							'-1'
						)
					group by (line.id,sku.id,line.quantity)
          having count(sn.sn)!= line.quantity
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.occupiedSnByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sku_sn set stv_id = :id,status =:status where sn in(
					#foreach($sn in $snList)
						'$sn',
					#end
					'-1')
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.findStvLineByStaMap" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              select l.sku_id as skuId , l.owner as owner,l.inv_status_id as IntInvstatus, l.batch_code as batchCode, sum(l.QUANTITY) as quantity from t_wh_stv stv,t_wh_stv_line l where 
              stv.id=l.stv_id
              and stv.sta_id= :staId
              and stv.status = 10
              and stv.direction=2
              group by l.sku_id,l.batch_code,l.owner,l.inv_status_id
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransVoucher.findOutboundStvByStaSlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select stv.direction as intDirection,stv.id 
				from 
				t_wh_stv stv,
				t_wh_sta sta,
				t_wh_sta t
				where stv.status=10
				and sta.create_time > sysdate - 360
				and sta.group_sta_id = t.id(+)
				and sta.type=61 and sta.slip_code=:staSlipCode
				and (
				    (sta.group_sta_id is null and sta.id=stv.sta_id)
				    or
				    (sta.group_sta_id is not null and t.id=stv.sta_id)
				    )
            
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.findStvByStaSlipCode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select stv.direction as intDirection,stv.id 
from 
t_wh_stv stv,
t_wh_sta sta,
t_wh_sta t
where stv.status=10
--and sta.create_time > sysdate - 360
and sta.group_sta_id = t.id(+)
and ((sta.type=21 and (sta.slip_code=:staSlipCode1)) or sta.slip_code1=:staSlipCode1)
and (
    (sta.group_sta_id is null and sta.id=stv.sta_id)
    or
    (sta.group_sta_id is not null and t.id=stv.sta_id)
    )
            
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.findStvsByStaSlipCode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 		select stv.direction as intDirection,stv.id 
			from 
			t_wh_stv stv,
			t_wh_sta sta
		where stv.sta_id = sta.id and stv.status = 10 and sta.slip_code1 =:staSlipCode1  and sta.type = 21
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransVoucher.findStvLineBrathCodeBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              select sl.batch_code from
                            t_wh_stv stv,
                            t_wh_stv_line sl
                            where stv.sta_id = :staId
                            and sl.stv_id = stv.id
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransVoucher.findStvBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_stv stv where stv.sta_id = :staId and status =10 and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--查询组织节点Id -->
	<bean id="Warehouse.findCmpOuIdByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select u2.parent_ou_id from t_au_operation_unit u2,t_au_operation_unit u3
					where u3.id = :ouId
					and u3.parent_ou_id = u2.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="Warehouse.findAllWarehouse2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			     select w.ou_id as ouId,u.name as ouName from t_bi_warehouse w ,t_au_operation_unit u where w.ou_id=u.id(+)
      		     and w.ou_id is not null and u.is_available=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="PackageSku.findHaveSkuByContent" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						id,is_system
					from
						t_wh_package_sku
					where 
						sku_qty =:skuQty
						and sta_total_sku_qty =:staTotalSkuQty
						and ou_id =:ouId
						and skus1=:skus1
						#if($skus2)
							and skus2=:skus2
						#else
							and skus2 is null
						#end
						#if($skus3)
							and skus3=:skus3
						#else
							and skus3 is null
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageSku.updateIsSystemById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_package_sku set is_system = 0 where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="InvetoryChange.updateInvetoryChangeStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_inv_change_pacs set STATUS=10 where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.updateSomeStaToPackageSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update 
						t_wh_sta 
					set 
						picking_type = :packageType ,
						PACKAGE_SKU_ID =:psId
					where 
						main_wh_id =:ouId 
						and status in (
							#foreach($status in $statusList)
								$status,
							#end
						-1)
						and sku_qty = :staTotalSkuQty
						and substr(skus,1,instr(skus,:split)-1) =:skuQty
						and (is_special_packaging is null or is_special_packaging=0)
						and PICKING_TYPE = :pickingType
						#if($skus1)
							and skus like :skus1
						#end
						#if($skus2)
							and skus like :skus2
						#end
						#if($skus3)
							and skus like :skus3
						#end
						and picking_list_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageSku.selectAllPackageSkuByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						id,
						sta_total_sku_qty,
						sku_qty,
						skus1,
						skus2,
						skus3
					from 
						t_wh_package_sku 
					where ou_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaPackageToMany" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update 
						t_wh_sta 
					set 
						PICKING_TYPE =:manyType,
						PACKAGE_SKU_ID = null
					where 
						PICKING_TYPE =:packageType
						and status in(
							#foreach($status in $statusList)
								$status,
							#end
						-1)
						and PACKAGE_SKU_ID = :psId
						and main_wh_id =:ouId
						and (is_special_packaging is null or is_special_packaging=0)
						and picking_list_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageSkuLog.newPackageSkuLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into 
						t_wh_package_sku_log(
							id,
							sta_total_sku_qty,
							exp_time,
							create_time,
							skus1,
							skus2,
							skus3,
							log_time,
							ou_id,
							is_system,
							sku_qty
						)
					select 
						:psId,
						sta_total_sku_qty,
						exp_time,
						create_time,
						skus1,
						skus2,
						skus3,
						sysdate,
						ou_id,
						is_system,
						sku_qty 
					from t_wh_package_sku where id =:psId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findIfExistsStaNotPick" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_sta where package_sku_id =:psId and (status = 1 or status = 20) and picking_list_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiInventorySnapshotData.findGdvInventoryData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
      select     distinct
                          d.inventory_status as inventoryStatusId,
                          d.source,
                          d.warehouse,
                          d.file_name fileName, 
                          d.upc,
                          nvl(b.onhandQty,0)-nvl(a.quantity,0) onhandQty
                   from T_VMI_INV_SNAPSHOT_DATA d
                   left join (
                              select sum(t.quantity) quantity,
                                     s.bar_code,
                                     t.status_id 
                              from T_WH_SKU_INVENTORY t
                   join t_bi_inv_sku s on (s.id=t.sku_id)
                   where  t.ou_id=:ouid and t.status_id is not null group by s.bar_code,t.status_id ) a on (d.upc=a.bar_code and d.inventory_status=a.status_id)
                   left join (
                    select
                          d.inventory_status as inventoryStatusId,
                          d.source,
                          d.warehouse,
                          d.file_name fileName, 
                          d.upc,
                          sum(d.onhand_qty) onhandQty
                   from T_VMI_INV_SNAPSHOT_DATA d
                   where  d.vmi_status=1 and d.file_name=:fileName and d.warehouse=:source
                     group by 
                          d.inventory_status,
                          d.source,
                          d.warehouse,
                          d.file_name, 
                          d.upc
                   ) b on (b.upc=d.upc and d.inventory_status=b.inventoryStatusId)
                     where  b.onhandQty-nvl(a.quantity,0)!=0 and d.vmi_status=1 and d.file_name=:fileName and d.warehouse=:source 
                     
        ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiInventorySnapshotData.updategdvVmiInventoryStaCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
         update T_VMI_INV_SNAPSHOT_DATA t set 
            #if($vmistatus)
            t.vmi_status=:vmistatus,
          #end
               t.sta_code=:staCode
             where t.upc=:upc and t.file_name=:fileName and t.warehouse=:source
        ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findBatchCodeByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              select sl.batch_code,
              		 sl.inbound_time,
                     sl.sku_id,
                     sl.staline_id,
                     sl.inv_status_id
              from t_wh_stv_line sl,             
                   t_wh_stv stv,
                   t_wh_sta sta
              where
                   stv.id = sl.stv_id
              and
                   stv.sta_id = sta.id
              and stv.direction = 2
              and sta.id = :staId

                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="OutBoundPack.deleteInfoByStaAndPackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				delete from T_WH_OUTBOUND_PACK where tracking_no in (
					select pi.tracking_no from t_wh_package_info pi where pi.sta_delivery_info_id = :staId and pi.status = :status)
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[    select inv.*,sta.code,stal.quantity as qty,stal.owner
							  from t_wh_sku_inventory inv,
							    t_wh_inventory_status ss,
							    t_wh_location loc,
							    t_wh_district dis,
							    t_wh_sta sta,
							    t_wh_sta_line stal
							  where inv.status_id = ss.id
							    and loc.id = inv.location_id
							    and dis.id=loc.district_id
							    and dis.type != 5
							    and sta.main_wh_id = inv.ou_id
							    and sta.id=stal.sta_id
							    and stal.owner = inv.inv_owner
							    and stal.sku_id = inv.sku_id
							    and stal.inv_status_id = inv.status_id
							    and nvl(loc.is_locked,0) = 0
							    and loc.IS_AVAILABLE = 1
							    and (inv.occupation_code is null or inv.occupation_code = '')
							    and sta.id = :staid
							    and  loc.code= :locationid
							    and inv.sku_id = :skuid
							    and inv.quantity > 0
							  order by inv.sku_id,inv.location_id,inv.status_id,inv.inv_owner,inv.batch_code
							  for update
	               ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findInventorycontrast" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[    select sum(quantity) from t_wh_sku_inventory where occupation_code = :code
	               ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findInventorysum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[    select sum(stal.quantity) 
							  from t_wh_sku_inventory inv,
							    t_wh_inventory_status ss,
							    t_wh_location loc,
							    t_wh_district dis,
							    t_wh_sta sta,
							    t_wh_sta_line stal
							  where inv.status_id = ss.id
							    and loc.id = inv.location_id
							    and dis.id=loc.district_id
							    and dis.type != 5
							    and sta.main_wh_id = inv.ou_id
							    and sta.id=stal.sta_id
							    and stal.owner = inv.inv_owner
							    and stal.sku_id = inv.sku_id
							    and stal.inv_status_id = inv.status_id
							    and nvl(loc.is_locked,0) = 0
							    and loc.IS_AVAILABLE = 1
							    and (inv.occupation_code is null or inv.occupation_code = '')
							    and sta.id = :staid
							    and loc.code = :locationid
							    and inv.sku_id = :skuid
							    and inv.quantity > 0
							  order by inv.sku_id,inv.location_id,inv.status_id,inv.inv_owner,inv.batch_code
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.getSingleCheckOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					pl.plan_sku_qty as planSkuQty,
					pl.is_postposition_packing_page as isPostpositionPackingPage,
					pl.is_postposition_express_bill as isPostpositionExpressBill,
					pl.is_bk_check as isBkCheckInteger 
				from 
					t_wh_sta_picking_list pl
				where 
                    pl.check_mode = :checkMode
                    and pl.status in(
	                    #foreach($status in $statusList)
	                    	$status,
	                    #end
	                    -1
                    )
                    and pl.code = :code
					#if($ouId)
                    	and pl.wh_id=:ouId
					#else
						and pl.wh_id in (
							#foreach($id in $ouList)
								$id,
							#end
							-1
						)
					#end 
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findForOccupyInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				select inv.*, stal.quantity as planOccupyQty,inv.inv_owner as owner,inv.status_id statusId,stal.EXPIRE_DATE expDate
                  from t_wh_sku_inventory inv, t_wh_location l,T_WH_DISTRICT wd,t_wh_sta sta,
                  (
                    select l.sku_id,l.sta_id,l.inv_status_id,l.expire_date,sum(l.quantity) as quantity 
                    from t_wh_sta_line l where l.sta_id = :id group by l.sku_id,l.sta_id,l.inv_status_id,l.expire_date
                  ) stal
                  where inv.location_id = l.id
                      and inv.quantity > 0
                      and(
                      	stal.expire_date is null or (stal.expire_date is not null and inv.expire_date = stal.expire_date)
                      )
                      and l.DISTRICT_ID= wd.id
                      and wd.ou_id = sta.main_wh_id
                      and wd.type<>:type
                      and sta.id = stal.sta_id
                      and sta.id = :id
                      and stal.sku_id = inv.sku_id
                      and stal.inv_status_id = inv.status_id
                      and inv.inv_owner = sta.owner
                      and inv.ou_id = sta.main_wh_id
                      and l.is_available = 1
                      and nvl(l.is_locked,0)=0
                      and (inv.occupation_code is null or inv.occupation_code = '')
                      #if($code)
                      and exists(select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
                            where lt.location_id = l.id and lt.transtype_id = tt.id
			                      and tt.code = :code)
			          #end
			          order by inv.sku_id,inv.expire_date,inv.status_id,inv.batch_code 
			         for update of inv.id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findForOccupyInventoryCommon" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				 select inv.*,sta.code,stvl.quantity as planOccupyQty,inv.location_id as locationId,inv.inv_owner as owner,inv.status_id statusId,stvl.EXPIRE_DATE expDate
  					from t_wh_sku_inventory inv,t_wh_inventory_status ss,t_wh_district dis,t_wh_location loc,t_wh_sta sta,t_wh_stv stv,t_wh_stv_line stvl
  					where inv.status_id = ss.id
  						and inv.quantity > 0
                      	and(
                      		stvl.expire_date is null or (stvl.expire_date is not null and inv.expire_date = stvl.expire_date)
                      		)
        				and loc.id = inv.location_id
        				and sta.main_wh_id = inv.ou_id
        				and loc.IS_AVAILABLE = 1
        				and nvl(loc.is_locked,0) = 0
        				and dis.id=loc.DISTRICT_ID
        				#if($type)
        				and dis.type<>:type
        				#end
        				and (inv.occupation_code is null or inv.occupation_code = '')
        				and stvl.owner = inv.inv_owner
        				and stv.sta_id = sta.id
        				and stvl.stv_id = stv.id
        				and stvl.sku_id = inv.sku_id
       					and stvl.location_id = inv.location_id
       					and stvl.inv_status_id = inv.status_id
        				and sta.id = :id
                      	#if($code)
                      		and exists(select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
                            	where lt.location_id = l.id and lt.transtype_id = tt.id
			                      and tt.code = :code)
			          	#end
			            order by inv.sku_id,inv.status_id,inv.batch_code,inv.expire_date
			         for update of inv.id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findForOccupyInventoryCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
select inv.*, stvl.quantity as planOccupyQty,inv.inv_owner as owner,inv.status_id statusId,stvl.EXPIRE_DATE expDate,inv.location_id as locationId
from t_wh_sku_inventory inv, t_wh_location l,t_wh_stv stv,t_wh_stv_line stvl,t_bi_inv_sku sku
where 
inv.location_id = l.id
and inv.quantity > 0
and inv.ou_id=stv.wh_id
and inv.sku_id = stvl.sku_id
and inv.sku_id=sku.id
and (stvl.location_id is null or inv.location_id = stvl.location_id)
and (stvl.expire_date is null or stvl.expire_date = inv.expire_date)
and inv.location_id = l.id
and (stvl.owner is null or stvl.owner=inv.inv_owner)
and inv.status_id = stvl.inv_status_id
and (inv.occupation_code is null or inv.occupation_code = '')
and stvl.stv_id = stv.id
and stv.sta_id=:staId
and stv.direction=2
and ((sku.store_mode = 33 and inv.expire_date=stvl.expire_date) or sku.store_mode != 33)
order by inv.sku_id,inv.status_id,inv.location_id,inv.expire_date,inv.batch_code,inv.expire_date
for update of inv.id
  			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSalesQtyByOuAndOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				select 
  					v.sales_avail_qty salesQty,sku.ext_code1 extensionCode1,sku.code code
  				from 
					v_wh_inventory_summary v,
					t_bi_inv_sku sku
				where
					sku.code = :skuCode
					and sku.id = v.SKU_ID
					and v.WH_OUID = :ouId
					and v.OWNER = :owner 
  			]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Sku.summaryInventoryToEmail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				
  				select au.name as auName,sku.code,sku.bar_code,channel.name AS owner,t.sales_avail_qty AS salesQty,
  				t.WH_OUID as ouId,t.SKU_ID AS skuId,t.OWNER AS ownerCode,w.vmi_code as vmiCode  
  				
  				from wms.v_wh_inventory_summary t  
  				left join t_au_operation_unit au on au.id=t.WH_OUID
  				left join t_bi_warehouse w on w.ou_id=au.id
  				left join t_bi_inv_sku sku on sku.id=t.SKU_ID
  				left join t_bi_channel channel on channel.code=t.OWNER
  				
  				where t.sales_avail_qty<0
  				
  			]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="InventoryStatus.findInvStatusByIdAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				select id from T_WH_INVENTORY_STATUS where id in (
  				#foreach($invId in $idList)
  					$invId,
  				#end
  				-1)
  				and ou_id = :id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ChannelWhRef.getShopInfoByWarehouseAndShopCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
				select code
				  from t_bi_channel info, t_bi_channel_wh_ref reff
				 where info.code = :shopCode
				   and info.id = reff.channel_id
				   and reff.wh_ou_id = :ouId
  			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findOutBoundStvLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
      select sl.quantity,sl.sku_id skuId,sl.batch_code,sl.inv_status_id intInvstatus,sl.inbound_time,sl.owner
      from 
      			t_wh_stv_line sl,
                t_wh_stv stv,
               	t_wh_sta sta
       where sta.id = :staId
       and stv.direction = 2
       and sta.id = stv.sta_id
       and sl.stv_id = stv.id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.getFinishedStvLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select 
                sku.id as skuId,
                shop.code as owner,
                sum(line.quantity) quantity,
                line.wh_id ouId,
                sku.code skuCode,
                line.batch_code batchCode,
                line.inv_status_id intInvstatus,
                sts.name as intInvstatusName,
                whou.code as oucode,
                line.direction directionInt,
                case when sts.is_forsale = 1 and w.op_mode = 1 then 1 else 0 end as marketAbility
          from 
            t_wh_stv_line line,t_bi_inv_sku sku,t_wh_stv stv,t_bi_channel shop ,t_wh_inventory_status sts,t_au_operation_unit whou,t_bi_warehouse w
          where
                   stv.sta_id = :staId
            and line.stv_id = stv.id
            and stv.status = 10 
                  and line.wh_id = whou.id
            and sku.id = line.sku_id 
                  and sts.id = line.inv_status_id
            and shop.code = line.owner
            and w.ou_id = whou.id
          group by(line.wh_id,sku.code,line.batch_code,line.inv_status_id,line.direction,whou.code,shop.code,sts.name,sku.id,sts.is_forsale,w.op_mode)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.getPackageInfoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						id,
						lpcode,
						tracking_no,
						weight 
					from 
						t_wh_package_info  
					where 
						sta_delivery_info_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据交接清单头id查询出包裹信息  -->
	<bean id="PackageInfo.findPgByHoId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT p.id,p.weight FROM T_WH_STA_HO_LIST_LINE line LEFT JOIN T_WH_PACKAGE_INFO p  ON line.id=p.ho_list_line_id 
					WHERE line.HO_LIST_ID=:hoId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据交接清单头id查询出包裹Comman信息  -->
	<bean id="PackageInfo.findPgCommandByHoIdOrStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT p.id,p.weight,p.status as pgStatus,p.sta_delivery_info_id as staId  FROM T_WH_STA_HO_LIST_LINE line LEFT JOIN T_WH_PACKAGE_INFO p  ON line.id=p.ho_list_line_id 
					WHERE 1=1 
					#if($hoId)
					and	line.HO_LIST_ID=:hoId
					#end
					#if($staId)
					and	p.sta_delivery_info_id=:staId
					#end
					and p.sta_delivery_info_id is not null and (p.is_handover <> 0 or p.is_handover is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据Staid查询出包裹Comman信息  -->
	<bean id="PackageInfo.findPgCommandByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT p.id,p.weight,p.status as pgStatus,p.sta_delivery_info_id as staId  FROM T_WH_PACKAGE_INFO p
					WHERE 1=1
					and	p.sta_delivery_info_id=:staId
					and p.sta_delivery_info_id is not null and (p.is_handover <> 0 or p.is_handover is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据交接清单行id查询出包裹信息  -->
	<bean id="PackageInfo.findPgByLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			SELECT p.id,p.weight FROM T_WH_STA_HO_LIST_LINE line LEFT JOIN T_WH_PACKAGE_INFO p  ON line.id=p.ho_list_line_id 
			WHERE line.ID=:lineId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.getDetailByInventoryCheckId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
  sku.code skuCode,
  sl.batch_code batchCode,
  invSta.Name as invStatus,
  sum(sl.quantity) quantity,
  info.code as owner,
  wh.code as whouCode,
  sl.direction intDirection,
  case when invSta.Is_Forsale = 1 and w.op_mode = 1 then 1 else 0 end as marketAbility
from 
  t_wh_st_log sl,
  t_bi_channel info,
  t_bi_inv_sku sku,
  t_au_operation_unit wh,
  t_bi_warehouse w,
  t_wh_inventory_status invSta
where
  sl.inventory_check_id =:invId
  and wh.id=sl.wh_id
  and wh.id = w.ou_id
  and invSta.id = sl.invs_tatus_id
  and sl.owner = info.code
  and sl.sku_id = sku.id
  #if("$!flag"=="true")
  	and sl.tran_time > sysdate-90
  #end
group by(sku.code,sl.batch_code,invSta.Name,wh.code,info.code,sl.direction,invSta.Is_Forsale,w.op_mode)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findByInnerShopCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select stal.owner from t_wh_sta sta ,t_wh_sta_line stal
					where sta.id = stal.sta_id
					and   sta.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findByInnerShopCode2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select stvl.owner from t_wh_sta sta ,t_wh_stv stv,t_wh_stv_line stvl
					where sta.id = stv.sta_id and stv.id = stvl.stv_id
					and sta.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean
		id="InventoryCheckDifferenceLine.getDifferentDetailByInventoryCheckId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
          select 
            sum(line.quantity) quantity,
            au.code ouCode,
            line.owner owner,
            sku.code skuCode
          from 
              T_WH_INV_CHECK_DIF_LINE line,
              t_bi_inv_sku sku,
              t_au_operation_unit au,
              T_WH_INV_CHECK ic
          where
            ic.id = :invId
            and line.inv_check_id = ic.id
            and au.id = ic.ou_id
            and sku.id = line.sku_id
            group by sku.code,owner,au.code
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheckDifferenceLine.deleteOutDifferentLineById"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from T_WH_INV_CHECK_DIF_LINE where inv_check_id = :invId and quantity<0 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheckDifferenceLine.reCreateOutDifferentLineById"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into 
						T_WH_INV_CHECK_DIF_LINE(id,quantity,version,DISTRICT_ID,INV_CHECK_ID,Location_Id,Sku_Id,Status_Id,owner,sku_cost)
					select 
						S_T_WH_INV_CHECK_DIF_LINE.Nextval,
						-qty,
						0,
						districtId,
						:invId,
						locId,
						skuId,
						statusId,
						invOwner,
						skuCost
					from(
						select 
						   occupation_code occupationCode,
						   inv_owner invOwner,
						   sum(quantity) qty,
						   sku_cost skuCost,
						   district_id districtId,
						   location_id locId,
						   sku_id skuId,
						   status_id statusId 
						from t_wh_sku_inventory
						     where occupation_code = :code
						group by(occupation_code,inv_owner,sku_cost,district_id,location_id,sku_id,status_id)
					) where occupationCode = :code
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheck.updateStatusByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_INV_CHECK set status = 8 where code =:code
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheck.updateStatusByCodeAndStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_INV_CHECK set status =:status where code =:code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.sendSOOutboundOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							       t.sta_type,
							       t.batch_id,
							       t.version,
							       t.type,
							       t.zipcode,
							       nvl(t.transfer_fee,0) as transferFee,
							       t.totalactual,
							       t.telephone,
							       t.sta_code,
							       t.sourcewh,
							       t.source,
							       t.remark,
							       t.receiver,
							       t.province,
							       t.mobile,
							       t.lpcode,   
							       t.district,
							       t.country,
							       t.city,
							       t.address,
							       t.shop_id shopId,
							       t.outer_order_code as outerOrderCode,
                                   t.order_cratedate as orderCrateDate,
                                   t.is_cod_order,
                                   t.member_email,
                                   t.slip_code slipCode,
                                   t.payment_type paymentType,
							       t.id,
							       t.trans_no,
							       t.cod_amount CodAmount,
                                   t.sf_city_code,
							       t.user_id userId
							         from t_wh_msg_outbound_order t
                 where 
					#if($struts==1)
						(t.STATUS=0 or t.STATUS=1)
					#else
						t.status=:struts
					#end
					#if($sourceWH)
						and t.sourcewh = :sourceWH
					#end
					and t.source = :source
					and (t.is_locked = 0 or t.is_locked is null)
					and t.sta_type in(21,22,25,42)
					and rownum <=50
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.sendSOOutboundOrderAfreshs" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    update T_WH_MSG_OUTBOUND_ORDER o set o.status=0,o.batch_id='' where o.batch_id=:batchId and o.status=5 and o.source=:sourceWH
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronous.findIdsInvSynByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    select s.* from T_IDS_INV_SYNCHRONOUS s where s.sta_code is null and s.status in (1,0,-1)  and s.source=:source  
				    and s.it_rtype=:itRtype and (s.ERROR_COUNT<5 or s.ERROR_COUNT is null) and (s.NEXT_EXECUTE_TIME is null or s.NEXT_EXECUTE_TIME<=sysdate) order by s.id asc
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronous.findIdsInvSyn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    select s.* from T_IDS_INV_SYNCHRONOUS s where s.sta_code is null and s.status in (1,0,-1)  and s.source=:source and s.it_rtype!='REC'
				    and (s.ERROR_COUNT<5 or s.ERROR_COUNT is null) and (s.NEXT_EXECUTE_TIME is null or s.NEXT_EXECUTE_TIME<=sysdate) order by s.id asc
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronous.updateMsgStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				   update T_IDS_INV_SYNCHRONOUS s  set s.status=:status ,s.remark=:remark where s.id=:msgid
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findStvLineWithBatchCodeAndInboundTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
				        line.inbound_time inBoundTime,
				        line.batch_code batchCode,
				        sum(decode(line.direction,2,line.quantity,line.quantity*-1)) as quantity,
				        line.owner owner,
				        line.inv_status_id intInvstatus,
				        line.sku_id skuId
					from 
						t_wh_stv stv,
						t_wh_stv_line line,t_wh_sta sta
					where 
						stv.sta_id = sta.id
						and line.stv_id = stv.id
						#if($staId)
						and sta.id = :staId
						#end
						#if($slipCode1)
						and sta.slip_code1 =:slipCode1 and sta.status = 10
						#end
						and sta.create_time>sysdate-300
					group by(line.inbound_time,line.batch_code,line.owner,line.inv_status_id,line.sku_id)
					having(sum(decode(line.direction,2,line.quantity,line.quantity*-1))>0)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findStvLineBatchCodeAndInboundTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						line.inbound_time inBoundTime,
						line.batch_code batchCode,
						line.production_date,
						line.valid_date,
						line.expire_date,
						decode(sku.store_mode,33,to_char(line.expire_date,'yyyyMMdd'),'') as strExpireDate,
						sum(decode(line.direction,2,line.quantity,line.quantity*-1)) as quantity,
						line.owner owner,
						line.inv_status_id intInvstatus,
						sku.code as skuCode,
						line.sku_id skuId
					from 
						t_wh_stv stv,
						t_wh_stv_line line,
						t_bi_inv_sku sku,
						t_wh_sta sta
					where 
						stv.sta_id = sta.id
						and sku.id=line.sku_id
						and line.stv_id = stv.id
						#if($staId)
						and sta.id = :staId
						#end
						#if($slipCode1)
						and sta.slip_code1 =:slipCode1 and sta.status = 10
						#end
						-- and sta.create_time>sysdate-300
					group by(line.inbound_time,line.batch_code,line.production_date,line.valid_date,line.expire_date,line.owner,line.inv_status_id,line.sku_id,sku.code,sku.store_mode)
					having(sum(decode(line.direction,2,line.quantity,line.quantity*-1))>0)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.getAllFinishedSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						l.sku_id skuId,
						l.owner owner,
						sum(l.quantity) quantity,
						l.inv_status_id intInvstatus
					from 
						t_wh_stv_line l,t_wh_stv s 
					where 
						s.sta_id = :staId
						and l.stv_id = s.id
						and s.status = 10
						and s.direction = 1
						group by(l.sku_id,l.owner,l.inv_status_id)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronousLine.findInvSynLineById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.sku,l.host_whcode hostWHCode,sum(l.qty) qty from T_IDS_INV_SYNCHRONOUS_LINE l where l.ids_inv_syn_id=:invId  group by l.sku,l.host_whcode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronous.updateMsgStaById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_IDS_INV_SYNCHRONOUS s  set s.status=:status,s.sta_code=:staCode where s.id=:msgid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronous.updateMsgStaById2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_IDS_INV_SYNCHRONOUS s  set s.is_send=1 where s.id=:msgid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronousLine.findOutInvSynLineById"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	      <![CDATA[
	       select c.host_whcode hostWHCode,sum(c.qty) qty,c.sku from T_IDS_INV_SYNCHRONOUS_LINE c where c.ids_inv_syn_id=:invSynId and c.qty<0
           group by c.host_whcode,c.sku
	      ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronousLine.findinInvSynLineById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	      <![CDATA[
	       select c.host_whcode hostWHCode,sum(c.qty) qty,c.sku from T_IDS_INV_SYNCHRONOUS_LINE c where c.ids_inv_syn_id=:invSynId and c.qty>0
           group by c.host_whcode,c.sku
	      ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AeoSkuMasterInfo.findMasterDataListByBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	      <![CDATA[
                    select  
                	        d.id,
                	        d.color,
                	        d.aeo_size as "size",
                	        d.list_price,
                	        d.brand as brandCode,
                            2 as salesModel,
                	        substr(color_size,1,instr(color_size,'-',1,1)-1)||'_'||substr(color_size,instr(color_size,'-',1,2)+1,instr(color_size,'-',1,3)-instr(color_size,'-',1,2)-1) as supplierCode,
                            trim(d.barcode) as barCode,
                            trim(d.upc) as extensionCode1,
                            trim(d.upc) as extensionCode2,
                            d.enName name,
                            d.enName enName
                    from T_AEO_SKU_MASTER d
                    where  d.upc=:upc
	      ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GiftLine.findGiftBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
g.id,
g.memo,
g.type as intType,
g.san_card_code as sanCardCode,
g.sta_line_id as staLineId
from t_wh_sta_line l,t_wh_gift_line g 
where g.sta_line_id= l.id 
and l.sta_id=:staId
#if($giftType)
and g.type = :giftType
and g.san_card_code is null
#end
order by g.sta_line_id,g.type,g.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="GiftLine.findGiftByStaLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
g.id,
g.memo,
g.type as intType,
g.san_card_code as sanCardCode,
g.sta_line_id as staLineId
from t_wh_gift_line g 
where g.sta_line_id =:staLineId
#if($giftType)
and g.type = :giftType
and g.san_card_code is null
#end
and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	

	<bean id="GiftLine.findGiftByStaAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
g.id,
g.memo,
g.type as intType,
g.san_card_code as sanCardCode,
sku.code as skuCode
from t_wh_sta_line l,t_wh_gift_line g,t_bi_inv_sku sku
where 
g.sta_line_id= l.id
and sku.id=l.sku_id
and g.san_card_code is not null 
and l.sta_id=:staId 
and g.type=:giftType
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GiftLine.updateSanCardCodeById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
update t_wh_gift_line g set g.san_card_code =:sanCardCode  where g.id=:glId
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="GiftLine.deleteGiftLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
delete from t_wh_gift_line l where l.sta_line_id in (select stal.id from t_wh_sta_line stal where stal.sta_id=:staId)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.getPlanStaLineBySkuIdAndStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					    temp.skuId skuId,
					    sum(temp.quantity) quantity 
					from (       
						select 
						   sl.sku_id skuId,
						   sum(sl.quantity) quantity
						from 
						   t_wh_sta_line sl,
						   t_wh_sta sta
						where 
						   sta.code = :staCode 
						   and sl.sta_id = sta.id 
						   and sl.sku_id = :skuId
						group by sl.sku_id
						union
						select 
						   ccl.sku_id skuId,
						   -sum(ccl.qty) quantity
						from
						    t_wh_carton cc,
						    t_wh_carton_line ccl,
						    t_wh_sta sta
						where
							sta.code = :staCode
							and cc.sta_id = sta.id
							and ccl.carton_id = cc.id
							and ccl.sku_id = :skuId
						group by ccl.sku_id
					)temp 
					group by temp.skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.getPartStaLineBySkuIdAndStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					    temp.skuId skuId,
					    sum(temp.quantity) quantity 
					from (       
						select 
						   sl.sku_id skuId,
						   sum(sl.quantity) quantity
						from 
						   t_wh_stv_line sl,
						   t_wh_stv ws,
						   t_wh_sta sta
						where 
						   sta.code = :staCode 
						   and sl.stv_id = ws.id 
               			   and ws.sta_id = sta.id 
						   and sl.sku_id = :skuId
						   and ws.status!=0
						group by sl.sku_id
						union
						select 
						   ccl.sku_id skuId,
						   -sum(ccl.qty) quantity
						from
						    t_wh_carton cc,
						    t_wh_carton_line ccl,
						    t_wh_sta sta
						where
							sta.code = :staCode
							and cc.sta_id = sta.id
							and ccl.carton_id = cc.id
							and ccl.sku_id = :skuId
						group by ccl.sku_id
					)temp 
					group by temp.skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.deleteLineById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_stv_line where stv_id = (select id from t_wh_stv where sta_id = :staId and direction = 2)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.queryBatchcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_t_wh_q_sta_batchcode.nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.updateQueuesta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				   update t_wh_q_sta set batch_code= :batchcode where id in (select id from 
				    (select id from t_wh_q_sta where main_wh_ou_id = :ouid and batch_code is null order by addowner) where rownum<= :num)
				  ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaSpecialExecute.findStaSpecialByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
select sse.id,sse.type as int_Type,sse.sta_id,sse.memo
from T_WH_STA_SPECIAL_EXECUTE sse where sse.sta_id=:staId 
#if($type)
and sse.type=:type 
#end
order by sse.type

  			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="QueueStaDeliveryInfo.queryDeliveryInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				 select * from t_wh_q_sta_delivery_info 
  				 where id in (select delivery_id from t_wh_q_sta where id= :staid)
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaDeliveryInfo.cleanDataByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				delete t_wh_q_sta_delivery_info where id=:id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueGiftLine.getByfindQstaline" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				 select * from t_wh_q_gift_line where q_sta_line_id= :lineid
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="OperationUnit.findWarehouseByIsVMIWh" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
select au.id
from t_au_operation_unit au,t_au_operation_unit_type tp,t_bi_warehouse wh
where au.ou_type_id = tp.id
and wh.ou_id = au.id
and au.is_available = 1
and tp.name = 'Warehouse'
and wh.vmi_source is null
#if("$!isAutoWh"=="true")
and exists (select * from T_WH_AUTO_PL_CONFIG t where t.wh_ou_id = au.id and t.status = 1)
#else
and not exists (select * from T_WH_AUTO_PL_CONFIG t where t.wh_ou_id = au.id and t.status = 1)
#end 
  			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="OperationUnit.findAlvailableWarehouseOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  
			 		 select au.id
			          from t_au_operation_unit au,t_au_operation_unit_type tp,t_bi_warehouse wh
			          where au.ou_type_id = tp.id
					      and wh.ou_id = au.id
					      and au.is_available = 1
					      and tp.name = 'Warehouse'
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="OperationUnit.findAlvailableWarehouseOuIdDetial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  
			 		 select au.id
			          from t_au_operation_unit au,t_au_operation_unit_type tp,t_bi_warehouse wh
			          where au.ou_type_id = tp.id
					      and wh.ou_id = au.id
					      and au.is_available = 1
					      and (wh.is_singel_to_wh_task is null or wh.is_singel_to_wh_task =0)
					      and tp.name = 'Warehouse'
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.updateQstaBatchCodeByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  update t_wh_q_sta qsta set qsta.batch_code = :barchCode where qsta.main_wh_ou_id=:ouid and qsta.batch_code is null 
  				  and qsta.type = 21 and qsta.addowner is null and channel_list = :channelList and rownum<= :num
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.updateQstaBatchCodeByOuid1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  update t_wh_q_sta qsta set qsta.batch_code = :barchCode where qsta.main_wh_ou_id=:ouid and qsta.batch_code is null 
  				  and qsta.type = 21 and qsta.addowner is null and channel_list is null and rownum<= :num
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.updateQstaBatchCodeByOuidOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  update t_wh_q_sta qsta set qsta.batch_code = :barchCode where qsta.main_wh_ou_id=:ouid and qsta.batch_code is null 
  				  and rownum<= :num and type = 21 and addowner is not null and channel_list = :channelList
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.updateQstaBatchCodeByOuidOutOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  update t_wh_q_sta qsta set qsta.batch_code = :barchCode where qsta.main_wh_ou_id=:ouid and qsta.batch_code is null 
  				  and rownum<= :num and (type = 41 or type=42) and channel_list = :channelList
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.finbByStaOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select * from t_wh_q_sta where main_wh_ou_id= :ouid and batch_code is null
  			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="QueueSta.findBatchCodeByOuidDetial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  			<![CDATA[
	  				  select batch_code from t_wh_q_sta qs where qs.main_wh_ou_id = :ouid and qs.error_count <5 and type=21 and add_wh_ou_id is null and OWNER!='Hollisterco官方旗舰店'    and qs.addowner is null  group by batch_code 
	  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findBatchCodeByOuidDetial1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  			<![CDATA[
	  				  select batch_code
						  from t_wh_q_sta qs
						 where qs.main_wh_ou_id = :ouid
						   and qs.error_count < 5
						   and type = 21
						   and (add_wh_ou_id is not null or OWNER = 'Hollisterco官方旗舰店' or
						       qs.addowner is not null)
						 group by batch_code 
	  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findBatchCodeByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select batch_code from t_wh_q_sta qs where qs.main_wh_ou_id = :ouid and qs.error_count <5 group by batch_code 
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findSetFlagByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select id from t_wh_q_sta q where q.main_wh_ou_id=:ouId and q.begin_flag=1 and  q.can_flag is null  order by create_time asc
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findBatchCodeByOuidDetial2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select batch_code from t_wh_q_sta qs where qs.main_wh_ou_id = :ouid and qs.error_count <5 and type!=21 group by batch_code 
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaLine.queryStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				   select qli.id,qli.sku_code,qli.qty,qli.total_actual,qli.order_total_actual,qli.list_price,qli.unit_price,qli.direction,qli.owner,qli.inv_status_id,qli.q_sta_id,qli.order_total_actual,qli.list_price,
                qli.line_type lineType,qli.line_status lineStatus,qli.skuname,qli.order_total_bf_discount from t_wh_q_sta_line qli where qli.q_sta_id= :qstaId
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaLineOwner.queryStaLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select * from t_wh_q_sta_line_owner where q_sta_line_id=:qstaLineId
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaLineOwner.lineOwnerDelete" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  delete t_wh_q_sta_line_owner where id=:id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaLineStockout.queryStaLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select * from t_wh_q_sta_line_stockout where q_sta_line_id=:qstaLineId
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaLineStockout.lineStockoutDelete" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  delete t_wh_q_sta_line_stockout where id=:id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaInvoice.findByQstaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select * from t_wh_q_sta_invoice where q_sta_id= :qstaId
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaInvoice.cleanDataByInvoiceId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  delete t_wh_q_sta_invoice where id= :id
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.getMaxTransactionTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  				  select max(tlog.tran_time) from t_wh_sta sta, t_wh_stv stv, t_wh_st_log tlog
                      where sta.id = stv.sta_id
                      and stv.id = tlog.stv_id
                      and tlog.tran_time>sysdate-30
                      and sta.id = :staId
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findErrorSkuVmiReturn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select code,sum(qty) id from (
						select 
							sku.code code,-line.quantity qty 
						from 
							t_wh_sta_line line,t_bi_inv_sku sku 
						where 
							line.sta_id = :staId and line.sku_id = sku.id
					union all
						select 
							sku_code code,
							qty qty 
						from 
							t_wh_msg_rtn_outbound_line 
						where msg_outbound_id = :msgId
					)group by code having sum(qty)<>0
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaInvoice.findByStaPlid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					inv.invoice_date,
					inv.payer,
					inv.item item_1,
					inv.unit_price unit_price_1,
					inv.qty qty_1,
					inv.amt amt_1,
					inv.memo,
					inv.payee,
					inv.drawer 
					from t_wh_sta sta inner join t_wh_sta_invoice inv on sta.id = inv.sta_id 
					where sta.picking_list_id= :plId
					and (inv.execute_count is null or inv.execute_count = 0)
					order by sta.pg_index
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaInvoice.findByStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.* from t_wh_sta_invoice t where t.sta_id= :staId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuCategories.findSkuCategoriesByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select max(id) id from t_ma_sku_categories where sku_categories_name=:name
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.updateOccupyByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sku_inventory set occupation_code = null,is_occupied = null where occupation_code = :invCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.getErrorSkuSfRtn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select sum(dd.qty) id,dd.code code from (
						select line.quantity qty,sku.code code
						from t_wh_sta_line line,t_bi_inv_sku sku,t_ma_sku pro where 
						line.sta_id = :staId and line.sku_id = sku.id and sku.product_id = pro.id and pro.is_sn_sku = 1
						union
						select -count(sn.sn) qty,line.sku_code code 
						from t_wh_msg_rtn_outbound ot,T_WH_MSG_RTN_SN_DETAIL sn,T_RTN_CONTAINER_LINE line,t_wh_sta sta 
						where sta.id = :staId and ot.sta_code = sta.code and
						line.msg_rtn_outbound_id = ot.id and sn.out_line_id = line.id group by line.sku_code
					)dd group by dd.code having sum(dd.qty)<>0
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findErrorInboundSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						line.sku_id,line.qty,count(de.sn) 
					from 
						t_wh_msg_rtn_inbound_line line,
						T_WH_MSG_RTN_SN_DETAIL de,
						t_bi_inv_sku sku 
					where 
						line.msg_rtn_inorder_id=:inId 
						and de.in_line_id(+) = line.id 
						and line.sku_id = sku.id 
						--and sku.product_id = pro.id
						and sku.is_sn_sku = 1 
					group by line.sku_id,line.qty having line.qty<>count(de.sn) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.getErrorSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						line.sku_code batchCode,sn.sn sn
					from 
						T_WH_MSG_RTN_SN_DETAIL sn,
						T_RTN_CONTAINER_LINE line,
						t_wh_msg_rtn_outbound ot,
						t_wh_sta sta,
						t_bi_inv_sku sku
					where 
						sta.id = :staId 
						and ot.sta_code = sta.code 
						and line.msg_rtn_outbound_id = ot.id 
						and sn.out_line_id = line.id 
						and line.sku_code = sku.code
						and not exists (select 1 from t_wh_sku_sn ss where ss.sn = sn.sn and ss.status = 5 and ss.sku_id = sku.id and ss.ou_id = sta.main_wh_id) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.batchUpdateSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 update t_wh_sku_sn ss set status = 1, stv_id = (select stv.id from t_wh_stv stv where stv.sta_id = :staId and  stv.direction =2)
					 where exists (
					 	select 1 from 
					 		T_WH_MSG_RTN_SN_DETAIL sn,
					 		T_RTN_CONTAINER_LINE line,
							t_wh_msg_rtn_outbound ot,
							t_wh_sta sta
						where sta.id = :staId
						and ot.sta_code = sta.code 
						and line.msg_rtn_outbound_id = ot.id 
						and sn.out_line_id = line.id 
						and sn.sn = ss.sn
					) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.batchInsertSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into 
						t_wh_sku_sn(id,stv_id,ou_id,batch_code,status,sku_id,sn)
					select 
						s_t_wh_sku_sn.nextval,:stvId,:ouId,:bc,5,line.sku_id,de.sn
					from 
						t_wh_msg_rtn_inbound_line line,T_WH_MSG_RTN_SN_DETAIL de,t_bi_inv_sku sku 
					where 
						line.msg_rtn_inorder_id = :inId and de.in_line_id = line.id and line.sku_id = sku.id  and sku.is_sn_sku = 1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnLog.createInboundLogByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                      INSERT INTO T_WH_SKU_SN_LOG (ID, DIRECTION, OU_ID, SKU_ID, SN, STV_ID,TRANSACTION_TIME,BATCH_CODE,Sku_Cost) 
		           select S_T_WH_SKU_SN_LOG.nextval,1,sn.OU_ID,sn.SKU_ID,sn.SN,sn.STV_ID,sysdate,sn.batch_code,l.sku_cost
		             from T_WH_SKU_SN sn,(select stv_id,sku_id,max(sku_cost) as sku_cost from t_wh_stv_line group by stv_id,sku_id) l
		             where sn.STV_ID=:stvId
	                   and l.stv_id = sn.STV_ID
	                   and sn.sku_id = l.sku_id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.getIsSnById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			              select max(nvl(sku.is_sn_sku,0))
			              from t_wh_sta_line l,t_bi_inv_sku sku
			              where l.sku_id = sku.id
			                    and l.sta_id = :staId
			      ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryReportk" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  				<![CDATA[
select 
    sku.code as skuCode,
    sku.jm_code as jmCode,
    sku.bar_code as barCode,
    sku.key_properties as keyProperties,
    sku.name as skuName,
    sku.supplier_code as supplierSkuCode,
    loc.code as locationCode,
    status.name as inventoryStatusName,
    shop.shop_id as owner,
    brand.name as brandName,
    decode(ma.is_sn_sku,1 ,1,sum(inv.quantity)) as quantity,
    sn.sn
from 
    (select * from t_wh_sku_inventory where ou_id=:ouId) inv 
    inner join t_bi_inv_sku sku on inv.sku_id=sku.id
    inner join t_ma_sku ma on sku.product_id = ma.id
    left join t_wh_sku_sn sn on sn.sku_id = sku.id and ma.is_sn_sku = 1
    left join t_bi_brand brand on brand.id=ma.brand_id
    inner join t_wh_location loc on loc.id=inv.location_id
    left join t_bi_channel shop on inv.inv_owner=shop.code
    left join t_wh_inventory_status status on inv.status_id = status.id
group by sku.code,sku.jm_code,sku.bar_code,sku.key_properties,sku.name,
sku.supplier_code,loc.code,status.name,shop.shop_id,brand.name,sn.sn,ma.is_sn_sku
	  				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnLog.findOutboundSnByStaSlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select distinct lg.sn,sku.bar_code as barcode
from 
  t_wh_sku_sn_log lg,
  t_bi_inv_sku sku,
  t_wh_sta sta,
  t_wh_stv stv
where 
  stv.id = lg.stv_id
  and sta.id = stv.sta_id
  and stv.direction = 2
  and sku.id = lg.sku_id
  and sta.slip_code = :slipCode
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiWarehouseAddStatus.deleteBiWarehouseAddStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_bi_warehouse_add_status t where t.ou_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiWarehouseAddStatus.getBiWHTop" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from (select * from t_bi_warehouse_add_status order by sort asc) where ou_id = :ouId and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiWarehouseAddStatus.getBiWHPickStatusAboveTop" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from (select * from t_bi_warehouse_add_status order by sort asc) where ou_id = :ouId and status > :status and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiWarehouseAddStatus.getBiWHAboveTop" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from (select * from t_bi_warehouse_add_status order by sort asc) where ou_id = :ouId and status > :status and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhAddStatusSource.findWhStatusSourceListSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.* from t_sys_wh_add_status_source t where t.type = :type and t.is_necessary = 0 order by sort asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaInvoiceLine.findByInvoiceId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from t_wh_q_sta_invoice_line where invoice_id= :InvoiceId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaInvoiceLine.cleanDataByLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete t_wh_q_sta_invoice_line where id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOrderInvoiceLineQueue.findByInvoiceId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_ORDER_INVOICE_LINE where so_invoice_id=:InvoiceId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取费用列表1 -->
	<bean id="QueueStaPayment.findByStaPaymentId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from t_wh_q_sta_payment where q_sta_id=:qId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
   <bean id="QueueStaPayment.deleteStaPayment" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_q_sta_payment where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 根据运营中心得到的仓库获取配货清单拣货列表 -->
	<bean id="PickingList.findPickingListDieking" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select 
		p.id, p.code,p.status intStatus, p.create_time createTime, p.plan_bill_count planBillCount, 
		u.user_name crtUserName,olist.name wname,olist.ID wid
		  from T_WH_STA_PICKING_LIST p,T_AU_OPERATION_UNIT olist,T_AU_USER u
		  where  (p.status = 2 or p.status = 8) and WH_ADD_STATUS = :addstatus 
		  #if($ouid)
		  and p.wh_id = :ouid
		  #end
		  and p.out_creater_id = u.id
		  #if($ouid)
		  and olist.id = :ouid
          #end
          #if($code)
           and p.code like :code
          #end
          #if($createTimeStart)
            and p.create_time > :createTimeStart
          #end
          #if($createTimeEnd)
           and p.create_time < :createTimeEnd
          #end
 				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.findPickListByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select id from T_WH_STA_PICKING_LIST p where p.code=:code and wh_id=:ouId
 				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 根据配货清单id获取对应差异明细 拣货 -->
	<bean id="WhPlDiffLine.findStaLineByPickingId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select 
			   t.id as id,t.plan_qty-t.qty as discrepancy,t.plan_qty as planQty,t.qty as qty,
			   sku.id as skuid,sku.name as name,sku.bar_code as barCode,sku.code as code,sku.ext_code1 as extCode1 from 
			   T_BI_INV_SKU sku,T_WH_PL_DIFF_LINE t 
			   where t.sku_id = sku.id and t.pick_list_id = :plid and t.add_status = :status
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 删除配货清单对应的异常明细 -->
	<bean id="WhPlDiffLine.deleteWhPlDillLineByPid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from T_WH_PL_DIFF_LINE t where t.pick_list_id = :plid and t.add_status = :status
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.getAllSkuBySupplierCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,code,name,supplier_code from t_bi_inv_sku where supplier_code = :ssCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.getAllSepecialSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select * from (
					select ss.id id,sku.code,sku.name,sku.bar_code as barCode,sku.supplier_code as supplierCode,
					ss.create_time as createTime from t_wh_special_sku ss,t_bi_inv_sku sku where 
					ss.ou_id = :ouId and ss.sku_id = sku.id 
					#if($sCode)
					and sku.supplier_code = :sCode
					#end
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据配货清单id获取对应差异明细 分拣 -->
	<bean id="WhPlDiffLine.findWhPlDillLineByPidS" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					   t.id as id,t.plan_qty-t.qty as discrepancy,
					   sku.id as skuid,sku.name as name,sku.bar_code as barCode,sku.code as code,sku.ext_code1 as extCode1,
					   sta.code as staCode,t.pg_index as  pgIndex from 
					   T_BI_INV_SKU sku,T_WH_PL_DIFF_LINE t,t_wh_sta sta 
					   where t.sku_id = sku.id 
					   and t.pick_list_id = :plid 
					   and t.add_status = :status 
					   and sta.picking_list_id = :plid 
					   and t.pg_index = sta.pg_index
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新差异表对应数据 -->
	<bean id="WhPlDiffLine.updateWhPlDillLineByPid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_pl_diff_line t set t.plan_qty = :planQty,t.qty = :qty where id = :id
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 拣货和分拣的差异 -->
	<bean id="WhPlDiffLine.findWhPlDillLineByPidSD" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						sku.id as skuid,sku.name as name,sku.bar_code as barCode,sku.code as code,sku.ext_code1 as extCode1, 
						t.qty1 as planQty,t.qty2 as qty,abs(t.qty1-t.qty2) as discrepancy from T_BI_INV_SKU sku,
						(select sku_id,sum(qty1) as qty1,sum(qty2) as qty2 from (
						select sku_id,sum(t.plan_qty)-sum(qty) as qty1,0 as qty2 from T_WH_PL_DIFF_LINE t where t.pick_list_id = :plid and add_status = :statusOne group by sku_id
						union all
						select sku_id,0,sum(t.plan_qty)-sum(qty) from T_WH_PL_DIFF_LINE t where t.pick_list_id = :plid and add_status = :statusTwo group by sku_id
						) group by sku_id) t 
						where sku.id = t.sku_id
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.checkIsSpecailSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select case when count(line.id)>0 then 1 else 0 end from t_wh_sta_line line,
					t_wh_special_sku sku,t_wh_sta sta where sta.id = :staId and line.sta_id = sta.id and line.sku_id = sku.sku_id and 
					sku.ou_id = sta.main_wh_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StaLine.findStaIsSpecailSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					
                  select case when count(1)>0 then 1 else 0 end as  
                  from t_wh_sta sta,t_wh_sta_line line,T_WH_GIFT_LINE gift 
                  where gift.sta_line_id=line.id  and sta.id=line.sta_id and sta.type=21 and sta.status!=17
                  and sta.system_key='adidas'
                  and sta.slip_code1=:slipCode1 and line.sku_id=:skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhAddStatusSource.getWhStatusSourceByTS" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select t.* from T_SYS_WH_ADD_STATUS_SOURCE t where t.type = :type and t.status = :status
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- NIKE礼品卡查询 -->
	<bean id="StockTransApplication.findPrintGift" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			    select  
			    sta.id,
                sta.code,
                sta.slip_code as refSlipCode,
                sta.slip_code1 as slipCode1,
                sta.slip_code2 as slipCode2,
                sta.type as intType,
                sta.status as intStatus,sta.memo,
                sta.owner,
                sta.addi_owner,
                nvl(sta.IS_LOCKED,0) as isLocked,
                di.lpcode,
                di.tracking_no,
                di.country,
                di.city,
                di.district,
                di.address,
                di.receiver,
                di.telephone,
                sta.create_time,
                sta.finish_time,
                u.user_name as operator,
                mianWH.name as mainName,
                addiWH.name as addiName,
                sta.sku_qty as skuQty,
                sta.picking_list_id as pickListId
                 from 
                   t_wh_sta sta
                left join T_AU_OPERATION_UNIT mianWH on mianWH.Id=sta.main_wh_id
                left join T_AU_OPERATION_UNIT addiWH on addiWH.Id=sta.addi_wh_id
                left join t_au_user u on sta.main_wh_id = :ouId and u.id=sta.out_operator_id
                left join t_wh_sta_line line on sta.id=line.sta_id
                left join t_wh_gift_line gift on line.id=gift.sta_line_id
                 left join t_wh_sta_delivery_info di on sta.id=di.id
                where 
                line.id=gift.sta_line_id
                #if(!$createTime && !$endCreateTime && !$finishTime && !$endFinishTime)
                 and sta.create_time > sysdate - 91
                #end
      	 		#if($createTime)
                 and sta.create_time >= :createTime
                #end
                #if($endCreateTime)
                  and sta.create_time <= :endCreateTime
                #end
                #if($finishTime)
                  and sta.finish_time >= :finishTime
                #end
                #if($endFinishTime)
                  and sta.finish_time <= :endFinishTime
                #end
               
                 #if($code)
                  and sta.code like :code
                #end
                #if($slipCode)
                  and sta.slip_code like :slipCode
                #end
                #if($slipCode1)
                  and sta.slip_code1 like :slipCode1
                #end
                #if($slipCode2)
                  and sta.slip_code2 like :slipCode2
                #end
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getTranNoByLpcodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from t_wh_trans_provide_no where lpcode='ZTO'  and sta_id is null
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhTransProvideNo.getTranNoNumberByLpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
						select count(1) from t_wh_trans_provide_no 
						where 
						lpcode=:lpcode
						#if("$!isCod"=="true")
							and is_cod = :isCod
						#end
						#if("$!isCod"=="false")
							and nvl(is_cod,0)=:isCod
						#end
						and sta_id is null
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhTransProvideNo.getTranNoNumberByLpCodeAndAccount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
						select count(1) from t_wh_trans_provide_no 
						where 
						lpcode=:lpcode
						#if("$!isCod"=="true")
							and is_cod = :isCod
						#end
						#if("$!isCod"=="false")
							and nvl(is_cod,0)=:isCod
						#end
						#if($account)
							and ems_account=:account
						#end
						and sta_id is null
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhTransProvideNo.getJdTranNoByLpcodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from t_wh_trans_provide_no where lpcode= :jd and owner= :owner and sta_id is null and exp_time >= sysdate
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhTransProvideNo.getJdOwnerByLpcodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select owner from t_wh_trans_provide_no where lpcode='JD' and sta_id is not null  group by owner
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhTransProvideNo.getJdStaIdByLpcodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta_id from t_wh_trans_provide_no where lpcode= :jd and sta_id is not null and owner= :owner
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhTransProvideNo.getStoTranNoNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from t_wh_trans_provide_no where lpcode='STO'  and sta_id is null order by sort
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getCancelStaTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                    select trans.id from T_WH_TRANS_PROVIDE_NO trans ,t_wh_sta sta  where trans.sta_id = sta.id
                    and trans.lpcode in('STO','ZTO','TTKDEX')
                    and sta.status in(15,17)
                    and sta.cancel_time <add_months(sysdate, -3)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNoCommand.findProvide" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                    select
	                    	 o.lpcode as lpcode,l.name as owner ,o.checkbox_sf as checkboxSf,o.jcustid as jcustid,decode(o.checkbox_sf,'','',1,'是',0,'否')   as checkboxSf1,count(o.id) as quantity
	                    from
	                    	 T_WH_TRANS_PROVIDE_NO o left join t_bi_channel l on l.code = o.owner
	                    where
	                    	  o.sta_id is  null
	                    #if($lpcode)
	                 	    and lpcode = :lpcode
	               		#end
	                    group by
	                    	 o.lpcode,l.name,o.checkbox_sf,o.jcustid
	                  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WhTransProvideNoCommand.findProvideByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                    select
	                    	count(o.id) as qty
	                    from
	                    	 T_WH_TRANS_PROVIDE_NO o left join t_bi_channel l on l.code = o.owner
	                    where
	                    	  1=1
	                    #if($lpcode)
	                 	    and o.lpcode = :lpcode
	               		#end
	               		#if($owner)
	                 	    and l.code = :owner
	                 	#else
	                 	    and l.code is null
	               		#end
	               		#if($checkboxSf)
	                 	    and o.checkbox_sf = :checkboxSf
	                 	#else
	                 	    and o.checkbox_sf is null
	               		#end
	               		#if($jcustid)
	               		    and o.jcustid = :jcustid
	               		#else
	                 	    and o.jcustid is null
	               		#end
	                    
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhTransAreaNo.findProvince" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                   select
	                   		r.id,r.lpcode,r.province,r.area_number,r.create_time,er.user_name as crateUserName 
	                   from
	                   	    t_bi_trans_area_number r 
	                   inner join
	                   		t_au_user er on r.create_id = er.id where r.lpcode is not null
	                    #if($lpcode)
	                 	    and r.lpcode = :lpcode
	               		#end
	               		#if($province)
	                 	    and r.province like :province
	               		#end
	               	    #if($areaNumber)
	                 	    and r.area_number like :areaNumber
	               		#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransAreaNo.getTransAreaByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                   select * from t_bi_trans_area_number where lpcode =:lpcode 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransAreaNo.deleteAreaByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                   delete  t_bi_trans_area_number where lpcode =:lpcode 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransAreaNo.deleteAreaByAera" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                   delete  t_bi_trans_area_number where lpcode =:lpcode and province = :province
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhTransProvideNo.getLastTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT * FROM
 						(select trans.trans_no from t_wh_trans_provide_no trans  where trans.lpcode ='ZTO' order by id desc)
 					where rownum <2
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getYtoLastTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT * FROM
 						(select trans.trans_no from t_wh_trans_provide_no trans  where trans.lpcode ='YTO' order by id desc)
 					where rownum <2
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 获取没有被匹配的第一个运单号 -->
	<bean id="WhTransProvideNo.getTopOneTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
						SELECT * FROM
	 						(select trans.trans_no from t_wh_trans_provide_no trans  where trans.lpcode ='WX' and trans.sta_id is null order by id asc)
	 					where rownum <2
					]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 占用运单号 -->
	<bean id="WhTransProvideNo.occupationWhTransProwideNoTransNo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
						update T_WH_TRANS_PROVIDE_NO tb set tb.sta_id= :staId,tb.create_time=sysdate where tb.trans_no= :transNo
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="GiftLine.getPrintGiftLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select gift.* from t_wh_sta sta,t_wh_sta_line line,t_wh_gift_line gift where sta.id=line.sta_id and line.id=gift.sta_line_id and sta.id= :staId
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findChannelListByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select channel_list from t_wh_q_sta where main_wh_ou_id = :ouid and batch_code is null  group by channel_list
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findExtCode3" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select ext_code3 from t_bi_inv_sku where code in (select sku_code from t_wh_q_sta_line where q_sta_id= :staId) group by ext_code3
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueGiftLine.lineDelete" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete t_wh_q_gift_line where q_sta_line_id= :lineid
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueStaLine.querycountQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sum(qty) from t_wh_q_sta_line where q_sta_id= :qstaId
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuCategories.fingSkuCategoriesIdByName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_MA_SKU_CATEGORIES where sku_categories_name = :name
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findDetailsInventoryByPageShelfLife" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select      
							sku.id as id,
							sku.jm_code as jmCode,
							sku.code as skuCode,
							sku.bar_code as barCode,
							sku.KEY_PROPERTIES as keyProperties,
							sku.supplier_code as supplierSkuCode,
							sku.name as skuName,
							sku.ext_code2 as extCode2,
							loc.code as locationCode,
							status.name as invStatusName,
							ch.name as invOwner,
							inv.qty as quantity,
							inv.lock_qty as lockQty,
							inv.qty-inv.lock_qty as availQty,
							brand.name as brandName,
							ceil(to_date(to_char(inv.expireDate,'yyyy-mm-dd'),'yyyy-mm-dd')-sysdate) as validDate,
			                to_char(inv.productionDate,'yyyy-mm-dd') as pDate,
			                to_char(inv.expireDate,'yyyy-mm-dd') as eDate,
					       	(SELECT (SELECT C.NAME
			                      FROM T_WH_SKU_SIZE_CONFIG C
			                     WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
			                       AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
			              		FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize
						from
							t_bi_inv_sku sku,
							T_bi_BRAND brand,
							(
				                  select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,inv.valid_date as validDate,
				  	              inv.inv_owner as owner, sum(inv.quantity) as qty,inv.production_date as productionDate,inv.expire_date as expireDate,
				                  sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
				                  from t_wh_sku_inventory inv 
				                  where inv.ou_id = :whOuId
				                  group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
				                  inv.inv_owner,inv.valid_date,inv.production_date,inv.expire_date
							) inv,
							t_wh_location loc,
							t_bi_channel ch,
							t_wh_inventory_status status
						where
							inv.location_id=loc.id
							and ch.code = inv.owner
							and sku.brand_id=brand.id
							and inv.sku_id = sku.id
							and status.id = inv.invStatus_id
							and inv.wh_ouId=:whOuId
							#if($isZeroInventory==1)
                               and inv.qty >0
                           #end
							
							#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
							#if ($shelfLife)
								#if ($shelfLife == 0)
									and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') < 
									to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')
								#end
								#if ($shelfLife == 1)
									#if($warningDate)
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-:warningDate,'yyyy-mm-dd HH24/mi/ss')									
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')									
									#end
									#if(!$warningDate)
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')																	
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')																	
									#end									
								#end
								#if ($shelfLife == 2)
									and to_char(sysdate,'yyyy-mm-dd HH24/mi/ss') > to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')
								#end
							#end
							#if ($startDate)
								and  inv.expireDate >= :startDate
							#end
							#if ($endDate)
								and  inv.expireDate <= :endDate
							#end
							#if($warningDate)
							#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="InventoryZero.findDetailsInventoryByPageShelfLife" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						(select      
							sku.id as id,
							sku.jm_code as jmCode,
							sku.code as skuCode,
							sku.bar_code as barCode,
							sku.KEY_PROPERTIES as keyProperties,
							sku.supplier_code as supplierSkuCode,
							sku.name as skuName,
							sku.ext_code2 as extCode2,
							loc.code as locationCode,
							status.name as invStatusName,
							ch.name as invOwner,
							inv.qty as quantity,
							inv.lock_qty as lockQty,
							inv.qty-inv.lock_qty as availQty,
							brand.name as brandName,
							ceil(to_date(to_char(inv.expireDate,'yyyy-mm-dd'),'yyyy-mm-dd')-sysdate) as validDate,
			                to_char(inv.productionDate,'yyyy-mm-dd') as pDate,
			                to_char(inv.expireDate,'yyyy-mm-dd') as eDate,
					       	(SELECT (SELECT C.NAME
			                      FROM T_WH_SKU_SIZE_CONFIG C
			                     WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
			                       AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
			              		FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize
						from
							t_bi_inv_sku sku,
							T_bi_BRAND brand,
							(
				                  select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,inv.valid_date as validDate,
				  	              inv.inv_owner as owner, sum(inv.quantity) as qty,inv.production_date as productionDate,inv.expire_date as expireDate,
				                  sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
				                  from t_wh_sku_inventory inv 
				                  where inv.ou_id = :whOuId
				                  group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
				                  inv.inv_owner,inv.valid_date,inv.production_date,inv.expire_date
							) inv,
							t_wh_location loc,
							t_bi_channel ch,
							t_wh_inventory_status status
						where
							inv.location_id=loc.id
							and ch.code = inv.owner
							and sku.brand_id=brand.id
							and inv.sku_id = sku.id
							and status.id = inv.invStatus_id
							and inv.wh_ouId=:whOuId
							
							#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
							#if ($shelfLife)
								#if ($shelfLife == 0)
									and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') < 
									to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')
								#end
								#if ($shelfLife == 1)
									#if($warningDate)
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-:warningDate,'yyyy-mm-dd HH24/mi/ss')									
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')									
									#end
									#if(!$warningDate)
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')																	
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')																	
									#end									
								#end
								#if ($shelfLife == 2)
									and to_char(sysdate,'yyyy-mm-dd HH24/mi/ss') > to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')
								#end
							#end
							#if ($startDate)
								and  inv.expireDate >= :startDate
							#end
							#if ($endDate)
								and  inv.expireDate <= :endDate
							#end
							#if($warningDate)
							#end
							)
							
							union all
							
							(select      
							sku.id as id,
							sku.jm_code as jmCode,
							sku.code as skuCode,
							sku.bar_code as barCode,
							sku.KEY_PROPERTIES as keyProperties,
							sku.supplier_code as supplierSkuCode,
							sku.name as skuName,
							sku.ext_code2 as extCode2,
							loc.code as locationCode,
							status.name as invStatusName,
							ch.name as invOwner,
							inv.qty as quantity,
							inv.lock_qty as lockQty,
							inv.qty-inv.lock_qty as availQty,
							brand.name as brandName,
							ceil(to_date(to_char(inv.expireDate,'yyyy-mm-dd'),'yyyy-mm-dd')-sysdate) as validDate,
			                to_char(inv.productionDate,'yyyy-mm-dd') as pDate,
			                to_char(inv.expireDate,'yyyy-mm-dd') as eDate,
					       	(SELECT (SELECT C.NAME
			                      FROM T_WH_SKU_SIZE_CONFIG C
			                     WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
			                       AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
			              		FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize
						from
							t_bi_inv_sku sku,
							T_bi_BRAND brand,
							(
				                  select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,inv.valid_date as validDate,
				  	              inv.inv_owner as owner, sum(inv.quantity) as qty,inv.production_date as productionDate,inv.expire_date as expireDate,
				                  sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
				                  from t_wh_sku_inventory_zero inv 
				                  where inv.ou_id = :whOuId
				                  group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
				                  inv.inv_owner,inv.valid_date,inv.production_date,inv.expire_date
							) inv,
							t_wh_location loc,
							t_bi_channel ch,
							t_wh_inventory_status status
						where
							inv.location_id=loc.id
							and ch.code = inv.owner
							and sku.brand_id=brand.id
							and inv.sku_id = sku.id
							and status.id = inv.invStatus_id
							and inv.wh_ouId=:whOuId
							
							#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
							#if ($shelfLife)
								#if ($shelfLife == 0)
									and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') < 
									to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')
								#end
								#if ($shelfLife == 1)
									#if($warningDate)
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-:warningDate,'yyyy-mm-dd HH24/mi/ss')									
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')									
									#end
									#if(!$warningDate)
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')																	
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')																	
									#end									
								#end
								#if ($shelfLife == 2)
									and to_char(sysdate,'yyyy-mm-dd HH24/mi/ss') > to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')
								#end
							#end
							#if ($startDate)
								and  inv.expireDate >= :startDate
							#end
							#if ($endDate)
								and  inv.expireDate <= :endDate
							#end
							#if($warningDate)
							#end
							) 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Inventory.findDetailsInventorySkuSum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select      
              sku.code as skuCode
            from
              t_bi_inv_sku sku,
              T_bi_BRAND brand,
              (
                          select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,inv.valid_date as validDate,
                          inv.inv_owner as owner, sum(inv.quantity) as qty,inv.production_date as productionDate,inv.expire_date as expireDate,
                          sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
                          from t_wh_sku_inventory inv 
                          where inv.ou_id = :whOuId
                          group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
                          inv.inv_owner,inv.valid_date,inv.production_date,inv.expire_date
              ) inv,
              t_wh_location loc,
              t_bi_channel ch,
              t_wh_inventory_status status
            where
              inv.location_id=loc.id
              and ch.code = inv.owner
              and sku.brand_id=brand.id
              and inv.sku_id = sku.id
              and status.id = inv.invStatus_id
              and inv.wh_ouId=:whOuId
               
              	#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
							#if ($shelfLife)
								#if ($shelfLife == 0)
									and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') < 
									to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')
								#end
								#if ($shelfLife == 1)
									#if($warningDate)
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-:warningDate,'yyyy-mm-dd HH24/mi/ss')									
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')									
									#end
									#if(!$warningDate)
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')																	
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')																	
									#end									
								#end
								#if ($shelfLife == 2)
									and to_char(sysdate,'yyyy-mm-dd HH24/mi/ss') > to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')
								#end
							#end
							#if ($startDate)
								and  inv.expireDate >= :startDate
							#end
							#if ($endDate)
								and  inv.expireDate <= :endDate
							#end
							#if($warningDate)
							#end
              group by sku.code
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findDetailsInventoryLocationSum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select      
               loc.code as locationCode
            from
              t_bi_inv_sku sku,
              T_bi_BRAND brand,
              (
                          select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,inv.valid_date as validDate,
                          inv.inv_owner as owner, sum(inv.quantity) as qty,inv.production_date as productionDate,inv.expire_date as expireDate,
                          sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
                          from t_wh_sku_inventory inv 
                          where inv.ou_id = :whOuId
                          group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
                          inv.inv_owner,inv.valid_date,inv.production_date,inv.expire_date
              ) inv,
              t_wh_location loc,
              t_bi_channel ch,
              t_wh_inventory_status status
            where
              inv.location_id=loc.id
              and ch.code = inv.owner
              and sku.brand_id=brand.id
              and inv.sku_id = sku.id
              and status.id = inv.invStatus_id
              and inv.wh_ouId=:whOuId
             
              	#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
							#if ($shelfLife)
								#if ($shelfLife == 0)
									and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') < 
									to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')
								#end
								#if ($shelfLife == 1)
									#if($warningDate)
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-:warningDate,'yyyy-mm-dd HH24/mi/ss')									
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')									
									#end
									#if(!$warningDate)
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')																	
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')																	
									#end									
								#end
								#if ($shelfLife == 2)
									and to_char(sysdate,'yyyy-mm-dd HH24/mi/ss') > to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')
								#end
							#end
							#if ($startDate)
								and  inv.expireDate >= :startDate
							#end
							#if ($endDate)
								and  inv.expireDate <= :endDate
							#end
							#if($warningDate)
							#end
              
              group by loc.code
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findDetailsInventorySkuQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  select      
              nvl(sum(inv.qty),0) as quantity,
              nvl(sum(inv.lock_qty),0) as lockQty,
              nvl(sum(inv.qty-inv.lock_qty),0) as availQty
            from
              t_bi_inv_sku sku,
              T_bi_BRAND brand,
              (
                          select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,inv.valid_date as validDate,
                          inv.inv_owner as owner, sum(inv.quantity) as qty,inv.production_date as productionDate,inv.expire_date as expireDate,
                          sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
                          from t_wh_sku_inventory inv 
                          where inv.ou_id = :whOuId
                          group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
                          inv.inv_owner,inv.valid_date,inv.production_date,inv.expire_date
              ) inv,
              t_wh_location loc,
              t_bi_channel ch,
              t_wh_inventory_status status
            where
              inv.location_id=loc.id
              and ch.code = inv.owner
              and sku.brand_id=brand.id
              and inv.sku_id = sku.id
              and status.id = inv.invStatus_id
              and inv.wh_ouId=:whOuId
              
              	#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
							#if ($shelfLife)
								#if ($shelfLife == 0)
									and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') < 
									to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')
								#end
								#if ($shelfLife == 1)
									#if($warningDate)
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-:warningDate,'yyyy-mm-dd HH24/mi/ss')									
							          and to_char(sysdate+:warningDate,'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')									
									#end
									#if(!$warningDate)
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') >
							          to_char(inv.expireDate-nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss')																	
							          and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') <
							          to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')																	
									#end									
								#end
								#if ($shelfLife == 2)
									and to_char(sysdate,'yyyy-mm-dd HH24/mi/ss') > to_char(inv.expireDate,'yyyy-mm-dd HH24/mi/ss')
								#end
							#end
							#if ($startDate)
								and  inv.expireDate >= :startDate
							#end
							#if ($endDate)
								and  inv.expireDate <= :endDate
							#end
							#if($warningDate)
							#end
					]]>
			</value>
		</constructor-arg>
	</bean>
		<bean id="PickingList.findSinglePickListByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select id ,p.loc_id as locId ,
	p.status as statusInt
	from T_WH_STA_PICKING_LIST p where p.code=:code and wh_id=:ouId
 				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.saveCommomAgvOutBound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select s.code staCode,decode(s.type,'21','销售出库','42','换货出库','其他出库') staType,p.code ,inv.sku_id,inv.expire_date,sum(inv.quantity) quantity
		from  t_wh_sta s ,t_wh_sta_picking_list p,t_wh_sku_inventory inv 
		where s.picking_list_id=p.id and s.code=inv.occupation_code  and p.id =:pId
		and inv.occupation_code  in (
		select inv2.occupation_code  
		from t_wh_sta sta2,t_wh_sta_picking_list p2 ,t_wh_sku_inventory inv2 ,t_wh_location loc2
		where sta2.picking_list_id=p2.id and sta2.code =inv2.occupation_code and loc2.id=inv2.location_id and loc2.is_mixtime =1  and p2.id=:pId
		)  group by s.type,s.code ,p.code,inv.sku_id,inv.expire_date order by s.code asc
 				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findSkuByBarcodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,code,bar_code from t_bi_inv_sku sku where sku.bar_code in(
		            #foreach($bc in $barcodeList)
		                        '$bc',       
		                      #end
		                      '-1') 
		                      and sku.customer_id = :customerId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findSkuThreeDimensionalIsNullByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct sku.id,sku.code,sku.bar_code
					from t_wh_sta_line l,t_bi_inv_sku sku
					where l.sku_id=sku.id
					      and (sku.length is null 
					      or sku.width is null 
					      or sku.height is null 
					      or sku.gross_weight is null
					      or sku.length =0 
					      or sku.width =0 
					      or sku.height =0 
					      or sku.gross_weight =0)
					      and l.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
</beans>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
