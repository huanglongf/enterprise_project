<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<bean id="WarehouseLocation.createLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					insert into t_wh_location_log
					values(s_t_wh_location_log.nextVal, :userId, :createDate, :location, :ouId, (select zone.id from t_wh_pick_zoon zone where zone.code = :pickZoneCode and zone.status = 1 and wh_ou_id = :ouId), :sort)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

    <bean id="StaCheckDetial.findSnAllByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.sku_id,t.sn,t.qty ,sku.bar_code as barCode 
					from t_wh_sta_check_detial t left join t_bi_inv_sku sku on sku.id=t.sku_id
					       where t.sta_id=:staId and t.sn is not null
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaCheckDetial.findSnAllBySkuIdStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.sku_id,t.sn,t.qty from t_wh_sta_check_detial t 
					       where t.sta_id=:staId and t.sn is not null and t.sku_id=:skuId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StaCheckDetial.findExpDateAllByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.sku_id,t.exp_date,to_char(t.exp_date,'yyyyMMdd') as strExpireDate,
					sum(t.qty) as qty
					from t_wh_sta_check_detial t 
					       where t.sta_id=:staId and t.exp_date is not null
					       group by t.sku_id,t.exp_date
                 ]]>
			</value>
		</constructor-arg>
	</bean>

    <bean id="StaCheckDetial.findExpDateAllBySkuIdStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.sku_id,t.exp_date,sum(t.qty) as qty
					from t_wh_sta_check_detial t 
					       where t.sta_id=:staId and t.sku_id=:skuId and t.exp_date is not null
					       group by t.sku_id,t.exp_date
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaCheckDetial.findRfidAllBySkuIdStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.rfid
					from t_wh_sta_check_detial t,t_bi_inv_sku sku
					       where t.sta_id=:staId and t.sku_id=sku.id and t.rfid is not null and sku.bar_code=:barCode
					       
                 ]]>
			</value>
		</constructor-arg>
	</bean>

     <bean id="BiChannelSkuSupplies.findpaperSkuByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.*  from t_bi_channel_sku_supplies t ,t_wh_sta sta,t_bi_channel channel,t_bi_inv_sku sku where
					
					t.sku_id=sku.id and sta.id=:staId and sta.owner=channel.code and t.shop_id=channel.id
					and sku.bar_code=:barCode and sta.main_wh_id=:ouId
				
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		
	<bean id="Odo.findOdOAllQuery" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	               
select odo.id as id,odo.code,l.name as ownerName,decode(odo.status,1,'新建',2,'待出库反馈',3,'出库完成',4,'待入库反馈',
5,'差异待确认',10,'完成',20,'出库单创建失败',21,'入库单创建失败',22,'差异单创建失败',17,'已取消') as statusName,inv.name as invName,odo.ou_id as ouId,
u.name as outOuName,u1.name as inOuName,u2.name as diffOuName,odo.CREATE_TIME,user1.login_name as userName
from t_wh_odo odo left join t_bi_channel l on l.code=odo.owner 
left join t_wh_inventory_status inv on inv.id=odo.INV_STATUS_ID
left join t_au_operation_unit u on u.id=odo.OU_ID 
left join t_au_operation_unit u1 on u1.id=odo.TARGET_OU_ID 
left join t_au_operation_unit u2 on u2.id=odo.DIFF_OUID
left join t_au_user user1 on user1.id=odo.CREATOR_ID
where 1=1
	#if ($code)
      and odo.code = :code
	#end
	#if ($ouName)
      and u.name= :ouName    
	#end
	#if ($inOuName)
      and u1.name = :inOuName
	#end
	#if ($ownerName)
      and l.name = :ownerName
	#end
	#if ($status)
      and odo.status = :status
	#end
	            
	          ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Odo.updateOdoStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                  update t_wh_odo set status=:status where code=:code
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Odo.deleteOdoLineByOdoId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                  delete t_wh_odo_line l where l.odo_id = :odoId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="OperationUnit.odoOuIdList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	               
                 select t.id as id,t.name   from t_wh_odo tt,t_au_operation_unit  t where tt.id=:id and tt.ou_id=t.id
	            union all
	            (select t.id as id,t.name   from t_wh_odo tt,t_au_operation_unit  t where tt.id=:id and tt.target_ou_id=t.id)
	          ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="OdoLine.odoOutBoundDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	               
                 select l.code as code,sku.bar_code as skuBarcode,sku.code as skuCode,l.qty   
                 from t_wh_odo_line l left join t_bi_inv_sku sku on sku.id=l.sku_id
                 where l.odo_id=:id and type=:status
	            
	          ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="OdoLine.findOdOLineByOdOId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select code,sku_id,sum(qty) as qty from t_wh_odo_line where type=:type and ODO_ID=:odoId group by code,sku_id
				
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="OdoLine.findOdOLineByCodeOdOId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select code,sku_id,sum(qty) as qty from t_wh_odo_line where type=:type and ODO_ID=:odoId
					group by code,sku_id
				
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="OdoLine.findOdoLineCommandByOdOId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select l.code,l.sku_id,sum(l.qty) as qty ,sku.code skuCode
					from t_wh_odo_line l,t_bi_inv_sku sku
					where type=:type 
					      and l.sku_id=sku.id
					      and ODO_ID=:odoId 
					group by l.code,l.sku_id,sku.code
				
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="OdoLine.odoOutBoundDetailList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select case when count(1)>0 then 1 else 0 end from t_wh_odo_line where type=:status and ODO_ID=:id 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Odo.findOdoLineByOdoId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select case when count(1)>0 then 1 else 0 end from t_wh_odo where id=:id and diff_ouid is null
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="OdoLine.findOdoLineByOdoId2" class="loxia.dao.support.DynamicQueryHolder">
	 <constructor-arg>
			<value>
                <![CDATA[
	   select  a.sku_id from 
      (select sku_id ,sum(t.qty) qty1  from wms.t_wh_odo_line t  where odo_id=:odoId and type=3 group by sku_id)a, 
      (select sku_id ,sum(-t.qty) qty2 from wms.t_wh_odo_line t  where odo_id=:odoId and type=2 group by sku_id ) b
       where a.sku_id=b.sku_id and a.qty1+b.qty2!=0
	     ]]>
			</value>
		</constructor-arg>
	  
	</bean>    	     
    
    
	<!-- 行 特殊 处理 -->
	<bean id="StockTransApplication.selectSpecialLog"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
     select g.id, u.code as skuCode,u.name,decode(g.type,10, '赠送礼品卡(需打印)', 20, 'Coach保修卡',30, '商品特殊包装',50, '商品特殊印制',60, '哈根达斯券处理', 70, ' 礼盒包装','无') typeString,
     g.memo,g.san_card_code  as sanCardCode  from t_wh_gift_line g,t_wh_sta_line l,t_wh_sta s,t_bi_inv_sku u
     where g.sta_line_id=l.id(+) and l.sta_id=s.id(+) and l.sku_id=u.id(+) and s.id=:staId
					]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="WhPickZoon.findAllPickZone" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select n.id,n.code,n.name from t_wh_pick_zoon n where n.status = 1 and n.wh_ou_id =:ouId order by n.code asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MongoDBSfLogistics.findAllLogistics" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					     select s.code,s.province,s.city,s.district from t_ma_sf_logistics s
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaByTypeAndPro" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.id,sta.code,sta.SLIP_CODE as refSlipCode,sta.SLIP_CODE1,sta.slip_code2 from t_wh_sta sta where type in (21,41)
					#if ($code)
						and sta.code = :code
					#end
					#if ($slipCode)
						and sta.slip_code = :slipCode
					#end
					#if ($slipCode1)
						and sta.slip_code1 = :slipCode1
					#end
					#if ($slipCode2)
						and sta.slip_code2 = :slipCode2
					#end
					#if ($ouId)
						and sta.MAIN_WH_ID = :ouId
					#end
					#if ($type)
						and sta.type = :type
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhUaInventoryLog.insertUaInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
					SELECT
						s_t_wh_ua_inventory_log.nextVal,
					  	log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
					  FROM (
					  SELECT 
						  nvl(r.sku, invs.ext_code2) as sku,  
					      nvl(r.storer_key, 'UA') as storer_key,
					      NVL(r.total_qty, 0) as total_qty, 
					      NVL(r.avaiable_qty,0) as avaiable_qty, 
					      NVL(r.sts,invs.sts) as sts, 
					      r.id as ua_inventory_id,
					      NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
					      --NVL(NVL(invs.bar_code, invs.ext_code2), (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
					      NVL(invs.qty,0) as qty
					  from (
					      select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'UN' then '良品' when ua.shorts='RE' then '良品不可销售' else '残次' end as sts, ua.storer_key 
					      from t_wh_ua_inventory ua
					      where ua.create_time >= sysdate-0.25
					      and ua.storer_key='UA'
					  )r FULL JOIN (
					      select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' when sts.description='RE' then '良品不可销售' else '残次' end as sts, sku.ext_code2
					      from t_wh_sku_inventory inv,
					           t_bi_inv_sku sku,
					           t_bi_warehouse wh,
					           t_wh_inventory_status sts
					      where 
					      	   inv.quantity >= 0
					           and sku.id = inv.sku_id
					           and sts.id = inv.status_id
							   and inv.ou_id = wh.ou_id 
							   and wh.vmi_source = 'IDS-SH-UA'     
					      group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2,sts.description
					  )invs
					  on r.sts=invs.sts  
					  and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertUaNbaInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	  INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NBA') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'UN' then '良品' when ua.shorts='RE' then '良品不可销售' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NBA'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' when sts.description='RE' then '良品不可销售' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_source = 'IDS-SH-NBAUA'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2,sts.description
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertNewLookJDInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	 INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
  SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NewLookJD') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '良品' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NewLookJD'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id,
                 sum(inv.quantity) qty,
                 case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                    and sts.id = inv.status_id
                       and wh.vmi_source ='NewLookJD'     
                 and inv.ou_id = wh.ou_id 
              
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WhUaInventoryLog.insertIDSVSInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	 INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
  SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'IDS-VS') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'NORMAL' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='IDS-VS'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id,
                 sum(inv.quantity) qty,
                 case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                    and sts.id = inv.status_id
                       and wh.vmi_source ='IDS-VS'     
                 and inv.ou_id = wh.ou_id 
              
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WhUaInventoryLog.findbyUaInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	select * from t_wh_ua_inventory_log where create_time >sysdate-0.25 and storer_key='MAIN'
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhUaInventoryLog.findUaInventoryLogByRe" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	select count(1) from t_wh_ua_inventory_log where create_time >sysdate-0.25 and storer_key='MAIN' and total_qty>0
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhUaInventoryLog.findbyUaInventoryLogByAll" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	select * from t_wh_ua_inventory_log where create_time >sysdate-0.25 and storer_key='GUESS'
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WhUaInventoryLog.findUaInventoryLogByAll" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	
                     select count(1) from t_wh_ua_inventory_log t where t.create_time>=sysdate-0.25
                     and t.storer_key='GUESS' and t.total_qty>0
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
		<bean id="WhUaInventoryLog.insertNikeNewInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                 INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                r.storer_key as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'Normal' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key in ('WH_NIKE_WH_SF')
            )r FULL JOIN (
                select sku.code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_source in ('WH_NIKE_WH_SF')    
                group by sku.code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.code) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhUaInventoryLog.insertNikeNewInventoryLog2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                 INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                r.storer_key as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'Normal' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key in ('WH_OOCL')
            )r FULL JOIN (
                select sku.code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_source in ('WH_OOCL')    
                group by sku.code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.code) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhUaInventoryLog.insertNikeCrwInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
               	INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.bar_code) as sku,  
                r.storer_key as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'Normal' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key in ('BZ_CRW')
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts,
                     t_au_operation_unit u
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                     and wh.ou_id=u.id
                 and inv.ou_id = wh.ou_id 
                 and  u.code='SHWH309'
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.bar_code) log1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WhUaInventoryLog.insertConverseInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
               	INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.bar_code) as sku,  
                '18520' as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'Normal' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key = '18520'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_source='IDS-CONVERSE'
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.bar_code) log1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WhUaInventoryLog.insertAfInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'ANF') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = 'Normal' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='ANF'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_source = 'af'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertAeoInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
              INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time,qty)                     
         
  SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE,log1.qty2 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, '18438') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.ext_code2, (SELECT sku2.ext_code2 FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0)-NVL(invs.qty2,0) as qty,
                NVL(invs.qty2,0) as qty2
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '可销售' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='18438' 
                and ua.shorts!='不可销售'
            )r FULL JOIN (
              select a.bar_code,a.status_id,a.qty,a.sts,a.ext_code2,b.qty2  from  (select sku.bar_code,inv.status_id,sku.id,
                 sum(inv.quantity) qty,
                 case when sts.is_forsale = 1 then '良品' else '残次' end as sts, 
                 sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                        
                where 
                     inv.quantity >= 0
                  
                     and sku.id = inv.sku_id
                    and sts.id = inv.status_id
                   
                    and inv.inv_owner='1AEO官方旗舰店'
                    and wh.ou_id=4082
                     
                 and inv.ou_id = wh.ou_id 
                
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2,sku.id) a 
                
                left join  
                (select sum(l.quantity) qty2,l.sku_id  from t_wh_sta sta left join t_wh_sta_line l on l.sta_id=sta.id
                where sta.owner='1AEO官方旗舰店' and sta.main_wh_id=4082 and sta.status=1 and sta.type=21 group by l.sku_id) b
                
                on a.id=b.sku_id  
                 
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1
              
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhUaInventoryLog.insertAeoJDInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time,qty)                     
         
  SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE,log1.qty2 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, '18439') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0)-NVL(invs.qty2,0) as qty,
                NVL(invs.qty2,0) as qty2
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '可销售' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='18439' 
                and ua.shorts!='不可销售'
            )r FULL JOIN (
              select a.bar_code,a.status_id,a.qty,a.sts,a.ext_code2,b.qty2  from  (select sku.bar_code,inv.status_id,sku.id,
                 sum(inv.quantity) qty,
                 case when sts.is_forsale = 1 then '良品' else '残次' end as sts, 
                 sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                        
                where 
                     inv.quantity >= 0
                  
                     and sku.id = inv.sku_id
                    and sts.id = inv.status_id
                   
                    and inv.inv_owner='AEO京东旗舰店'
                    and wh.ou_id=4082
                     
                 and inv.ou_id = wh.ou_id 
                
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2,sku.id) a 
                
                left join  
                (select sum(l.quantity) qty2,l.sku_id  from t_wh_sta sta left join t_wh_sta_line l on l.sta_id=sta.id
                where sta.owner='AEO京东旗舰店' and sta.main_wh_id=4082 and sta.status=1 and sta.type=21 group by l.sku_id) b
                
                on a.id=b.sku_id  
                 
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1   
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertNewLookInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
             INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
  SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NewLook') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '良品' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NewLook'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id,
                 sum(inv.quantity) qty,
                 case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                    and sts.id = inv.status_id
                       and wh.vmi_source ='NewLook'     
                 and inv.ou_id = wh.ou_id 
              
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1  
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhUaInventoryLog.insertGuessInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
					SELECT
          				s_t_wh_ua_inventory_log.nextVal,
              			log1.sku, log1.storer_key, log1.total_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
					FROM (
					     SELECT 
					        nvl(r.short_sku, invs.ext_code2) as sku,  
					        'GUESS' as storer_key,
					        NVL(r.onhand_qty, 0) as total_qty, 
					        NVL(r.status,invs.sts) as sts, 
					        r.id as ua_inventory_id,
					        NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = short_sku)) as upc,
					        --NVL(invs.bar_code, invs.ext_code2) as upc,
					        NVL(invs.qty,0) as qty
					     from (
					        SELECT guess.id,
					        guess.store_code, 
					        case when guess.bin_code = 'BZMAIN' then '良品' else '残次' end as status,
					        guess.product_code, 
					        guess.short_sku, 
					        guess.onhand_qty
					        from t_wh_guess_inventory guess
					        where guess.create_time >= sysdate-0.25
					        and guess.bin_code != 'CIQ'
					      )r FULL JOIN (
					      select 
					           sku.bar_code,
					           case when sts.is_forsale = 1 then '良品' else '残次' end as sts,
					           sku.supplier_code, 
					           sku.ext_code2,
					           sum(inv.quantity) qty   
					      from t_wh_sku_inventory inv,
					           t_bi_inv_sku sku,
					           t_wh_inventory_status sts
					      where 
					          inv.quantity >= 0
					          and sku.id = inv.sku_id
					          and sts.id = inv.status_id
					          and inv.ou_id = 6075
					          and sts.is_forsale = 1
					          group by sku.bar_code,sts.is_forsale, sku.ext_code2, sku.supplier_code
					      )invs
					      on r.status=invs.sts  
					      and r.short_sku = invs.ext_code2
					      and r.product_code = invs.supplier_code
					      and r.short_sku = invs.ext_code2) log1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WhUaInventoryLog.insertGuessInventoryRetailLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty,AVAIABLE_QTY, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
					 SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
              nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.bin_code, 'MAIN') as storer_key,
                NVL(r.onhand_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
					        SELECT guess.id,
					        guess.bin_code, 
					        case when guess.bin_code = 'MAIN' then '良品' else '残次' end as sts,
					        guess.product_code, 
					        guess.short_sku as sku, 
					        guess.onhand_qty,
                   guess.onhand_qty avaiable_qty
					        from t_wh_guess_inventory_RETAIL guess
					        where guess.create_time >= sysdate-0.25
					        and guess.bin_code != 'CIQ'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' when sts.description='RE' then '良品不可销售' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_source = 'guess001'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2,sts.description
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuBatch.findSkuBatchByInvBatchCodeAndSkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						t.*
						from t_wh_inv_sku_batch t 
						where 
						t.inv_batch_code = :batchCode 
						and t.sku_id = :skuid 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.getSkuIsForsale" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select      
                   sku.code as code,
                   sku.bar_code as barCode,
                   case when status.is_forsale = 1 and w.op_mode = 1 then 1 else 0 end as marketAbility,
                   status.id
                  from
                   t_wh_stv_line sl
                   left join  t_bi_inv_sku sku on sku.id = sl.sku_id
                   left join t_bi_warehouse w on w.ou_id = sl.wh_id
                   left join t_wh_inventory_status status on status.id = sl.inv_status_id
			            where w.ou_id = :ouId
			              and sku.bar_code = :barcode
			              and sl.id = :stvId
			             
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WholeInventorySyncToPAC.queryTotalInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select inv.create_time,inv.sku_code,inv.qty,inv.channel_code,inv.market_ability
			from T_WH_WHOLE_INV_SYNC_PAC inv where  create_time = :datetime and channel_code = :channelCode
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WholeInventorySyncToPAC.addTotalInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				       insert into T_WH_WHOLE_INV_SYNC_PAC_LOG(id,log_time, create_time, sku_id, sku_code, channel_code, qty, wh_ou_id , manage_mode , market_ability)
            		   select id,sysdate,create_time,sku_id, sku_code, channel_code, qty, wh_ou_id , manage_mode , market_ability
			            from(          
			                  SELECT t.id,t.create_time,t.sku_id,t.sku_code,t.channel_code,t.qty,t.wh_ou_id,t.manage_mode,t.market_ability FROM T_WH_WHOLE_INV_SYNC_PAC  T 
			                        WHERE t.create_time = (select max(create_time) from T_WH_WHOLE_INV_SYNC_PAC)
			            ) inv
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 全量库存同步PAC -->
	<bean id="WholeInventorySyncToPAC.totalInventorySynToPAC" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
          insert into T_WH_WHOLE_INV_SYNC_PAC(id, create_time, sku_id, sku_code, channel_code, qty, wh_ou_id , manage_mode , market_ability)
          select S_T_WH_WHOLE_INV_SYNC_PAC.Nextval,:datetime,skuId,skuCode,invOwner,qty,null,null,marketAbility from (
          select invt.skuId as skuId,invt.skuCode,invt.invOwner,sum(invt.quantity) as qty,invt.marketAbility from (
          select
              sku.id as skuId,
              sku.code as skuCode,
              status.name as invStatusName,
              ch.code as invOwner,
              inv.qty as quantity,
              wh_ouId as whOuid,
              case when status.is_forsale = 1 and w.op_mode = 1 then 1 else 0 end as marketAbility
            from
              t_bi_inv_sku sku,
              (
                          select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id,
                          inv.inv_owner as owner, sum(inv.quantity) as qty,
                          sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
                          from t_wh_sku_inventory inv
                          group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,inv.inv_owner

              ) inv,
              t_wh_location loc,
              t_bi_channel ch,
              t_wh_inventory_status status,
              t_bi_warehouse w
            where
              inv.location_id=loc.id
              and ch.code = inv.owner
              and inv.sku_id = sku.id
              and status.id = inv.invStatus_id
              and w.ou_id = inv.wh_ouId
              ) invt group by invt.skuId,invt.skuCode,invt.invOwner,invt.marketAbility )
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WholeInventorySyncToPAC.queryTotalInventoryChannelCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	 select t.channel_code  from T_WH_WHOLE_INV_SYNC_PAC t where  t.create_time = :datetime  group by t.channel_code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySyncToPAC.deleteTotalInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete T_WH_WHOLE_INV_SYNC_PAC
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySyncToPAC.findSyncInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT count(t.id) as lineCount,sum(t.qty) as qtyCount FROM T_WH_WHOLE_INV_SYNC_PAC  T 
                        WHERE t.create_time = :datetime
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOrderCancel.wmsCancelOrderConfirm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
				select can.sta_code,can.status,can.msg,can.update_time,can.is_canceled,can.result from T_WH_MSG_ORDER_CANCEL can 
				where can.systemKey= :systemKey and can.create_time > :startTime and can.create_time < :endTime
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOrderCancel.listStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
				select * from t_wh_msg_order_cancel where sta_code= :staCode
				
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findNeedOcpOrderByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_sta where main_wh_id = :ouId and status in(1,20)
					and type in(21,42)
					and ocp_batch_code is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuBatch.findSkuBatchByInvBatchCodeAndSkuIdAndBatchNo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						t.*
						from t_wh_inv_sku_batch t 
						where 
						t.inv_batch_code = :batchCode 
						and t.sku_id = :skuid 
						and t.sku_batch_no = :batchno 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsRtnInOrderQueue.findByRtnInorderBatchcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_RO_IN where batch_id=:batchcode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsRtnOrderLineQueue.queryRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_RO_IN_LINE where in_order_id =:rtnId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOrderInvoiceQueue.findByRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_ORDER_INVOICE where RO_ID_B=:rtnId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOrderInvoiceQueue.findBySoId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_ORDER_INVOICE where SO_ID=:soId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsRtnInOrderQueue.queryBatchcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_T_WH_RO_IN_batchcode.nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsRtnInOrderQueue.updateQstaBatchCodeByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
  			<![CDATA[
  			update T_WH_RO_IN ro set ro.batch_id = :barchCode where ro.batch_id is null and rownum<=:num
  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOrderStatusOms.wmsOrderConfirm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select * from t_wh_Order_Status_OMS  c where 1=1  and  ( c.is_mq ='0' or c.is_mq is null )
							    and  ( c.is_lock is null or c.is_lock =0 )
								#if($startTime)
									and c.create_time>=:startTime
									and c.log_time >= :startTime -3
								#end
								#if($endTime)
									and c.create_time< :endTime
									and c.log_time < :endTime +3
								#end
								#if($systemKey)
									and c.systemkey=:systemKey
								#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.wmsOrderConfirmByType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select c.id,c.ordercode,c.shippingcode,c.type,c.status,c.systemkey,c.create_time,c.log_time  from t_wh_Order_Status_OMS c
                                where 1=1 
								#if($startTime)
									and c.create_time>=:startTime
									and c.log_time+3 >= :startTime
								#end
								#if($endTime)
                                    and c.create_time< :endTime
                                    and c.log_time-3 < :endTime
								#end
                                #if($type)
                                    and c.type=:type
                                #end
                                #if($systemKey)
                                    and c.systemkey=:systemKey
                                #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.wmsOrderFinishByType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select c.id,c.ordercode,c.shippingcode,c.type,c.status,c.systemkey,c.create_time 
							from t_wh_Order_Status_OMS c where 1=1 
							    and (c.is_lock is null or c.is_lock =0)
								#if($startTime)
									and c.create_time>=:startTime
								#end
								#if($endTime)
                                    and c.create_time< :endTime
								#end
                                #if($systemKey)
                                    and c.systemkey=:systemKey
                                #end
                                #if($type)
                                    and c.type in(
									#foreach($c in $type)
										 '$c',
									#end
									'')
                               #end
                                
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.wmsOrderCancel" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select c.id,c.ordercode,c.shippingcode,c.type,c.status,c.systemkey,c.create_time,
							c.log_time,c.is_op,c.login_name  from t_wh_Order_Status_OMS  c  where 1=1 
								#if($startTime)
									and c.create_time>=:startTime
								#end
								#if($endTime)
                                    and c.create_time< :endTime
								#end
                                #if($systemKey)
                                    and c.systemkey=:systemKey
                                #end
                                #if($type)
                                    and c.type in(
									#foreach($c in $type)
										 '$c',
									#end
									'')
                               #end
                                  
                                
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaByOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select sta.id,sta.code,sta.finish_time,sta.outbound_time,sta.slip_code1,sta.inbound_time,sta.MAIN_WH_ID from t_wh_sta sta where sta.code=:orderCode
				              #if($type)
                                    and sta.type in(
									#foreach($c in $type)
										 '$c',
									#end
									'')
                               #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findSta1ByOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select sta.id,sta.code,sta.finish_time,sta.outbound_time,sta.slip_code1,sta.inbound_time,sta.MAIN_WH_ID from t_wh_sta sta where sta.slip_code=:orderCode
				 and sta.status!=17
				              #if($type)
                                    and sta.type in(
									#foreach($c in $type)
										 '$c',
									#end
									'')
                               #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findStaLineByOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select line.*,sku.ext_code2 as extCode2,sku.bar_code as barCode,sku.code as code from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku where sta.id=:id and line.sta_id=sta.id and sku.id=line.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.queryWmsOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select * from t_wh_Order_Status_OMS  c where (is_op is null or is_op != 1) 
								#if($startTime)
									and c.create_time>=:startTime
									and c.log_time+3>=:startTime
								#end
								#if($endTime)
									and c.create_time< :endTime
									and c.log_time-3< :endTime
								#end
								#if($codeList)
									and c.shippingcode in (
									#foreach($c in $codeList)
										 '$c',
									#end
									'')
								#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsConfirmOrderQueue.queryWmsConfirmOrderQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select * from T_WH_CONFIRM_ORDER  c where (1=1) 
								#if($startTime)
									and c.create_time>=:startTime
								#end
								#if($endTime)
									and c.create_time< :endTime
								#end
								#if($codeList)
									and c.order_code in (
									#foreach($c in $codeList)
										 '$c',
									#end
									'')
								#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsConfirmOrderQueue.getUnpushedCreateOrderCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  select 
                    count(1) 
                  from
                    t_wh_confirm_order f
                  where
                    f.is_mq is null
                  and f.system_key not in (select o.option_value  from  t_sys_choose_option o where o.category_code='wmsAdapterSystemKeyConfig')
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsConfirmOrderQueue.updateCreateOrderFlag" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  update t_wh_confirm_order f set f.is_mq=1
	                  where f.is_mq is null
	                  and f.system_key not in  (select o.option_value  from  t_sys_choose_option o where o.category_code='wmsAdapterSystemKeyConfig')
	                  and rownum<1000
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInfoLogOms.queryInfoLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select * from t_wh_Inv_Log_OMS where orderstatus=:orderId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsTransInfoOms.findOrderId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select * from t_wh_trans_info_OMS where orderstatus=:orderId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsTransInfoOms.findOrderById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select o.* from t_wh_trans_info_OMS o,t_wh_Order_Status_OMS s, where o.orderstatus=s.id
						and s.ordercode=:orderCode
						
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderInvoiceOms.findOrderId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select * from T_WH_ORDER_INVOICE_OMS where orderstatus=:orderId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOrderInvoiceLineOms.findInvoiceId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select * from T_WH_ORDER_INVOICE_line_OMS where so_invoice_id=:invoiceId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInfoLogOms.updateInfoLogByOrderStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_Inv_Log_OMS set orderstatus = :newOrderStatus where orderstatus = :orderStatus
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsTransInfoOms.updateTransInfoByOrderStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_trans_info_OMS set orderstatus = :newOrderStatus where orderstatus = :orderStatus
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsTransInfoOms.updatePreOrderTransInfoByOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_trans_info_OMS info set info.transno= :transNo
                        where info.orderstatus=( select o.id from t_wh_Order_Status_OMS o where o.ordercode= :orderCode and rownum=1 )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOrderInvoiceOms.updateOrderInvoiceByOrderStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update T_WH_ORDER_INVOICE_OMS set orderstatus = :newOrderStatus where orderstatus = :orderStatus
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsRtnInOrderQueue.findBatchCodeByDetial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
	  			<![CDATA[
	  				  select batch_id from t_wh_ro_in qs where qs.error_count<5 and batch_id is not null   group by batch_id
	  			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.getAllWarehouseData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	select wh.id value,wh.Name name from 
					T_AU_OPERATION_UNIT wh,
					T_AU_OPERATION_UNIT opc,
					T_AU_OPERATION_UNIT_Type ouType
				where wh.IS_AVAILABLE=1
					and ouType.Name='Warehouse'
					and ouType.Id=wh.ou_type_id
					and wh.PARENT_OU_ID = opc.ID]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findWmsInvoiceOrderList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
					select 
						id id,order_code orderCode,owner owner,lp_code lpCode,trans_no transNo,
						create_time createTime,last_modify_time lastModifyTime,
						finish_time finishTime,batch_code batchCode,pg_index pgIndex,
						status intStatus,
						system_key systemKey
					from T_WH_INVOICE_ORDER w
					where 1 = 1
					#if($orderCode)
						and w.order_code = :orderCode
					#end
					#if($owner)
						and w.owner like :owner
					#end
					#if($lpCode)
						and w.lp_code = :lpCode
					#end
					#if($transNo)
						and w.trans_no = :transNo
					#end
					#if($batchCode)
						and w.batch_code = :batchCode
					#end
					#if($pgIndex)
						and w.pg_index = :pgIndex
					#end
					#if($intStatus)
						and w.status = :intStatus
					#end
					#if($systemKey)
						and w.system_key = :systemKey
					#end
					#if($createTime)
					 	and w.create_time>=:createTime
					#end	
					#if($endCreateTime)
					 	and w.create_time<:endCreateTime
					#end
					#if($finishTime)
					 	and w.finish_time>=:finishTime
					#end
					#if($endFinishTime)
					 	and w.finish_time<:endFinishTime
					#end	
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.getAllWarehouse" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select w.ou_id from t_bi_warehouse w
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据客户编码查询出所有店铺code -->
	<bean id="Warehouse.getAllChannelByCusCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.code as lCode from t_bi_channel l left join t_bi_customer c on l.customer_id=c.id where  c.code=:code
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsInvoiceOrder.findAllWmsInvoiceOrderByListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
						select t.id from t_wh_invoice_order t where 1=1
						#if("$!batchFlag" == "isNull")
						 	and t.batch_code is null and t.pg_index is null
						#elseif("$!batchFlag" == "notNull")
						 	and t.batch_code is not null and t.pg_index is not null
						#end
						#if($wioId)
								and t.id in (
								#foreach($w in $wioId)
									$w,
								#end
								-1)
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findDistinctBatchNoExist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
					select distinct t.batch_code from t_wh_invoice_order t where t.batch_code is not null 
					#if($wioId)
								and t.id in (
								#foreach($w in $wioId)
									$w,
								#end
								-1)
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findTheMaxBatchNoByToday" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
						select max(t.batch_code) from t_wh_invoice_order t where t.batch_code like :dateStr
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findWmsInvoiceOrderByWioIdlist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
					select t.id,
			   sta.id as staId,
		       t.create_time as createTime,
		       t.last_modify_time as lastModifyTime,
		       t.order_code     as orderCode,
		       sta.slip_code as slipCode,
		       t.owner       as owner,
		       t.receiver,
		       t.telephone,
		       t.mobile,
		       t.batch_code  as batchCode,
		       t.pg_index    as pgindex,
		       t.lp_code     as lpCode,
		       t.trans_no    as transNo,
		       t.province,
		       t.city,
		       t.district,
		       t.address,
		       t.status as intStatus
		  from T_WH_INVOICE_ORDER t, t_wh_sta sta
		 where t.order_code = sta.code
		   #if($wioId)
								and t.id in (
								#foreach($w in $wioId)
									$w,
								#end
								-1)
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.updateWmsInvoiceOrderByWioId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
					update T_WH_INVOICE_ORDER t set t.batch_code = :batchNo,t.pg_index =:pgIndex where t.id = :wioId 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.updateWmsInvoiceOrderStatusByWioIdList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
					update T_WH_INVOICE_ORDER t set t.status = :status,t.finish_time = sysdate where 1=1 and t.id = :wioId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findWmsInvoiceOrderBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
				select t.id,
                        sta.id             as staId,
                        t.create_time      as createTime,
                        t.last_modify_time as lastModifyTime,
                        sta.code           as orderCode,
                        sta.slip_code      as slipCode,
                        t.owner            as owner,
                        t.receiver,
                        t.telephone,
                        t.mobile,
                        t.batch_code       as batchCode,
                        t.pg_index         as pgIndex,
                        t.lp_code          as lpCode,
                        t.trans_no         as transNo,
                        t.trans_no as trackingNo,
                        t.telephone as receverTel,
                        t.province,
                        t.city,
                        t.district,
                        t.address,
                        t.status           as intStatus,
                        c.name as sender,
                        c.address as senderAddress,
                        c.telephone as senderTel,
                        sta.slip_code as refSlipCode,
                        t.pg_index         as pgindex,
                        '' as remark,
                        '' as amount,
                        '' as isRailway,
                        '' as isSupportCod,
                        '' as strAmount,
                        '' as skuList,
                        '' as transmemo,
                        '' as transTimeTypeB,
                        '' as transTypeB,
                        '' as transCityCode,
                        '' as jcustid,
                        '' as insuranceAmount,
                        '' as isTransCodPos,
                        '' as sfTrackingNo,
                        '' as areaNumber,
                        '' as barCode
                  from T_WH_INVOICE_ORDER t, t_wh_sta sta,t_bi_channel c
                 where t.order_code = sta.code
                   and sta.main_wh_id = :ouId
                   and sta.slip_code = :slipCode
                   and c.code = sta.owner
                   and sta.status in (10, -1)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findExportFileNameByBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select lp.companyName||'_'||c.shop_code||'_'||lp.lpcode||'_'||to_char(sysdate,'yyyymmddhh24missSSS')||'_'||lp.batchCode as fileName
            from 
             
              (
               select rownum as rn,di.lp_code as lpcode,channel.code as shopCode, channel.company_name as companyName,di.batch_code as batchCode from 

                t_wh_invoice_order di,
                t_bi_channel channel
              where 
                di.owner = channel.code
                
                #if($wioIdList)
						and di.id in (
						#foreach($w in $wioIdList)
							$w,
						#end
						-1)
				#end
              ) lp,
                 t_bi_channel c 
            where
              lp.shopCode = c.code
              and lp.rn = 1
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsInvoiceOrder.findWmsInvoiceOrderBillData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,
                        sta.id             as staId,
                        t.create_time      as createTime,
                        t.last_modify_time as lastModifyTime,
                        sta.code           as orderCode,
                        sta.slip_code      as slipCode,
                        t.owner            as owner,
                        t.receiver,
                        t.telephone,
                        t.mobile,
                        t.batch_code       as batchCode,
                        t.pg_index         as pgIndex,
                        t.lp_code          as lpCode,
                        t.trans_no         as transNo,
                        t.trans_no as trackingNo,
                        t.telephone as receverTel,
                        t.province,
                        t.city,
                        t.district,
                        t.address,
                        t.status           as intStatus,
                        c.name as sender,
                        c.address as senderAddress,
                        c.telephone as senderTel,
                        sta.slip_code as refSlipCode,--暂用原订单号作为单据号
                        t.pg_index         as pgindex,
                        '' as remark,
                        '' as amount,
                        '' as isRailway,
                        '' as isSupportCod,
                        '' as strAmount,
                        '' as skuList,
                        '' as transmemo,
                        '' as transTimeTypeB,
                        '' as transTypeB,
                        '' as transCityCode,
                        '' as jcustid,
                        '' as insuranceAmount,
                        '' as isTransCodPos,
                        '' as sfTrackingNo,
                        '' as areaNumber,
                        '' as barCode
                  from T_WH_INVOICE_ORDER t, t_wh_sta sta,t_bi_channel c
                 where t.order_code = sta.code
                   and c.code = t.owner
                   and t.id = :wioId
                   and sta.status in (10, -1)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIntransitNoticeOms.findNoticeOrderList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,sta_id from T_WH_INTRANSIT_TO_OMS  where (is_lock is null or is_lock = 0 ) and (status is null or status=1) and ERROR_COUNT < 10 and rownum<10000
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询 出库通知oms  排除 adidas -->
	<bean id="WmsOrderStatusOms.findNoticeOrderList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select o.id  from t_wh_Order_Status_OMS o  where  o.systemkey not in ('adidas','gnc','pacs') and (o.is_lock is null or o.is_lock = '0') and  
  		o.create_time is not null and o.type in (21,42,41) and (o.ERROR_COUNT is null or o.ERROR_COUNT <5)  and o.is_mq='1'  and ( o.MQ_STATUS is null or o.mq_status='1')  and rownum<=10000 order by o.id asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsInvoiceOrder.findWmsInvoiceOrderIsExist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,
                        t.create_time      as createTime,
                        t.last_modify_time as lastModifyTime,
                        t.owner            as owner,
                        t.order_code,
                        t.receiver,
                        t.telephone,
                        t.mobile,
                        t.batch_code       as batchCode,
                        t.pg_index         as pgIndex,
                        t.lp_code          as lpCode,
                        t.trans_no         as transNo,
                        t.trans_no as trackingNo,
                        t.telephone as receverTel,
                        t.province,
                        t.city,
                        t.district,
                        t.address,
                        t.status           as intStatus
                  from T_WH_INVOICE_ORDER t
                  where t.order_code = :orderCode
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="PickingList.findCancelCountByPickId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(id) from t_wh_sta a where a.picking_list_id =:pickId and status in (15,17)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPlIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,create_time,code from t_wh_sta_picking_list 
				where id in(
               	#foreach($id in $plLists)
               		$id,
               	#end
               -1) order by create_time asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SecKillSkuCounter.rebackSecKillCounterBySkus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_wh_sec_kill_sku_counter(id,create_time,qty,skus,ou_id,sta_id)
					select S_t_wh_sec_kill_sku_counter.Nextval,sysdate,1,skus,main_wh_id,id from t_wh_sta
					where main_wh_id = :ouId and skus = :skus 
					and (status = 1 or status = 20 or status = 2)
					and (is_sn = 0 or is_sn is null)
					and picking_list_id is null
					and is_sed_kill = 1
					and not exists(select 1 from t_wh_sec_kill_sku_counter where sta_id = id)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SecKillSkuCounter.deleteSecKillCounterByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_sec_kill_sku_counter where sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 索赔 start -->
	<bean id="WhCompensation.findCompensationByParams" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 SELECT distinct co.id,co.claim_code claimCode,co.erp_order_code erpOrderCode,
			                 co.status claimStatus,ct.name claimTypeName,cc.name claimReasonNmae,
			                 bc.name shopOwner,mt.name transName,co.TRANS_NUMBER transNumber,
			                 '物流部' bearTarget,co.is_outer_container_damaged isOuterContainerDamaged,
			                 co.is_package_damaged isPackageDamaged,co.is_two_sub_box isTwoSubBox,
	                       co.is_has_product_return isHasProductReturn,
	                       co.is_filled_with isFilledWith,co.FILE_URL fileUrl,co.remark,
	                       co.create_user_name createUserName,co.create_time createTime,
	                       co.oms_order_code omsOrderCode,co.extral_amt extralAmt,
	                       co.extral_remark extralRemark,co.total_claim_amt totalClaimAmt,
	                       co.logistics_department_amt logisticsepartmentAmt,
	                       co.express_delivery_amt expressDeliveryAmt,co.dispose_remark disposeRemark,
	                       (CASE WHEN co.dispose_time IS NOT NULL AND co.affirm_time IS NULL THEN 15-(to_date(to_char(Sysdate,'yyyy-mm-dd'),'yyyy-mm-dd')-
	                       to_date(to_char(co.dispose_time,'yyyy-mm-dd'),'yyyy-mm-dd')) ELSE NULL END ) warn,
	                       co.claim_affirm_status as claimAffirmStatus,
	                       unit.name as warehouseName,
	                       info.receiver as receiver,
	                       (CASE WHEN info.mobile IS NOT NULL THEN info.mobile ELSE info.telephone END)  as mobile,
	                       info.address as receiverAddress,
	                         sta.finish_time as staFinishDate,
	                         co.last_modify_time as lastModifyTime,
	                         u.user_name as userName
	                       
	                FROM T_WH_COMPENSATION co,T_SYS_COMPENSATE_CAUSE cc,T_SYS_COMPENSATE_TYPE ct,T_MA_TRANSPORTATOR mt,
	                     t_bi_channel bc,t_wh_sta sta,t_wh_sta_delivery_info info,t_au_operation_unit unit,t_au_user u
	                WHERE co.compensate_cause_id=cc.id
	                      AND cc.compensate_type_id=ct.id
	                      AND ltrim(rtrim(co.trans_code))=mt.exp_code
	                      AND co.shop_owner=bc.code
	                      AND (NVL(co.ras_code,co.oms_order_code)=sta.slip_code OR co.oms_order_code=sta.code)
	                      AND sta.status !=17
	                      AND sta.type IN (21,42)
	                      AND sta.id=info.id
	                      AND sta.main_wh_id=unit.id
	                      AND co.last_update_user=u.id(+)
	                     
			          #if($claimCode)
					      AND co.claim_code like :claimCode
					  #end	 
					  #if($claimTypeId)
					      AND ct.id= :claimTypeId
					  #end	
					  #if($claimReasonId)
					      AND cc.id= :claimReasonId
					  #end	
					  #if($claimStatus)
					      AND co.status= :claimStatus
					  #else    
					      AND co.status != 17
					  #end	
					  #if($shopOwner)
					      AND bc.name LIKE :shopOwner
					  #end	
					  #if($omsOrderCode)
					      AND co.oms_order_code= :omsOrderCode
					  #end	
					  #if($transNumber)
					      AND co.trans_number= :transNumber
					  #end	
					  #if($transCode)
					      AND mt.exp_code= :transCode
					  #end	
					  #if($startDate)
					      AND co.create_time >= :startDate
					  #end	
					  #if($endDate)
					      AND co.create_time <= :endDate
					  #end	
					  #if($createUserName)
					      AND co.create_user_name LIKE :createUserName
					  #end
					  #if($warehouseId)
					      AND unit.id=:warehouseId
					  #end	
					  #if($staFinishDateStart)
					      AND sta.finish_time >= :staFinishDateStart
					  #end	
					  #if($staFinishDateEnd)
					      AND sta.finish_time < :staFinishDateEnd
					  #end	

				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 索赔 start -->
	<bean id="WhCompensation.findCompensationByParamsNoPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 SELECT distinct co.id,co.claim_code claimCode,co.erp_order_code erpOrderCode,
			                 co.status claimStatus,ct.name claimTypeName,cc.name claimReasonNmae,
			                 bc.name shopOwner,mt.name transName,co.TRANS_NUMBER transNumber,
			                 '物流部' bearTarget,co.is_outer_container_damaged isOuterContainerDamaged,
			                 co.is_package_damaged isPackageDamaged,co.is_two_sub_box isTwoSubBox,
	                       co.is_has_product_return isHasProductReturn,
	                       co.is_filled_with isFilledWith,co.FILE_URL fileUrl,co.remark,
	                       co.create_user_name createUserName,co.create_time createTime,
	                       co.oms_order_code omsOrderCode,co.extral_amt extralAmt,
	                       co.extral_remark extralRemark,co.total_claim_amt totalClaimAmt,
	                       co.logistics_department_amt logisticsepartmentAmt,
	                       co.express_delivery_amt expressDeliveryAmt,co.dispose_remark disposeRemark,
	                       (CASE WHEN co.dispose_time IS NOT NULL AND co.affirm_time IS NULL THEN 15-(to_date(to_char(Sysdate,'yyyy-mm-dd'),'yyyy-mm-dd')-
	                       to_date(to_char(co.dispose_time,'yyyy-mm-dd'),'yyyy-mm-dd')) ELSE NULL END ) warn,
	                       co.claim_affirm_status as claimAffirmStatus,
	                       unit.name as warehouseName,
	                       info.receiver as receiver,
	                       (CASE WHEN info.mobile IS NOT NULL THEN info.mobile ELSE info.telephone END)  as mobile,
	                       info.address as receiverAddress,
	                         sta.finish_time as staFinishDate,
	                         co.last_modify_time as lastModifyTime,
	                         u.user_name as userName,
	                       	sta.id as staId
	                FROM T_WH_COMPENSATION co,T_SYS_COMPENSATE_CAUSE cc,T_SYS_COMPENSATE_TYPE ct,T_MA_TRANSPORTATOR mt,
	                     t_bi_channel bc,t_wh_sta sta,t_wh_sta_delivery_info info,t_au_operation_unit unit,t_au_user u
	                WHERE co.compensate_cause_id=cc.id
	                      AND cc.compensate_type_id=ct.id
	                      AND ltrim(rtrim(co.trans_code))=mt.exp_code
	                      AND co.shop_owner=bc.code
	                      AND (NVL(co.ras_code,co.oms_order_code)=sta.slip_code OR co.oms_order_code=sta.code)
	                      AND sta.status !=17
	                      AND sta.type IN (21,42)
	                      AND sta.id=info.id
	                      AND sta.main_wh_id=unit.id
	                      AND co.last_update_user=u.id(+)
	                     
			          #if($claimCode)
					      AND co.claim_code like :claimCode
					  #end	 
					  #if($claimTypeId)
					      AND ct.id= :claimTypeId
					  #end	
					  #if($claimReasonId)
					      AND cc.id= :claimReasonId
					  #end	
					  #if($claimStatus)
					      AND co.status= :claimStatus
					  #else    
					      AND co.status != 17
					  #end	
					  #if($shopOwner)
					      AND bc.name LIKE :shopOwner
					  #end	
					  #if($omsOrderCode)
					      AND co.oms_order_code= :omsOrderCode
					  #end	
					  #if($transNumber)
					      AND co.trans_number= :transNumber
					  #end	
					  #if($transCode)
					      AND mt.exp_code= :transCode
					  #end	
					  #if($startDate)
					      AND co.create_time >= :startDate
					  #end	
					  #if($endDate)
					      AND co.create_time <= :endDate
					  #end	
					  #if($createUserName)
					      AND co.create_user_name LIKE :createUserName
					  #end
					  #if($warehouseId)
					      AND unit.id=:warehouseId
					  #end	
					  #if($staFinishDateStart)
					      AND sta.finish_time >= :staFinishDateStart
					  #end	
					  #if($staFinishDateEnd)
					      AND sta.finish_time < :staFinishDateEnd
					  #end	

				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhCompensation.findClaimProcessByParams" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT c.SYSTEM_CODE systemCode,c.logistics_department_amt+c.express_delivery_amt claimAmt,
					       c.dispose_remark remark
					FROM T_WH_COMPENSATION c
					WHERE c.status != 17 
					#if($startTime)
					      AND c.DISPOSE_TIME>= :startTime
					#end	
					#if($endTime)				      
					      AND c.DISPOSE_TIME<= :endTime
					#end      
					ORDER BY c.DISPOSE_TIME ASC
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhCompensation.findClaimResultByParams" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT c.SYSTEM_CODE systemCode,decode(c.status,5,1,10,0) status
					FROM T_WH_COMPENSATION c
					WHERE c.status != 17
					#if($startTime)
					      AND c.AFFIRM_TIME>= :startTime
					#end	
					#if($endTime)				      
					      AND c.AFFIRM_TIME<= :endTime
					#end      
					ORDER BY c.AFFIRM_TIME ASC
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SysCompensateCause.findCompensateCauseByTypeId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT cc.id,cc.code,cc.name
					FROM T_SYS_COMPENSATE_CAUSE cc
					WHERE cc.compensate_type_id= :claimTypeId
					ORDER BY cc.code ASC
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhCompensationDetails.findCompensationDetailsByParams"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT c.erp_order_code erpOrderCode,c.ras_code rasCode,cd.sku_code skuCode,
					       cd.sku_name skuName,cd.quantity quantity,c.oms_order_code omsOrderCode,
					       cd.unit_price unitPrice,cd.total_price totalPrice,cd.claim_qty claimQty,
					       cd.claim_unit_price claimUnitPrice,cd.claim_amt claimAmt,c.claim_affirm_status as claimAffirmStatus
					FROM t_wh_compensation c,t_wh_compensation_details cd
					WHERE c.id=cd.compensation_id
					      AND c.id= :compensationId
				]]>
			</value>
		</constructor-arg>
	</bean>
		
		<!-- 索赔明细，不分页 -->
		<bean id="WhCompensationDetails.findCompensationDetailsByParamsNoPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT c.erp_order_code erpOrderCode,c.ras_code rasCode,cd.sku_code skuCode,
					       cd.sku_name skuName,cd.quantity quantity,c.oms_order_code omsOrderCode,
					       cd.unit_price unitPrice,cd.total_price totalPrice,cd.claim_qty claimQty,
					       cd.claim_unit_price claimUnitPrice,cd.claim_amt claimAmt,c.claim_affirm_status as claimAffirmStatus
					FROM t_wh_compensation c,t_wh_compensation_details cd
					WHERE c.id=cd.compensation_id
					      AND c.id= :compensationId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 索赔 end -->
	<bean id="StvLine.findInfoByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						 v.batch_code,v.quantity,s.name as intInvstatusName,u.customer_sku_code as customerSkuCode,
						 v.direction as directionInt,v.owner as shopName
					from
						 t_wh_stv_line v
					left join
						 t_bi_inv_sku u on u.id = v.sku_id  
					left join
						 t_bi_warehouse e on e.ou_id = v.wh_id
					left join
						 t_wh_inventory_status s on s.id = v.inv_status_id
					where 
						v.stv_id =:stvId and s.is_forsale = 1 and e.op_mode = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.findSkuQtybystaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select a.quantity as quantity,sku.gross_Weight as skuCost  from (
                       select line.sku_id,sum(line.quantity) as quantity  from t_wh_stv_line line,t_wh_stv stv  
					   where stv.id=line.stv_id and stv.sta_id=:staId and stv.status!=10 group by line.sku_id) 
					a left join t_bi_inv_sku sku on sku.id=a.sku_id
					
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EMSConfirmOrderQueue.findExtOrderIdSeo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_EMS_CONFIRM_ORDER_QUEUE where EXE_COUNT<= :count and rownum <=10000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CNPConfirmOrderQueue.insertLogByQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_CNP_CONFIRM_ORDER_QUEUE_log
                   select * from 
                     T_CNP_CONFIRM_ORDER_QUEUE 
                   where 
                    id =:qId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CNPConfirmOrderQueue.findExtOrderIdSeo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_CNP_CONFIRM_ORDER_QUEUE where EXE_COUNT<= :count and rownum <=5000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ExpressConfirmOrderQueue.findExtOrderIdSeo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_EX_CONFIRM_ORDER_QUEUE where EXE_COUNT<= :count and rownum <=5000
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SfConfirmOrderQueue.findExtOrderIdSeo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_SF_CONFIRM_ORDER_QUEUE where EXE_COUNT<= :count and rownum <=10000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RfdConfirmOrderQueue.findExtOrderIdSeo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_RFD_CONFIRM_ORDER_QUEUE where EXE_COUNT<= :count and rownum <=30
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RfdConfirmOrderQueue.findRfdQueueByStaCodeAndTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_RFD_CONFIRM_ORDER_QUEUE where trans_no = :transNo and sta_code = :staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RfdConfirmOrderQueue.updateExeCountByError" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_RFD_CONFIRM_ORDER_QUEUE q set q.exe_count = q.exe_count + 1 
					where id in (
					      #foreach($q in $qList)
					          $q.id,
					      #end
					   -1
					)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- sta记录 zoon_id -->
	<bean id="StockTransApplication.findPickZoonIdByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select lo.zoon_id 
                    from 
                    		 t_wh_sku_inventory inv
                    left join
                    		 t_wh_sta sta on sta.code = inv.occupation_code
                    left join 
                    		 t_wh_location lo on lo.id = inv.location_id 
                    where
                    	 inv.occupation_code = :staCode and lo.zoon_id is not null group by lo.zoon_id order by lo.zoon_id 
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransApplication.findWhZoonIdByPickZoon" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select wh_zoon_id from T_WH_PICK_ZOON n  where wh_zoon_id is not null
						and id in (
						#foreach($s in $zoonIdList)
						 	$s ,
							#end
							-1
					) group by wh_zoon_id order by wh_zoon_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findStalAndBarcodeByStaid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT sku.bar_code code,sum(sl.quantity) id
					 FROM t_wh_sta_line sl,t_bi_inv_sku sku
					 WHERE sl.sku_id=sku.id
					       AND sl.sta_id = :staId
					 GROUP BY sku.bar_code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.findTrackNoByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select o.tracking_no from t_wh_package_info o inner join
					 t_wh_sta a on a.id = o.sta_delivery_info_id  
					 where a.code  = :staCode order by o.id desc
					
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.deleteUserWhRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_au_user_warehouse_ref where user_id =:userId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.saveUserWhRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_au_user_warehouse_ref
                			values(:userId,:whOuId)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.updateReTrackNoStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_RETURN_PACKAGE set status =:typeId where id =:raId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.findLimitBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select nvl(min(sku_max_limit),0) from t_wh_sta_line e  left join t_bi_inv_sku u on u.id = e.sku_id 
					left join T_MA_SKU_CATEGORIES s on s.id = u.sku_categories_id
					where e.sta_id in (
					#foreach($s in $staIdList)
						 	$s ,
							#end
							-1
					) and s.sku_max_limit is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Warehouse.skuWeightCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from t_wh_sku_inventory inv,t_bi_inv_sku sku where sku.id = inv.sku_id and inv.quantity >0 and sku.gross_weight>0 and sku.width>0 and sku.height>0 and sku.length>0 and inv.ou_id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="TaskLockLog.findCountRowByDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(id) from t_sys_task_lock_log g where g.create_time > sysdate -1/48
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TaskLockLog.insertTaskLockLogBackUp" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_sys_task_lock_log_backup
					select * from t_sys_task_lock_log t where trunc(t.create_time)< trunc(trunc(sysdate)-30) order by t.create_time desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TaskLockLog.deleteTaskLockLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete t_sys_task_lock_log t where trunc(t.create_time)< trunc(trunc(sysdate)-30) 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findBarCodeByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                    select sku.* from t_wh_sta sta,t_wh_sta_line l,t_bi_inv_sku sku
                    where l.sta_id=sta.id and l.sku_id=sku.id and  sta.code=:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findSkuIdByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                    select l.sku_id from t_wh_sta sta,t_wh_sta_line l 
                    where l.sta_id=sta.id  
                          and  sta.code=:staCode
                          and  rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.getSkuCountryOfOriginPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                   select sku.id,nvl(sku.name,sku.en_name) name,sku.bar_code barCode,sku.code skuCode,sku.ext_code1 exCode1,sku.country_of_origin countryOfOrigin
                   from t_bi_inv_sku sku
                   where sku.country_of_origin is not null
                         #if($skuCode)
					      and sku.code = :skuCode
					     #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.delSkuCountryOfOrigin" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                  update t_bi_inv_sku sku set sku.country_of_origin =null
                  where  sku.id in (
					        #foreach($id in $ids)
						 	  $id ,
							 #end
							-1
					     ) 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhCompensation.findStatesIsCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					
                      select (CASE WHEN co.dispose_time IS NOT NULL AND co.affirm_time IS NULL THEN 15-(to_date(to_char(Sysdate,'yyyy-mm-dd'),'yyyy-mm-dd')-
	                  to_date(to_char(co.dispose_time,'yyyy-mm-dd'),'yyyy-mm-dd')) ELSE NULL END ) as warn,co.id from t_wh_compensation co where co.status=3  
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhCompensation.updateStatesIsSucceed" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_compensation co set co.STATUS = 5 where co.id=:whCompensationId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.queryStaStatusByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					
					select l.*  from t_wh_sta_picking_list l left join t_wh_sta sta on l.id=sta.picking_list_id where l.code= :code and sta.status=4
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="GiftLine.findGiftLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select  count(gline.memo) countMemo,gline.memo from t_wh_sta_line line left join t_wh_gift_line gline  
                    on gline.sta_line_id=line.id,t_bi_inv_sku sku where line.sta_id= :staId and sku.id=line.sku_id and sku.ext_code2= :ext_code2 group by gline.memo
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Sku.findStaLineByStaIdCard" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					
select sku.child_sn_qty,line.order_total_bf_discount as orderTotalBfDiscount,sku.list_price as listPrice,line.quantity as quantity from t_wh_sta sta ,
t_wh_sta_line line,t_bi_inv_sku sku,T_WH_SKU_SN sn  
where line.sta_id=sta.id and sku.id=line.sku_id and sn.sku_id=sku.id and sn.sn=:id and sta.id=:staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findQtyByStLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					
                    SELECT
       nvl(sum(Decode(lg.direction,1,lg.quantity,2,0-lg.quantity)),0) boxQty FROM t_wh_st_log lg 
        WHERE lg.sku_id=:skuId and lg.wh_id=:ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="Sku.findSkuByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					
                   select sku.id as id  from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku  
                   where sta.id=line.sta_id and line.sku_id=sku.id and sta.id=:staId
                   
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.wmsOrderConfirmPac" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select * from t_wh_Order_Status_OMS  c where
							status=1
							and create_time is not null
							and create_time >sysdate-10
							#if($systemKey)
							and c.systemkey=:systemKey
							#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="WmsOrderStatusOms.wmsOrderConfirmPac2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select * from t_wh_Order_Status_OMS  c where
							status=1
							and create_time is not null
							and create_time >sysdate-10
							#if($systemKey)
							and c.systemkey=:systemKey
							#end
							and rownum<5000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WmsOrderStatusOms.wmsOutOrderConfirmPac" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select * from t_wh_Order_Status_OMS  c where
							create_time <sysdate-:sum
							and rownum<5000 order by create_time desc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.wmsOrderCreateTimeIsNull" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select id from t_wh_Order_Status_OMS  c where ( c.is_lock is null or c.is_lock =0 ) and  create_time is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.updateWmsOrderCreateTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							update t_wh_order_status_oms set create_time = sysdate+1/24/60*2 
							where id in (
							#foreach($id in $ids)
			               		$id,
			               	#end
			               -1)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WmsOrderStatusOms.updateWmsOrderByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					
					update t_wh_order_status_oms set is_lock=0 where shippingcode=:staCode
							
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.getUnpushedOutboundOrderCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			     select 
                count(1) 
              from
                t_wh_order_status_oms f
              where
                f.is_mq is null
               and f.systemkey not in  (select o.option_value  from  t_sys_choose_option o where o.category_code='wmsAdapterSystemKeyConfig')
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsOrderStatusOms.updateOutboundOrderFlag" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  update t_wh_order_status_oms f set f.is_mq=1
	                  where f.is_mq is null
	                  and f.systemkey  not in  (select o.option_value  from  t_sys_choose_option o where o.category_code='wmsAdapterSystemKeyConfig')
	                  and rownum<1000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtnSnDetail.findRtnSnDetailSendIsNullAndInLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select distinct in_line_id from T_WH_MSG_RTN_SN_DETAIL where is_send is null and in_line_id is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtnSnDetail.findRtnSnDetailSendIsNullAndOutLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select distinct out_id from T_WH_MSG_RTN_SN_DETAIL where is_send is null and out_id is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.getSkuSnsByInLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select l.id as rtnSnId,l.sn as sn,a.main_wh_id as ouId,n.sku_id as skuid,v.id as stvId,a.id as staId 
					from T_WH_MSG_RTN_SN_DETAIL l 
					left join T_WH_MSG_RTN_INBOUND_LINE n on n.id = l.in_line_id 
					left join T_WH_MSG_RTN_INBOUND d on d.id = n.msg_rtn_inorder_id
					left join t_wh_sta a on a.code = d.sta_code 
					left join t_wh_stv v on v.sta_id = a.id 
					where l.in_line_id = :inLineId and l.is_send is null
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.getSkuSnsByOutId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select l.id as rtnSnId,l.sn as sn,a.main_wh_id as ouId,e.sku_id as skuid,v.id as stvId,a.id as staId
					from T_WH_MSG_RTN_SN_DETAIL l 
					left join T_WH_MSG_RTN_OUTBOUND d on d.id = l.out_id
					left join t_wh_sta a on a.code = d.sta_code
					left join t_wh_sta_line e on e.sta_id = a.id
					left join t_wh_stv v on v.sta_id = a.id 
					where l.out_id = :outId and l.is_send is null
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.deleteSkuSnBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   delete from T_WH_SKU_SN where sn = :sn
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtnSnDetail.updateIsSendOkByRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_MSG_RTN_SN_DETAIL set is_send = 1 where id = :rtnSnId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="NikeTurnCreate.findNikeTurnStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select cr.id,cr.create_time,cr.from_location,cr.to_location,cr.sta_code,cr.reference_no,cr.quantity,cr.status,cr.sku_id from t_nike_turn_create cr where cr.status=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.findSnQtyByStaIdAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				select count(n.id) 
				from 
					t_wh_sku_sn n 
				left join
					 t_wh_sta_line e on e.sku_id = n.sku_id
				left join
					 t_wh_sta a on a.id = e.sta_id
				where 
					a.id =:staId and n.sn =:sn and n.sta_id is null
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.findisCheckSnQtyBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				         select sum(qty) from(
          select count(1) qty from  
			 		t_wh_sku_sn sn ,
          			t_bi_inv_sku sku,
          			T_WH_STV v
			 	where sn.stv_id = v.id 
          		and sn.sku_id = sku.id
			        and sn.ou_id = :ouId
          		and v.sta_id = :staId
          		and v.status != 10
			 	and sn.sn is not null and sn.sku_id in (select sku_id from t_wh_sku_sn n where  n.sn = :sn group by n.sku_id) 
        union all
        select -e.quantity  from t_wh_sta a left join t_wh_sta_line e on e.sta_id = a.id 
        where a.id = :staId and e.sku_id = (select sku_id from t_wh_sku_sn n where  n.sn = :sn group by n.sku_id)
        )
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.findSkusnByStaAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				         select n.id,n.sku_id from t_wh_sku_sn n where n.sn =:sn and sku_id in (select sku_id from t_wh_sta_line where sta_id=:staid) and n.ou_id =:ouId and n.sta_id is  null
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.findNoCheckSNCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
                 select (select sum(e.quantity) from t_wh_sta_line e where e.sta_id =:staId and e.sku_id =(select sku_id from t_wh_sku_sn n where n.sn =:sn group by sku_id))-
				(select count(n.id) from t_wh_sku_sn n where  n.sku_id =(select sku_id from t_wh_sku_sn n where n.sn =:sn group by sku_id) and n.sta_id =:staId)
 				from dual
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findSkuByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
		select sku.paper_sku_id as paperId from t_wh_sta sta left join t_wh_sta_line line on sta.id=line.sta_id
                                                 left join t_bi_inv_sku sku on sku.id=line.sku_id
                     where sta.code= :code or sta.slip_code= :code
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="Carton.findPackingSummaryForNike" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sta.code,op.name,sta.to_location toLocation,
                	(select max(to_number(seqno))-1 from T_WH_CARTON where sta_id = :staId  group by sta_id) seqNo
					from t_wh_sta sta 
					join t_au_operation_unit op on op.id = sta.main_wh_id
					where sta.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="Carton.findPackingSummaryForNike2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select sta.code,op.name,sta.to_location toLocation,
                	(select c.seqno from T_WH_CARTON c  where c.sta_id = :staId and c.id=:cartonId) seqNo
					from t_wh_sta sta 
					join t_au_operation_unit op on op.id = sta.main_wh_id
					where sta.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Carton.findPackingCheckCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select 
					    sum(temp.quantity) quantity 
					from (       
					  select 
					     sum(sl.quantity) quantity
					  from 
					     t_wh_sta_line sl
					  where 
					     sl.sta_id = :staId
					  union
					  select 
					     -sum(ccl.qty) quantity
					  from
					      t_wh_carton cc,
					      t_wh_carton_line ccl
					  where
					    cc.sta_id = :staId
					    and ccl.carton_id = cc.id
					)temp 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.queryStaByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				      select * from t_wh_sta where code = :code
				]]>	
              </value>
		</constructor-arg>
	</bean>
		  <!--根据作业单staCode查询出下线包裹快递单号所需要相关信息 -->
	<bean id="StockTransApplication.findStaByOffLine"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
			  SELECT sta.*,
            ch.name AS chName,
            ch.telephone AS chTel,
            ch.address AS chAddress,
            dinfo.address AS reAddress,
            dinfo.country AS reCountry,
            dinfo.province AS reProvince,
            dinfo.city AS reCity,
            dinfo.district AS reDistrict,
            dinfo.receiver AS reReceiver,
            dinfo.mobile AS reTelephone,
            case  when dinfo.mobile   is  null then 
				''
				else
			substr(dinfo.mobile,1,3)||'****'||substr(dinfo.mobile,-4,4) 
			end  as reTelephone2
       FROM t_wh_sta sta
       LEFT JOIN t_bi_channel ch ON sta.owner = ch.code
       LEFT JOIN t_wh_sta_delivery_info dInfo ON sta.id = dinfo.id
       where sta.code=:code
       AND sta.main_wh_id=:whId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- QSsku分页查询 -->
	<bean id="QsSku.getQsSkuPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select  s.id,sku.code as skuCode ,sku.bar_code,sku.name from T_BI_QS_SKU s ,t_bi_inv_sku sku 
 				where s.sku_id=sku.id  and s.ou_id=:ouId  
		        #if($skuCode)
					  AND sku.code= :skuCode
			    #end	
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QsSku.getQsSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select  s.id,sku.code as skuCode ,sku.bar_code,sku.name from T_BI_QS_SKU s ,t_bi_inv_sku sku 
 				where s.sku_id=sku.id  and s.ou_id=:ouId  and s.sku_id=:skuId 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 线下包裹分页查询 -->
	<bean id="TransPackage.getTransPackagePage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		 select p.ID as id,
              p.TRANS_NO as transNo,
              p.SKU_ID as skuId,
              p.PACKAGE_WEIGHT as packageWeight,
              p.VOLUME as volume,
              p.ORDER_ID as orderId,
              p.CREATE_TIME as createTime,
              p.OP_USER_ID as opUserId,
              u.USER_NAME as userName,
              p.OP_TIME　as opTime,
              o.CODE as code,
              o.OU_ID as ouID,
              o.BUSINESS_TYPE as businessType,
              o.COST_CENTER_TYPE as costCenterType,
              case
                  when o.COST_CENTER_TYPE = 1 then
                   n.option_value
                else
                       ch.name
              end as costCenterDetail,
              o.SENDER as sender,
              o.S_TEL || '  ' || o.S_TEL2 as senderTel,
              o.S_ADDRESS as senderAddress,
              o.TRANSPORTATOR_CODE as transportatorCode,
              tra.name as tranName,
              o.TIME_TYPE as timeType,
              o.PACKAGE_NUM as packageNum,
              o.RECEIVER as receiver,
              case  when o.r_tel   is  null then 
					substr(o.R_TEL2,1,length(o.R_TEL2)-3) || '***'  
					when o.r_tel2   is  null then
					  substr(o.r_tel,1,3)||'****'||substr(o.r_tel,-4,4) 
					else
					    substr(o.r_tel,1,3)||'****'||substr(o.r_tel,-4,4)  || '  ' || substr(o.R_TEL2,1,length(o.R_TEL2)-3) || '***'  
					end  as receiverTel,        
              o.R_COUNTRY as receiverCountry,
              o.R_PROVINCE as receiverProvince,
              o.R_CITY as receiverCity,
              o.R_AREA as receiverArea,
              o.REMARK,
              o.R_ADDRESS as receiverAddress,
              o.IS_LAND_TRANS as isnotLandTrans,
              o.INSURANCE_AMOUNT as insuranceAmount,
              o.status as orderStatus,
              sta.slip_code as slipCode
         from T_WH_TRANS_PACKAGE p
         left join t_wh_sta_record  r ON r.order_id=p.order_id
         left join T_WH_TRANS_ORDER o ON p.order_id = o.id
         left join T_SYS_CHOOSE_OPTION n on n.option_key =
                                            o.cost_center_detail
         left join t_bi_channel  ch on ch.code=o.cost_center_detail
         left join T_AU_USER u on u.id=p.OP_USER_ID
         left join  T_MA_TRANSPORTATOR tra on tra.exp_code=o.TRANSPORTATOR_CODE
         left join t_wh_sta sta on sta.code=r.code
        where p.status = 1  
      	   #if($transNo)
			      AND p.TRANS_NO= :transNo
		   #end	
		   #if($ouId)
			      AND o.OU_ID= :ouId
		   #end	
		   #if($costCenterType)
			      AND o.COST_CENTER_TYPE= :costCenterType
		   #end	
		   #if($transportatorCode)
			      AND o.TRANSPORTATOR_CODE= :transportatorCode
		   #end	
		   #if($businessType)
			      AND o.BUSINESS_TYPE= :businessType
		   #end
		   #if($costCenterDetail)
			      AND o.COST_CENTER_DETAIL= :costCenterDetail
		   #end	
		   #if($startTime)
			      AND p.CREATE_TIME>=:startTime
		   #end	
		   #if($endTime)				      
		      AND p.CREATE_TIME<= :endTime
		   #end 
		   #if($userName)				      
		      AND u.user_name like '%$userName%'
		   #end
		   #if($receiverProvince)
			      AND o.R_PROVINCE like '%$receiverProvince%'
		   #end
		   #if($receiverCity)
			      AND o.R_CITY like '%$receiverCity%'
		   #end
		   #if($receiverArea)
			      AND o.R_AREA like '%$receiverArea%'
		   #end
		   #if($staType)
			      AND r.TYPE = :staType
		   #end
		    #if($staCode)
			      AND r.CODE = :staCode
		   #end
		   #if($slipCode)	
		   		AND slip_code= :slipCode
		   #end	 	 	      	
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询esprit店铺 -->
	<bean id="EspritStore.findEspritEn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select s.id as id,s.name,s.code,s.city_code as cityCode,s.province,s.city,s.district,s.address,s.contacts,s.telephone,s.gln,s.city_gln as cityGln from t_wh_esprit_store s where 1=1
				#if($name)
			      AND s.name=:name
		  		#end
		    	#if($code)
			      AND s.code=:code
		    	#end
		    	#if($cityCode)
			      AND s.city_code=:cityCode
		    	#end
		    	#if($gln)
			      AND s.gln=:gln
		    	#end
		    	#if($id)
			      AND s.id  <> :id
		    	#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- esprit店铺分页查询 -->
	<bean id="EspritStore.findEspritStoreByParams" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select s.id as id,s.name,s.code,s.city_code as cityCode,s.province,s.city,s.district,s.address,s.contacts,s.telephone,u.login_name as userName,s.gln,s.city_gln as cityGln
		from T_WH_ESPRIT_STORE s ,t_au_user u where s.modify_user=u.id(+)
		 	#if($name)
			      AND s.name like '%$name%' 
		    #end
		    #if($code)
			      AND s.code like '%$code%'
		    #end
		    #if($cityCode)
			      AND s.city_code  like '%$cityCode%' 
		    #end
		    #if($contacts)
			      AND s.contacts   like '%$contacts%'
		    #end
		    #if($telephone)
			      AND s.telephone like '%$telephone%'
		    #end
		    #if($userName)
			      AND u.login_name like '%$userName%'
		    #end
		    #if($gln)
			      AND s.gln   like '%$gln%'
		    #end
		     #if($cityGln)
			      AND s.city_gln   like '%$cityGln%'
		    #end			
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- AD创建取消  整單取消-->
	<bean id="AdCancel.getAdCancelBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select c.* from t_ad_cancel c  where   c.is_cancel is null and  c.slip_code=:slipCode and c.line_no is null
				]]>
			</value>
		</constructor-arg>
	 </bean>
	 
	 
	 <bean id="AdCancel.getAdCancelBySlipCode2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select c.* from t_ad_cancel c  where   c.is_cancel is null and  c.slip_code=:slipCode and c.line_no is not null
				]]>
			</value>
		</constructor-arg>
	 </bean>
	 
	 
	 
	<bean id="AdCancel.updateAdCancelIsCancel" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_ad_cancel c set c.is_cancel=1  where c.slip_code=:slipCode
				]]>
			</value>
		</constructor-arg>
	 </bean>
	 
	 <bean id="AdCancel.updateAdCancelIsCancel2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_ad_cancel c set c.is_cancel=1  where c.slip_code=:slipCode and c.line_no=:lineNo
				]]>
			</value>
		</constructor-arg>
	 </bean>
	 
	 
	 	<bean id="AdCancel.updateAdCancelById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_ad_cancel c set c.is_cancel=1  where c.id=:id
				]]>
			</value>
		</constructor-arg>
	 </bean>
	
	
	<!--查询出状态为0，order_id且第一个运单号的TransPackage实体-->
	<bean id="TransPackage.getTransPackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select p.* from T_WH_TRANS_PACKAGE p where rownum=1 and p.order_id=:orderId and p.status=0
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 跟新包裹 -->
	<bean id="TransPackage.updateTransPackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			update T_WH_TRANS_PACKAGE p set p.sku_id= :skuId,p.PACKAGE_WEIGHT=:packageWeight,p.volume=:volume,p.status=1  where p.id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据orderId获得指令明细List  -->
	<bean id="TransPackage.queryBatchSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select r.id     as id,
                    r.code          as code,
                    op.option_value as strType,
                    op.id           as id2
               from T_WH_STA_RECORD r
               left join T_SYS_CHOOSE_OPTION op on op.option_key = r.type
              where op.category_code = 'whSTAType'
                AND r.order_id = :orderId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- newEMS sql  S-->
			<bean id="TransEmsInfo.queryTransEmsInfo2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select e.account_name ,e.flash_token,e.key,e.secret from T_WH_TRANS_EMS e
						where e.type=1  and e.expire_time <= sysdate and e.flashtoken_expiretime>=sysdate group by e.account_name,e.flash_token,e.key,e.secret
						 ]]>
			</value>
		</constructor-arg>
	</bean>
		<bean id="TransEmsInfo.queryTransEmsInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select e.account_name ,e.authorization,e.key,e.secret from T_WH_TRANS_EMS e where e.type=1  and e.expire_time>sysdate group by e.account_name,e.authorization,e.key,e.secret
						 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransEmsInfo.updateTransEmsInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update T_WH_TRANS_EMS e set e.flash_token=:flashToken ,e.flashtoken_expiretime=:flashTokenExpireTime
						where e.type=1 and e.account_name=:customerCode
						 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransEmsInfo.updateTransEmsInfo2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_TRANS_EMS e set e.authorization=:authorization,e.expire_time=:expireTime
					where e.type=1 and e.account_name=:customerCode
					
						 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- newEMS sql E-->
	<!-- stoProCode明细List  -->
	<bean id="StoProCode.queryStoProCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select * from t_bi_sto_pro_code
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!--根据包裹id获得包裹实体 -->
	<bean id="TransPackage.getOneTransPackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		   select p.ID as id,
              p.TRANS_NO as transNo,
              p.SKU_ID as skuId,
              p.PACKAGE_WEIGHT as packageWeight,
              p.VOLUME as volume,
              p.ORDER_ID as orderId,
              p.CREATE_TIME as createTime,
              p.OP_USER_ID as opUserId,
              u.USER_NAME as userName,
              p.OP_TIME　as opTime,
              o.CODE as code,
              o.OU_ID as ouID,
              o.cost_center_detail as costCenterDetail,
              o.COST_CENTER_TYPE as costCenterType,
              o.SENDER as sender,
         	  o.S_TEL || '  ' || o.S_TEL2 as senderTel,
              o.S_ADDRESS as senderAddress,
              o.TRANSPORTATOR_CODE as transportatorCode,
              o.TIME_TYPE as timeType,
              o.PACKAGE_NUM as packageNum,
              o.RECEIVER as receiver,
              o.R_TEL || '  ' || o.R_TEL2  as receiverTel,
              o.R_COUNTRY as receiverCountry,
              o.R_PROVINCE as receiverProvince,
              o.R_CITY as receiverCity,
              o.R_AREA as receiverArea,
              o.R_ADDRESS as receiverAddress,
              o.IS_LAND_TRANS as isnotLandTrans,
              o.INSURANCE_AMOUNT as insuranceAmount
         from T_WH_TRANS_PACKAGE p
         left join T_WH_TRANS_ORDER o ON p.order_id = o.id
         left join T_AU_USER u on u.id=p.OP_USER_ID
        where p.status = 1
		  #if($id)
			      AND p.ID=:id
		  #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="InvLock.getOneInvLock" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select l.* from t_wh_inv_lock l  where l.source='ANF' and l.time=:time and l.brand='1'
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	 <!--根据包裹id获得面单明细 -->
    <bean id="TransPackage.getOneTransPackageDetail" class="loxia.dao.support.DynamicQueryHolder">
        <constructor-arg>
            <value>
                <![CDATA[
                         select p.ID as id,
              p.TRANS_NO as transNo,
              p.SKU_ID as skuId,
              p.PACKAGE_WEIGHT as packageWeight,
              p.ORDER_ID as orderId,
              o.CODE as code,
             op.option_value as businessType
         from T_WH_TRANS_PACKAGE p
         left join T_WH_TRANS_ORDER o ON p.order_id = o.id
         left join T_SYS_CHOOSE_OPTION op on op.option_key=o.BUSINESS_TYPE
        where p.status = 1
               and op.category_code='businessType'
           #if($id)
			      AND p.ID=:id
		  #end	  
                ]]>
            </value>
        </constructor-arg>
    </bean>
	
	<!-- 获取没有交接完成运单数 -->
	   <bean id="TransPackage.getNoNum" class="loxia.dao.support.DynamicQueryHolder">
        <constructor-arg>
            <value>
                <![CDATA[
            	 SELECT  count(1) as orderId   FROM T_WH_OUTBOUND_PACK o,t_wh_package_info p ,t_wh_sta sta  
 			     WHERE   o.package_id=p.id(+) and p.sta_delivery_info_id=sta.id(+)  
 				 and (sta.is_pre_sale is null or sta.is_pre_sale='0') and  o.CREATOR_ID=:userId  AND (o.IS_HO <> 1 OR o.IS_HO IS NULL)
                ]]>
            </value>
        </constructor-arg>
    </bean>
	
	 <!--根据包裹消耗skuId和面单号获得包裹实体 -->
    <bean id="TransPackage.getOneTransPackage2" class="loxia.dao.support.DynamicQueryHolder">
        <constructor-arg>
            <value>
                <![CDATA[
                         select p.ID as id,
              p.TRANS_NO as transNo,
              p.SKU_ID as skuId,
              p.PACKAGE_WEIGHT as packageWeight,
              p.VOLUME as volume,
              p.ORDER_ID as orderId,
              p.CREATE_TIME as createTime,
              p.OP_USER_ID as opUserId,
              u.USER_NAME as userName,
              p.OP_TIME　as opTime,
              o.CODE as code,
              o.OU_ID as ouID,
             op.option_value as businessType,
              o.COST_CENTER_TYPE as costCenterType,
              case
                  when o.COST_CENTER_TYPE = 1 then
                   n.option_value
                else
                       ch.name
              end as costCenterDetail,
              o.SENDER as sender,
              o.S_TEL as senderTel,
              o.S_ADDRESS as senderAddress,
              o.TRANSPORTATOR_CODE as transportatorCode,
              o.TIME_TYPE as timeType,
              o.PACKAGE_NUM as packageNum,
              o.RECEIVER as receiver,
              o.R_TEL as receiverTel,
              o.R_COUNTRY as receiverCountry,
              o.R_PROVINCE as receiverProvince,
              o.R_CITY as receiverCity,
              o.R_AREA as receiverArea,
              o.R_ADDRESS as receiverAddress,
              o.IS_LAND_TRANS as isLandTrans,
              o.INSURANCE_AMOUNT as insuranceAmount
         from T_WH_TRANS_PACKAGE p
         left join T_WH_TRANS_ORDER o ON p.order_id = o.id
         left join T_SYS_CHOOSE_OPTION n on n.option_key =
                                            o.cost_center_detail
         left join t_bi_channel  ch on ch.code=o.cost_center_detail
         left join T_AU_USER u on u.id=p.OP_USER_ID
         left join T_SYS_CHOOSE_OPTION op on op.option_key=o.BUSINESS_TYPE
        where p.status = 1
               and op.category_code='businessType'
          #if($transNo)
                  AND p.TRANS_NO=:transNo
          #end    
                ]]>
            </value>
        </constructor-arg>
    </bean>
	<bean id="DistriButionAreaLoc.getDistriButionAreaLoc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
		  SELECT
			TWHD.LOC_ID AS ID,
			TWHDT. NAME AS codeName,
			TWHD.CODE AS code,
			TWHD.DISTRIBUTION_AREA_CODE AS distriButionAreaCode,
			TWHD.DISTRIBUTION_AREA_NAME AS distriButionAreaName,
			TWHD.CREATE_TIME AS createTime,
			TWHD.CREATE_USER AS createUser
		FROM
	    (
			SELECT
				DL.LOC_ID LOC_ID,
				DL.DISTRIBUTION_AREA_CODE DISTRIBUTION_AREA_CODE,
				DL.DISTRIBUTION_AREA_NAME DISTRIBUTION_AREA_NAME,
				DL.CREATE_TIME CREATE_TIME,
				DL.CREATE_USER CREATE_USER,
				TWHL.CODE CODE,
				TWHL.DISTRICT_ID DISTRICT_ID,
				DL.MAIN_WH_ID
			FROM
				(
					SELECT
						TWHDL. ID AS LOC_ID,
						TWHDL.LOCATION_ID,
						TWHD.DISTRIBUTION_AREA_CODE,
						TWHD.DISTRIBUTION_AREA_NAME,
						TWHD.CREATE_TIME,
						TWHD.CREATE_USER,
						TWHD.MAIN_WH_ID
					FROM
						T_WH_DISTRIBUTION_AREA_LOC TWHDL
					JOIN T_WH_DISTRIBUTION_AREA TWHD ON TWHDL.DISTRIBUTION_AREA_ID = TWHD. ID
				) DL
			JOIN T_WH_LOCATION TWHL ON DL.LOCATION_ID = TWHL. ID
		) TWHD
	JOIN T_WH_DISTRICT TWHDT ON TWHD.DISTRICT_ID = TWHDT. ID
	WHERE 1 = 1
	AND TWHD.MAIN_WH_ID = :mainWhid
	]]>
	</value>
		</constructor-arg>
	</bean>
	
	<bean id="TransPackage.getStaDeliveryInfoCommand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  	  select transSF.jcustid as jcustid
		      from t_au_operation_unit cmpou
		      left join t_wh_trans_sf transSF on transSF.ou_id = cmpou.id
		     where cmpou.id =:whOuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据耗材barCode来获得实体 -->
	<bean id="TransPackage.getVolumnByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select sku.* from t_bi_inv_sku sku  where sku.bar_code=:skuId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据作业单code来获取第一个record -->
	<bean id="TransPackage.getOneStaRecord" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select r.* from T_WH_STA_RECORD r where r.code=:code and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取order Code 序列 -->
	<bean id="TransPackage.getOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select  S_O_OT_WH_TRANS_ORDER.nextval as num from  dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取t_wh_zdh_pici 序列 -->
	<bean id="ZdhPici.getZdhPiciCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select  s_t_wh_zdh_pici_code.nextval as num from  dual
				]]>
			</value>
		</constructor-arg>
	</bean>
		<!-- 查询 ZdhPici -->
		<bean id="ZdhPici.getZdhPiciByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select  p.*  from  t_wh_zdh_pici p  where p.code=:code
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询  ZdhPiciLine-->
	<bean id="ZdhPiciLine.getZdhPiciLineByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select  c.code as shopName,l.*  from  t_wh_zdh_pici p,t_wh_zdh_pici_line l,t_bi_channel c    where p.id=l.pici_id and l.channel_id=c.id and  p.code=:code
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.findSnQtyByStaIdAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				select count(n.id) 
				from 
					t_wh_sku_sn n 
				left join
					 t_wh_sta_line e on e.sku_id = n.sku_id
				left join
					 t_wh_sta a on a.id = e.sta_id
				where 
					a.id =:staId and n.sn =:sn and n.sta_id is null
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.findisCheckSnQtyBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
				         select sum(qty) from(
          select count(1) qty from  
			 		t_wh_sku_sn sn ,
          			t_bi_inv_sku sku,
          			T_WH_STV v
			 	where sn.stv_id = v.id 
          		and sn.sku_id = sku.id
			        and sn.ou_id = :ouId
          		and v.sta_id = :staId
          		and v.status != 10
			 	and sn.sn is not null and sn.sku_id in (select sku_id from t_wh_sku_sn n where  n.sn = :sn group by n.sku_id) 
        union all
        select -e.quantity  from t_wh_sta a left join t_wh_sta_line e on e.sta_id = a.id 
        where a.id = :staId and e.sku_id = (select sku_id from t_wh_sku_sn n where  n.sn = :sn group by n.sku_id)
        )
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findSkuByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
		select sku.paper_sku_id as paperId from t_wh_sta sta left join t_wh_sta_line line on sta.id=line.sta_id
                                                 left join t_bi_inv_sku sku on sku.id=line.sku_id
                     where sta.code= :code or sta.slip_code= :code
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StarbucksIcePackage.findStarbucksIcePackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
					select t.REGION as region,t.NUM as num from T_Starbucks_ICE_PACKAGE t
				]]>	
              </value>
		</constructor-arg>
	</bean>
	
	
	<bean id="LitreSingle.findmainWarehouseOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
		select * from t_sys_litre_single where ou_id =:ouId
		#if($owner) 
		and owner=:owner 
		#end
		#if($province)
		and province =:province 
		#end
		#if($city)
		and city=:city
		#end
		#if($district)
		and district=:district
		#end
				]]>	
              </value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findBoxReceiveStaLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select id,
		              barCode,
		              jmcode,
		              keyProperties,
		              skuName,
		              jmskuCode,
		              quantity,
		              sum(qty) receiptQty,
		              complete_quantity completeQuantity,
		              intInvstatusName
		         from (select line.id id,
		                      sku.bar_code barCode,
		                      sku.jm_code jmcode,
		                      sku.key_properties keyProperties,
		                      sku.name skuName,
		                      sku.supplier_code jmskuCode,
		                      line.quantity quantity,
		                      line.quantity-line.complete_quantity qty,
		                      line.complete_quantity,
		                      st.name intInvstatusName
		                 from t_wh_sta              sta,
		                      t_wh_sta_line         line,
		                      t_bi_inv_sku          sku,
		                      t_wh_inventory_status st
		                where sta.id = :id
		                  and line.sta_id = sta.id
		                  and sku.id = line.sku_id
		                  and line.inv_status_id = st.id
		               union all
		               select line1.id id,
		                      sku.bar_code barCode,
		                      sku.jm_code jmcode,
		                      sku.key_properties keyProperties,
		                      sku.name skuName,
		                      sku.supplier_code jmskuCode,
		                      line1.quantity,
		                      -(line.quantity-nvl(line.complete_quantity,0)),
		                      line1.complete_quantity,
		                      st.name intInvstatusName
		                 from t_wh_sta              sta,
		                      t_wh_sta              sta1,
		                      t_wh_sta_line         line1,
		                      t_wh_sta_line         line,
		                      t_bi_inv_sku          sku,
		                      t_wh_inventory_status st
		                where sta.group_sta_id = sta1.id
		                  and sta.status in(1,5)
		                  and sta1.id = :id
		                  and line.sta_id = sta.id
		                  and line1.sta_id = sta1.id
		                  and line1.sku_id = sku.id
		                  and line1.inv_status_id = st.id
		                  and line.sku_id = line1.sku_id
		                  and line.complete_quantity<>line.quantity
		               )
		        group by id,
		                 barCode,
		                 jmcode,
		                 keyProperties,
		                 skuName,
		                 jmskuCode,
		                 quantity,
		                 complete_quantity,
		                 intInvstatusName
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
<bean id="PackageInfo.findByTrackingNoList2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    SELECT
              pg.id as id,
              pg.lpcode AS lpcode,
              pg.tracking_no AS trackingNo,
              pg.weight AS weight,
              pg.status AS pgStatus,
              pg.LAST_MODIFY_TIME AS outboundTime,
              sta.is_pre_sale as isPreSale
            FROM
             t_wh_package_info pg,t_wh_sta sta 
            WHERE
              pg.sta_delivery_info_id=sta.id(+)
              and  pg.STATUS = 5
              and pg.ho_list_line_id is null
              and (1 != 1
                      #foreach ($tn in $trackingNoList)
                        or pg.tracking_no = '$tn'
                      #end)
            AND (pg.IS_HANDOVER <> 0 OR pg.IS_HANDOVER IS NULL)
            and not exists(select 1 from wms.t_wh_sta_ho_list_line l where l.tracking_no = pg.tracking_no)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据物流商统计自动化仓下有多少包裹需要创建交接清单  -->
	<bean id="HandOverList.countPackageByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						SELECT
							pi.lpcode,COUNT(pi.id) quantity
						FROM
							T_WH_OUTBOUND_PACK p
				              LEFT JOIN t_wh_package_info pi ON p.TRACKING_NO = pi.TRACKING_NO
				              LEFT JOIN t_bi_warehouse w ON pi.ou_id=w.ou_id 
				              LEFT JOIN T_WH_STA_HO_LIST_LINE ll ON p.tracking_no=ll.tracking_no AND ll.status=0
				              INNER JOIN t_wh_sta sta ON pi.sta_delivery_info_id=sta.id 
				         WHERE  pi.STATUS = 5
				         	  AND w.is_auto_wh =1 
				              AND sta.status NOT IN (10,15,17)
				              AND (sta.IS_PRE_SALE is null or sta.IS_PRE_SALE = '0')
				              AND (p.IS_HO <> 1 OR p.IS_HO IS NULL)
				              AND (pi.IS_HANDOVER <> 0 OR pi.IS_HANDOVER IS NULL)   
				              and pi.lpcode in (  $lpCodeList )
						GROUP BY pi.lpcode   
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--判断交接清单是否使用AD定制交接清单  -->
	<bean id="HandOverList.findIsPrintPackageDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      select count(info.tracking_no)
                  from t_wh_sta_ho_list_line l,
                       t_wh_package_info info,
                       t_wh_sta sta ,
                       t_bi_channel ch,
                       t_bi_channel_wh_ref ref
                  where info.tracking_no = l.tracking_no
                        and sta.id=info.sta_delivery_info_id
                        and ch.code=sta.owner
                        and ch.id=ref.channel_id
                        and ref.is_print_packagedetail='1'
                        and l.ho_list_id = :holid
                        and ref.wh_ou_id= :ouid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findSalesOrderByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select  nvl(ware.is_need_wrapstuff,0) isNeedWrapstuff,
            nvl(ware.is_manual_weighing,0) isManualWeighing,
            der.id id,
            der.code code,
            der.code refSlipCode,
            der.cost_center_detail shopId,
            pg.lpcode lpcode,
            pg.Is_Handover isHandover,
            pg.tans_pg_id tansPgId
             from t_wh_package_info pg,T_WH_TRANS_PACKAGE pac,T_WH_TRANS_ORDER der,t_bi_warehouse ware  where
             pg.tans_pg_id=pac.id 
             and der.id=pac.order_id
             and pg.tracking_no=:trackingNo
             and pg.is_handover!=0
             and ware.ou_id=pg.ou_id 
             and der.status=5
             	]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.getCancelStaByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.id 
					from t_wh_sta sta
					left join t_wh_sta_delivery_info d on sta.id = d.id
					where sta.type in (21,25,42) 
					and sta.cancel_time between trunc(sysdate) -1 and trunc(sysdate)
					and sta.status in(15,17)
					and d.tracking_no is not null
					#if($lpcode)
					and d.lpcode = :lpcode
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhUaInventoryLog.insertNikeInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	  INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
                nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NIKE_BJ') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '良品' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NIKE_BJ'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_sourcewh = 'HD_001'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertNikeInventoryLogGZ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	  INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
                nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NIKE_GZ') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '良品' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NIKE_GZ'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_sourcewh = 'HD_002'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertNikeInventoryLogTM" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	  INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
                nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NIKE_BJ') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '良品' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NIKE_BJ_TM'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_sourcewh = 'HD_003'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhUaInventoryLog.insertNikeInventoryLogGZTM" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                	  INSERT INTO t_wh_ua_inventory_log (id, sku, storer_key, total_qty, avaiable_qty, shorts, ua_inventory_id, bar_code, quantity, create_time)                     
         SELECT
            s_t_wh_ua_inventory_log.nextVal,
              log1.sku, log1.storer_key, log1.total_qty, log1.avaiable_qty, log1.sts, log1.ua_inventory_id, log1.upc, log1.qty, SYSDATE 
            FROM (
            SELECT 
                nvl(r.sku, invs.ext_code2) as sku,  
                nvl(r.storer_key, 'NIKE_GZ') as storer_key,
                NVL(r.total_qty, 0) as total_qty, 
                NVL(r.avaiable_qty,0) as avaiable_qty, 
                NVL(r.sts,invs.sts) as sts, 
                r.id as ua_inventory_id,
                NVL(invs.bar_code, (SELECT sku2.bar_code FROM t_bi_inv_sku sku2 WHERE sku2.ext_code2 = sku)) as upc,
                NVL(invs.qty,0) as qty
            from (
                select distinct ua.id, ua.sku, ua.total_qty, ua.avaiable_qty, case when ua.shorts = '良品' then '良品' else '残次' end as sts, ua.storer_key 
                from t_wh_ua_inventory ua
                where ua.create_time >= sysdate-0.25
                and ua.storer_key='NIKE_GZ_TM'
            )r FULL JOIN (
                select sku.bar_code,inv.status_id, sum(inv.quantity) qty,case when sts.is_forsale = 1 then '良品' else '残次' end as sts, sku.ext_code2
                from t_wh_sku_inventory inv,
                     t_bi_inv_sku sku,
                     t_bi_warehouse wh,
                     t_wh_inventory_status sts
                where 
                     inv.quantity >= 0
                     and sku.id = inv.sku_id
                     and sts.id = inv.status_id
                 and inv.ou_id = wh.ou_id 
                 and wh.vmi_sourcewh = 'HD_004'     
                group by sku.bar_code,inv.status_id,sts.is_forsale, sku.ext_code2
            )invs
            on r.sts=invs.sts  
            and r.sku = invs.ext_code2) log1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- CUBISCAN 根据查询条码(不更新到货号) -->
	<bean id="Sku.findProductByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          select bis.id             as id,
						     bc.name            as customerName,
						     bis.bar_code       as barCode,
						     bis.key_properties as keyProperties,
						     bis.supplier_code  as supplierCode,
						     bis.name           as name,
						     bis.code           as code
					  from t_bi_inv_sku bis, t_bi_customer bc
					  where bis.customer_id = bc.id
					  #if($barCode)
			            and bis.bar_code = :barCode
			          #end 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<!-- CUBISCAN 根据查询条码(更新到货号) -->
	<bean id="Sku.findProductByBarCodeWithSupplierCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          select bis.id             as id,
					         bc.name            as customerName,
					         bis.bar_code       as barCode,
					         bis.key_properties as keyProperties,
					         bis.supplier_code  as supplierCode,
					         bis.name           as name,
					         bis.code           as code
					  from t_bi_inv_sku bis, t_bi_customer bc
					  where bis.customer_id = bc.id
					  #if($barCode)
					    and bis.supplier_code in (select tt.supplier_code from t_bi_inv_sku tt where tt.bar_code = :barCode)
					  #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- CUBISCAN 更新到货号(分页) -->
	<bean id="Sku.findProductBySupplierCodeForPagination" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          select bis.id             as id,
					         bc.name            as customerName,
					         bis.bar_code       as barCode,
					         bis.key_properties as keyProperties,
					         bis.supplier_code  as supplierCode,
					         bis.name           as name,
					         bis.code           as code
					  from t_bi_inv_sku bis, t_bi_customer bc
					  where bis.customer_id = bc.id
					  #if($barCode)
					    and bis.supplier_code in (select tt.supplier_code from t_bi_inv_sku tt where tt.bar_code = :barCode)
					  #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- CUBISCAN 只查询条码(分页) -->
	<bean id="Sku.findProductByBarCodeForPagination" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          select bis.id             as id,
						     bc.name            as customerName,
						     bis.bar_code       as barCode,
						     bis.key_properties as keyProperties,
						     bis.supplier_code  as supplierCode,
						     bis.name           as name,
						     bis.code           as code
					  from t_bi_inv_sku bis, t_bi_customer bc
					  where bis.customer_id = bc.id
					  #if($barCode)
			            and bis.bar_code = :barCode
			          #end 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询未创建HUBSku  -->
	<bean id="HubSku.findNoHubSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				SELECT
				          sku.*
				FROM
					t_hub_sku sku
				WHERE
					sku.status = 1 AND rownum<=10000 and sku.brand =:brand
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询 one HUBSku   by skucode-->
	<bean id="HubSku.findOneHubSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				SELECT
				          sku.*
				FROM
					t_hub_sku sku
				WHERE
					sku.SKU_CODE=:skuCode and sku.brand =:brand
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<!-- 更新状态 HUB status 0 -->
	<bean id="HubSku.updateHubSkuStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update T_HUB_SKU p set p.STATUS=0  where p.id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询未创建BlSku  -->
	<bean id="BlSku.findNoBlSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
									SELECT
					sku. ID AS id,
					sku.p_code AS pCode,
					sku.sku_cd_barcode AS skuCdBarcode,
					sku.technical_size AS technicalSize,
					sku.size_cd AS sizeCd,
					sku.barcode AS barcode,
					sku.status AS status,
					pro.code AS code,
					pro.gender AS gender,
					pro. CATEGORY AS category,
					pro.business_segment AS businessSegment,
					pro.unit_price AS unitPrice,
					pro.orig_price AS origPrice
				FROM
					T_BL_SKU sku
				LEFT JOIN T_BL_PRODUCT pro ON sku.p_code = pro.code
				WHERE
					sku.status = 1
				AND pro.code IS NOT NULL
				#if($barCode)
					and (sku.barcode =:barCode or sku.sku_cd_barcode =:barCode)
				#end
				AND rownum<=10000
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新状态 status 0 -->
	<bean id="BlSku.updateBlSkuStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update T_BL_SKU p set p.STATUS=0  where p.id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- CXC 根据仓库作业申请单号查询CxcConfirmOrderQueueCommand -->
	<bean id="CxcConfirmOrderQueue.findCxcConfirmOrderQueueByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					SELECT 
					   di.address,
				       di.mobile,
				       di.receiver,
				       pi.tracking_no,
				       di.is_cod,
				       di.insurance_amount,
				       pi.weight,
				       sta.total_actual,
				       sta.order_total_actual,
				       sta.order_transfer_free
				    FROM 
				    	t_wh_sta sta, t_wh_sta_delivery_info di, t_wh_package_info pi
				    WHERE 
				       	sta.id = di.id
				    AND 
				    	di.id = pi.sta_delivery_info_id
				    AND 
				    	sta.id = :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 自动化仓交接，作业单状态刷完成 -->
	<bean id="OutBoundPack.updateStaFinishByHoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					UPDATE T_WH_STA STA SET sta.status=10,sta.finish_time=SYSDATE,sta.last_modify_time=SYSDATE,sta.version = sta.version + 1
					WHERE STA.ID IN (SELECT DISTINCT P.STA_DELIVERY_INFO_ID
					                    FROM T_WH_STA_HO_LIST_LINE HL
					                    LEFT JOIN T_WH_PACKAGE_INFO P
					                      ON HL.ID = P.HO_LIST_LINE_ID
					                   WHERE HL.HO_LIST_ID = :hoId)
					   AND NOT EXISTS (SELECT PG.ID
					          FROM T_WH_PACKAGE_INFO PG
					         WHERE PG.STA_DELIVERY_INFO_ID = STA.ID
					           AND PG.STATUS <> 10)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!--自动化仓记录 订单触发时间 -->
	<bean id="OutBoundPack.insertTimeRefByHoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_WH_INFO_TIME_REF (id, BILL_TYPE, NODE_TYPE, SLIP_CODE,  EXECUTION_TIME, CREATE_ID) 
					SELECT  S_T_WH_INFO_TIME_REF.Nextval,  1, 5, sta.slip_code, sysdate, :createId
					FROM t_wh_sta sta
					WHERE STA.ID IN (SELECT DISTINCT P.STA_DELIVERY_INFO_ID
					                    FROM T_WH_STA_HO_LIST_LINE HL
					                    LEFT JOIN T_WH_PACKAGE_INFO P
					                      ON HL.ID = P.HO_LIST_LINE_ID
					                   WHERE HL.HO_LIST_ID = :hoId)
					   AND sta.status=10

				]]>
			</value>
		</constructor-arg>
	</bean>

<!-- 自动化仓交接，合并订单状态刷完成 -->
	<bean id="OutBoundPack.updateMergeStaFinishByHoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					UPDATE t_wh_sta s SET s.status=10,s.finish_time=SYSDATE,s.last_modify_time=SYSDATE,s.version = s.version + 1
					WHERE s.group_sta_id IN (
								SELECT STA.ID
								FROM T_WH_STA STA
								WHERE STA.ID IN (SELECT DISTINCT P.STA_DELIVERY_INFO_ID
								                    FROM T_WH_STA_HO_LIST_LINE HL
								                    LEFT JOIN T_WH_PACKAGE_INFO P
								                      ON HL.ID = P.HO_LIST_LINE_ID
								                   WHERE HL.HO_LIST_ID = :hoId)
								   AND NOT EXISTS (SELECT PG.ID
								          FROM T_WH_PACKAGE_INFO PG
								         WHERE PG.STA_DELIVERY_INFO_ID = STA.ID
								           AND PG.STATUS <> 10)
								   AND sta.is_merge=1
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!--自动化仓记录  合并订单触发时间 -->
	<bean id="OutBoundPack.insertMergeTimeRefByHoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_WH_INFO_TIME_REF (id, BILL_TYPE, NODE_TYPE, SLIP_CODE,  EXECUTION_TIME, CREATE_ID) 
					SELECT  S_T_WH_INFO_TIME_REF.Nextval,  1, 5, s.slip_code, sysdate, :createId
					FROM t_wh_sta s
					WHERE s.group_sta_id IN (
					SELECT STA.ID
					FROM T_WH_STA STA
					WHERE STA.ID IN (SELECT DISTINCT P.STA_DELIVERY_INFO_ID
					                    FROM T_WH_STA_HO_LIST_LINE HL
					                    LEFT JOIN T_WH_PACKAGE_INFO P
					                      ON HL.ID = P.HO_LIST_LINE_ID
					                   WHERE HL.HO_LIST_ID = :hoId)
					   AND sta.status=10
					   AND sta.is_merge=1
					)
				]]>
			</value>
		</constructor-arg>
	</bean>

		<!-- 根据作业单id更新作业单状态 -->
	<bean id="StockTransApplication.updateStaStatusByid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_WH_STA a set a.status=:status where a.id=:staId ]]>
			</value>
		</constructor-arg>
	</bean>
		 <!-- 查找完整sta信息 -->
	<bean id="StockTransApplication.findStaByid1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select * from t_wh_sta where id = :staId]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<!-- 查找完整sta信息 -->
	<bean id="StockTransApplication.findStaByid2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select total_actual,owner from t_wh_sta where id = :staId]]>	
              </value>
		</constructor-arg>
	</bean>
	
	
	
	<!-- 根据配货清单查询作业申请单状态 -->
	<bean id="StockTransApplication.findStaStatusByPickingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select intStatus
						from(
							select 
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								sta.OWNER owner,
								sta.pg_index as "index",
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            staQty.sta_total stvTotal,
					            shop.name shopId
		                    from 
		                    	t_wh_sta sta
			                    	left join t_bi_channel shop on sta.owner = shop.code
			                    	left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id
			                    	left join ((select sta2.id as sta_id,sum(stal.QUANTITY) as sta_total from t_wh_sta sta2,t_wh_sta_line stal where sta2.id=stal.sta_id group by sta2.id) staQty )
			                    		on sta.id=staQty.sta_id
		                    		,T_WH_STA_DELIVERY_INFO dryInfo
		                    where 1=1
		                    #if($mainWarehouse)
		                    and	sta.MAIN_WH_ID=:mainWarehouse
		                    #end
		                    #if($wids)
		                     and sta.main_wh_id  in (
                                #foreach( $id in $wids )
	                           $id,
                             #end
                             -1)
		                    #end
		                    	and sta.id=dryInfo.id
		                    	and sta.PICKING_LIST_ID = :pickingListId
		                    order by sta.pg_index
		                    ) tmp
						
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 根据配货清单查询作业申请单状态 -->
	<bean id="StockTransApplication.findOmsTamllStaCodeBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select sta.id,sta.code,sta.status as intStaStatus  from t_wh_sta sta where sta.slip_code1=:slipCode  and sta.status!=17 and (sta.is_locked is null or sta.is_locked!=1 ) and sta.status in(1,2)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Sku.findSkuBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select
                ext_code2 as dpProp2
                 from T_BI_INV_SKU where id = :id]]>	
              </value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaTypeBycode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select * from t_wh_sta where code = :stacode]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaByPo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sta.id from t_wh_sta sta where sta.slip_code=:slipCode and sta.status!=17 ]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaBySlipCodeOrCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sta.id,sta.owner,sta.slip_code as refSlipCode,sta.code from t_wh_sta sta where (sta.slip_code=:slipCode or sta.code=:slipCode) and sta.main_wh_id=:ouId and sta.status!=17 ]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findByQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sta.id,sta.SKU_QTY from t_wh_sta sta where id=:staId ]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaByCode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sta.id,sta.owner,sta.slip_code,sta.code,sta.CONTAINER_CODE from t_wh_sta sta where  sta.code=:code and sta.status!=17 ]]>	
              </value>
		</constructor-arg>
	</bean>
	
	
	<!-- check AD -->
	<bean id="PackageInfo.checkAdTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select   s.id
				    from wms.t_wh_package_info p, wms.t_wh_sta s
				    where p.sta_delivery_info_id = s.id(+)
				    and s.system_key = 'adidas'
				    and s.is_pre_sale='1'
					#if($trackingNo)
					and p.tracking_no =:trackingNo 
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 根据code查询出交接明细 findByTrackingNo2 -->
	<bean id="PackageInfo.findByTrackingNoAndLpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select i.*  from t_wh_package_info i where i.create_time>=sysdate-10	
					#if($trackingNo)
					and i.tracking_no=:trackingNo 
					#end
					#if($lpCode)
					and i.lpcode=:lpCode
					#end
					 	
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="PackageInfo.findPreByTrackingNoAndLpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select i.old_tracking_no,i.OLD_LPCODE,i.lpcode,i.tracking_no,i.id  from t_wh_sta sta ,t_wh_package_info i where sta.id=i.sta_delivery_info_id and i.sta_delivery_info_id is not null  and sta.is_pre_sale='1' and i.old_tracking_no is not null
					#if($trackingNo)
					and i.old_tracking_no=:trackingNo 
					#end
					#if($lpCode)
					and i.OLD_LPCODE=:lpCode
					#end
					 	
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	
	
	<!--获得标准物流商code -->
	<bean id="TransInfo.getAllLpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select lpCode from t_wh_trans_info group by lpcode 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="TransInfo.getTransInfoByLpCodeAndRegionCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from t_wh_trans_info t where t.lpcode = :lpCode 
		            #if($regionCode)
		            and regionCode=:regionCode
		            #else
		            and regionCode is null
		            #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ExpressConfirmOrderQueue.findExOrderByStaCodeAndTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select e.id,e.lpcode,e.trans_no,e.sta_code from T_EX_CONFIRM_ORDER_QUEUE e 
					where e.lpcode = :lpCode and e.trans_no = :transNo and e.sta_code = :staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PackageInfo.findPgCountByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	select to_char(count(p.id),'fm00') from t_wh_package_info p where p.sta_delivery_info_id = :staId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 校验是否是预售订单 -->
	<bean id="PackageInfo.checkPreSale" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	select  count(sta.id) from t_wh_package_info p,t_wh_sta sta where p.sta_delivery_info_id is not null and p.sta_delivery_info_id=sta.id(+) and sta.is_pre_sale ='1' and  p.id = :pId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaUnlocked1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta sta set 
					sta.is_locked=0 ,unlock_user=:unlockUser
					where sta.id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaSkuQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta sta set 
					sta.sku_qty=:skuQty
					where sta.id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="GiftLine.getGiftLineByStaLineIdAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select g.id,g.memo,g.san_card_code from t_wh_gift_line g  
                    where g.sta_line_id = :staLineId 
                    #if($type)
                    and g.type = :type
                    #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GiftLine.getGiftLineByPackingIdAndStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select line.id staLineId,sku.bar_code barCode,g.memo memo from t_wh_sta sta
					join t_wh_sta_line line on line.sta_id = sta.id
					join t_wh_sta_picking_list pl on pl.id = sta.picking_list_id
					join t_bi_inv_sku sku on sku.id = line.sku_id
					left join t_wh_gift_line g on g.sta_line_id = line.id
					where g.memo is not null
					#if($staId)
					and sta.id = :staId 
					#end
					#if($plId)
					and pl.id = :plId
					#end
					#if(!$staId && !$plId) 
					and sta.id = -1
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- (根据参数)分页查询 QueueStaCommand -->
	<bean id="QueueSta.findQueueStaByParams" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						s.id				as id,
						s.order_code		as ordercode,
						s.slip_code1		as slipcode1,
						s.slip_code2		as slipcode2,
						s.order_create_time as ordercreatetime,
						decode(s.type,21,'销售出库',41,'退换货申请-退货入库',42,'退换货申请-换货出库','暂不明确,待定义') as statusStr,
						s.error_count		as errorcount,
						s.owner				as owner,
						s.create_time		as createtime
					from 
						t_wh_q_sta s
					where 
						1 = 1
						#if($ordercode)
							and s.order_code like '%$ordercode%'
						#end
						#if($owner)
							and s.owner like '%$owner%'
						#end
						#if ($numberUp)
							and s.error_count >= :numberUp
						#end
						#if ($amountTo)
							and s.error_count <= :amountTo
						#end
					order by s.error_count desc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 重置为0 -->
	<bean id="QueueSta.updateZeroByErrorCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					UPDATE T_WH_Q_STA S SET S.ERROR_COUNT = 0, S.BATCH_CODE = 0 WHERE S.ID = :queueStaId
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 重置为99 -->
	<bean id="QueueSta.update99ByErrorCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					UPDATE T_WH_Q_STA S SET S.ERROR_COUNT = 99, S.BATCH_CODE = :batchNo WHERE S.ID = :queueStaId
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.getNoTransSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
		              sta.id id,info.lpcode lpCode,w.ou_id ouId 
		            from 
		              t_wh_sta sta,
		              t_wh_sta_delivery_info info,
		              t_bi_warehouse w 
		            where 
		            sta.main_wh_id = w.ou_id
		            and info.id = sta.id
		            and w.VMI_SOURCE is null
		            and sta.status in(1,2)
		            and (sta.type=21 or sta.type=25 or sta.type=42) 
		            and (sta.is_locked = 0 or sta.is_locked is null) 
		            and info.tracking_no is null
		            and info.lpcode is not null
		            and (sta.next_get_transno_time is null or sta.next_get_transno_time<sysdate)
		            and sta.create_time >= sysdate - 10
		            and rownum<=:rn
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findOnShelvesByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select SKU.BAR_CODE barCode,
				       invStats.NAME intInvstatusName,
				       sum(stvl.quantity) quantity
				  from T_WH_STV              stv,
				       T_WH_STV_Line         stvl,
				       T_BI_INV_SKU          sku,
				       T_WH_INVENTORY_STATUS invStats
				 where stv.sta_id = :staId
				   and stv.status = 10
				   and stv.type = 11
				   and STVL.STV_ID = stv.id
				   and STVL.SKU_ID = sku.id
				   and STVL.INV_STATUS_ID = invStats.id
				 group by sku.bar_code, invStats.name
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- (根据参数)分页查询 WmsIntransitNoticeOmsCommand -->
	<bean id="WmsIntransitNoticeOms.findOutPacsByParams" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						ito.id				as id,
						ito.sta_code		as staCode,
						ito.sta_id			as staId,
						ito.create_time		as createTime,
						aou.name 			as whStr,
						decode(ito.is_send,1,'是','否') as statusStr,
						ito.owner			as owner,
						ito.error_count		as errorCount,
						ito.return_msg		as returnMsg
					from 
						T_WH_INTRANSIT_TO_OMS ito,
						T_AU_OPERATION_UNIT aou
					where 
						1 = 1 
						#if($staCode)
							and ito.STA_CODE like '%$staCode%'
						#end
						#if($owner)
							and ito.owner like '%$owner%'
						#end
						#if ($numberUp)
							and ito.error_count >= :numberUp
						#end
						#if ($amountTo)
							and ito.error_count <= :amountTo
						#end
					and ito.wh_ou_id = aou.id
					order by
						ito.error_count desc
					
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 重置为0 -->
	<bean id="WmsIntransitNoticeOms.resetZero" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_intransit_to_oms ito set ito.error_count = 0, ito.status='' where ito.id in(
						#foreach($id in $idList)
							$id,
						#end
						-1)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 重置为100 -->
	<bean id="WmsIntransitNoticeOms.resetHundred" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_intransit_to_oms ito set ito.error_count = 100 where ito.id in(
						#foreach($id in $idList)
							$id,
						#end
						-1)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WmsIntransitNoticeOms.updateOrderByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_intransit_to_oms  set is_lock=0  where sta_code=:staCode
						
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 查找物流商变更配置-->
	<bean id="DeliveryChangeConfigure.getDCCByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					id as ID,
					LPCODE as lpcode,
					NEWLPCODE as newLpcode,
					CREATE_USER as createUser
					from T_WH_DELIVERY_CHANGE_CONFIGURE where  1=1
					#if($lpcode)
					and lpcode=:lpcode
					#end
					#if($newLpcode)
					and newlpcode=:newLpcode
					#end				
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select HEIGHT as height,
 					LENGTH as length,
  					WIDTH as width
  					 from t_bi_inv_sku s where s.id in
				(select p.sku_id  from t_wh_package_info p  where p.tracking_no=:trackingNo) and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- <bean id="Sku.getByExtCode2AndCustomerAndShopId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from t_bi_inv_sku sku 
					where sku.ext_code2 = :extCode2
					and sku.customer_id = :customerId
					and sku.brand_id in (
					    select ref.brand_id from T_BI_CHANNEL_BRAND_REF ref 
					    where ref.channel_id = :channelId
					)
				]]>
			</value>
		</constructor-arg>
	</bean> -->
		<!-- 优先发货城市配置 分页查询  -->
	<bean id="PriorityShippedCityConfig.queryPriorityShippedCityConfig" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						pcc.id				as id,
						pcc.city_name		as cityName
					from 
						T_WH_PRIORITY_CITY_CONFIG pcc
					where 
						1 = 1 
						#if($ouTypeId)
							and pcc.ou_type_id = :ouTypeId 
						#end
						#if($ouId)
							and pcc.ou_id = :ouId
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="HightProvinceConfig.queryHightProvinceConfig" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						pcc.id				as id,
						pcc.PRIORITY_NAME		as priorityName
					from 
						T_WH_HIGHT_PROVINCE_CONFIG  pcc
					where 
						1 = 1 
						#if($ouTypeId)
							and pcc.ou_type_id = :ouTypeId 
						#end
						#if($ouId)
							and pcc.ou_id = :ouId
						#end
						#if($name)
							and pcc.PRIORITY_NAME = :name
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 根据库位[库区]移动,更新释放库存 -->
	<bean id="Inventory.updateInventoryByLocationMove" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				update 
					t_wh_sku_inventory inv 
				set 
					occupation_code = null, 
					is_occupied = 0, 
					district_id = :districtId, 
					location_id = :locationId 
				where 
					inv.occupation_code = (select code from t_wh_sta where id = :staId)
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DeliveryChanngeLog.getDeliveryChanngeLogByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
				select STA_ID as staId,
				TRACKING_NO as trackingNo,
				NEWTRACKING_NO as newTrackingNo,
				LPCODE as lpcode,
				NEWLPCODE as newLpcode,
				WEIGHT as weight,
				VOLUME as volume
				from T_WH_STA_DELIVERY_CHANGE_LOG l where l.newtracking_no=:trackingNo
			]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="StaDeliveryInfo.updateDeliveryTrackingNoById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			update T_WH_STA_DELIVERY_INFO D set  tracking_no=:trackingNo,lpcode= :lpCode where D.id=:Id
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="DeliveryChanngeLog.getDeliveryChanngeLogByTrackingNo1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
				select 
				STA_ID as staId,
				TRACKING_NO as trackingNo,
				NEWTRACKING_NO as newTrackingNo,
				LPCODE as lpcode,
				NEWLPCODE as newLpcode,
				WEIGHT as weight,
				VOLUME as volume
				 from T_WH_STA_DELIVERY_CHANGE_LOG l where l.tracking_no=:trackingNo
			]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据SKUID和SN查询 SkuSn -->
	<bean id="SkuSn.findBySkuIdAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
						sn.id as id, 
						sn.sn as sn,
						sn.sku_id as skuid,
						sn.stv_id as stvId,
						sn.ou_id as ouId,
						sn.status as skuSnStatus
					from 
						T_WH_SKU_SN sn
					where 
						sn.sn = :sn and sn.sku_id=:skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据SKUID和SN查询 SkuSn -->
	<bean id="SkuSn.findByStaIdAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
						sn.id as id, 
						sn.sn as sn,
						sn.sku_id as skuid,
						sn.ou_id as ouId,
						sn.status as skuSnStatus,
						sn.sta_id staId
					from 
						T_WH_SKU_SN sn
					where sn.sn = :sn 
						 #if ($staId)
							and sn.sta_id=:staId
						 #end
						
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 菜鸟仓SN发货查询 根据状态已经完成(10)和是否SN商品查询 -->
	<bean id="MsgRtnOutbound.findRtnOutboundByStatusAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						ot.id,
						ot.sta_code,
						ot.error_count
					from 
						t_wh_msg_rtn_outbound ot
					where 
						ot.status = 10
						and ot.is_sn = 1
						and ot.source = 'OMS'
						and ot.is_send = 0
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新MsgRtnOutbound 错误次数 -->
	<bean id="MsgRtnOutbound.updateErrorCodeByID" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_msg_rtn_outbound ro set ro.error_count = :errorCount where ro.id = :msgId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新邮件发送状态(菜鸟仓sn发货查询) -->
	<bean id="MsgRtnOutbound.updateIsSendById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_msg_rtn_outbound mro set mro.is_send = 1 where mro.id = :msgId 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询错误次数大于3次且没有发送邮件 -->
	<bean id="MsgRtnOutbound.findRtnOutboundByErrorCountAndNoSend" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select mro.id, mro.sta_code from t_wh_msg_rtn_outbound mro where mro.error_count >=3 and mro.is_sn = 1 and mro.source = 'OMS' and (mro.is_send = 0 or mro.is_send is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MsgRtnOutbound.findRtnOutBoudLineQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.id,sku.bar_code barCode,sku.id skuId,l.inv_status_id invInvstatusId,l.qty quantity
					from t_wh_msg_rtn_outbound_line l,t_bi_inv_sku sku,t_wh_inventory_status s
					where l.msg_outbound_id= :msgId
					      and l.sku_code=sku.code
					      and l.inv_status_id=s.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 退换货入库指令商品明细查询 -->
	<bean id="Sku.returnInboundDirectiveDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
             		select 
             			bis.bar_code as barCode,
				    	bis.code as code,
				      	bis.key_properties as keyProperties,
				      	bis.name as name,
				      	bis.supplier_code as supplierCode,
				      	sl.quantity as planQuantity,
				      	decode(sl.inv_status_id,null,'',1,'良品',2,'残次品',81,'待处理品',123,'良品','')
				 	from 
				 		t_wh_sta ws
				 	left join 
				 		t_wh_sta_line sl
				   	on 
				   		ws.id = sl.sta_id
				 	left join 
				 		t_bi_inv_sku bis
				   	on 
				   		sl.sku_id = bis.id
				 	left join 
				 		T_WH_INVENTORY_STATUS wis
				   	on 
				   		wis.id = sl.inv_status_id
					where 
						ws.id = :staId and ws.main_wh_id = :ouId
                ]]>	
              </value>
		</constructor-arg>
	</bean>
	<!--根据输出单据号获取商品库存状态 -->
	<bean id="Sku.findSkuStatusByorderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
             	select 
             	t2.status_id as invStatus,
             	sku.id as skuCid,
             	sku.ext_code2 as dpProp1
             	from t_bi_inv_sku sku,
   				(select distinct status_id,sku_id from T_WH_INV_CHECK_DIF_LINE t1 where  t1.inv_check_id= :orderCode) t2 where sku.id=t2.sku_id
                ]]>	
              </value>
		</constructor-arg>
	</bean>
	
	<!-- 根据ID删除 -->
	<bean id="SkuSn.deleteSkuSnById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
                	DELETE FROM T_WH_SKU_SN TSS WHERE TSS.ID = :skuSnId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.queryPickingUser" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_T_LEVIS_ORDER_CODE.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 定时任务配置查询配置(分页)-->
		<bean id="SysSchedulerTask.findSysSchedulerTaskList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
	                select 
	         			ID as id,
	        			bean_name as beanName,
	         			description as description,
	         			method_name as methodName,
	        			time_exp as timeExp,
	         			node as node
	  				from T_SYS_SCHEDULER_TASK  where 1=1
	  				#if($methodName)
	  					and method_name=:methodName
	  				#end
	  				#if($beanName)
	  					and bean_name=:beanName
	  				#end
                ]]>
			</value>
		</constructor-arg>
		</bean>
	<bean id="Sku.findSkuMaterialByStaId" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
			<value>
                <![CDATA[ 
                select sku.bar_code as barCode  
                from t_bi_inv_sku sku where id in
                (select sku_id from t_wh_package_info where sta_delivery_info_id = (select id from t_wh_sta_delivery_info where id=:staId))
                ]]>
			</value>
		</constructor-arg>
	</bean>	
	<!-- 在库商品效期调整查询(条件) -->
	<bean id="Inventory.findValidityAdjustByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT 
					   ROWNUM AS ID,
				       SKU.ID AS SKUID,
				       SKU.CODE AS SKUCODE,
				       SKU.BAR_CODE AS BARCODE,
				       SKU.NAME AS SKUNAME,
				       SKU.EXT_CODE2 AS EXTCODE2,
				       SKU.SUPPLIER_CODE AS SUPPLIERSKUCODE,
				       LOC.CODE AS LOCATIONCODE,
				       STATUS.NAME AS INVSTATUSNAME,
				       STATUS.ID AS INVENTORYSTATUSID,
				       CH.CODE AS INVOWNER,
				       INV.QTY AS QUANTITY,
				       INV.LOCK_QTY AS LOCKQTY,
				       INV.QTY - INV.LOCK_QTY AS AVAILQTY,
				       INV.PRODUCTIONDATE AS productionDate,
				       INV.EXPIREDATE AS expireDate
				  FROM 
				       T_BI_INV_SKU SKU,
				       T_BI_BRAND BRAND,
				       (SELECT INV.OU_ID AS WH_OUID,
				               INV.LOCATION_ID,
				               INV.SKU_ID,
				               INV.STATUS_ID AS INVSTATUS_ID,
				               INV.INV_OWNER AS OWNER,
				               SUM(INV.QUANTITY) AS QTY,
				               INV.PRODUCTION_DATE AS PRODUCTIONDATE,
				               INV.EXPIRE_DATE AS EXPIREDATE,
				               SUM(CASE
				                     WHEN INV.OCCUPATION_CODE IS NOT NULL THEN
				                      INV.QUANTITY
				                     ELSE
				                      0
				                   END) AS LOCK_QTY
				         FROM 
				            T_WH_SKU_INVENTORY INV
				         WHERE 
				            INV.OU_ID = :whOuId
				         GROUP BY 
				                  INV.OU_ID,
				                  INV.LOCATION_ID,
				                  INV.SKU_ID,
				                  INV.STATUS_ID,
				                  INV.INV_OWNER,
				                  INV.PRODUCTION_DATE,
				                  INV.EXPIRE_DATE
				         ) INV,
				         T_WH_LOCATION LOC,
				         T_BI_CHANNEL CH,
				         T_WH_INVENTORY_STATUS STATUS
					WHERE 
					       INV.LOCATION_ID = LOC.ID
					       AND CH.CODE = INV.OWNER
					       AND SKU.BRAND_ID = BRAND.ID
					       AND INV.SKU_ID = SKU.ID
					       AND STATUS.ID = INV.INVSTATUS_ID
					       AND SKU.STORE_MODE = 33
					       AND INV.WH_OUID = :whOuId 
					       #if($BARCODE)
							 AND SKU.BAR_CODE = :BARCODE
						   #end
						   #if($SKUCODE)
					         AND SKU.CODE = :SKUCODE 
					       #end
					       #if($SKUNAME)
					         AND SKU.NAME = :SKUNAME 
					       #end
					       #if($SUPPLIERSKUCODE)
					         AND SKU.SUPPLIER_CODE = :SUPPLIERSKUCODE 
					       #end
					       #if($INVOWNER)
					         AND INV.OWNER = :INVOWNER 
					       #end
					       #if($LOCATIONCODE)
					         AND LOC.CODE = :LOCATIONCODE 
					       #end
					       #if($STATUSID)
					         AND INV.INVSTATUS_ID = :STATUSID 
					       #end
					       #if($EXTCODE2)
					         AND SKU.EXT_CODE2 = :EXTCODE2 
					       #end
					       #if($MINPDATE)
					         AND INV.PRODUCTIONDATE >= :MINPDATE 
					       #end 
					       #if($MAXPDATE)
					         AND INV.PRODUCTIONDATE <= :MAXPDATE
					       #end 
					       #if($MINEXPDATE)
					         AND INV.EXPIREDATE >= :MINEXPDATE 
					       #end 
					       #if($MAXEXPDATE)
					         AND INV.EXPIREDATE <=:MAXEXPDATE
					       #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- (根据条件)查询效期 -->
	<bean id="Inventory.findvalidDateByParameter" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                    select 
                    	wis.id as id, 
                    	wis.valid_date as validDate, 
                    	wis.production_date as pDate, 
                    	wis.expire_date as eDate 
                    from 
                    	T_WH_SKU_INVENTORY wis 
                    WHERE 
                    	1 = 1 
                    	#if($whOuId)
							 AND wis.ou_id = :whOuId
						#end
                    	#if($locationId)
							 AND wis.location_id = :locationId
						#end
						#if($skuId)
							 AND wis.sku_id = :skuId
						#end
						#if($statusId)
							 AND wis.status_id = :statusId
						#end
						#if($invOwner)
							 AND wis.inv_owner = :invOwner
						#end
						#if($pDate)
							 AND wis.production_date = :pDate
						#end
						#if($eDate)
							 AND wis.expire_date = :eDate
						#end
                ]]>	
              </value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Inventory.updateInventoryByInvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					UPDATE T_WH_SKU_INVENTORY  SET quantity=:qty  WHERE ID = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- (在库商品效期调整 更新效期) -->
	<bean id="Inventory.updateInventoryByValidDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					UPDATE T_WH_SKU_INVENTORY WSI SET WSI.PRODUCTION_DATE = :pDate, WSI.EXPIRE_DATE = :eDate WHERE WSI.ID = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.queryPickingUser" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_T_LEVIS_ORDER_CODE.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据顺丰订单确认队列的pId查询关联的分存运单号码 -->
	<bean id="SfMailNoRemainRelation.findMailNoByRefPid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT mrr.split_mailno FROM T_SF_MAILNO_REMAIN_RELATION mrr WHERE mrr.ref_id = :pId ORDER BY ID ASC
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.checkStaRepetitive" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select slip_code
						from (select au.name,sta.slip_code,count(1)
						from t_wh_sta sta,t_wh_sta_delivery_info d,t_au_operation_unit au
						where sta.id = d.id
						      and au.id = sta.main_wh_id
						      and sta.create_time >= sysdate - 1
						      and sta.type = 21
						      and sta.status not in (15,17)
						group by au.name,sta.slip_code,sta.skus
						having count(1) > 1) t
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeStockReceive.updateFileName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_STOCK_RECEIVE t set t.file_Name = :fileName where t.status = :toWriteStatus and t.brand is null
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeStockReceive.updateFileNameBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update T_NIKE_STOCK_RECEIVE t set t.file_Name = :fileName where t.status = :toWriteStatus and t.brand = '1'
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StockTransApplication.findpdaQueryLists" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	
                     
                     

SELECT a.sta_id AS ID,
       a.code,         
       a.slip_code,
       a.slip_code1,
       a.owner ,
       a.type,
       a.status,
        nvl(a.quantity,0) quantity,
       
      nvl(b.qty,0) qty,
      nvl(c.qty2,0) qty2,
       a.create_time create_time  FROM 
(SELECT 
       sta.id AS sta_id ,
       c.id AS c_ID,
       sta.code code,         
       sta.slip_code slip_code,
       sta.slip_code1 slip_code1,
       l.name owner,
       sta.type type,
       sta.status status,
       SUM(stal.quantity) quantity,
       --SUM(cline.qty) qty,
      -- nvl(sum(ol.qty),0) qty2,
       min(c.create_time) create_time
FROM t_wh_sta_carton c
     left join t_wh_sta sta ON c.sta_id=sta.id
     left join t_bi_channel l ON sta.owner=l.code
     --left join t_wh_sta_carton_line cline ON c.id=cline.c_id
     left join t_wh_sta_line stal ON sta.id=stal.sta_id
    --LEFT JOIN t_wh_sta_op_log ol ON sta.id=ol.sta_id AND ol.type=2
WHERE  sta.main_wh_id = :ouId

						                #if($code)
						                  and sta.code=:code
						                #end
						                #if($slipCode1)
						                  and sta.slip_code1 like :slipCode1
						                #end
						                
						                #if($slipCode)
						                  and sta.slip_code like :slipCode
						                #end
						                #if($owner)
						                  and sta.owner=:owner
						                #end
						                #if($createTime)
						                  and c.create_time >= :createTime
						                #end
						                #if($endCreateTime)
						                  and c.create_time <= :endCreateTime
						                #end
						                
						                #if($finishTime)
						                  and sta.finish_time >= :finishTime
						                #end
						                #if($endFinishTime)
						                  and sta.finish_time <= :endFinishTime
						                #end
						               
						                #if($status)
						                  and sta.status = :status
						                #end
						                #if($intType) 
						                  and sta.type = :intType
						                #end  
      
GROUP BY sta.code,         
       sta.slip_code,
       sta.slip_code1,
       l.name ,
       sta.type,
       sta.status,c.id,sta.id)a LEFT JOIN (SELECT SUM(cline.qty) qty,cline.c_id FROM t_wh_sta_carton_line cline GROUP BY cline.c_id ) b  ON a.c_ID=b.c_id  
       LEFT JOIN  (SELECT sum(ol.qty) AS qty2,ol.sta_id FROM t_wh_sta_op_log ol WHERE ol.type=2 GROUP BY ol.sta_id ) c ON a.sta_id=c.sta_id       
                     
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeReturnReceive.updateFileName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    update t_wh_receive_confirmation t 
				    set t.file_Name =:fileName  
				    where t.type =:type  
				    and t.status =:toWriteStatus
				    #if($referenceNo)
						and t.reference_no = :referenceNo
					#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsSalesOrderLog.findWmsSalesOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    select * from t_wh_so_log solog where solog.create_time<=sysdate-60 and 
				    rownum<=:rowNum
				    
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsSalesOrderLog.findWmsSalesOrderCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				    select count(1) as Qty from t_wh_so_log solog where solog.create_time<=sysdate-60 
				    
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsSalesOrderLog.deleteWmsSalesOrderLogById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 
				   delete t_wh_so_log solog where solog.create_time<=sysdate-60 and rownum<=10000
				    
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StaDeliveryInfo.getParentAndSonMailNoById1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						pi.tracking_no as sunNo 
					from 
						t_wh_package_info pi, t_wh_sta_delivery_info di 
					where 
						pi.sta_delivery_info_id = di.id 
					and 
						pi.tracking_no <> di.tracking_no and di.id = :staId
				]]>
			</value>
		</constructor-arg>
	<!--获取库存数量  -->
	</bean>
	
	<bean id="StaDeliveryInfo.queryTotalCatrgories" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select wm_concat(distinct(t.sku_categories_name)) totalCategories from t_wh_sta sta 
					inner join t_wh_sta_line l on l.sta_id=sta.id
					inner join t_bi_inv_sku sku on sku.id=l.sku_id
					left  join t_ma_sku_categories t on sku.SKU_CATEGORIES_ID=t.id
					where  sta.slip_code= :slipCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaDeliveryInfo.findDeliveryInfoByStaRtn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
				         d.tracking_no as trackingNo,
                         t.name as lpcode,
                         d.store_com_is_need_invoice as isNeedInvoice,
                         d.remark as returnReasonMemo
					from 
						 t_wh_sta_delivery_info d,t_ma_transportator t
					where 
						d.lpcode = t.exp_code
					and 
						d.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.getInventoryQuantityBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select sum(quantity) as quantity from t_wh_sku_inventory where sku_id=:skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HubStockInCheckItem.getCheckItemByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				        select line.order_line_no orderItemId ,line.quantity quantity
						from  t_wh_sta   sta 
						     inner join  t_wh_sta_line line  on sta.id =line.sta_id
						where sta.id=:staId
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SalesRaDataCommand.findByOuId" class="loxia.dao.support.DynamicQueryHolder">
	<constructor-arg>
			<value>
				<![CDATA[
select * from
(select bi.code as owner,count(s.code) qty1 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where status in(1,2,3,4,20) and type=21 and create_time>=sysdate-5/24 and create_time<sysdate and sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) a,
(select bi.code as code2 ,count(s.code) as qty2 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where status in(1,2,3,4,20) and type=21 and create_time>=sysdate-18/24 and create_time+5/24<sysdate and sta.main_wh_id=:ouId) s on bi.code=s.owner group by bi.code
) b,  
(select bi.code as code3 ,count(s.code) as qty3 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where status in(1,2,3,4,20) and type=21 and create_time>=sysdate-1 and create_time+18/24<sysdate and  sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) c,
(select bi.code as code4 ,count(s.code) as qty4 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where status in(1,2,3,4,20) and type=21 and create_time>=sysdate-42/24 and create_time+1<sysdate and  sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) d,
(select bi.code as code5 ,count(s.code) as qty5 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where  status in(1,2,3,4,20) and type=21 and create_time>=sysdate-2 and create_time+42/24<sysdate and  sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) e,
(select bi.code as code6 ,count(s.code) as qty6 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where  status in(1,2,3,4,20) and type=21 and create_time>=sysdate-66/24 and create_time+2<sysdate  and  sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) f,
(select bi.code as code7 ,count(s.code) as qty7 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where status in(1,2,3,4,20) and type=21 and create_time<=sysdate-72/24 and sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) g,
(select bi.code as code8 ,count(s.code) as qty8 from 
(select ch.code from t_bi_channel ch,t_bi_channel_wh_ref re where ch.id= re.channel_id and wh_ou_id=:ouId) bi left join (select * from t_wh_sta sta where status in(1,2,3,4,20) and type=21  and sta.main_wh_id=:ouId ) s on bi.code=s.owner group by bi.code
) l
where a.owner=b.code2 and a.owner=c.code3 and a.owner=d.code4 and a.owner=e.code5 and a.owner=f.code6 and a.owner=g.code7 and a.owner=l.code8

				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findByplIdAndStaId" class="loxia.dao.support.DynamicQueryHolder">
	<constructor-arg>
			<value>
				<![CDATA[
					select sta.owner,inf.lpcode,ch.code,ch.is_packing_list as isPackingList 
					from t_wh_sta sta,t_wh_sta_delivery_info inf,t_bi_channel ch where
					 sta.id=inf.id and sta.owner=ch.code and sta.picking_list_id=266388
					   #if($staId)
						and sta.id=:staId
					   #end
					  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findRuleCodeByPickingId" class="loxia.dao.support.DynamicQueryHolder">
	    <constructor-arg>
			<value>
				<![CDATA[
					select rule_Code,status as intStaStatus from t_wh_sta sta where sta.picking_list_id=:pickinglistId order by rule_Code asc 
					  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StockTransApplication.findNotGiftSkuByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.id 
					from t_wh_sta_line l,t_bi_inv_sku sku
					where l.sku_id=sku.id
					      and sku.is_gift=0
					      and l.sta_id= :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findOwnerByStvLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct inv.inv_owner 
					from t_wh_stv_line l,t_wh_sku_inventory inv
					where  l.location_id=inv.location_id
					       and l.sku_id=inv.sku_id
					       and l.inv_status_id=inv.status_id
					       and l.id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStarbucksCustom" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select p.code pickingCode,sta.code,sta.slip_code1 slipCode1,sta.ext_memo2 extMemo,sku.ext_code1 skuCode,l.quantity qty
					from t_wh_sta_picking_list p,t_wh_sta sta,t_wh_sta_line l,t_bi_inv_sku sku
					where p.id=sta.picking_list_id
					      and p.create_time>=trunc(sysdate)-1
					      and p.create_time<trunc(sysdate)
					      and sta.id=l.sta_id
					      and l.sku_id=sku.id
					      and sta.order_type2=1
					      and sta.ext_memo2 is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SysSchedulerTask.findSysSchedulerTaskByMethodNameAndWhId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
	         	select k.id from t_sys_scheduler_task k where method_name in( 'queryStaToCreateQueue','queryStaToOcpAeraInv') AND k.args=:whId
                ]]>
			</value>
		</constructor-arg>
		</bean>
		
		<bean id="SysSchedulerTask.updateSysSchedulerTaskByArgs" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
	         	update t_sys_scheduler_task k set k.NEED_COMPENSATE=:needCompensate where  k.args=:whId and k.code=CONCAT('queryStaToOcpAeraInvTirgger',:whId)
                ]]>
			</value>
		</constructor-arg>
		</bean>
	
	<bean id="StockTransApplication.findNoTransStaByMq" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					
					select a.id
					from (               
					  select sta.id,o.sta_code,o.is_locked
					  from   t_wh_sta_delivery_info info,t_wh_sta sta
					      left join T_WH_MSG_OUTBOUND_ORDER o on sta.code=o.sta_code
					  where info.id = sta.id
					      and sta.status in(1,2)
					      and (sta.type=21 or sta.type=25 or sta.type=42) 
					      and (sta.is_locked = 0 or sta.is_locked is null) 
					      and info.tracking_no is null
					      and info.lpcode is not null
					      and sta.create_time >= sysdate - 60
					      and info.mq_get_trans_no is null
					      and (sta.trans_match_count is null or sta.trans_match_count <= 10)
					      and (sta.next_get_transno_time is null or sta.next_get_transno_time<sysdate)
					      ) a
					where (a.sta_code is null or a.Is_Locked=1)
					      and rownum<=:orderCount
                   
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaStatusByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					
					select count(1) from t_wh_sta sta where sta.picking_list_id=:piId and sta.status not in(10,4,17)
                   
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findMacaoHGDByPickinglistId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select count(1) from t_wh_sta sta where sta.picking_list_id=:piId  and sta.is_print_macao_hgd=1
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findStaByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					
					select count(1) from t_wh_sta sta where sta.picking_list_id=:piId and sta.main_wh_id=:ouId and sta.status in(15,17)
                   
				  ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<!-- 线程池维护配置查询配置(分页)-->
		<bean id="ThreadConfig.getAllThreadConfig" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
	                select 
	         			ID as id,
	        			THREAD_CODE as threadCode,
	         			THREAD_COUNT as threadCount,
	         			MEMO as memo,
	        			SYS_KEY as sysKey
	  				from T_SYS_THREAD_CONFIG  
                ]]>
			</value>
		</constructor-arg>
		</bean>
		<!-- 直连店铺过仓优先级维护配置查询配置(分页)-->
		<bean id="PriorityChannelOms.getAllPriorityChannelOms" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
	                select 
	         			ID as id,
	        			CODE as code,
	         			QTY as qty
	  				from t_wh_priority_channel_oms  
                ]]>
			</value>
		</constructor-arg>
		</bean>
		<!-- 直连店铺过仓优先级维护配置查询配置(分页)-->
		<bean id="ChooseOption.findOptionListByOptionKey" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
	                select 
	         			ID as id,
	        			CATEGORY_NAME as categoryName,
	        			OPTION_VALUE as optionValue,
	         			OPTION_KEY as optionKey
	  				from T_SYS_CHOOSE_OPTION  where OPTION_KEY = 'OCP_BARCH_LIMIT'
                ]]>
			</value>
		</constructor-arg>
	</bean>
			<bean id="Sku.findSkuMaterialByBarcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                    select 
                    id,
                    bar_code as  barCode
                    from t_bi_inv_sku sku 
                    where sku.bar_code=:barCode and sku.sp_type=1 and sku.customer_id=:customerId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.getSequenceIdForInvUniqueKey" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_T_WH_INV_SNAPSHOT_UNIQUEKEY.nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.findAdIncrementalInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select t.id id,
					        t.wh_ou_code whouCode,
			                t.customer_sku_code customerSkuCode,
			                t.sales_avail_qty salesAvailQty, 
			                t.create_time createTime
			          from t_wh_st_log_queue_hub t
			          where t.customer_code='adidas'
			          and t.status=1
			          and (t.error_count is null or t.error_count<5)
			          and (t.next_push_time is null or t.next_push_time>sysdate)
			          and rownum< :limitNum
                      order by t.id desc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.updateAdAmiIncInvSucessStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      update t_wh_st_log_queue_hub inv 
				  set inv.status= :status
				  where inv.status =1
				        and inv.customer_code='adidas'
				        #if($ids)
							and inv.id in(
								#foreach($id in $ids)
									'$id',
								#end
						   -1)
					    #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.updateAdAmiIncInvFailedStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      update t_wh_st_log_queue_hub inv 
				  set inv.error_count=(case when inv.error_count is null then 1 else inv.error_count+1 end),
				      inv.next_push_time=sysdate+5/24/60*nvl(inv.error_count,1)
				  where inv.customer_code='adidas'
				        #if($ids)
					    and  inv.id in(
								#foreach($id in $ids)
									'$id',
								#end
						   -1)
					    #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.deleteLastAdAmiIncInvDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      delete from  t_wh_st_log_queue_hub inv 
				  where inv.customer_code='adidas'
				        and inv.create_time<sysdate-1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.transferInventoryAdidasToLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			        insert into T_WH_ST_LOG_QUEUE_LOG(id,WH_OU_ID,WH_OU_CODE,TRANS_TYPE_NAME,CREATE_TIME,SKU_ID,CUSTOMER_SKU_CODE,CUSTOMER_ID,
					CUSTOMER_CODE,SALES_AVAIL_QTY,CHANNEL_CODE,STATUS,BATCH_ID,LOG_TIME)     
					select id,WH_OU_ID,WH_OU_CODE,TRANS_TYPE_NAME,CREATE_TIME,SKU_ID,CUSTOMER_SKU_CODE,CUSTOMER_ID,
					CUSTOMER_CODE,SALES_AVAIL_QTY,CHANNEL_CODE,STATUS,BATCH_ID,sysdate from(
					        select id,WH_OU_ID,WH_OU_CODE,TRANS_TYPE_NAME,CREATE_TIME,SKU_ID,CUSTOMER_SKU_CODE,CUSTOMER_ID,
					CUSTOMER_CODE,SALES_AVAIL_QTY,CHANNEL_CODE,STATUS,BATCH_ID from T_WH_ST_LOG_QUEUE 
					where create_time <=:datetime and customer_code='adidas'
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.insertInventorySnapshot" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					insert into T_WH_INVENTORY_SNAPSHOT (id,Batch_Code,Owner_Code,Bin_Code,Sku_Code,Inv_Status_Code,Qty,Status,Transaction_Time)
							select S_T_WH_INVENTORY_SNAPSHOT.nextval,b.* from (select :batch,t.ownerCode,t.binCode,t.skuCode,t.invStatusCode,sum(t.qty)  qty,0,sysdate  transactionTime  from (
							        select  inv.inv_owner  ownerCode,  au.code  binCode,sku.code  skuCode,
							                    case  when  status.name 
							                        ='良品'  and  status.is_forsale=1  then  '10'
							                              when  status.name 
							                        ='待处理品'  then  '40'
							                              else  '20'
							                         end    invStatusCode,
							                      inv.quantity    qty
							        from  wms.t_wh_sku_inventory  inv
							        inner  join   wms.t_au_operation_unit  au  on  au.id =inv.ou_id
							        inner  join   wms.t_bi_inv_sku  sku  on  sku.id =inv.sku_id
							        inner  join   wms.t_wh_inventory_status    status  on  inv.status_id=status.id
							        where  inv.quantity>0
							               and  inv.inv_owner = :owner
							          )  t
							group  by  t.ownerCode,t.binCode,t.skuCode,t.invStatusCode ) b
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="InventorySnapShot.findInvWhFullInventoryToIm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
							t.owner_code as ownerCode,
							t.batch_code as batch,
							t.bin_code as binCode,
							t.sku_code as skuCode,
							t.inv_status_code as invStatusCode,
							'BZ-WMS_3' as sourceSys,
							1 as type,
							t.id as uniqueKey,
							t.qty as qty,
							t.transaction_time as transactionTime
						from T_WH_INVENTORY_SNAPSHOT t 
							where 
							t.status = 0 
							and t.batch_code = :batch
							and rownum <=50
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="InventorySnapShot.getInvWhFullInventorySuccessToIm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					:batch || '⊥' || count(*) || '⊥' || sum(t.qty)
					from T_WH_INVENTORY_SNAPSHOT t
					where 
					t.batch_code = :batch
					and t.status = 1
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="DeliveryChanngeLog.getDeliveryChanngeLogList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
				SELECT sta.code as staCode,
				sta.slip_code as slipCode,
				sta.slip_code1 as slipcode1,
				sta.owner as channel,
				delog.lpcode as lpcode,
				delog.tracking_no as trackingNo,
				delog.newlpcode as newLpcode,
				delog.newtracking_no as newTrackingNo,
				delog.create_time  as createTime 
				FROM wms.t_wh_sta sta ,wms.t_wh_sta_delivery_change_log delog 
				WHERE sta.id=delog.sta_id and sta.main_wh_id=:ouId
				#if($staCode)
					and sta.code like :staCode
				#end
				#if($slipCode)
					and sta.slip_code like :slipCode
				#end
				#if($slipCode1)
					and sta.slip_code1 like :slipCode1
				#end
				#if($channel)
					and sta.owner=:channel
				#end
				#if($lpCode)
					and delog.lpcode=:lpCode
				#end
				#if($trackingNo)
					and delog.tracking_no like :trackingNo
				#end
				#if($newLpcode)
					and delog.newlpcode=:newLpcode
				#end
				#if($newTrackingNo)
					and delog.newtracking_no like :newTrackingNo
				#end
				#if($startDate)
					and delog.create_time >= :startDate
				#end
				#if($endDate)
					and delog.create_time < :endDate
				#end
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PackageInfo.updatelpCodeByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 UPDATE t_wh_package_info p SET p.lpcode= :lpCode WHERE p.tracking_no= :trackingNo
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSkuByBarCodeAndCustomerId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select
                sku.IS_RFID as isRfid
                from
                t_bi_inv_sku sku,
                t_bi_inv_sku_barcode bar
                where sku.id = bar.sku_id
                and (sku.bar_code =:barCode or bar.barcode =:barCode)
                and sku.customer_id =:customerId
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 区域绑定作业类型 -->
	<bean id="DistriButionArea.findDistriButionArea" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT
				ID AS id ,
				DISTRIBUTION_AREA_CODE AS distriButionAreaCode,
				DISTRIBUTION_AREA_NAME AS distriButionAreaName,
				MAIN_WH_ID AS mainWhid,
				CREATE_TIME AS createTime,
				CREATE_ID AS createId,
				CREATE_USER AS createUser,
				VERSION AS version
			FROM
				T_WH_DISTRIBUTION_AREA
			WHERE
				1 = 1
			AND MAIN_WH_ID = :mainWhid 
		    #if($distriButionAreaCode)
			AND T_WH_DISTRIBUTION_AREA.DISTRIBUTION_AREA_CODE LIKE :distriButionAreaCode
			#end
			#if($distriButionAreaName)
			AND T_WH_DISTRIBUTION_AREA.DISTRIBUTION_AREA_NAME LIKE :distriButionAreaName
			#end 
			]]>
			</value>
		</constructor-arg>
	</bean>
  <bean id="DistriButionArea.updateDistriButionArea" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 UPDATE T_WH_DISTRIBUTION_AREA 
			 SET DISTRIBUTION_AREA_CODE = :distriButionAreaCode,
			     DISTRIBUTION_AREA_NAME = :distriButionAreaName
			 WHERE ID = :id
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="DistriButionArea.deleteDistriButionArea" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 DELETE FROM T_WH_DISTRIBUTION_AREA  WHERE ID = :id
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistriButionArea.deleteLocByDistriButionAreaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 DELETE FROM T_WH_DISTRIBUTION_AREA_LOC  WHERE DISTRIBUTION_AREA_ID = :distriButionAreaId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistriButionArea.deleteTypeByDistriButionAreaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 DELETE FROM T_WH_DISTRIBUTION_AREA_TYPE  WHERE DISTRIBUTION_AREA_ID = :distriButionAreaId
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="DistriButionArea.repeatCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT COUNT(1) NUM FROM T_WH_DISTRIBUTION_AREA WHERE MAIN_WH_ID = :mainWhid AND  DISTRIBUTION_AREA_CODE = :distriButionAreaCode AND DISTRIBUTION_AREA_NAME = :distriButionAreaName
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistriButionArea.repeatCheckDistriButionAreaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT COUNT(1) NUM FROM T_WH_DISTRIBUTION_AREA WHERE MAIN_WH_ID = :mainWhid AND  DISTRIBUTION_AREA_CODE = :distriButionAreaCode
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistriButionArea.repeatCheckDistriButionAreaName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT COUNT(1) NUM FROM T_WH_DISTRIBUTION_AREA WHERE MAIN_WH_ID = :mainWhid AND DISTRIBUTION_AREA_NAME = :distriButionAreaName
			]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 区域绑定库位 -->
	<bean id="DistriButionAreaLoc.findDistriButionAreaLoc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
		SELECT
			TWHD.LOC_ID AS ID,
			TWHDT. NAME AS codeName,
			TWHD.CODE AS code,
			TWHD.DISTRIBUTION_AREA_CODE AS distriButionAreaCode,
			TWHD.DISTRIBUTION_AREA_NAME AS distriButionAreaName,
			TWHD.CREATE_TIME AS createTime,
			TWHD.CREATE_USER AS createUser
		FROM
	    (
			SELECT
				DL.LOC_ID LOC_ID,
				DL.DISTRIBUTION_AREA_CODE DISTRIBUTION_AREA_CODE,
				DL.DISTRIBUTION_AREA_NAME DISTRIBUTION_AREA_NAME,
				DL.CREATE_TIME CREATE_TIME,
				DL.CREATE_USER CREATE_USER,
				TWHL.CODE CODE,
				TWHL.DISTRICT_ID DISTRICT_ID,
				DL.MAIN_WH_ID
			FROM
				(
					SELECT
						TWHDL. ID AS LOC_ID,
						TWHDL.LOCATION_ID,
						TWHD.DISTRIBUTION_AREA_CODE,
						TWHD.DISTRIBUTION_AREA_NAME,
						TWHD.CREATE_TIME,
						TWHD.CREATE_USER,
						TWHD.MAIN_WH_ID
					FROM
						T_WH_DISTRIBUTION_AREA_LOC TWHDL
					JOIN T_WH_DISTRIBUTION_AREA TWHD ON TWHDL.DISTRIBUTION_AREA_ID = TWHD. ID
				) DL
			JOIN T_WH_LOCATION TWHL ON DL.LOCATION_ID = TWHL. ID
		) TWHD
	   JOIN T_WH_DISTRICT TWHDT ON TWHD.DISTRICT_ID = TWHDT. ID
	   WHERE 1 = 1 
	   AND TWHD.MAIN_WH_ID = :mainWhid
       #if($locCodeName)
	   AND TWHDT.NAME = :locCodeName
	   #end
	   #if($locCode)
	   AND TWHD.CODE LIKE :locCode
	   #end
	   #if($locDistriButionAreaCode)
	   AND TWHD.DISTRIBUTION_AREA_CODE = :locDistriButionAreaCode
	   #end
	   #if($locDistriButionAreaName)
	   AND TWHD.DISTRIBUTION_AREA_NAME = :locDistriButionAreaName
	   #end
			]]>
			</value>
		</constructor-arg>
	</bean>
	 <bean id="DistriButionAreaLoc.deleteDistriButionAreaLoc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 DELETE FROM T_WH_DISTRIBUTION_AREA_LOC  WHERE ID = :id
			]]>
			</value>
		</constructor-arg>
	</bean>findDistriButionAreaLoc
	<bean id="DistriButionAreaLoc.getName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT DISTINCT NAME AS codeName FROM T_WH_DISTRICT
			]]>
			</value>
		</constructor-arg>
	</bean>
   <bean id="DistriButionAreaLoc.getDistriButionNameList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT DISTINCT DISTRIBUTION_AREA_NAME AS  distriButionAreaName FROM T_WH_DISTRIBUTION_AREA 
		     WHERE 1 = 1
		     AND MAIN_WH_ID = :mainWhid
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistriButionAreaLoc.getDistriButionCodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT DISTINCT DISTRIBUTION_AREA_CODE AS distriButionAreaCode FROM T_WH_DISTRIBUTION_AREA 
		     WHERE 1 = 1
		     AND MAIN_WH_ID = :mainWhid
			]]>
			</value>
		</constructor-arg>
	</bean>
   <!-- 区域绑定作业类型 -->
	<bean id="DistriButionAreaType.getDistriButionAreaType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
		  SELECT
		  COUNT (DISTRIBUTIONAREACODE) num
		  FROM
			(
			SELECT
			  TWHTY.DISTRIBUTION_AREA_CODE AS distriButionAreaCode,
			  TWHTY.DISTRIBUTION_AREA_NAME AS distriButionAreaName,
		      TWHTT.OU_ID AS ouid,
		      TWHTY.MAIN_WH_ID
				FROM
					(
						SELECT
							TWHT. ID,
							TWHT.TRANSACTION_TYPE_ID,
							TWH.DISTRIBUTION_AREA_CODE,
							TWH.DISTRIBUTION_AREA_NAME,
							TWH.MAIN_WH_ID
						FROM
							T_WH_DISTRIBUTION_AREA_TYPE TWHT
						JOIN T_WH_DISTRIBUTION_AREA TWH ON TWHT.DISTRIBUTION_AREA_ID = TWH. ID
					) TWHTY
				JOIN T_WH_TRANSACTION_TYPE TWHTT ON TWHTY.TRANSACTION_TYPE_ID = TWHTT. ID
				WHERE
					TWHTT.DIRECTION = 2
			) MS
		WHERE 1 = 1
        #if($distriButionAreaCode)
	    AND MS.DISTRIBUTIONAREACODE = :distriButionAreaCode
	    #end
        #if($distriButionAreaName)
	    AND MS.DISTRIBUTIONAREANAME = :distriButionAreaName
	    #end
		]]>
			</value>
		</constructor-arg>
	</bean>
	 <bean id="TwhdistriButionAreaType.cancelBinding" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 DELETE FROM T_WH_DISTRIBUTION_AREA_TYPE  WHERE DISTRIBUTION_AREA_ID = :distriButionAreaId AND TRANSACTION_TYPE_ID = :transActionTypeId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TwhdistriButionAreaType.judgeBinding" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT COUNT(1) NUM FROM T_WH_DISTRIBUTION_AREA_TYPE  WHERE DISTRIBUTION_AREA_ID = :distriButionAreaId AND TRANSACTION_TYPE_ID = :transActionTypeId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BingdingDetai.findBingdingDetai" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			SELECT
				TWHTY. ID AS ID,
				TWHTY.DISTRIBUTION_AREA_CODE AS distriButionAreaCode,
				TWHTY.DISTRIBUTION_AREA_NAME AS distriButionAreaName,
				TWHTT.CODE AS code,
				TWHTT. NAME AS NAME
			 FROM
				(
					SELECT
						TWH. ID,
						TWHT.TRANSACTION_TYPE_ID,
						TWH.DISTRIBUTION_AREA_CODE,
						TWH.DISTRIBUTION_AREA_NAME,
			      TWH.MAIN_WH_ID
					FROM
						T_WH_DISTRIBUTION_AREA_TYPE TWHT
					JOIN T_WH_DISTRIBUTION_AREA TWH ON TWHT.DISTRIBUTION_AREA_ID = TWH. ID
				) TWHTY
			  JOIN T_WH_TRANSACTION_TYPE TWHTT ON TWHTY.TRANSACTION_TYPE_ID = TWHTT. ID
			  WHERE
			  TWHTT.DIRECTION = 2
			  AND TWHTY.MAIN_WH_ID = :mainWhid
			  #if($bingdingDetaiId)
		      AND TWHTY.ID = :bingdingDetaiId
		      #end			  
			]]>
			</value>
		</constructor-arg>
	</bean>
   <bean id="DwhDistriButionAreaLoc.getDistriButionId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			 SELECT ID AS distriButionId  FROM T_WH_DISTRIBUTION_AREA WHERE MAIN_WH_ID = :mainWhid  AND DISTRIBUTION_AREA_CODE = :distriButionCode AND DISTRIBUTION_AREA_NAME = :distriButionName
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="DwhDistriButionAreaLoc.getLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
			  SELECT TWHL.ID AS locationId FROM T_WH_LOCATION TWHL  JOIN T_WH_DISTRICT TWHDT ON TWHL.DISTRICT_ID = TWHDT. ID WHERE TWHL.CODE = :code AND TWHDT.NAME = :codeName
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="DwhDistriButionAreaLoc.getNum" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
			<value>
		    <![CDATA[
		     SELECT COUNT(1) FROM T_WH_DISTRIBUTION_AREA_LOC WHERE DISTRIBUTION_AREA_ID = :distriButionId  AND LOCATION_ID = :locationId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DwhDistriButionAreaLoc.exportDistriButionArea" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
		  SELECT
			TWHD.CODE AS code,
			TWHDT. NAME AS codeName,
			TWHD.DISTRIBUTION_AREA_CODE AS distriButionCode,
			TWHD.DISTRIBUTION_AREA_NAME AS distriButionName
		FROM
	    (
			SELECT
				DL.LOC_ID LOC_ID,
				DL.DISTRIBUTION_AREA_CODE DISTRIBUTION_AREA_CODE,
				DL.DISTRIBUTION_AREA_NAME DISTRIBUTION_AREA_NAME,
				DL.CREATE_TIME CREATE_TIME,
				DL.CREATE_USER CREATE_USER,
				TWHL.CODE CODE,
				TWHL.DISTRICT_ID DISTRICT_ID,
				DL.MAIN_WH_ID
			FROM
				(
					SELECT
						TWHDL. ID AS LOC_ID,
						TWHDL.LOCATION_ID,
						TWHD.DISTRIBUTION_AREA_CODE,
						TWHD.DISTRIBUTION_AREA_NAME,
						TWHD.CREATE_TIME,
						TWHD.CREATE_USER,
						TWHD.MAIN_WH_ID
					FROM
						T_WH_DISTRIBUTION_AREA_LOC TWHDL
					JOIN T_WH_DISTRIBUTION_AREA TWHD ON TWHDL.DISTRIBUTION_AREA_ID = TWHD. ID
				) DL
			JOIN T_WH_LOCATION TWHL ON DL.LOCATION_ID = TWHL. ID
		) TWHD
	JOIN T_WH_DISTRICT TWHDT ON TWHD.DISTRICT_ID = TWHDT. ID
	WHERE TWHD.MAIN_WH_ID = :mainWhid
	#if($locCodeName)
    AND TWHDT. NAME = :locCodeName
    #end
    #if($locCode)
    AND TWHD.CODE LIKE :locCode
    #end
    #if($locDistriButionAreaCode)
    AND TWHD.DISTRIBUTION_AREA_CODE = :locDistriButionAreaCode
    #end
    #if($locDistriButionAreaName)
    AND TWHD.DISTRIBUTION_AREA_NAME = :locDistriButionAreaName
    #end
	]]>
	</value>
		</constructor-arg>
	</bean>
</beans>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
