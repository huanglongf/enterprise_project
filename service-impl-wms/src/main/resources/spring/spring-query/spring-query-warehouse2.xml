<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<bean id="HandOverListLine.findLineDetailByHoListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
                  select l.id as id,
                         l.tracking_no as trackingNo,
                         l.weight as weight,
                         l.status as lineIntStatus,
                         info.last_modify_time as outboundTime
                  from T_WH_STA_HO_LIST_LINE l,
                       t_wh_package_info info
                  where info.tracking_no = l.tracking_no
                        and l.ho_list_id = :holid
                        and l.status=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="HandOverListLine.findLineDetailByHoListIdAD" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
                  select l.id as id,
                         l.tracking_no as trackingNo,
                         l.weight as weight,
                         l.status as lineIntStatus,
                         info.last_modify_time as outboundTime,
                         sku.bar_code barcode,
                         (select sta.slip_code from t_wh_sta sta where sta.id=info.sta_delivery_info_id) refSlipCode
                  from t_wh_sta_ho_list_line l,
                       t_wh_package_info info,
                       t_bi_inv_sku sku
                  where info.tracking_no = l.tracking_no
                        and info.sku_id=sku.id(+)
                        and l.ho_list_id = :holid
                        and l.status=1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findSkuTypeNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select count(line.sku_id) from  
t_wh_sta_line line
where
line.sta_id=:staId
group by sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findTotalSkuCountByHoId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select nvl(sum(line.quantity),0) from  
				t_wh_sta_line line, 
				T_WH_STA sta
				where 
				sta.ho_list_id = :hoid 
				and line.sta_id = sta.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findTotalQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select nvl(sum(line.quantity),0) from  
				t_wh_sta_line line, 
				T_WH_STA sta
				where 
				sta.id = :staId 
				and line.sta_id = sta.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStalAddBarcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.barcode CODE,l.id ID
					from t_wh_sta_line l,
					     t_bi_inv_sku_barcode sku
					where l.sku_id = sku.sku_id
					      and l.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStalAddBarcodeB" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.bar_code CODE,l.id ID
					from t_wh_sta_line l,
					     T_BI_INV_SKU sku
					where l.sku_id = sku.id
					      and l.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PriorityChannelOms.findCountAllPriority" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sum(qty) as qty from t_wh_priority_channel_oms 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findMapBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select l.sku_id || '_' || nvl(l.inv_status_id,'') || '_' || nvl(owner,'') as CODE,l.id ID
from t_wh_sta_line l
where l.sta_id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="HandOverList.findHoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ho.id as id,
							  ho.code as code,
							  ho.create_time as createTime,
							  ho.hand_over_time as handOverTime,
							  ho.status as hoIntStatus,
							  ho.lpcode as lpcode,
							  ho.party_b_operator as partyBOperator,
							  ho.party_a_operator as partyAOperator
							from 
							  t_wh_ho_wh_list tw left join  
							  t_wh_sta_ho_list ho on tw.ho_list_id=ho.id
							  #if($trackingNo)
							  	,(select l.ho_list_id as ho_id from t_wh_sta_ho_list_line l where l.tracking_no like :trackingNo) l
							  #end
							where tw.OU_ID = :ouid
							  #if($trackingNo)
							  	and ho.id = l.ho_id
							  #end
							  #if($code)
							 	 and ho.code like :code
							  #end
							  #if($status)
							  	and ho.status = :status
							  #end
							  #if($lpcode)
							  	and ho.lpcode = :lpcode
							  #end
							  #if($partyAOperator)
							  	and ho.party_a_operator like :partyAOperator
							  #end
							  #if($partyBOassport)
							  	and ho.party_b_passport like :partyBOassport
							  #end
							  #if($partyBOperator)
							  	and ho.party_b_operator like :partyBOperator
							  #end
							  #if($paytyAMobile)
							  	and ho.party_a_mobile like :paytyAMobile
							  #end
							  #if($createStartTime)
							  	and ho.create_time >= :createStartTime
							  #end
							  #if($createEndTime)
							  	and ho.create_time <= :createEndTime
							  #end
							  #if($handOverStartTime)
							 	 and ho.hand_over_time >= :handOverStartTime
							  #end
							  #if($handOverEndTime)
							  	and ho.hand_over_time <= :handOverEndTime
							  #end
					      ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findInventoryByDistrictOrLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select i from Inventory as i where i.quantity > 0
					#if($locationId)
						and i.location.id=:locationId
					#end
					#if($districtId)
						and i.district.id=:districtId
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryNumByLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select sum(t.quantity) from t_wh_sku_inventory t where t.location_id = :locationId 				
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryNoSkuByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
		select t.sku_id from t_wh_sku_inventory t where t.location_id= :locationId and t.sku_id!= :skuId 				
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select k.* from t_wh_location x, t_wh_sku_inventory k where x.id=k.location_id     
              				and x.ou_id = :ouId and x.code = :code]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryBySkuIdandLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select  sum(y.QUANTITY)  from t_wh_location t
						     ,t_wh_sku_inventory y where t.id = y.location_id  
						        #if($skuId)	
						        and y.sku_id=:skuId
						        #end
						        and t.code=:code and t.ou_id=:ouId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryBySkuIdandLocationIdandInvStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select  sum(y.QUANTITY)  from t_wh_location t
						     ,t_wh_sku_inventory y where t.id = y.location_id  
						        #if($skuId)	
						        and y.sku_id=:skuId
						        #end
						         #if($invStatus)	
						        and y.STATUS_ID=:invStatus
						        #end
						        and t.code=:code and t.ou_id=:ouId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventorySkuByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select  distinct y.sku_id from t_wh_location t
     						,t_wh_sku_inventory y where t.id = y.location_id  and t.code =:code and t.ou_id =:ouId  
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findOwnerBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select inv_owner from t_wh_sku_inventory where sku_id = :skuId and ou_id=:ouid and inv_owner is not null]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findOccupationInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sta.code as code, sta.SLIP_CODE as slipCode,sum(inv.quantity) as quantity
				  from T_WH_SKU_INVENTORY inv, t_wh_sta sta      
				  where inv.occupation_code = sta.code
 				  and inv.sku_id=:skuId
				  and inv.ou_id=:warehouseId
					#if($owner)
					and inv.inv_owner like :owner
					#end
					#if($batchCode)
					and inv.batch_code like :batchCode 
					#end
					#if($invStatusId)
					and inv.STATUS_ID =:invStatusId
					#end
					group by sta.code,sta.slip_code
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSkuQtyByLocationWithStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku_id,sum(quantity) as quantity,status_id as inventoryStatusId from t_wh_sku_inventory inv
						where inv.location_id = :locId
						      and sku_id = :skuId
						      and status_id is not null
						group by inv.status_id,inv.sku_id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findAllByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select inv.id,
					       ch.name            as invOwner,
					       sku.jm_code,
					       sku.key_properties,
					       sku.bar_code,
					       sku.name           as skuName,
					       sku.supplier_code  as supplierSkuCode,
					       loc.code           as locationCode,
					       status.name        as invStatusName,
					       inv.quantity
					  from t_wh_sku_inventory    inv,
					       t_wh_inventory_status status,
					       t_bi_inv_sku          sku,
					       t_bi_channel          ch,
					       t_wh_location         loc
					 where inv.sku_id = sku.id
					   and ch.code(+) = inv.inv_owner
					   and inv.location_id = loc.id(+)
					   and inv.status_id = status.id(+)
					   and inv.ou_id = :whOuId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findInventoryBySkuIdLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					   select count(1) 
					   from t_wh_sku_inventory inv
			           #if($locationCode) 
							,t_wh_location l
			           #end
			           where inv.sku_id =:skuId 
			           #if($locId)  
			             	and inv.location_id = :locId
			           #end
			           #if($locationCode)
			            	and inv.location_id = l.id
			             	and l.code = :locationCode
			           #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>


    <bean id="Inventory.findInventoryBySkuIdLocationIdOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select inv.EXPIRE_DATE as expireDate from t_wh_sku_inventory inv,t_bi_channel l
			         where inv.sku_id =:skuId 
			         and inv.location_id = :locId
			         and l.code=:owner
			         and inv.inv_owner=l.code
			         and ou_id=:ouId
			         and (inv.is_occupied=0 or inv.is_occupied is null)
			         group by inv.EXPIRE_DATE
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Inventory.find1InventoryBySkuIdLocationIdOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select sum(inv.quantity) as quantity from t_wh_sku_inventory inv,t_bi_channel l
			         where inv.sku_id =:skuId 
			         and inv.location_id = :locId
			         and l.code=:owner
			         and inv.inv_owner=l.code
			         and ou_id=:ouId
			         and inv.status_id=:statusId
			         and (inv.is_occupied=0 or inv.is_occupied is null)
			         
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="Inventory.findInventoryBySkuIdLocationIdOwner2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select  inv.id,inv.batch_code batchCode,inv.inbound_time inboundTime,inv.is_occupied isOccupied,
					       inv.occupation_code occupationCode,inv.inv_owner owner,inv.quantity,
					       inv.sku_cost skuCost,inv.district_id districtId,inv.location_id locationId,inv.ou_id whOuId,
					       inv.sku_id skuId,inv.status_id statusId,inv.version,inv.production_date productionDate,
					       inv.valid_date validDate,inv.expire_date expireDate,inv.ocp_code ocpCode
					 from t_wh_sku_inventory inv
			         where inv.sku_id =:skuId 
			         and inv.location_id = :locId
			         and inv.inv_owner=:owner
			         and ou_id=:ouId
			         and inv.status_id=:statusId
			         and (inv.is_occupied=0 or inv.is_occupied is null)
			         for update of inv.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findBatchCodeBySkuIdLocationId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
						   select inv.batch_code from t_wh_sku_inventory inv where 
						   	inv.location_id = :locationid
						   	and inv.sku_id = :skuid
	                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findByInventoryCheckId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select loc.id as locationId,sku.id as skuId,loc.code as locationCode,sku.name as skuName,sku.code as skuCode,sku.bar_code as barCode,sum(inv.quantity) as quantity
            from t_wh_sku_inventory inv,
               t_bi_inv_sku sku,
               t_wh_location loc,
                 t_wh_inv_check ic,t_wh_inv_check_line icl
            where icl.inv_check_id = ic.id
                #if("$!isSnSku"=="true")
                  and sku.is_sn_sku = 1
                #elsif("$!isSnSku"=="false")
                  and (sku.is_sn_sku = 0 or sku.is_sn_sku is null)
                #end
                and inv.ou_id = ic.ou_id
                  and inv.sku_id = sku.id
                  and loc.id = inv.location_id
                  and inv.location_id = icl.location_id
                  and ic.id = :invCkId
            group by loc.code,sku.name,sku.code,sku.bar_code,sku.id,loc.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findQtyByInventoryCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.id || '-' || loc.id as CODE,
					sum(inv.quantity) as ID 
						from t_wh_sku_inventory inv,t_bi_inv_sku sku,t_wh_location loc,
						     t_wh_inv_check ic,t_wh_inv_check_line icl
						where icl.inv_check_id = ic.id
						      and inv.ou_id = ic.ou_id
						      and inv.sku_id = sku.id
						      and loc.id = inv.location_id
						      and inv.location_id = icl.location_id
						      and ic.id = :invCkId
						group by sku.id,loc.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryStatus.findInventoryListByIsSystem" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select i from InventoryStatus as i where i.isSystem = :isSystem
					#if($ouId)
						and i.ou.id=:ouId
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryStatus.findInvStatusListBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select i.id from T_WH_INVENTORY_STATUS i
,T_WH_STA_LINE l
#if($staCode)
,T_WH_STA sta
#end
where i.id=l.INV_STATUS_ID
#if($staCode)
and sta.code = :staCode
and l.sta_id=sta.id
#end
#if($staId)
and l.sta_id=:staId
#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryStatus.findAllByCmpOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ID,NAME as CODE from t_wh_inventory_status where ou_id = :ouid]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select	sku.id as skuId,
							inv.batch_code as batchCode,
					        d.code as districtCode,
					        l.code as locationCode,
					        invSts.name as invStatusName,
					        inv.owner as invOwner,
					        inv.qty as quantity,
					        inv.occupation_code as occupationCode,
					        sku.name as skuName,
					        sku.code as skuCode,
					        sku.bar_code as barCode,
					        sku.jm_code as jmCode,
					        sku.supplier_Code as supplierSkuCode,
					        sku.key_properties as keyProperties,
					        inv.lock_qty as lockQty
					from v_wh_inventory_detail inv,
					     t_bi_inv_sku sku,
					     T_WH_INVENTORY_STATUS invSts,
					     T_WH_DISTRICT d,
					     T_WH_LOCATION l
					where  inv.sku_id = sku.id
					       and d.id = inv.DISTRICT_ID
					       and invSts.id = inv.invstatus_id
					       and inv.LOCATION_ID = l.id
					       #if($whOuId)
					       and inv.wh_ouid = :whOuId
					       #end
					       and sku.id = :skuId
					       #if($owner)
					      		and inv.owner = :owner
					       #end]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSkuInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
            sku.id as skuId,
            replace(sku.id || inv.owner,'''','-')  as skuIdOwner,
            sku.name as skuName,
            sku.code as skuCode,
            sku.key_properties as keyProperties,
            sku.bar_code as barCode,
            sku.jm_code as jmCode,
            sku.supplier_Code as supplierSkuCode,
            sku.ext_code1 as extCode1,
            sku.ext_code2 as extCode2,
            sku.sku_size as skuSize,
            ch.code as invOwner,
            ch.name as shopName,
            inv.qty as quantity,
            inv.avail_qty as availQty,
            (inv.qty - inv.avail_qty) as lockQty,
            inv.sales_avail_qty as salesAvailQty,
						brand.name as brandName
					from
						v_wh_inventory_summary inv,
						t_bi_channel ch,
						T_BI_BRAND brand,
						t_bi_inv_sku sku
					where inv.sku_id = sku.id
						and ch.code = inv.owner
						and sku.brand_id=brand.id
						and inv.wh_ouid = :ouid
						#if($owner)
						and inv.owner = :owner
						#end
						#if($barcode)
						and sku.bar_code in(${barcode})
						#end
						#if($skucode)
						and sku.code in(${skucode})
						#end
						#if($upc)
						and sku.supplier_code in(${upc})
						#end
						and inv.qty !=0 
		          				
							      
			 order by invOwner asc,jmCode desc]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="Inventory.findInventoryCountByStatusIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                    select  count(1) from T_WH_SKU_INVENTORY where STATUS_ID=:invstatusid
                                  ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findOccupySkuForPda" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select  sta.pg_index pgIndex,
							loc.code location,
							sku.bar_code barCode,
							sku.supplier_code supplierCode,
							sku.key_properties keyProperties,
							sum(inv.quantity) quantity
					from t_wh_sta sta,
					     t_wh_sku_inventory inv,
					     t_wh_sta_picking_list p,
					     t_bi_inv_sku sku,
					     t_wh_location loc
					where sta.code = inv.occupation_code
					      and sta.picking_list_id = p.id
					      and sku.id = inv.sku_id
					      and loc.id = inv.location_id
					      and p.code = :plcode
					group by sta.code,sta.pg_index,loc.code,sku.bar_code,sku.supplier_code,sku.key_properties
					order by loc.code
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 数量占用库存查询 -->
	<bean id="Inventory.findQtyOccupiedInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select wh_ouId whOuId,sku_id skuId,owner invOwner, qty quantity
					from(
					  select sta.main_wh_id as wh_ouId, stal.sku_id,nvl(stal.owner,sta.owner) as owner,sum(stal.quantity) as qty
					  from t_wh_sta sta, t_wh_sta_line stal,t_wh_inventory_status sts
					  where sta.id = stal.sta_id
					    and  stal.inv_status_id = sts.id(+)
					    and (sts.is_forsale = 1 or sts.is_forsale is null)
					    and (sta.status = 1 or sta.status = 20 or sta.status = 25)
					    and sta.is_need_occupied = 1
					    and sta.create_time >= sysdate - 90
					    and sta.main_wh_id = :ouId
					    and stal.sku_id= :skuId
					  group by stal.sku_id, sta.main_wh_id, nvl(stal.owner,sta.owner)) a
					where a.owner= :owner
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 数量占用库存查询 -->
	<bean id="Inventory.findSalesQtyInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select  sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lockQty,
						    sum(case when st.is_forsale = 1 then inv.quantity else 0 end) as salesQty,
      						sum(case when st.is_forsale = 1  and inv.occupation_code is not null then inv.quantity else 0 end) as salesLockQty
			        from t_wh_sku_inventory inv,
			             T_BI_WAREHOUSE wh,
			             t_wh_inventory_status st,
			             t_bi_inv_sku sku
			        where wh.ou_id(+) = inv.ou_id
			              and st.id(+) = inv.status_id
			              and inv.sku_id = sku.id
			              and (sku.store_mode != 33 or  inv.expire_date - nvl(sku.warning_date,0) > sysdate)
			              and wh.ou_id= :ouId
			              and inv.sku_id= :skuId
			              and inv.inv_owner= :owner
			        group by inv.ou_id, inv.sku_id, inv.inv_owner
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 库存数量查询 new-->
	<bean id="Inventory.findCurrentInventoryByPageNew" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
						select sku.id as skuId,
						      replace(sku.id || inv.inv_owner,'''','-')  as skuIdOwner,
						      sku.name as skuName,
						      sku.code as skuCode,
						      sku.key_properties as keyProperties,
						      sku.bar_code as barCode,
						      sku.jm_code as jmCode,
						      sku.supplier_Code as supplierSkuCode,
						      sku.ext_code1 as extCode1,
						      sku.ext_code2 as extCode2,
						      ch.code as invOwner,
						      ch.name as shopName,
						      sum(nvl(inv.quantity,0)) as quantity,
						      brand.name as brandName,
      						  inv.ou_id as whOuId
						from  t_bi_inv_sku sku ,
						      T_BI_BRAND brand,
						      t_bi_channel ch,
						      t_wh_sku_inventory inv
						where sku.id=inv.sku_id(+)      
						      and sku.brand_id=brand.id
						      and inv.inv_owner=ch.code
						      and (sku.store_mode != 33 or  inv.expire_date - nvl(sku.warning_date,0) > sysdate)
						      #if ($whOuId)
						          and inv.ou_id = :whOuId
						      #end
						      #if ($brandName)
						        and upper(brand.name) = upper(:brandName)
						      #end
						      #if ($extCode2)
						        and sku.ext_code2 = :extCode2
						      #end
						      #if ($extCode1)
						        and sku.ext_code1 like '$extCode1%'
						      #end
						      #if ($jmCode)
						        and sku.JM_CODE = :jmCode
						      #end
						      #if ($barCode)
						        and sku.bar_code = :barCode
						      #end
						      #if ($skuCode)
						        and sku.code = :skuCode
						      #end
						      #if ($supplierSkuCode)
						        and sku.supplier_code like :supplierSkuCode
						      #end
						      #if($skuName)
						        and sku.name like '$skuName%'
						      #end
						      #if($invOwner)
						        and inv.inv_owner = :invOwner
						      #end
						      
						group by sku.id,replace(sku.id || inv.inv_owner,'''','-'),
						        sku.name,
						        sku.code,
						        sku.key_properties,
						        sku.bar_code,
						        sku.jm_code,
						        sku.supplier_Code,
						        sku.ext_code1,
						        sku.ext_code2,
						        ch.code,
						        ch.name,
						        brand.name,
						        inv.ou_id
						having 1=1
								#if ($numberUp)
						           sum(nvl(inv.quantity,0)) >= :numberUp
						      #end
						      #if ($amountTo)
						          and sum(nvl(inv.quantity,0)) <= :amountTo
						      #end
						      
						      
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 库存数量查询 new-->
	<bean id="InventoryZero.findCurrentInventoryByPageNew" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
					select skuId,skuIdOwner,skuName,skuCode,keyProperties,barCode,jmCode,supplierSkuCode,extCode1,extCode2,invOwner,shopName,quantity,brandName,whOuId from 
						((select sku.id as skuId,
						      replace(sku.id || inv.inv_owner,'''','-')  as skuIdOwner,
						      sku.name as skuName,
						      sku.code as skuCode,
						      sku.key_properties as keyProperties,
						      sku.bar_code as barCode,
						      sku.jm_code as jmCode,
						      sku.supplier_Code as supplierSkuCode,
						      sku.ext_code1 as extCode1,
						      sku.ext_code2 as extCode2,
						      ch.code as invOwner,
						      ch.name as shopName,
						      sum(nvl(inv.quantity,0)) as quantity,
						      brand.name as brandName,
      						  inv.ou_id as whOuId
						from  t_bi_inv_sku sku ,
						      T_BI_BRAND brand,
						      t_bi_channel ch,
						      t_wh_sku_inventory inv
						where sku.id=inv.sku_id(+)      
						      and sku.brand_id=brand.id
						      and inv.inv_owner=ch.code
						      and (sku.store_mode != 33 or  inv.expire_date - nvl(sku.warning_date,0) > sysdate)
						      #if ($whOuId)
						          and inv.ou_id = :whOuId
						      #end
						      #if ($brandName)
						        and upper(brand.name) = upper(:brandName)
						      #end
						      #if ($extCode2)
						        and sku.ext_code2 = :extCode2
						      #end
						      #if ($extCode1)
						        and sku.ext_code1 like '%$extCode1%'
						      #end
						      #if ($jmCode)
						        and sku.JM_CODE = :jmCode
						      #end
						      #if ($barCode)
						        and sku.bar_code = :barCode
						      #end
						      #if ($skuCode)
						        and sku.code = :skuCode
						      #end
						      #if ($supplierSkuCode)
						        and sku.supplier_code like :supplierSkuCode
						      #end
						      #if($skuName)
						        and sku.name like :skuName
						      #end
						      #if($invOwner)
						        and inv.inv_owner = :invOwner
						      #end
						      
						group by sku.id,replace(sku.id || inv.inv_owner,'''','-'),
						        sku.name,
						        sku.code,
						        sku.key_properties,
						        sku.bar_code,
						        sku.jm_code,
						        sku.supplier_Code,
						        sku.ext_code1,
						        sku.ext_code2,
						        ch.code,
						        ch.name,
						        brand.name,
						        inv.ou_id
						having 1=1
								#if ($numberUp)
						           sum(nvl(inv.quantity,0)) >= :numberUp
						      #end
						      #if ($amountTo)
						          and sum(nvl(inv.quantity,0)) <= :amountTo
						      #end)
						      union all
						      (select sku.id as skuId,
						      replace(sku.id || inv.inv_owner,'''','-')  as skuIdOwner,
						      sku.name as skuName,
						      sku.code as skuCode,
						      sku.key_properties as keyProperties,
						      sku.bar_code as barCode,
						      sku.jm_code as jmCode,
						      sku.supplier_Code as supplierSkuCode,
						      sku.ext_code1 as extCode1,
						      sku.ext_code2 as extCode2,
						      ch.code as invOwner,
						      ch.name as shopName,
						      sum(nvl(inv.quantity,0)) as quantity,
						      brand.name as brandName,
      						  inv.ou_id as whOuId
						from  t_bi_inv_sku sku ,
						      T_BI_BRAND brand,
						      t_bi_channel ch,
						      t_wh_sku_inventory_zero inv
						where sku.id=inv.sku_id(+)      
						      and sku.brand_id=brand.id
						      and inv.inv_owner=ch.code
						      and (sku.store_mode != 33 or  inv.expire_date - nvl(sku.warning_date,0) > sysdate)
						      #if ($whOuId)
						          and inv.ou_id = :whOuId
						      #end
						      #if ($brandName)
						        and upper(brand.name) = upper(:brandName)
						      #end
						      #if ($extCode2)
						        and sku.ext_code2 = :extCode2
						      #end
						      #if ($extCode1)
						        and sku.ext_code1 like '%$extCode1%'
						      #end
						      #if ($jmCode)
						        and sku.JM_CODE = :jmCode
						      #end
						      #if ($barCode)
						        and sku.bar_code = :barCode
						      #end
						      #if ($skuCode)
						        and sku.code = :skuCode
						      #end
						      #if ($supplierSkuCode)
						        and sku.supplier_code like :supplierSkuCode
						      #end
						      #if($skuName)
						        and sku.name like :skuName
						      #end
						      #if($invOwner)
						        and inv.inv_owner = :invOwner
						      #end
						      
						group by sku.id,replace(sku.id || inv.inv_owner,'''','-'),
						        sku.name,
						        sku.code,
						        sku.key_properties,
						        sku.bar_code,
						        sku.jm_code,
						        sku.supplier_Code,
						        sku.ext_code1,
						        sku.ext_code2,
						        ch.code,
						        ch.name,
						        brand.name,
						        inv.ou_id
						having 1=1
								#if ($numberUp)
						           sum(nvl(inv.quantity,0)) >= :numberUp
						      #end
						      #if ($amountTo)
						          and sum(nvl(inv.quantity,0)) <= :amountTo
						      #end
						      )
						      )
						      
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 库存数量查询 -->
	<bean id="Inventory.findCurrentInventoryByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sku.id as skuId,
						replace(sku.id || inv.owner,'''','-')  as skuIdOwner,
						sku.name as skuName,
						sku.code as skuCode,
						sku.key_properties as keyProperties,
						sku.bar_code as barCode,
						sku.jm_code as jmCode,
						sku.supplier_Code as supplierSkuCode,
						sku.ext_code1 as extCode1,
						sku.ext_code2 as extCode2,
						ch.code as invOwner,
						ch.name as shopName,
						inv.qty as quantity,
						inv.avail_qty as availQty,
						(inv.qty - inv.avail_qty) as lockQty,
						inv.sales_avail_qty as salesAvailQty,
						brand.name as brandName
					from
						v_wh_inventory_summary inv,
						t_bi_channel ch,
						T_BI_BRAND brand,
						t_bi_inv_sku sku
					where inv.sku_id = sku.id
						and ch.code = inv.owner
						and sku.brand_id=brand.id
						#if ($whOuId)
						and inv.wh_ouid = :whOuId
						#end
						#if ($brandName)
						  and upper(brand.name) = upper(:brandName)
						#end
						#if ($extCode2)
						  and sku.ext_code2 = :extCode2
						#end
						#if ($extCode1)
						  and sku.ext_code1 like '$extCode1%'
						#end
						#if ($jmCode)
						  and sku.JM_CODE = :jmCode
						#end
						#if ($barCode)
						  and sku.bar_code = :barCode
						#end
						#if ($skuCode)
						  and sku.code = :skuCode
						#end
						#if ($supplierSkuCode)
						  and sku.supplier_code like '$supplierSkuCode%'
						#end
						#if($skuName)
						  and sku.name like '$skuName%'
						#end
						#if($invOwner)
						  and inv.owner = :invOwner
						#end
						#if ($numberUp)
						and inv.qty >= :numberUp
						#end
						#if ($amountTo)
						and inv.qty <= :amountTo
						#end
					and inv.qty !=0 
		          #if("$!isShowZero"=="true")
		            union all 
		              select 
		                sku.id as skuId,
						replace(sku.id || inv.owner,'''','-') as skuIdOwner,
						sku.name as skuName,
						sku.code as skuCode,
						sku.key_properties as keyProperties,
						sku.bar_code as barCode,
						sku.jm_code as jmCode,
						sku.supplier_Code as supplierSkuCode,
						sku.ext_code1 as extCode1,
						sku.ext_code2 as extCode2,
						ch.code as invOwner,
						ch.name as shopName,
						inv.qty as quantity,
						inv.avail_qty as availQty,
						inv.lock_qty as lockQty,
						inv.sales_avail_qty as salesAvailQty,
						brand.name as brandName
		              from 
		                v_wh_inventory_summary inv,
		                T_BI_BRAND brand,
		                t_bi_channel ch,
		                t_bi_inv_sku sku
		              where inv.sku_id = sku.id
		              	and ch.code = inv.owner
						and sku.brand_id=brand.id
		                and not exists(
                           SELECT 1 FROM t_wh_sku_inventory skuinv
                           where inv.SKU_ID = skuinv.sku_id
                           		 and inv.owner=skuinv.inv_owner
                                 and skuinv.quantity > 0
                                 and skuinv.ou_id = :whOuId
		                	#if ($whOuId)
		                		 and skuinv.ou_id = :whOuId
		                	#end
		                	#if($invOwner)
						  		and skuinv.inv_owner = :invOwner
							#end
		                )
		                #if ($whOuId)
		                and inv.wh_ouid = :whOuId
		                #end
		                #if ($brandName)
						  and upper(brand.name) = upper(:brandName)
						#end
						#if ($extCode2)
						  and sku.ext_code2 = :extCode2
						#end
						#if ($extCode1)
						  and sku.ext_code1 like '$extCode1%'
						#end
		                #if ($jmCode)
		                  and sku.JM_CODE = :jmCode
		                #end
		                #if ($skuCode)
						  and sku.code = :skuCode
						#end
		                #if ($barCode)
		                  and sku.bar_code = :barCode
		                #end
		                #if ($supplierSkuCode)
		                  and sku.supplier_code like '$supplierSkuCode%'
		                #end
		                #if($skuName)
		                  and sku.name like '$skuName%'
		                #end
		                #if($invOwner)
		                  and inv.owner = :invOwner
		                #end
		                #if ($numberUp)
						and inv.qty >= :numberUp
						#end
						#if ($amountTo)
						and inv.qty <= :amountTo
						#end
		            #end
				
							      ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findCurrentInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sku.id as skuId,
						sku.id || inv.owner as skuIdOwner,
						sku.name as skuName,
						sku.code as skuCode,
						sku.key_properties as keyProperties,
						sku.bar_code as barCode,
						sku.jm_code as jmCode,
						sku.supplier_Code as supplierSkuCode,
						sku.ext_code1 as extCode1,
						inv.owner as invOwner,
						inv.qty as quantity,
						inv.avail_qty as availQty,
						(inv.qty - inv.avail_qty) as lockQty,
						inv.sales_avail_qty as salesAvailQty
					from
						v_wh_inventory_summary inv,
						t_bi_inv_sku sku
					where inv.sku_id = sku.id
						and inv.wh_ouid = :whOuId
						
						#if ($jmCode)
						  and sku.JM_CODE = :jmCode
						#end
						#if ($barCode)
						  and sku.bar_code like :barCode
						#end
						#if ($skuCode)
						  and sku.code like :skuCode
						#end
						#if ($supplierSkuCode)
						  and sku.supplier_code like :supplierSkuCode
						#end
						#if($skuName)
						  and sku.name like :skuName
						#end
						#if($invOwner)
						  and inv.owner like :invOwner
						#end
					and inv.qty !=0 
		          #if("$!isShowZero"=="true")
		            union
		              select 
		                sku.id as skuId,
						sku.id || inv.owner as skuIdOwner,
						sku.name as skuName,
						sku.code as skuCode,
						sku.key_properties as keyProperties,
						sku.bar_code as barCode,
						sku.jm_code as jmCode,
						sku.supplier_Code as supplierSkuCode,
						sku.ext_code1 as extCode1,
						inv.owner as invOwner,
						inv.qty as quantity,
						inv.avail_qty as availQty,
						inv.lock_qty as lockQty,
						inv.sales_avail_qty as salesAvailQty
		              from 
		                v_wh_inventory_summary inv,
		                t_bi_inv_sku sku
		              where inv.sku_id = sku.id
		                and not exists(
		                			select 1 from (
		                                           select sku_id from v_wh_inventory_summary inv
		                                           where exists (
		                                               select 1 from v_wh_inventory_summary v 
		                                               where v.sku_id = inv.SKU_ID and v.qty != 0 
		                            and v.wh_ouid = :whOuId
		                               )) tmp
		                                  where tmp.sku_id = inv.sku_id
		                            )
		                and inv.wh_ouid = :whOuId
		                 #if ($jmCode)
		                  and sku.JM_CODE = :jmCode
		                #end
		                #if ($skuCode)
						  and sku.code like :skuCode
						#end
		                #if ($barCode)
		                  and sku.bar_code like :barCode
		                #end
		                #if ($supplierSkuCode)
		                  and sku.supplier_code like :supplierSkuCode
		                #end
		                #if($skuName)
		                  and sku.name like :skuName
		                #end
		                #if($invOwner)
		                  and inv.owner like :invOwner
		                #end
		            #end
				
							      ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findCurrentConverseInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
          decode(status.name,'良品','A','可销售','A','残次品','C','不可销售','C','待处理品','B','A') as districtCode
          , sku.code as skuCode,sku.ext_code2 as barCode, sum(t.quantity) as quantity,sku.supplier_code supplierSkuCode
           from t_wh_sku_inventory t
          , t_wh_inventory_status status 
                , T_BI_INV_SKU sku , t_bi_channel shop
                 where t.quantity>0
                 and t.status_id=status.id and sku.id=t.sku_id
                 and nvl(sku.is_gift,0) != 1
           and shop.code=t.inv_owner and shop.vmi_code= :vmicode
           group by status.name, sku.code,sku.ext_code2,sku.supplier_code
							      ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceSnLine.findSnDiffLineByIc"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select l.sn,
								l.type as intType,
						       sku.name as skuName,
						       sku.bar_code as skuBarcode,
						       sku.code as skuCode,
						       sku.key_properties
						from t_wh_inv_check_dif_sn_line l,
						     t_bi_inv_sku sku
						where l.inv_check_id = :icid
							and l.sku_id = sku.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceSnLine.findSnDiffLineSkuChangeByIc"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select l1.sn,
					       sku1.name as skuName,
					       sku1.bar_code as skuBarcode,
					       sku1.code as skuCode,
					       sku1.key_properties,
					       sku2.name as sourceSkuName,
					       sku2.bar_code as sourceSkuBarcode,
					       sku2.code as sourceSkuCode
					from t_wh_inv_check_dif_sn_line l1,
					     t_wh_inv_check_dif_sn_line l2,
					     t_bi_inv_sku sku1,
					     t_bi_inv_sku sku2
					where l1.inv_check_id = :icid
					      and l1.sku_id = sku1.id
					      and l2.sku_id = sku2.id
					      and l2.inv_check_id = :icid
					      and l1.sn=l2.sn
					          and l1.type = 1
					          and l2.type = 2
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findSnapShotPageByPreciseTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku.id as skuId, inv.warehouseName,
							   ch.name as invOwner,
							   brand.name brandName,
						       sku.name as skuName,
						       sku.jm_code as jmCode,
						       sku.code as skuCode,
						       sku.supplier_code as supplierSkuCode,
						       sku.bar_code as barCode,
						       sku.key_properties as keyProperties,
						       inv.quantity as quantity
						from (select tp.warehouseName,sku_id,owner,sum(quantity) as quantity
							 from (select organise.name warehouseName,ss.sku_id, ss.owner,ss.quantity
							    from T_AU_OPERATION_UNIT organise,t_wh_sku_inventory_snapshot ss
							    where ss.snapshot_time = (select max(snapshot_time) from  t_wh_sku_inventory_snapshot 
							                             where snapshot_time < :date)
							          #if($whOuId)
                                            and ss.warehouse_id = :whOuId
                                     	#else
                                            and ss.warehouse_id in(  
                                            #foreach( $ouId in $ouIds )
		    								$ouId 
		    								,
											#end
											-1 )
                                        #end
						          and ORGANISE.ID = SS.WAREHOUSE_ID
							    union all
							    select organise.name warehouseName,lg.sku_id,lg.owner,sum(case when DIRECTION=1 then lg.quantity when lg.DIRECTION=2 then lg.quantity*(-1) end) as quantity
							    from T_AU_OPERATION_UNIT organise,T_WH_ST_LOG lg
							    where lg.tran_time >= nvl((select max(snapshot_time) from  t_wh_sku_inventory_snapshot where snapshot_time < :date), to_date('19000101','yyyyMMdd'))
							          and lg.tran_time < :date
						          		#if($whOuId)
                                            and lg.wh_id = :whOuId
                                     	#else
                                            and lg.wh_id in( 
                                            #foreach( $ouId in $ouIds )
		    								$ouId 
		    								,
											#end
											-1 )
                                        #end
						          and ORGANISE.ID = LG.WH_ID
							    group by organise.name,lg.sku_id,lg.owner
							    ) tp 
							  group by tp.warehouseName,tp.sku_id,tp.owner) inv,t_bi_inv_sku sku,T_BI_BRAND brand,t_bi_channel ch
						 where inv.sku_id = sku.id
								 and SKU.BRAND_ID = brand.id
								 and ch.code =inv.owner
						    #if ($brandName)
							     and upper(brand.name) like upper(:brandName)
							#end
						 	#if ($barCode)
							     and sku.bar_code like :barCode
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($jmCode)
							     and sku.jm_code = :jmCode
							#end
							#if ($skuName)
							     and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
							     and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
							     and inv.owner like :invOwner
							#end
							#if("$isShowZero" == "false")  
								and inv.quantity != 0
							#end
							]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findImperfectInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
			select inv.sku_id,sk.jm_code as jmCode,inv.inv_owner as invOwner,sum(inv.quantity) as quantity from t_wh_sku_inventory inv,t_bi_inv_sku sk,T_WH_INVENTORY_STATUS status
			 where inv.sku_id=sk.id and inv.status_id=status.id and status.name='残次品'
			 and inv.ou_id=:ouId
			            #if($owner)
			                and inv.inv_owner=:owner
			           #end
			            #if($barCode)
			                and sk.bar_code=:barCode
			           #end
			            #if($supplierCode)
			                and sk.supplier_code=:supplierCode
			           #end 
			            #if($jmCode)
			                and sk.jm_code=:jmCode
			           #end 
			group by  sk.jm_code,inv.inv_owner,inv.sku_id
          ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSnapShotPageByDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select rownum as rowm ,a.* from (select	sku.id as skuId, inv.warehouseName,
							   ch.name as invOwner,
							   brand.name brandName,
						       sku.name as skuName,
						       sku.code as skuCode,
						       sku.jm_code as jmCode,
						       sku.supplier_code as supplierSkuCode,
						       sku.bar_code as barCode,
						       sku.key_properties as keyProperties,
						       sum(quantity) as quantity,
						       sum(initQty) as initQty,
						       sum(quantity) - sum(initQty) as changeQty 
						from (select tp.warehouseName,sku_id,owner,sum(quantity) as quantity,sum(quantity) as initQty
						  from (
						    select organise.name warehouseName,ss.sku_id, ss.owner,ss.quantity
						    from T_AU_OPERATION_UNIT organise,t_wh_sku_inventory_snapshot ss
						    where ss.snapshot_time = (select max(snapshot_time) from  t_wh_sku_inventory_snapshot where snapshot_time < :startDate)
						          		#if($whOuId)
                                            and ss.warehouse_id = :whOuId
                                     	#else
                                            and ss.warehouse_id in(  
                                            #foreach( $ouId in $ouIds )
		    								$ouId 
		    								,
											#end
											-1 )
                                        #end
						          and ORGANISE.ID = SS.WAREHOUSE_ID
						    union all
						    select organise.name warehouseName,lg.sku_id,lg.owner,sum(case when DIRECTION=1 then lg.quantity when lg.DIRECTION=2 then lg.quantity*(-1) end) as quantity
						    from T_AU_OPERATION_UNIT organise,T_WH_ST_LOG lg
						    where lg.tran_time >= (select max(snapshot_time) from  t_wh_sku_inventory_snapshot where snapshot_time < :startDate)
						          and lg.tran_time < :startDate
						          		#if($whOuId)
                                            and lg.wh_id = :whOuId
                                     	#else
                                            and lg.wh_id in( 
                                            #foreach( $ouId in $ouIds )
		    								$ouId 
		    								,
											#end
											-1 )
                                        #end
						          and ORGANISE.ID = LG.WH_ID
						    group by organise.name,lg.sku_id,lg.owner
						    ) tp 
						  group by tp.warehouseName,tp.sku_id,tp.owner
						  union all
						  select organise.name warehouseName,lg.sku_id,lg.owner,sum(case when DIRECTION=1 then lg.quantity when lg.DIRECTION=2 then lg.quantity*(-1) end) as quantity,0 as initQty
						  from T_AU_OPERATION_UNIT organise,T_WH_ST_LOG lg
						  where lg.tran_time >= :startDate
						        and lg.tran_time < :endDate
						        		#if($whOuId)
                                            and lg.wh_id = :whOuId
                                     	#else
                                            and lg.wh_id in( 
                                            #foreach( $ouId in $ouIds )
		    								$ouId 
		    								,
											#end
											-1  )
                                        #end
						        and ORGANISE.ID = LG.WH_ID
						group by organise.name,lg.sku_id,lg.owner) inv,t_bi_inv_sku sku,T_BI_BRAND brand,t_bi_channel ch
						where inv.sku_id = sku.id 
						 	and SKU.BRAND_ID = brand.id
						 	and inv.owner = ch.code(+)
						 	#if ($brandName)
							     and brand.name like :brandName
							#end
							#if ($barCode)
							     and sku.bar_code like :barCode
							#end
							#if ($jmCode)
							     and sku.jm_code = :jmCode
							#end
							#if ($skuCode)
							     and sku.code like :skuCode
							#end
							#if ($skuName)
							     and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
							     and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
							     and inv.owner like :invOwner
							#end
						group by ch.name,sku.id,inv.warehouseName,owner,brand.name,sku.code,sku.jm_code,sku.bar_code,sku.name,sku.supplier_code,sku.key_properties) a]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.createZeroInventoryForSpecial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[  
                        insert into T_WH_SKU_INVENTORY(id,sku_id,quantity,ou_id)
						select S_T_WH_INVENTORY.nextval, stvl.sku_id, 0, stv.WH_ID 
						from t_wh_stv stv ,t_wh_stv_line stvl
						where stv.id=:stvId and stvl.stv_id=stv.id
						and stvl.sku_id not in (
						select inv.sku_id from T_WH_SKU_INVENTORY inv
						where inv.QUANTITY=0 and inv.OU_ID=stv.WH_ID
						)
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.releaseInventoryByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sku_inventory inv set occupation_code=null,is_occupied=0 
							where inv.occupation_code = (select code from t_wh_sta where id = :staId)
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.releaseInvAndUpdateOwnerByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sku_inventory inv set occupation_code=null,is_occupied=0, 
                			inv.inv_owner=:addiowner
                			where exists(select 1 from t_wh_sta sta where inv.occupation_code = sta.code and sta.id = :staId)
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.releaseInventoryByOpcOcde" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sku_inventory inv set occupation_code=null,is_occupied=0 where inv.occupation_code = :code
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.deleteBlankPickingById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					delete t_wh_sta_picking_list p where p.id = :pId and not exists(
						select 1 from t_wh_sta sta where sta.picking_list_id =p.id and sta.create_time >= sysdate - 180
					)
	               ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 多件核对 后置送货单 后置打印明细查询 -->
	<bean id="PickingList.findPickListDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
						 u.id as skuId,max(al.id) as staId,max(a.code) as staCode,max(u.bar_code) as barcode,max(u.name) as skuname,
						 max(u.code) as skuCode,max(u.IS_SN_SKU) as isSnSku,sum(al.QUANTITY) as quantity,
						 sum(al.COMPLETE_QUANTITY) as checkQuantity
					from
						 t_wh_sta a
					left join
 						 t_wh_sta_picking_list t on a.picking_list_id = t.id
 					left join
						 t_wh_sta_line al on a.id = al.sta_id
				    left join
				    	 t_bi_inv_sku u on u.id = al.sku_id
				    where
				    	 t.id = :pcikId and a.status in(2,3,15) group by u.id
	               ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransactionType.findByStaType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select r.trans_type_id from t_wh_sta_type_trans_type_ref r where r.sta_type_id = :staType]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransactionType.findTransactionTypeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  select t.* from T_WH_TRANSACTION_TYPE t
				#if($locationId)
					, T_WH_LOCATION_TRANSTYPE lt
					where lt.TRANSTYPE_ID=t.ID
					and lt.LOCATION_ID = :locationId
					and 
				#else
					where 
				#end
				(t.OU_ID is null or (t.OU_ID in (select wh.PARENT_OU_ID from t_au_operation_unit wh
					where wh.id=:ouId
					and	wh.PARENT_OU_ID is not null 
					and wh.PARENT_OU_ID in (select oc.id from t_au_operation_unit oc left join T_AU_OPERATION_UNIT_TYPE out
					on oc.OU_TYPE_ID=out.id and Upper(out.NAME)=Upper('OperationCenter') ) ) ) )
					and t.custome_def=1
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findUnLockCountByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select count(1) from t_wh_location loc where loc.ou_id = :ouid and loc.is_available = 1 and (loc.is_locked = 0 or loc.is_locked is null)]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findGILocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
distinct
loc.id,
loc.code,
sta.code as staCode, 
sta.slip_code as staSlipCode,
stv.finish_time as createDate,
stv.sku_qty as qty
from 
t_wh_location loc, 
t_wh_district dis,
t_wh_sku_inventory inv,
t_wh_stv stv,
t_wh_stv_line stvl,
t_wh_sta sta
where 
loc.district_id=dis.id
and inv.location_id=loc.id
and inv.batch_code= stvl.batch_code
and stv.id=stvl.stv_id
and stv.sta_id=sta.id
and stv.direction=1
and dis.type = 5
and inv.quantity > 0
and loc.ou_id=:ouid
#if($code)
	and loc.code like  :code 
#end
#if($staCode)
	and sta.code like  :staCode 
#end
#if($staSlipCode)
	and sta.slip_code like  :staSlipCode 
#end
#if($createDate)
	and stv.finish_time > :createDate
#end
#if($endCreateDate)
	and stv.finish_time < :endCreateDate
#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findGILocationById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
distinct
loc.id,
loc.code,
sta.code as staCode, 
sta.slip_code as staSlipCode,
stv.finish_time as createDate,
stv.sku_qty as qty
from 
t_wh_location loc, 
t_wh_district dis,
t_wh_sku_inventory inv,
t_wh_stv stv,
t_wh_stv_line stvl,
t_wh_sta sta
where 
loc.district_id=dis.id
and inv.location_id=loc.id
and inv.batch_code= stvl.batch_code
and stv.id=stvl.stv_id
and stv.sta_id=sta.id
and dis.type = 5
and inv.quantity > 0
and loc.id=:locId

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findValidLocationsByouid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select loc.* from t_wh_location loc where loc.ou_id = :ouid
				#if($code)
				     and loc.code like :code
				#end 
				and loc.is_available = 1 				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseDistrict.findValidDistrictByouid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select d.* from T_WH_DISTRICT d where d.ou_id = :ouid 
                #if($code)
				     and d.code like :code
				#end 
                and d.is_available = 1 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findLocationCodeByid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select d.code from t_wh_location d where d.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.unlockbyinvcheckcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update t_wh_location t set t.is_locked=0,t.last_modify_time=sysdate where 
				t.id=(select l.location_id from T_WH_INV_CHECK inv,T_WH_INV_CHECK_DIF_LINE l where inv.id=l.inv_check_id and inv.code=:code)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseDistrict.findDistrictCodeByid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select d.code from T_WH_DISTRICT d where d.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findAllAvailLocationsByDistrictId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select loc.code as barcode from t_wh_location loc where loc.district_id = :id
						and loc.is_available = 1 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.unLockByInvCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_location loc set loc.version = loc.version+1,loc.is_locked = null,loc.last_modify_time=sysdate where exists(
					       select 1 from t_wh_inv_check_line l,t_wh_inv_check i 
					       where i.id = l.inv_check_id 
					             and l.location_id = loc.id 
					             and i.ou_id = loc.ou_id 
					             and i.id = :icId)]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.lockByInvCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_location loc set loc.version = loc.version+1,loc.is_locked = 1,loc.last_modify_time=sysdate where exists(
					       select 1 from t_wh_inv_check_line l,t_wh_inv_check i 
					       where i.id = l.inv_check_id 
					             and l.location_id = loc.id 
					             and i.ou_id = loc.ou_id 
					             and i.id = :icId)]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findAllByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select l.ID,l.CODE from t_wh_location l 
					where l.ou_id = :ouId and l.is_available = 1 
						 and (l.is_locked = 0 or l.is_locked is null)]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findAllByDistrict" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct loc.id as ID,loc.code as CODE
							       from t_wh_location loc
							            	left join t_wh_sku_inventory inv on inv.location_id = loc.id and inv.district_id = :dId
							where loc.district_id = :dId
								#if("$!isLocdAndOccupaid"=="true")
							    	and (loc.is_locked = 1 or inv.occupation_code is not null)
						    	#end
							    #if($limit)
							  		and rownum < :limit
							  	#end
						  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findAllByOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct loc.id as ID , loc.code as CODE
							from t_wh_location loc,t_wh_sku_inventory inv
							where inv.location_id = loc.id
							      and inv.inv_owner = :owner
							    #if("$!isLocdAndOccupaid"=="true")
							    	and (loc.is_locked = 1 or inv.occupation_code is not null)
							    #end
							    	and inv.ou_id = :ouId
							    #if($limit)
									and rownum < :limit
								#end
						 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findAllByBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct loc.id as ID , loc.code as CODE
							  from t_wh_sku_inventory inv,t_bi_inv_sku sku,t_bi_brand b,t_wh_location loc
							  where inv.sku_id = sku.id
							        and sku.brand_id = b.id
							        and loc.id = inv.location_id
							      #if("$!isLocdAndOccupaid"=="true")
							        and (loc.is_locked = 1 or inv.occupation_code is not null)
							      #end
							        and b.id = :bId
							        and inv.ou_id = :ouId
								  #if($limit)
								  	and rownum < :limit
								  #end
							  ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findLocationCodeMapByWarehouseSql"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[  select loc.id,loc.code,loc.barcode from T_WH_LOCATION loc where loc.ou_id=:ouId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findLocationsTransCountListByDistrictId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
				select l.*, nvl(t.TRANSACTION_TYPES_COUNT,0) TRANSACTION_TYPES_COUNT
            from (select count(*) as TRANSACTION_TYPES_COUNT,lt.location_id from T_WH_LOCATION_TRANSTYPE lt 
                group by lt.location_id) t, T_WH_LOCATION l
                where l.id = t.location_id(+) and l.DISTRICT_ID=:disId and (l.IS_LOCKED is null or l.IS_LOCKED=0) 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findLocationsTransCountListByDistrictAndLocId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
				select l.*, nvl(t.TRANSACTION_TYPES_COUNT,0) TRANSACTION_TYPES_COUNT
            from (select count(*) as TRANSACTION_TYPES_COUNT,lt.location_id from T_WH_LOCATION_TRANSTYPE lt 
                group by lt.location_id) t, T_WH_LOCATION l
                where l.id = t.location_id(+) and l.DISTRICT_ID=:disId 
                #if($locId)
                and l.id = :locId
                #end
                and (l.IS_LOCKED is null or l.IS_LOCKED=0) 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.createTransactionTypeForLocations"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  INSERT INTO T_WH_LOCATION_TRANSTYPE (
						   LOCATION_ID, TRANSTYPE_ID) 
						   select l.id,t.id from T_WH_LOCATION l,T_WH_TRANSACTION_TYPE t where l.id in ( 
						   #foreach( $id in $locationIds )
		    				$id 
		    				,
							#end
							-1
							)
							and t.id in (
							#foreach( $id in $transIds )
		    				$id 
		    				,
							#end
							-1
							) 
							minus
							select lt.LOCATION_ID,lt.TRANSTYPE_ID from T_WH_LOCATION_TRANSTYPE lt where lt.LOCATION_ID in ( 
						   #foreach( $id in $locationIds )
		    				$id 
		    				,
							#end
							-1
							)
							and lt.TRANSTYPE_ID in (
							#foreach( $id in $transIds )
		    				$id 
		    				,
							#end
							-1
							)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.createLocTransForLocAndTran" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
INSERT INTO T_WH_LOCATION_TRANSTYPE (LOCATION_ID, TRANSTYPE_ID) 
select l.id,t.id from T_WH_LOCATION l,T_WH_TRANSACTION_TYPE t where l.code=:locCode and t.code=:tranCode
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.deleteTransactionTypeForLocations"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[   delete from T_WH_LOCATION_TRANSTYPE t where t.LOCATION_ID in(
						   	#foreach( $id in $locationIds )
		    				$id 
		    				,
							#end
							-1
							)
							and t.TRANSTYPE_ID in (
							#foreach( $id in $transIds )
		    				$id 
		    				,
							#end
							-1
							)

                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.findWarehouseDetailList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id as id,
				       t.is_share as isshare,
				       t.pic as pic,
				       t.manage_mode as manageMode,
				       t.op_mode as opMode,
				       t.ou_id as ouid,
				       nvl(v1.qty,0) as qty, 
				       nvl(v1.availQty,0) as availQty,
				       ou.code as code,
				       ou.name as name,
				       ou.is_available as isAvailable
				           from T_AU_OPERATION_UNIT ou,
				           T_BI_WAREHOUSE t
				           left join
					(select v.WH_OUID as ouid, nvl(sum(v.QTY),0) as qty, nvl(sum(v.avail_qty),0) as availQty from v_wh_inventory_summary v group by v.WH_OUID) v1
					      on t.ou_id = v1.ouid
					      where t.ou_id = ou.id
					      and ( 1 != 1 
					      #foreach($id in $ouids)
				   			or t.ou_id = $id
				   		  #end
					      )
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 物流面单导出sql -->
	<bean id="StaDeliveryInfo.findStaDeliveryInfoListByPlid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[		
        select m.name as expName, 
          d.id as id,
          d.address as address,
          d.country as country,
          d.province as province,
          d.city as city,
          d.district as district,
          d.zipcode as zipcode,
          d.lpcode as lpcode,
          case when d.mobile is null then d.telephone 
              when d.telephone is null then d.mobile
              else d.telephone || ',' || d.mobile end as telephone,
          d.receiver as receiver,
          d.remark as remark,
          d.tracking_no as trackingNo,
          d.store_com_invoice_content as storeComInvoiceContent, 
          d.store_com_invoice_title as storeComInvoiceTitle,
          d.store_com_is_need_invoice as storeComIsNeedInvoice,
          d.store_com_total_amount as storeComTotalAmount,
          d.transfer_cost as transferCost,
          d.transfer_fee as transferFee,
          sta.slip_code as refSlipCode,
          sta.pg_index as pgindex, 
          shop.name as owner,
          ou.name as warehouseName,  
          temp.qty as quantity,  
              case when d.is_cod = 1 then nvl(sta.total_actual,0)+nvl(d.transfer_fee,0) 
                   when shop.is_not_display_sum = 1 then null 
                   else
                       nvl(sta.total_actual,0)+nvl(d.transfer_fee,0) 
                   end as amount,
              fn_getregion_forwritebig(d.address,d.province,d.city,d.district) as disAddr
        from 
        T_WH_STA_DELIVERY_INFO d, 
        T_MA_TRANSPORTATOR m, 
        t_bi_channel shop, 
        T_AU_OPERATION_UNIT ou,
        t_wh_sta sta left join 
        (
        select sum(line.quantity) as qty, sta.owner,sta.id as staid
          from t_wh_sta_line line,t_wh_sta sta 
          where line.sta_id = sta.id
          and sta.picking_list_id = :plid
          group by sta.owner,sta.id
        ) temp 
          on temp.staid = sta.id
          where d.lpcode=m.exp_code 
            and m.exp_code is not null 
            and m.life_cycle_status = 1
            and sta.picking_list_id = :plid
            and ou.id = :ouid
            and sta.id = d.id
            and sta.status != 17
            and sta.owner = shop.code   
            order by sta.pg_index      
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findLpCodeByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
				SELECT d.lpcode from            
				  t_WH_STA_DELIVERY_INFO d, 
				  t_ma_transportator m, 
				  t_wh_sta sta
				  where sta.id = d.id
           		  #if($plid)
          	          and sta.picking_list_id = :plid	
				  #end
				  #if($staid)
				  	  and sta.id = :staid	
				  #end
				  and d.lpcode = m.exp_code
				  and m.exp_code is not null 
				  and m.life_cycle_status = 1
				  and rownum = 1  
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findLpCodeByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
SELECT d.lpcode from t_WH_STA_DELIVERY_INFO d, t_wh_sta sta where sta.id = d.id and sta.code=:staCode
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="Warehouse.updateWarehouseShare" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					update t_bi_warehouse set is_share = :flag where id in (
						#foreach( $id in $ids)
	    				$id
	    				,
						#end
						-1
					)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransactionType.findList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t from TransactionType as t where 1=1
					#if("$!notIgnoreSystem"=="true")
						and t.isSystem = :isSystem
					#end
				    #if($ouTypeId)
						and t.ou.id = :ouTypeId
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransactionType.findListByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t from TransactionType as t where 1=1
					and t.isSystem = :isSystem
					and t.isAvailable = true
				    #if($ouTypeId)
						and t.ou.id = :ouTypeId
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuByParameter" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t from Sku as t where
								t.customer.id = :customerId
							#if($barCode)
								and t.barCode = :barCode
							#else
								and t.jmCode = :jmCode
								#if($keyProperties)
									and t.keyProperties = :keyProperties
								#else
									and t.keyProperties is null
								#end
							#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findCountSkuByParameter" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t from Sku as t where
					t.customer.id = :customerId
					#if($barCode)
						and t.barCode = :barCode
					#end
				    #if($jmCode)
						and t.jmCode = :jmCode
					#end
					#if($keyProperties)
						and t.keyProperties = :keyProperties
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuOnLoaction" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sku_id from t_wh_sku_inventory inv where inv.sku_id = :skuId and inv.location_id = :locId group by sku_id]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuWarrantyCardType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select sku.warranty_card_type
  				from t_bi_inv_sku sku
 				where sku.code = :skuCode ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!--  查询星巴克 MSR定制订单 -->
	<bean id="Sku.findMarSkuCardType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
   	select count(1) from t_wh_sta s,t_wh_sta_line l ,t_bi_inv_sku sku  where s.id=l.sta_id and l.sku_id=sku.id and sku.sp_type=:type and s.id =:staId
			 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="TransactionType.findTransactionListByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select t from TransactionType as t 
					where (1 != 1  
						#if($ouid)
						or t.ou.id = :ouid	
						#end
						or t.isSystem = true)
						and t.isAvailable = true
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseChannel.findWarehouseChannelList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select wc from WarehouseChannel as wc where 1=1
					#if($type)
						 and wc.type = :type 
					#end
					#if($ouid)
						 and wc.ou.id = :ouid 
					#end 
					 order by wc.isAvailable desc,wc.code asc
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseChannel.findWarehouseChannelByCodeAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select wc from WarehouseChannel as wc where 1=1
					#if($type)
						 and wc.type = :type 
					#end
					#if($ouid)
						 and wc.ou.id = :ouid 
					#end 
					#if($code)
						 and wc.code = :code 
					#end 
					 order by wc.isAvailable desc
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.deleteByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					delete  from t_wh_stv_line l where l.stv_id = :stvId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.deleteById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					delete  from t_wh_stv_line t where t.id=:stvLineId			
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.updateDistrict" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_stv_line l set l.district_id = (select loc.district_id from t_wh_location loc where loc.id = l.location_id) where l.stv_id = :stvId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.updateInboundLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_stv_line l set l.district_id = null,l.location_id=null where l.stv_id = :stvId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						stvl.id,
						sku.code as skuCode,
						sku.bar_code as barCode,
						sku.name as skuName,
						sku.supplier_code as supplierCode,
						cnl.name owner,
						stvl.quantity,
						stvl.Direction as directionInt,
						type.name as typeName,
						loc.code as locationCode,
						stv.create_time as createDate,
						stv.finish_time as finishDate,
						u.user_name as creater,
						status.name as intInvstatusName
					from
						t_wh_stv_line stvl,
						t_bi_channel cnl,
						t_wh_stv stv,
						t_bi_inv_sku sku,
						t_wh_location loc,
						T_WH_TRANSACTION_TYPE type,
						t_wh_inventory_status status,
						T_AU_USER u
					where 
						stvl.stv_id=stv.id
						and stvl.owner = cnl.code
						and stvl.sku_id = sku.id
						and stvl.location_id= loc.id
						and stvl.TRANSTYPE_ID=type.id
						and stvl.inv_status_id=status.id
						and stv.creator_id=u.id(+)
						and stv.sta_id=:staId
						#if($createTime)
							and stv.create_time >= :createTime
						#end
						#if($endCreateTime)
							and stv.create_time <= :endCreateTime
						#end
						#if($finishTime)
							and stv.finish_time >= :finishTime
						#end
						#if($endFinishTime)
							and stv.finish_time <= :endFinishTime
						#end
						#if($skuCode)
							and sku.code like :skuCode
						#end
						#if($creater)
							and upper(u.user_name) like upper(:creater)
						#end
						#if($locationCode)
							and loc.code like :locationCode
						#end
						#if($statusId)
							and status.id = :statusId
						#end
						#if($direction)
							and stvl.direction = :direction
						#end
						#if($typeId)
							and type.id = :typeId
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.findHistoricalOrderDetailOperateListByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select * from 
					(select 
						stvl.id,
						sku.code as skuCode,
						sku.bar_code as barCode,
						sku.name as skuName,
						sku.supplier_code as supplierCode,
						cnl.name owner,
						stvl.quantity,
						stvl.Direction as directionInt,
						type.name as typeName,
						loc.code as locationCode,
						stv.create_time as createDate,
						stv.finish_time as finishDate,
						u.user_name as creater,
						status.name as intInvstatusName,
						stvl.expire_date AS expireDate
					from
						t_wh_stv_line stvl,
						t_bi_channel cnl,
						t_wh_stv stv,
						t_bi_inv_sku sku,
						t_wh_location loc,
						T_WH_TRANSACTION_TYPE type,
						t_wh_inventory_status status,
						T_AU_USER u
					where 
						stvl.stv_id=stv.id
						and stvl.owner = cnl.code
						and stvl.sku_id = sku.id
						and stvl.location_id= loc.id
						and stvl.TRANSTYPE_ID=type.id
						and stvl.inv_status_id=status.id
						and stv.creator_id=u.id(+)
						and stv.sta_id=:staId 
						#if($createTime)
							and stv.create_time >= :createTime
						#end
						#if($endCreateTime)
							and stv.create_time <= :endCreateTime
						#end
						#if($finishTime)
							and stv.finish_time >= :finishTime
						#end
						#if($endFinishTime)
							and stv.finish_time <= :endFinishTime
						#end
						#if($skuCode)
							and sku.code like :skuCode
						#end
						#if($creater)
							and upper(u.user_name) like upper(:creater)
						#end
						#if($locationCode)
							and loc.code like :locationCode
						#end
						#if($statusId)
							and status.id = :statusId
						#end
						#if($direction)
							and stvl.direction = :direction
						#end
						#if($typeId)
							and type.id = :typeId
						#end
						
				union all 
				
				select 
						stvl.id,
						sku.code as skuCode,
						sku.bar_code as barCode,
						sku.name as skuName,
						sku.supplier_code as supplierCode,
						cnl.name owner,
						stvl.quantity,
						stvl.Direction as directionInt,
						type.name as typeName,
						loc.code as locationCode,
						stv.create_time as createDate,
						stv.finish_time as finishDate,
						u.user_name as creater,
						status.name as intInvstatusName,
						stvl.expire_date AS expireDate
					from
						t_arc_stv_line stvl,
						t_bi_channel cnl,
						t_arc_stv stv,
						t_bi_inv_sku sku,
						t_wh_location loc,
						T_WH_TRANSACTION_TYPE type,
						t_wh_inventory_status status,
						T_AU_USER u
					where 
						stvl.stv_id=stv.id
						and stvl.owner = cnl.code
						and stvl.sku_id = sku.id
						and stvl.location_id= loc.id
						and stvl.TRANSTYPE_ID=type.id
						and stvl.inv_status_id=status.id
						and stv.creator_id=u.id(+)
						and stv.sta_id=:staId
						#if($createTime)
							and stv.create_time >= :createTime
						#end
						#if($endCreateTime)
							and stv.create_time <= :endCreateTime
						#end
						#if($finishTime)
							and stv.finish_time >= :finishTime
						#end
						#if($endFinishTime)
							and stv.finish_time <= :endFinishTime
						#end
						#if($skuCode)
							and sku.code like :skuCode
						#end
						#if($creater)
							and upper(u.user_name) like upper(:creater)
						#end
						#if($locationCode)
							and loc.code like :locationCode
						#end
						#if($statusId)
							and status.id = :statusId
						#end
						#if($direction)
							and stvl.direction = :direction
						#end
						#if($typeId)
							and type.id = :typeId
						#end
						) data
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findOccupiedStaLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
 select sku.code               as skuCode,
       sum(inv.QUANTITY)       as quantity,
       stal.sku_cost           as skuCost,
       sku.supplier_code   as supplierCode,
       sku.jm_code         as jmcode,
       sku.name            as skuName,
       sku.bar_code        as barCode,
       status.name         as intInvstatusName,
       loc.code            as location,
       sku.KEY_PROPERTIES  as keyProperties,
       sku.is_sn_sku       as isSnSku
  from t_bi_inv_sku sku,
       t_wh_sta sta,  
       t_wh_sta_line stal,
       t_wh_inventory_status status,
       t_wh_sku_inventory inv,
       t_wh_location loc
 where sku.id = stal.sku_id
   and stal.sta_id = sta.id
   and stal.sku_id=inv.sku_id
   and stal.inv_status_id=status.id
   and inv.occupation_code = sta.code 
   and inv.inv_owner=sta.owner
   and inv.ou_id=sta.main_wh_id
   and inv.location_id=loc.id
   and inv.status_id=status.id
   and sta.id = :staId
   group by sku.code,stal.sku_cost,sku.supplier_code,sku.jm_code,
   sku.name,sku.bar_code,status.name,loc.code,sku.key_properties,sku.is_sn_sku
   
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StaLine.checkPickingSkuByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
 
                   select count(1) from t_wh_sta_line where sta_id=:staId
 
   
				]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="StvLine.findInboundTimeByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
select stvl.batch_code || stvl.owner || stvl.inv_status_id || stvl.sku_id as stvLineKey,stvl.inbound_time,sum(stvl.quantity) as quantity
from 
t_Wh_Stv_Line stvl 
where stvl.stv_id=:stvId
group by stvl.batch_code,stvl.owner,stvl.inv_status_id,stvl.sku_id,stvl.inbound_time
       	
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByDirection" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[SELECT l.id,sku.code as skuCode,sku.bar_code as barCode,sku.name as skuName,l.owner,sku.jm_code as jmCode,
								s.name as intInvstatusName,loc.code as locationCode,l.quantity,l.batch_code
							from t_wh_stv_line l,
							     t_wh_location loc,
							     t_bi_inv_sku sku,
							     t_wh_inventory_status s, 
							     t_wh_stv stv
							where stv.id = l.stv_id
							      and stv.sta_id = :staId
							      and l.sku_id = sku.id
							      and s.id = l.inv_status_id
							      and l.location_id = loc.id
							      and stv.direction = :direction
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByDirectionByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[SELECT l.id,sku.code as skuCode,sku.bar_code as barCode,sku.name as skuName,ch.name owner,sku.jm_code as jmCode,
								s.name as intInvstatusName,loc.code as locationCode,l.quantity,l.batch_code
							from t_wh_stv_line l,
							     t_wh_location loc,
							     t_bi_inv_sku sku,
							     t_wh_inventory_status s, 
							     t_wh_stv stv,
							     t_bi_channel ch
							where stv.id = l.stv_id
							      and stv.sta_id = :staId
							      and l.owner = ch.code (+)
							      and l.sku_id = sku.id
							      and s.id = l.inv_status_id
							      and l.location_id = loc.id
							      and stv.direction = :direction
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select min(vl.id) as id,
                   			sum(vl.quantity) as quantity,
						       sku.code as skuCode,
						       sku.name as skuName,
						       sku.bar_code as barCode,
						       loc.code as locationCode
						from t_wh_stv stv,
						     T_BI_INV_SKU sku,
						     t_wh_stv_line vl,
						     t_wh_sta sta,
						     T_WH_LOCATION loc
						where sta.id= stv.sta_id 
						      and sku.id = vl.sku_id
						      and vl.stv_id = stv.id
						      and loc.id = vl.location_id
						     and (1 !=1
							#foreach($staId in $staIds)
								or sta.id = $staId
							#end
							)
						group by sku.code,sku.name,sku.bar_code,loc.code
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 
				 select sta.code,sta.id,sta.main_wh_id from t_wh_sta sta,t_bi_warehouse w where sta.status='2' and sta.packing_User is null
				 and w.ou_id=sta.main_wh_id and w.is_test_wh=1 and rownum<=:rownum
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.updateStaById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 
				 update t_wh_sta set packing_User='1' where 
				 id in (
						#foreach($id in $ids )
	    				$id 
	    				,
						#end
						-1
						) 
                 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findSalesTypeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sta_type_id from t_wh_sta_type_sales_mode_ref]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateHOListByHOLint" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
update t_wh_sta set ho_list_id=null where id in 
(
select sta.id from 
T_WH_STA_HO_LIST_LINE hll,
t_wh_sta sta
where 
sta.ho_list_id=hll.ho_list_id
and sta.id=hll.sta_id
and sta.status != 10
and sta.ho_list_id=:hoListId
)
					
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findOccpiedStaLineByPlId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select sta.id,
						       sku.name as skuName,
						       sku.code as skuCode,
						       sku.bar_code as barCode,
						       sta.status as intStatus,
						       l.quantity,
						       sta.code as staCode,
						       d.lpcode as lpcode,
						       sta.slip_code as staSlipCode,
						       l.owner as owner,
						       sta.pg_index as pgIndex,
						       d.tracking_no as trackingNo1,
						       nvl(sku.is_sn_sku, 0) isSnSku,
						       sku1.bar_code packageBarCode,
						       sta.is_bk_check as isBkcheckString,
						       sku.customer_id as customerId,
						       nvl(ho.PACKAGE_COUNT,0) as packageCount,
						       sku.sp_type spType
						  from t_wh_sta               sta,
						       t_wh_sta_line          l,
						       t_wh_sta_delivery_info d,
						       t_bi_inv_sku           sku,
						       t_wh_sta_picking_list  p,
						       t_bi_inv_sku sku1,
						       T_WH_STA_HO_LIST_LINE line,
						       T_WH_STA_HO_LIST ho
						 where sta.id = l.sta_id
						   and sta.picking_list_id = p.id
						   and sku.id = l.sku_id
						   and d.id = sta.id
						   and sta.PACKAGE_SKU_ID = sku1.id(+)
						   and sta.id=line.sta_id(+)
						   and line.HO_LIST_ID=ho.ID(+)
						   and sta.status = 2
						   and p.id = :plid
						   
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findOccpiedStaLineForPgSkuByPlId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sta.id,
       sku.name as skuName,
       sku.code as skuCode,
       sku.bar_code as barCode,
       sta.status as intStatus,
       l.quantity,
       sta.code as staCode,
       d.lpcode as lpcode,
       sta.slip_code as staSlipCode,
       l.owner as owner,
       sta.pg_index as pgIndex,
       d.tracking_no as trackingNo1,
       nvl(sku.is_sn_sku, 0) isSnSku
  from t_wh_sta               sta,
       t_wh_sta_line          l,
       t_wh_sta_delivery_info d,
       t_bi_inv_sku           sku,
       t_wh_sta_picking_list  p
 where sta.id = l.sta_id
   and sta.picking_list_id = p.id
   and sku.id = l.sku_id
   and d.id = sta.id
   and (sta.status = 2 or sta.status = 15)
   and p.id = :plid
   and l.sku_id != :pgskuid
   and sta.sku_qty = 2
   and sta.skus like '2%'
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.queryPredefinedOutStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
sta.id,
sta.code,
sta.slip_code,
sta.type as intStaType,
sta.status as intStaStatus,
sta.owner,
sta.create_time,
sta.finish_time,
sta.sku_qty,
sta.memo,
c.name as channelName,
sta.is_sn,
di.address,
di.receiver,
di.telephone,
di.mobile,
u.user_name as creater
from 
t_wh_sta sta,
t_bi_channel c,
T_WH_STA_DELIVERY_INFO di,
T_AU_USER u
where
sta.creator_id=u.id(+)
and c.code=sta.owner
and sta.id=di.id(+)
and sta.main_wh_id=:ouId
#if($type)
and sta.type=:type
and (sta.is_locked = 0 or sta.is_locked is null)
#else
and sta.type in (32,61,62,63,64,90,91,201,202,203,204,205,206,210,212,214,216,218)
and (sta.is_pf <> '1' or sta.is_pf is null)
and (sta.is_locked = 0 or sta.is_locked is null)
#end
#if($code)
and sta.code like :code
#end
#if($slipCode)
and sta.slip_code like :slipCode
#end
#if($owner)
and sta.owner like :owner
#end
#if($status)
and sta.status = :status
#end
#if($createTime)
and sta.create_time > :createTime
#end
#if($endCreateTime)
and sta.create_time < :endCreateTime
#end

				
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="CustomsDeclaration.queryBaoShuiOutStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
d.id,
d.wms_code,
d.slip_code,
d.platform_code,
d.create_time,
d.owner,
d.gross_wt,
d.net_wt,
d.pack_no,
d.wms_type,
d.wrap_type,
d.LICENSE_PLATE_NUMBER,
d.PRESTOWAGE_NO,
d.IS_TO_MODIFY,
d.STATUS,
d.STATUS as ss,
d.wms_status
from 
t_Wh_Customs_Declaration d
where 1=1
and d.main_wh_id=:ouId
#if($code)
and d.wms_code like :code
#end
#if($slipCode)
and d.slip_code like :slipCode
#end
#if($slipCode1)
and d.platform_code like :slipCode1
#end
#if($owner)
and d.owner like :owner
#end
#if($status)
and d.status = :status
#end
#if($createTime)
and d.create_time >= :createTime
#end
#if($endCreateTime)
and d.create_time <= :endCreateTime
#end
#if($baoShuiType)
and d.type=:baoShuiType
#end
#if($licensePlateNumber)
and d.license_plate_number=:licensePlateNumber
#end
#if($prestowageNo)
and d.prestowage_no=:prestowageNo
#end
#if($wmsType)
and d.wms_type=:wmsType
#end
#if($baoShuiStatus)
and d.STATUS=:baoShuiStatus
#end
#if($wmsStatus)
and d.WMS_STATUS=:wmsStatus
#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	

	<bean id="StockTransApplication.findStaNotFinishedListByTypeNoPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
select sta.*,nvl(sta.inbound_time,sta.create_time)  as update_time, sta_remnant.remnant,
case when stv_no_finish.stv_id is null then sta.status else 7 end as process_status,stv_no_finish.isPda,
stv_no_finish.stv_id,stv_no_finish.stv_total,stv_no_finish.stv_mode,c.name as channelName
from 
t_wh_sta sta,
t_bi_channel c,
(  select stal.sta_id,sum(
        case when (stal.QUANTITY-stal.COMPLETE_QUANTITY)>0 then (stal.QUANTITY-stal.COMPLETE_QUANTITY)
        else 0 end
        ) as remnant 
    from t_wh_sta_line stal,t_wh_sta sta2
    where stal.sta_id=sta2.id and sta2.MAIN_WH_ID=:mainWarehouse  and sta2.type=:type and (sta2.STATUS=1 or sta2.status=5)
    group by stal.sta_id
) sta_remnant,
(   select stv.sta_id,stv.id as stv_id,stv.STORE_MODE as stv_mode,sum(stvl.QUANTITY) as stv_total,stv.is_pda as isPda
    from t_wh_stv stv,t_wh_stv_line stvl ,t_wh_sta sta3
    where nvl(stv.STATUS,1)=1  
    and stv.id=stvl.stv_id  and stv.sta_id=sta3.id and sta3.MAIN_WH_ID=:mainWarehouse  and sta3.type=:type and (sta3.STATUS=1 or sta3.status=5)
    group by stv.sta_id,stv.id,stv.STORE_MODE,stv.is_pda
)   stv_no_finish
where sta.id=sta_remnant.sta_id(+)
and sta.owner = c.code
and sta.id=stv_no_finish.STA_ID(+)
and sta.MAIN_WH_ID=:mainWarehouse
and sta.type=:type
and (sta.STATUS=1 or sta.status=5)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findRtnInbountSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select sta.*,
		          nvl(sta.inbound_time,sta.create_time)  as sta_update_time, 
		          sta.type as intStaType,
		          sta.status as process_status,
		          c.name as channelName
		from 
		          t_wh_sta sta
		inner join t_bi_channel c on sta.owner=c.code
          where sta.MAIN_WH_ID=:mainWarehouse
          and nvl(sta.is_locked, 0)!=1
          and (sta.is_pda is null or sta.is_pda=0)
          and sta.type=41
          and (sta.STATUS=1 or sta.status=5)
            #if($startTime)
               and sta.create_time > :startTime
                    #end
            #if($endTime)
                  and sta.create_time < :endTime           
                    #end
            #if($code)
                and sta.code like :code
                    #end
            #if($refcode)
                and sta.slip_code like :refcode
                    #end
            #if($owner)
                and sta.owner like :owner
                    #end
                    #if($slipCode1)
                   and sta.slip_code1 like :slipCode1
               #end
               #if($slipCode2)
             and sta.slip_code2 like :slipCode2
           #end
           #if($slipCode3)
             and sta.slip_code3 = :slipCode3
           #end
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="ZdhPici.getHistoricalCodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		             select p.id,p.code,p.create_time,u.login_name as userName,decode(p.status,1,'正常',0,'作废') as statusName,
		             p.move_status  
		             from t_wh_zdh_pici p left join t_au_user u on u.id=p.user_id

					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ZdhPiciLine.getHistoricalCodeListLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		            select l.id,channel.name as shopName,u.name as ouName  from t_wh_zdh_pici_line l left join t_bi_channel channel on channel.id=l.channel_id 
                    left join t_au_operation_unit u on u.id=l.wh_id  where l.pici_id=:id

					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.backUpInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                  insert into wms.t_arc_sku_inventory
  (id,
   batch_code,
   inbound_time,
   is_occupied,
   occupation_code,
   inv_owner,
   quantity,
   sku_cost,
   district_id,
   location_id,
   ou_id,
   sku_id,
   status_id,
   version,
   production_date,
   valid_date,
   expire_date,
   ocp_code,
   backup_inv_date,
   backup_batch_code)
  select inv.id,
         inv.batch_code,
         inv.inbound_time,
         inv.is_occupied,
         inv.occupation_code,
         inv.inv_owner,
         inv.quantity,
         inv.sku_cost,
         inv.district_id,
         inv.location_id,
         inv.ou_id,
         inv.sku_id,
         inv.status_id,
         inv.version,
         inv.production_date,
         inv.valid_date,
         inv.expire_date,
         inv.ocp_code,
         sysdate backup_inv_date,
         :code
    from wms.t_wh_sku_inventory inv
   inner join wms.t_au_operation_unit au on au.id = inv.ou_id
   inner join wms.t_bi_inv_sku sku on sku.id = inv.sku_id
   where inv.quantity > 0
     and inv.inv_owner=:owners
     and au.code in
     
      (
     #foreach($ouName in $ouNames)
				'$ouName',
			 #end
			'-1'
	 )
	                   
	                  
	]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="Inventory.backUpSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				      
				      
   insert into wms.t_wh_sta_status_backup
  (id,
   sta_code,
   origin_status,
   aim_status,
   operate_use_id,
   create_time,
   batch_code)
   select s_t_wh_sta_status_backup.nextval id,
         sta.code,
         sta.status origin_status,
         '10' aim_status,
         '' operate_use_id,
         sysdate create_time,
         :code
     from wms.t_wh_sta sta
     inner join wms.t_au_operation_unit au on au.id = sta.main_wh_id
     where sta.status not in (10, 17)
     and sta.owner=:owners
     and au.code in (
        #foreach($ouName in $ouNames)
				'$ouName',
			 #end
			'-1'
     )
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findRtnInbountStaTransInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select re.tracking_no               AS trackingNo,
					       tr.name                      AS lpcode,
					       re.store_com_is_need_invoice AS isNeedInvoice,
					       re.remark                    as returnReasonMemo
					  from t_wh_sta_delivery_info re, T_MA_TRANSPORTATOR tr
					 where re.lpcode = tr.exp_code
					   and re.id = :staid
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findRtnInbountStaStvInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select    stv_no_finish.is_pda as isPda,
						          stv_no_finish.id as stv_id,
						          stv_no_finish.sku_qty as stv_total,
						          stv_no_finish.STORE_MODE as stv_mode
						from t_wh_stv stv_no_finish
						where stv_no_finish.sta_id = :staid
						      and stv_no_finish.status = 1 
						      and stv_no_finish.direction=1 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findSkuByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						 select sku.bar_code as barCode,sku.id as skuid,sta.slip_code1  from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku  
                         where sku.id=line.sku_id and line.sta_id=sta.id 
                         and sta.system_key='adidas' and sta.code=:staCode
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- =============================待作废方法 StockTransApplication.findStaNotFinishedImperfectListByType====================== -->
	<bean id="StockTransApplication.findStaNotFinishedImperfectListByType"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select sta.*,
					nvl(sta.inbound_time,sta.create_time)  as sta_update_time, 
					sta.type as intStaType,
					case when stv_no_finish.id is null then sta.status else 7 end as process_status,
					stv_no_finish.is_pda as isPda,
					stv_no_finish.id as stv_id,
					stv_no_finish.sku_qty as stv_total,
					stv_no_finish.STORE_MODE as stv_mode,
					c.name as channelName,
					re.tracking_no AS trackingNo,
       				tr.name AS lpcode,
       				re.store_com_is_need_invoice AS isNeedInvoice,
       				re.remark as returnReasonMemo
					from 
					t_wh_sta sta
					inner join t_bi_channel c on sta.owner=c.code
					LEFT JOIN t_wh_sta_delivery_info re
					--(SELECT d.*, t.name FROM t_wh_sta_delivery_info d, T_MA_TRANSPORTATOR t WHERE d.lpcode = t.exp_code) re
         			ON sta.id = re.id
         			LEFT JOIN T_MA_TRANSPORTATOR tr on tr.exp_code = re.lpcode
					, t_wh_stv stv_no_finish 
					where sta.MAIN_WH_ID=:mainWarehouse and nvl(sta.is_locked, 0)!=1
					and stv_no_finish.sta_id = sta.id and stv_no_finish.status = 1 and stv_no_finish.direction=1 
					and (sta.is_pda is null or sta.is_pda=0)
					and sta.type=41
					and (sta.STATUS=1 or sta.status=5)
					
				    #if($startTime)
				    	 and sta.create_time > :startTime
                    #end
				    #if($endTime)
			          	and sta.create_time < :endTime           
                    #end
				    #if($code)
			          and sta.code like :code
                    #end
				    #if($refcode)
			          and sta.slip_code like :refcode
                    #end
				    #if($owner)
			          and sta.owner like :owner
                    #end
                    #if($slipCode1)
           				and sta.slip_code1 like :slipCode1
         			#end
         			#if($slipCode2)
 						and sta.slip_code2 like :slipCode2
 					#end
 					#if($slipCode3)
 						and sta.slip_code3 = :slipCode3
 					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="StockTransApplication.findStaNotFinishedListByType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  

					select sta.*,
					nvl(sta.inbound_time,sta.create_time)  as sta_update_time, 
					sta.type as intStaType,
					case when stv_no_finish.id is null then sta.status else 7 end as process_status,
					stv_no_finish.is_pda as isPda,
					stv_no_finish.id as stv_id,
					stv_no_finish.sku_qty as stv_total,
					stv_no_finish.STORE_MODE as stv_mode,
					c.name as channelName,
					re.tracking_no AS trackingNo,
       				re.name AS lpcode,
       				re.store_com_is_need_invoice AS isNeedInvoice,
       				re.remark as returnReasonMemo,
       				c.vmi_code as vmiCode
					from 
					t_wh_sta sta
					left join t_bi_channel c on sta.owner=c.code
					LEFT JOIN (SELECT d.*, t.name FROM t_wh_sta_delivery_info d, T_MA_TRANSPORTATOR t WHERE d.lpcode = t.exp_code) re
         			ON sta.id = re.id
					left join t_wh_stv stv_no_finish on stv_no_finish.sta_id = sta.id and stv_no_finish.status = 1 and stv_no_finish.direction=1 
					where sta.MAIN_WH_ID=:mainWarehouse and nvl(sta.is_locked, 0)!=1 
					#if("$!type"=="11")
						and (sta.type=11 or sta.type=55)
					#else
						and sta.type=:type
					#end
					and (sta.is_pda is null or sta.is_pda=0)
					and (sta.STATUS=1 or sta.status=5)
					
				    #if($startTime)
				    	 and sta.create_time > :startTime
                    #end
				    #if($endTime)
			          	and sta.create_time < :endTime           
                    #end
				    #if($arriveStartTime)
			          and sta.arrive_time > :arriveStartTime 
                    #end
				    #if($arriveEndTime)
			          and sta.arrive_time < :arriveEndTime
                    #end
				    #if($code)
			          and sta.code like :code
                    #end
				    #if($refcode)
			          and sta.slip_code like :refcode
                    #end
				    #if($owner)
			          and sta.owner like :owner
                    #end
                    #if($isNeedInvoice)
                      and nvl(re.store_com_is_need_invoice,0) = :isNeedInvoice 
                    #end
                    #if($lpcode)
                      and re.LPCODE = :lpcode 
                    #end
                    #if($trackingNo)
                      and re.tracking_no like :trackingNo
                    #end
                    #if($slipCode1)
           				and sta.slip_code1 like :slipCode1
         			#end
         			#if($slipCode2)
 						and sta.slip_code2 like :slipCode2
 					#end
 					#if($slipCode3)
 						and sta.slip_code3 = :slipCode3
 					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaNotFinishedListByTypeNoTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select sta.*,
					nvl(sta.inbound_time,sta.create_time)  as sta_update_time, 
					sta.type as intStaType,
					c.name as channelName,
       				c.vmi_code as vmiCode
					from t_wh_sta sta
					left join t_bi_channel c on sta.owner=c.code
					where sta.MAIN_WH_ID=:mainWarehouse and nvl(sta.is_locked, 0)!=1 
					#if("$!type"=="11")
						and (sta.type=11 or sta.type=55)
					#else
						and sta.type=:type
					#end
					and (sta.is_pda is null or sta.is_pda=0)
					and (sta.STATUS=1 or sta.status=5)
				    #if($startTime)
				    	 and sta.create_time > :startTime
                    #end
				    #if($endTime)
			          	and sta.create_time < :endTime           
                    #end
				    #if($arriveStartTime)
			          and sta.arrive_time > :arriveStartTime 
                    #end
				    #if($arriveEndTime)
			          and sta.arrive_time < :arriveEndTime
                    #end
				    #if($code)
			          and sta.code like :code
                    #end
				    #if($refcode)
			          and sta.slip_code like :refcode
                    #end
				    #if($owner)
			          and sta.owner like :owner
                    #end
                    #if($isNeedInvoice)
                      and nvl(re.store_com_is_need_invoice,0) = :isNeedInvoice 
                    #end
                    #if($slipCode1)
           				and sta.slip_code1 like :slipCode1
         			#end
         			#if($slipCode2)
 						and sta.slip_code2 like :slipCode2
 					#end
 					#if($slipCode3)
 						and sta.slip_code3 = :slipCode3
 					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaNotFinishedListByTypeNew"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  

					select sta.*,
					nvl(sta.inbound_time,sta.create_time)  as sta_update_time, 
					sta.type as intStaType,
					case when stv_no_finish.id is null then sta.status else 7 end as process_status,
					stv_no_finish.is_pda as isPda,
					stv_no_finish.id as stv_id,
					stv_no_finish.sku_qty as stv_total,
					stv_no_finish.STORE_MODE as stv_mode,
					c.name as channelName,
					re.tracking_no AS trackingNo,
       				re.name AS lpcode,
       				re.store_com_is_need_invoice AS isNeedInvoice,
       				re.remark as returnReasonMemo,
       				c.vmi_code as vmiCode
					from 
					t_wh_sta sta
					left join t_bi_channel c on sta.owner=c.code
					LEFT JOIN (SELECT d.*, t.name FROM t_wh_sta_delivery_info d, T_MA_TRANSPORTATOR t WHERE d.lpcode = t.exp_code) re
         			ON sta.id = re.id
					left join t_wh_stv stv_no_finish on stv_no_finish.sta_id = sta.id and stv_no_finish.status = 1 and stv_no_finish.direction=1 
					where sta.MAIN_WH_ID=:mainWarehouse and nvl(sta.is_locked, 0)!=1 
					#if("$!type"=="11")
						and (sta.type=11 or sta.type=55)
					#else
						and sta.type=:type
					#end
					and (sta.is_pda is null or sta.is_pda=0)
					and (sta.STATUS=1 or sta.status=5)
					and stv_no_finish.id is null
				    #if($startTime)
				    	 and sta.create_time > :startTime
                    #end
				    #if($endTime)
			          	and sta.create_time < :endTime           
                    #end
				    #if($arriveStartTime)
			          and sta.arrive_time > :arriveStartTime 
                    #end
				    #if($arriveEndTime)
			          and sta.arrive_time < :arriveEndTime
                    #end
				    #if($code)
			          and sta.code like :code
                    #end
				    #if($refcode)
			          and sta.slip_code like :refcode
                    #end
				    #if($owner)
			          and sta.owner like :owner
                    #end
                    #if($isNeedInvoice)
                      and nvl(re.store_com_is_need_invoice,0) = :isNeedInvoice 
                    #end
                    #if($lpcode)
                      and re.LPCODE = :lpcode 
                    #end
                    #if($trackingNo)
                      and re.tracking_no like :trackingNo
                    #end
                    #if($slipCode1)
           				and sta.slip_code1 like :slipCode1
         			#end
         			#if($slipCode2)
 						and sta.slip_code2 like :slipCode2
 					#end
 					#if($slipCode3)
 						and sta.slip_code3 = :slipCode3
 					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaProcurementReturnInbound"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
			   select sta.id id,
			   	     stv.id stvId,
			   		sta.owner owner,
			  		sta.create_time createTime,
			       sta.code code,
			       sta.slip_code2 slipCode2,
			       case when stv.id is null then sta.status else 7 end as process_status,
			       sta.slip_code refSlipCode,
			       ch.name channelName
			    from t_wh_sta sta, t_wh_stv stv,t_bi_channel ch
			    where sta.id = stv.sta_id(+) and ch.code=sta.owner 
			        and sta.type=65 and sta.status=1
			        and sta.main_wh_id=:mainWarehouse
			         #if("$!isStvId"=="true")
			            and stv.id is null 
			        #end
			         #if("$!isStvId"=="false")
			             and stv.id is not null
			        #end
			         #if($staCode)
						   and sta.code=:staCode           
			         #end
			          #if($slipCode2)
						   and sta.slip_code2=:slipCode2         
			         #end
			         #if($refSlipCode)
						   and sta.slip_code=:refSlipCode           
			         #end
			         #if($startTime)
						   and sta.create_time > :startTime
			         #end
				      #if($endTime)
						   and sta.create_time < :endTime           
			         #end
			         #if($owner)
						   and sta.owner like :owner
			         #end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findProcuremetReturnInboundByStvListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
           SELECT 
           		sta.code staCode,
                sku.NAME AS skuName,
				sku.code AS skuCode,
				sku.bar_code as barCode,
				sku.jm_code as jmCode, 
				sku.key_properties as keyProperties,
				decode(sku.store_mode,33,'1','0') as isShelfManagement,
				sku.supplier_code as supplierCode,
				status.name as intInvstatusName,
				to_char(stvl.production_date,'yyyyMMdd') as strPoductionDate,
				stvl.valid_date as validDate,
				to_char(stvl.expire_date,'yyyyMMdd') as strExpireDate,
				loc.code AS locationcode,
				NVL (loc.capacity, 0) * loc.capacity_ratio / 100 AS locationAvailable,
				NVL (lq.quantity, 0) AS locationInventory,
				total.totalQuantity as totalQuantity
			FROM t_wh_stv_line stvl, t_bi_inv_sku sku, t_wh_location loc,t_wh_stv stv,t_wh_sta sta,
				(SELECT   i.location_id, SUM (i.quantity) AS quantity  FROM t_wh_sku_inventory i  GROUP BY i.location_id) lq,
				(select stvl2.staline_id,sum(stvl2.quantity) as totalQuantity from t_wh_stv_line stvl2  WHERE 1=1 and (stvl2.stv_id=-1
					#foreach($stvId in $stvListId)
                        or stvl2.stv_id=$stvId       
                    #end
                    )
				  group by stvl2.STALINE_ID) total,
				T_WH_INVENTORY_STATUS status
			WHERE
				 stvl.sku_id = sku.ID
				and (stvl.stv_id=-1
					#foreach($stvId in $stvListId)
                        or stvl.stv_id=$stvId       
                    #end
                    )
                and sta.id=stv.sta_id
        		and stv.id=stvl.stv_id
				and stvl.inv_status_id=status.id(+)
				AND stvl.location_id = loc.ID(+)
				AND stvl.location_id = lq.location_id(+)
				and stvl.STALINE_ID=total.staline_id
					]]>
			</value>
		</constructor-arg>
	</bean>


	<!--查询采购出库过期时间 -->
	<bean id="StvLine.findExpireDateByStaSlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.sku_id as skuId,
					l.production_date as productionDate,
					l.valid_date as validDate,
					to_char(l.expire_date,'yyyyMMdd') as strExpireDate,
					l.expire_date as expireDate,
					sum(l.quantity) as quantity 
					from t_wh_sta sta,
					t_wh_stv stv,
					t_wh_stv_line l,
					t_bi_inv_sku sku
					where l.sku_id=sku.id
					and sku.store_mode='33'
					and stv.direction=2
					and stv.status=10
					and sta.id=stv.sta_id
					and l.stv_id = stv.id
					and  sta.slip_code=:slipCode
					group by l.sku_id,l.production_date,l.valid_date,l.expire_date
			
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询锁定的sta -->
	<bean id="StockTransApplication.findlockedSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				#if($orderCode)
				select * from (
				#end
				select distinct
					sta.*, 
					d.lpcode as lpcode, 
					d.tracking_no as trackingNo,
					cnl.name channelName
				from 
					t_wh_sta sta
				left join t_wh_sta_delivery_info d
					on d.id = sta.id
				left join T_WH_STA_LINE sl
                   on sta.id = sl.sta_id
                 left join t_bi_inv_sku bis
                   on bis.id = sl.sku_id,
				t_bi_channel cnl
 				where sta.is_locked = 1 and sta.type=41 and sta.MAIN_WH_ID=:mainWarehouse and sta.owner = cnl.code
 				#if($barCode)
 					and bis.bar_code = :barCode
 				#end
			   	#if($startTime)
		    	    and sta.create_time > :startTime
		    	#else
		    		and sta.create_time > sysdate - 120
                #end
		   		#if($endTime)
	          		and sta.create_time < :endTime
                #end
 				#if($code)
 					and sta.code like :code
 				#end 
 				#if($refSlipCode)
 					and sta.slip_code like :refSlipCode
 				#end 
				#if($owner)
 					and sta.owner like :owner
 				#end 
 				#if($lpcode)
 					and d.lpcode like :lpcode
 				#end
 				#if($trackingNo)
 					and d.tracking_no like :trackingNo
 				#end
 				#if($receiver)
 					and d.receiver like :receiver
 				#end
 				#if($receiverPhone)
 					and d.mobile like :receiverPhone
 				#end
 				#if($taobaoOrderCode)
 					and sta.slip_code2 like :taobaoOrderCode
 				#end
 				#if($slipCode3)
 					and sta.slip_code3 = :slipCode3
 				#end
 				#if($orderCode)
		          and sta.slip_code1 like :orderCode
		          union
		          select distinct
		          	sta.*, d.lpcode as lpcode, d.tracking_no as trackingNo,cnl.name channelName
		          from 
		            t_wh_sta sta
		            left join t_wh_sta_delivery_info d
		            	on d.id = sta.id
		            left join T_WH_STA_LINE sl
                    	on sta.id = sl.sta_id
                    left join t_bi_inv_sku bis
                    	on bis.id = sl.sku_id,
		            t_bi_channel cnl
		          where 
		          	sta.slip_code1 in (select slip_code1 from t_wh_sta c where c.slip_code like :orderCode ) 
		          and 
		          	sta.is_locked = 1 and sta.type=41 and sta.MAIN_WH_ID=:mainWarehouse and sta.owner = cnl.code
		            #if($barCode)
 						and bis.bar_code = :barCode
 				    #end ) sta
		        #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updateStaUnlocked" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta sta set 
					sta.is_locked=0
					where sta.id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.updateStaDeliveryInfoBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta_delivery_info sta set 
					sta.lpcode=:lpCode,sta.tracking_no=:trackingNo
					where sta.id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>




	<bean id="StaDeliveryInfo.findTheStaDeliveryInfoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT d.* FROM t_wh_sta_delivery_info d WHERE d.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.updateStaDeliveryByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
				UPDATE T_WH_STA_DELIVERY_INFO D
 			  	   SET D.LPCODE = :lpcode, D.TRACKING_NO = :trackingNo,D.RETURN_REASON_TYPE = :returnReasonType,D.RETURN_REASON_MEMO = :returnReasonMemo,D.LAST_MODIFY_TIME = sysdate
 				 WHERE D.ID = :staId
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.insertStaDeliveryByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
			<![CDATA[
				INSERT INTO T_WH_STA_DELIVERY_INFO
				  (ID,
				   ADDRESS,
				   CITY,
				   DISTRICT,
				   PROVINCE,
				   MOBILE,
				   RECEIVER,
				   TELEPHONE,
				   TRANSFER_FEE,
				   ZIPCODE,
				   COUNTRY,
				   LPCODE,
				   tracking_no,
				   RETURN_REASON_TYPE,
				   RETURN_REASON_MEMO,
				   STORE_COM_IS_NEED_INVOICE,
				   LAST_MODIFY_TIME)
				  (SELECT STA.ID,
				         RY.ADDRESS,
				         RY.CITY,
				         RY.DISTRICT,
				         RY.PROVINCE,
				         RY.MOBILE,
				         RY.RECEIVER,
				         RY.TELEPHONE,
				         NULL,
				         RY.ZIPCODE,
				         RY.COUNTRY,
				         :lpcode,
				         :trackingNo,
				         :returnReasonType,
				         :returnReasonMemo,
				         NVL(R.IS_NEED_NEW_INVOICE, 0),
				         sysdate
				    FROM T_SO_RETURN_REQUEST R, T_SO_RADELIVERY_INFO RY, T_WH_STA STA
				   WHERE R.RD_ID = RY.ID
				     AND R.CODE = STA.SLIP_CODE
				     AND STA.ID = :staId)
			]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- 预定义 - 分页查询 -->
	<bean id="StockTransApplication.findPredefinedStaByTypeBYPaginationRoot"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
select sta.*,sta.type as intStaType,nvl(sta.inbound_time,sta.create_time)  as update_time,
decode(sta.id,null,sta.status,7) as process_status,
stv.is_Pda as isPda,
stv.id as stv_id,
stv.STORE_MODE as stv_mode,
shop.is_inbound_invoice as isInboundInvoice,
sta.status intStaStatus,
shop.name channelName
from 
t_wh_sta sta
left join 
t_bi_channel shop on sta.owner=shop.code
left join t_wh_stv stv on sta.id=stv.sta_id and stv.status = 1
left join t_bi_warehouse wh on wh.ou_id = sta.main_wh_id
					where  sta.MAIN_WH_ID=:mainWarehouse
              and wh.ou_id = :ouId
					and (sta.type=-1
					#foreach($type in $types)
                        or sta.type=$type       
                    #end
                    )
                    and (sta.STATUS=-1
					#foreach($statu in $status)
                        or sta.status=$statu       
                    #end
                    )
					and (sta.is_pda is null or sta.is_pda = 0)
					
					 #if($startTime)
				    	 and sta.create_time > :startTime
                    #end
				    #if($endTime)
			          	and sta.create_time < :endTime           
                    #end
				    #if($arriveStartTime)
			          and sta.arrive_time > :arriveStartTime 
                    #end
				    #if($arriveEndTime)
			          and sta.arrive_time < :arriveEndTime
                    #end
				    #if($code)
			          and sta.code like :code
                    #end
				    #if($refcode)
			          and sta.slip_code like :refcode
                    #end
				    #if($owner)
			          and sta.owner like :owner
                    #end
                    #if($locked)
                     and  (sta.is_locked is null or sta.is_locked=0)
                    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 预定义 - 分页查询 -->
	<bean id="StockTransApplication.findPredefinedStaByTypeBYPagination"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
select sta.*,sta.type as intStaType,nvl(sta.inbound_time,sta.create_time)  as update_time,
decode(sta.id,null,sta.status,7) as process_status,
stv.is_Pda as isPda,
stv.id as stv_id,
stv.STORE_MODE as stv_mode,
shop.is_inbound_invoice as isInboundInvoice,
shop.name as shopId,
sta.status intStaStatus
from 
t_wh_sta sta
left join 
t_bi_channel shop on sta.owner=shop.code
left join t_wh_stv stv on sta.id=stv.sta_id and stv.status = 1
					where  sta.MAIN_WH_ID=:mainWarehouse
					and not exists (select 1 from t_wh_sta t where t.group_sta_id = sta.id )
					and (sta.type=-1
					#foreach($type in $types)
                        or sta.type=$type       
                    #end
                    )
                    and (sta.STATUS=-1
					#foreach($statu in $status)
                        or sta.status=$statu       
                    #end
                    )
					and (sta.is_pda is null or sta.is_pda = 0)
					
					 #if($startTime)
				    	 and sta.create_time > :startTime
                    #end
				    #if($endTime)
			          	and sta.create_time < :endTime           
                    #end
				    #if($arriveStartTime)
			          and sta.arrive_time > :arriveStartTime 
                    #end
				    #if($arriveEndTime)
			          and sta.arrive_time < :arriveEndTime
                    #end
				    #if($code)
			          and sta.code like :code
                    #end
				    #if($refcode)
			          and sta.slip_code like :refcode
                    #end
				    #if($owner)
			          and sta.owner like :owner
                    #end
                    #if($locked)
                     and  (sta.is_locked is null or sta.is_locked=0)
                    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 按箱收货 - 分页查询 -->
	<bean id="StockTransApplication.findFreezeCartonStaByTypeBYPagination"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select 
						sta.id id,sta.code code,sta.slip_code refSlipCode,sta.create_time createTime,sta.type intStaType,sta.status intStaStatus,sta.owner owner
					from 
						t_wh_sta sta,t_bi_channel shop
					where 
						sta.group_sta_id is null
						and  (sta.is_locked is null or sta.is_locked=0)
						and  sta.MAIN_WH_ID=:mainWarehouse
						and shop.is_cartonsta_shop = 1
						and sta.owner = shop.code
						and (
						     (sta.status = 10 and exists (select 1 from t_wh_sta sta1 where sta1.group_sta_id = sta.id)) 
						     or 
						     (sta.status in(1,5,25) and not exists(select 1 from t_wh_stv stv where stv.sta_id = sta.id and stv.status<>10))
						     )
						and (sta.type=-1
						    #foreach($type in $types)
						        or sta.type=$type       
						    #end
						    )
						and (sta.STATUS=-1
						    #foreach($statu in $status)
						        or sta.status=$statu       
						    #end
						    )				
						#if($startTime)
						and sta.create_time > :startTime
						#end
						#if($endTime)
						and sta.create_time < :endTime           
						#end
						#if($arriveStartTime)
						and sta.arrive_time > :arriveStartTime 
						#end
						#if($arriveEndTime)
						and sta.arrive_time < :arriveEndTime
						#end
						#if($code)
						and sta.code = :code
						#end
						#if($refcode)
						and sta.slip_code = :refcode
						#end
						#if($owner)
						and sta.owner = :owner
						#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 预定义 取消- 分页查询 -->
	<bean id="StockTransApplication.findPredeCancelStaByPagination"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select sta.*,sta.type as intStaType,nvl(sta.inbound_time,sta.create_time)  as update_time,
						decode(sta.id,null,sta.status,7) as process_status,
						stv.is_Pda as isPda,
						stv.id as stv_id,
						stv.STORE_MODE as stv_mode,
						shop.is_inbound_invoice as isInboundInvoice,
						shop.name as shopId,
						sta.status intStaStatus
						
					from 
						t_wh_sta sta
						left join 
						t_bi_channel shop on sta.owner=shop.code
						left join t_wh_stv stv on sta.id=stv.sta_id and stv.status = 1
					where  sta.MAIN_WH_ID=:mainWarehouse
	                    and (sta.STATUS=1 or sta.STATUS=5) and sta.type in(12,14)
						and (sta.is_pda is null or sta.is_pda = 0)
						 #if($startTime)
					    	 and sta.create_time > :startTime
	                    #end
					    #if($endTime)
				          	and sta.create_time < :endTime           
	                    #end
					    #if($arriveStartTime)
				          and sta.arrive_time > :arriveStartTime 
	                    #end
					    #if($arriveEndTime)
				          and sta.arrive_time < :arriveEndTime
	                    #end
					    #if($code)
				          and sta.code like :code
	                    #end
	                    #if($intStaType)
				          and sta.type = :intStaType
	                    #end
	                      #if($intStaStatus)
				          and sta.STATUS = :intStaStatus
	                    #end
					    #if($refcode)
				          and sta.slip_code like :refcode
	                    #end
					    #if($owner)
				          and sta.owner like :owner
	                    #end
	                    #if($locked)
	                     and  (sta.is_locked is null or sta.is_locked=0)
	                    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 預定義 - 取消 -->
	<bean id="StockTransApplication.modifyroleStatusById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					update t_wh_sta sta set sta.STATUS = 17 where sta.ID = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 预定义 - 未分页查询 -->
	<bean id="StockTransApplication.findPredefinedStaByType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select sta.*,sta.type as intStaType,nvl(sta.inbound_time,sta.create_time) as update_time, sta_remnant.remnant,
					case when stv_no_finish.stv_id is null then sta.status else 7 end as process_status,stv_no_finish.isPda,
					stv_no_finish.stv_id,stv_no_finish.stv_total,stv_no_finish.stv_mode
					from 
					t_wh_sta sta
					left join 
					(  select stal.sta_id,sta2.type,sum(
					        case when (stal.QUANTITY-stal.COMPLETE_QUANTITY)>0 then (stal.QUANTITY-stal.COMPLETE_QUANTITY)
					        else 0 end
					        ) as remnant 
					    from t_wh_sta_line stal,t_wh_sta sta2
					    where stal.sta_id=sta2.id and sta2.MAIN_WH_ID=:mainWarehouse  and (sta2.STATUS=1 or sta2.status=5)
					    group by stal.sta_id,sta2.type
					) sta_remnant on sta.id=sta_remnant.sta_id and sta_remnant.type=sta.type
					left join 
					(   select sta3.type,stv.sta_id,stv.id as stv_id,stv.STORE_MODE as stv_mode,sum(stvl.QUANTITY) as stv_total,stv.is_pda as isPda
					    from t_wh_stv stv,t_wh_stv_line stvl ,t_wh_sta sta3
					    where nvl(stv.STATUS,1)=1  
					    and stv.id=stvl.stv_id  and stv.sta_id=sta3.id and sta3.MAIN_WH_ID=:mainWarehouse and (sta3.STATUS=1 or sta3.status=5)
					    group by stv.sta_id,stv.id,stv.STORE_MODE,sta3.type,stv.is_pda
					) stv_no_finish on sta.id=stv_no_finish.STA_ID and stv_no_finish.type=sta.type
					where  sta.MAIN_WH_ID=:mainWarehouse
					and (sta.type=-1
					#foreach($type in $types)
                        or sta.type=$type       
                    #end
                    )
					and (sta.STATUS=1 or sta.status=5)
					and (sta.is_pda is null or sta.is_pda = 0)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- old: -->
	<bean
		id="StockTransApplication.findTranCossStaNotFinishedListByTypeNoPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[  
                       select sta.*,nvl(sta.inbound_time,sta.create_time)  as update_time, sta_remnant.remnant,
				case when stv_no_finish.stv_id is null then sta.status else 7 end as process_status,
				stv_no_finish.stv_id,stv_no_finish.stv_total,stv_no_finish.stv_mode,stv_no_finish.isPda,
				owner.ownerOuName,
				addiOwner.Addiownerouname,
				opuser.user_name creater,
				invstatus.name as invStrutsName,
				main.name as mainName,addi.name as addiName
				from
				t_wh_sta sta,
				(
					select stal.sta_id,sum(
					case when (stal.QUANTITY-stal.COMPLETE_QUANTITY)>0 then (stal.QUANTITY-stal.COMPLETE_QUANTITY)
					else 0 end
					) as remnant
					from t_wh_sta_line stal,t_wh_sta sta2
					where stal.sta_id=sta2.id and sta2.ADDI_WH_ID=:addiWarehouse  and sta2.type=:type and (sta2.STATUS=4 or sta2.status=5)
					group by stal.sta_id
				) sta_remnant,
				(
				  select stv.sta_id,stv.id as stv_id,stv.STORE_MODE as stv_mode,sum(stvl.QUANTITY) as stv_total,stv.is_pda as isPda
					from t_wh_stv stv,t_wh_stv_line stvl ,t_wh_sta sta3
					where nvl(stv.STATUS,1)=1
					and stv.id=stvl.stv_id  and stv.sta_id=sta3.id and sta3.ADDI_WH_ID=:addiWarehouse and sta3.type=:type and (sta3.STATUS=4 or sta3.status=5)
					group by stv.sta_id,stv.id,stv.STORE_MODE,stv.is_pda
				)   stv_no_finish,
				T_AU_OPERATION_UNIT main,
				T_AU_OPERATION_UNIT addi,
				T_WH_INVENTORY_STATUS invstatus,
				T_AU_USER opuser,
				(
					select info.code,
					'['||cho.option_value||']'||shop.name as ownerOuName
					from t_au_operation_unit shop,
					t_bi_channel info,
					T_SYS_CHOOSE_OPTION cho
					where
					cho.category_code = 'companyShopPlatformType'
					and info.platform_type = cho.option_key
					and info.ou_id = shop.id
					and info.life_cycle_status = 1
				) owner,
				(
					select info.code,
					'['||cho.option_value||']'||shop.name as addiOwnerOuName
					from t_au_operation_unit shop,
					t_bi_channel info,
					T_SYS_CHOOSE_OPTION cho
					where
					cho.category_code = 'companyShopPlatformType'
					and info.platform_type = cho.option_key
					and info.ou_id = shop.id
					and info.life_cycle_status = 1
				) addiOwner
				where sta.id=sta_remnant.sta_id(+)
				and sta.id=stv_no_finish.STA_ID(+)
				and sta.owner = owner.code(+)
				and STA.ADDI_STATUS_ID = INVSTATUS.ID(+)
				and sta.addi_owner = addiOwner.code(+)
				and sta.CREATOR_ID = opuser.id(+)
				and sta.ADDI_WH_ID=:addiWarehouse
				and sta.type=:type
				and (sta.STATUS=4 or sta.status=5)
				and sta.MAIN_WH_ID=main.id and sta.ADDI_WH_ID=addi.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findTranCossStaNotFinishedListByType"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[  
				select sta.*,nvl(sta.inbound_time,sta.create_time)  as update_time, sta_remnant.remnant,
				case when stv_no_finish.stv_id is null then sta.status else 7 end as process_status,
				stv_no_finish.stv_id,stv_no_finish.stv_total,stv_no_finish.stv_mode,stv_no_finish.isPda,
				owner.ownerOuName,
				addiOwner.Addiownerouname,
				opuser.user_name creater,
				invstatus.name as invStrutsName,
				main.name as mainName,addi.name as addiName
				from
				t_wh_sta sta,
				(
					select stal.sta_id,sum(
					case when (stal.QUANTITY-stal.COMPLETE_QUANTITY)>0 then (stal.QUANTITY-stal.COMPLETE_QUANTITY)
					else 0 end
					) as remnant
					from t_wh_sta_line stal,t_wh_sta sta2
					where stal.sta_id=sta2.id and sta2.ADDI_WH_ID=:addiWarehouse  and sta2.type=:type and (sta2.STATUS=4 or sta2.status=5)
					group by stal.sta_id
				) sta_remnant,
				(
				  select stv.sta_id,stv.id as stv_id,stv.STORE_MODE as stv_mode,sum(stvl.QUANTITY) as stv_total,stv.is_pda as isPda
					from t_wh_stv stv,t_wh_stv_line stvl ,t_wh_sta sta3
					where nvl(stv.STATUS,1)=1
					and stv.id=stvl.stv_id  and stv.sta_id=sta3.id and sta3.ADDI_WH_ID=:addiWarehouse and sta3.type=:type and (sta3.STATUS=4 or sta3.status=5)
					group by stv.sta_id,stv.id,stv.STORE_MODE,stv.is_pda
				)   stv_no_finish,
				T_AU_OPERATION_UNIT main,
				T_AU_OPERATION_UNIT addi,
				T_WH_INVENTORY_STATUS invstatus,
				T_AU_USER opuser,
				(
					select info.code,
					'['||cho.option_value||']'||shop.name as ownerOuName
					from t_au_operation_unit shop,
					t_bi_channel info,
					T_SYS_CHOOSE_OPTION cho
					where
					cho.category_code = 'companyShopPlatformType'
					and info.platform_type = cho.option_key
					and info.ou_id = shop.id
					and info.life_cycle_status = 1
				) owner,
				(
					select info.code,
					'['||cho.option_value||']'||shop.name as addiOwnerOuName
					from t_au_operation_unit shop,
					t_bi_channel info,
					T_SYS_CHOOSE_OPTION cho
					where
					cho.category_code = 'companyShopPlatformType'
					and info.platform_type = cho.option_key
					and info.ou_id = shop.id
					and info.life_cycle_status = 1
				) addiOwner
				where sta.id=sta_remnant.sta_id(+)
				and sta.id=stv_no_finish.STA_ID(+)
				and sta.owner = owner.code(+)
				and STA.ADDI_STATUS_ID = INVSTATUS.ID(+)
				and sta.addi_owner = addiOwner.code(+)
				and sta.CREATOR_ID = opuser.id(+)
				and sta.ADDI_WH_ID=:addiWarehouse
				and sta.type=:type
				and (sta.STATUS=4 or sta.status=5)
				and sta.MAIN_WH_ID=main.id and sta.ADDI_WH_ID=addi.id
				
				
				#if($startTime)
			       and sta.create_time > :startTime
                #end
			    #if($endTime)
		          	and sta.create_time < :endTime           
                   #end
			    #if($arriveStartTime)
		          and sta.arrive_time > :arriveStartTime 
                   #end
			    #if($arriveEndTime)
		          and sta.arrive_time < :arriveEndTime
                   #end
			    #if($code)
		          and sta.code like :code
                   #end
			    #if($refcode)
		          and sta.slip_code like :refcode
                   #end
			    #if($owner)
		          and sta.owner like :owner
                #end
                #if($slipCode1)
           			and sta.slip_code1 like :slipCode1
         		#end
         		#if($slipCode2)
 					and sta.slip_code2 like :slipCode2
 				#end
                    
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updatePOLifeByStaRefCodeSql"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                    update T_MA_PURCHASE_ORDER set life_cycle_status=:status,version=sysdate
                    where code=:code
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findExportFileNameBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select 
							com.code||'_'||wh.code||'_'||di.lpcode||'_'||to_char(sysdate,'yyyymmddhh24missSSS')||'_'||sta.code as fileName
						from 
							T_AU_OPERATION_UNIT com,
							T_AU_OPERATION_UNIT yy,
							T_AU_OPERATION_UNIT wh,
							t_wh_sta sta,
							T_WH_STA_DELIVERY_INFO di
						where
							wh.parent_ou_id=yy.id
							and yy.parent_ou_id=com.id
							and sta.main_wh_id=wh.id
							and di.id(+)= sta.id
							and sta.id=:staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineSnByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	select * from 					
	(select 
		rownum as id,
		sku.code as skuCode,
		sku.jm_code as jmcode,
		sku.name as skuName,
		sku.bar_code as barCode,
		sku.KEY_PROPERTIES as keyProperties,
		snx.sn,
		snx.direction
	from 
		(
			select  sn,id as stvId,sku_id,sum(direction) as direction from 
				(
					select sn.sn,null as direction,stv.id,sn.sku_id from 
						t_wh_stv stv,
						t_wh_sku_sn sn
					where 
						stv.id=sn.stv_id
						and stv.sta_id=:staId
					union
					select sn.sn,sn.direction,stv.id,sn.sku_id from 
						t_wh_stv stv,
						t_wh_sku_sn_log sn
					where
						stv.id=sn.stv_id
						and stv.sta_id=:staId
				)
			group by sn,id,sku_id
		) snx,
		t_bi_inv_sku sku
	where 
		snx.sku_id=sku.id
		
		union all
		
		select 
		rownum as id,
		sku.code as skuCode,
		sku.jm_code as jmcode,
		sku.name as skuName,
		sku.bar_code as barCode,
		sku.KEY_PROPERTIES as keyProperties,
		snx.sn,
		snx.direction
	from 
		(
			select  sn,id as stvId,sku_id,sum(direction) as direction from 
				(
					select sn.sn,null as direction,stv.id,sn.sku_id from 
						t_arc_stv stv,
						t_wh_sku_sn sn
					where 
						stv.id=sn.stv_id
						and stv.sta_id=:staId
					union
					select sn.sn,sn.direction,stv.id,sn.sku_id from 
						t_arc_stv stv,
						t_wh_sku_sn_log sn
					where
						stv.id=sn.stv_id
						and stv.sta_id=:staId
				)
			group by sn,id,sku_id
		) snx,
		t_bi_inv_sku sku
	where 
		snx.sku_id=sku.id
		) data
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findByStaIdGroupSkuAnd" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  

select stvl.sku_id,
       sum(stvl.quantity) as quantity,
       stvl.batch_code,
       stal.id,
       stal.owner,
       stal.sku_cost,
       stal.inv_Status_id as invStatusId
  from t_wh_stv      stv,
       t_wh_sta_line stal,
       t_wh_stv_line stvl,
       t_bi_inv_sku  sku
 where stv.sta_id = :staId
   and stal.sta_id = stv.sta_id
   and stal.sku_id = stvl.sku_id
   and stv.id = stvl.stv_id
   and stvl.staline_id = stal.id
   and stvl.direction = 2
   and sku.id = stvl.sku_id
   and sku.store_mode = 22
 group by stvl.sku_id,
          stvl.batch_code,
          stal.id,
          stal.owner,
          stal.sku_cost,
          stal.inv_Status_id
union
select stvl.sku_id,
       sum(stvl.quantity) as quantity,
       null as batch_code,
       stal.id,
       stal.owner,
       stal.sku_cost,
       stal.inv_Status_id as invStatusId
  from t_wh_stv      stv,
       t_wh_sta_line stal,
       t_wh_stv_line stvl,
       t_bi_inv_sku  sku
 where stv.sta_id = :staId
   and stal.sta_id = stv.sta_id
   and stal.sku_id = stvl.sku_id
   and stv.id = stvl.stv_id
   and stvl.staline_id = stal.id
   and stvl.direction = 2
   and sku.id = stvl.sku_id
   and sku.store_mode = 11
 group by stvl.sku_id,
          stal.id,
          stal.owner,
          stal.sku_cost,
          stal.inv_Status_id
                 ]]>
			</value>
		</constructor-arg>
	</bean>


  <bean id="AdvanceOrderAddInfo.findOrderInfoByOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,t.orderCode,t.IsChangeRecieverInfo,t.IsAllowDeliver,t.status from t_wh_Order_AddInfo t where t.ORDERCODE=:slipCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	  <!-- 预售  通知LF发货 -->
	  <bean id="AdvanceOrderAddInfo.findPreSalesOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select a.id from t_wh_Order_AddInfo a where a.vmi_source=:source and a.status='1' and (a.error_num is null or a.error_num<5)  and rownum<=5000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 预售  通知LF发货 批次获取-->
	<bean id="AdvanceOrderAddInfo.findPreOrderBatchNoBySource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							SELECT o.batch_id batchId
					        FROM t_wh_Order_AddInfo o
					        WHERE o.lf_status='2'
					              AND o.vmi_source= :source
					              and o.vmi_source is not null
					        group by o.batch_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 预售 根据批次来获取list  -->
		<bean id="AdvanceOrderAddInfo.getPreOrderListByBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
									SELECT o.*
					        		FROM t_wh_Order_AddInfo o
					        		WHERE o.lf_status='2'
					                AND o.batch_id=:batchNo
					                AND o.vmi_source is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="AdvanceOrderAddInfo.updateAdvanceOrderAddInfoById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update  t_wh_Order_AddInfo t set t.status=5,t.VERSION=t.VERSION+1 where t.ordercode=:orderCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="AdPackage.deleteAdPackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete  t_ad_package where WH_OU_ID= :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="AdPackage.findAdPackageByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.ID as id,t.AD_NAME as adName,t.AD_RESULT as adResult,t.CREATEPERSON as createPerson,t.CREATETIME as createTime from t_ad_package t where t.WH_OU_ID= :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="AdPackage.findAdPackageByOuIdByAdName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select  distinct t.ad_name from wms.t_ad_package t where t.WH_OU_ID= :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="AdPackage.findAdPackageByOuIdPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.ID as id,t.AD_NAME as adName,t.AD_RESULT as adResult,t.CREATEPERSON as createPerson,t.CREATETIME as createTime from t_ad_package t where t.WH_OU_ID= :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		
	<bean id="AdvanceOrderAddInfo.updatePreOrderBatchNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update t_wh_Order_AddInfo a set a.batch_id=:batchNo,a.lf_status='2'  where a.id in  (
					select t.id from t_wh_Order_AddInfo t where t.vmi_source=:source and t.lf_status='1' and t.batch_id is null and rownum<=:num
				)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- yushou  -->
		
	<bean id="AdvanceOrderAddInfo.updatePreStatusByBatchId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update t_wh_Order_AddInfo a set a.lf_status=:status where  a.batch_id=:batchNo and a.lf_memo=:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	
	
	<bean id="RecieverInfo.findRecieverInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,t.lpcode,t.trackingNumber,t.recieverName,t.recieverMobilePhone,t.recieverTelephone,t.recieverCountry,t.sourceLpCode,
					t.recieverProvince,t.recieverCity,t.recieverDistrict,t.recieverVillagesTowns,t.recieverAddress,t.recieverEmail,t.recieverZipCode,t.sourcetrackingNumber
					from t_wh_Reciever_Info t where t.addInfo_id=:infoId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RecieverInfo.findRecieverInfoByTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id,t.lpcode,t.trackingNumber,t.recieverName,t.recieverMobilePhone,t.recieverTelephone,t.recieverCountry,t.sourceLpCode,t.addInfo_id as addInfo, 
					t.recieverProvince,t.recieverCity,t.recieverDistrict,t.recieverVillagesTowns,t.recieverAddress,t.recieverEmail,t.recieverZipCode,t.sourcetrackingNumber
					from t_wh_Reciever_Info t where t.sourcetrackingNumber=:transNo
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.findPdaHandOverByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.lpcode  from t_wh_pda_hand_Over t where t.user_id=:userId and t.ou_id=:ouId and t.status=1 group by t.lpcode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="PdaHandOver.findPdaHandOverByUserIdAndOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.*  from t_wh_pda_hand_Over t where t.user_id=:userId and t.ou_id=:ouId and t.status=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOverCurrency.findPdaHandOverCurrencyByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.lpcode  from t_wh_pda_hand_over_currency t where t.user_id=:userId and t.ou_id=:ouId and t.status=1 group by t.lpcode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOverCurrency.findAllPdaHandOverCurrencyByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.lpcode,t.tracking_no,t.ou_id,t.user_id,t.package_info_id  from t_wh_pda_hand_over_currency t where t.user_id=:userId and t.ou_id=:ouId and t.status=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.findPdaHandOverByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.*  from t_wh_pda_hand_Over t where t.sta_id=:staId and t.ou_id=:ouId
					 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.pdaOutBoundHandNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select count(1)  from t_wh_pda_hand_Over t where t.user_id=:userId and t.ou_id=:ouId and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOverCurrency.pdaOutBoundHandCurrencyNum" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select count(1)  from t_wh_pda_hand_over_currency t where t.user_id=:userId and t.ou_id=:ouId and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.updatePdaHandOverByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 delete t_wh_pda_hand_Over t  where t.user_id=:userId and t.ou_id=:ouId and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.updatePdaHandByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 update t_wh_pda_hand_Over t set t.status=5  where t.user_id=:userId and t.ou_id=:ouId and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOverCurrency.updatePdaHandOverCurrencyByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 update t_wh_pda_hand_Over_currency t set t.status=5 where t.user_id=:userId and t.ou_id=:ouId and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.findPdaHandOverByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.package_info_id as packageInfoId  from t_wh_pda_hand_Over t where t.user_id=:userId and t.ou_id=:ouId and lpcode=:lpCode and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOverCurrency.findPdaHandOverCurrencyByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.package_info_id as packageInfoId  from t_wh_pda_hand_Over_currency t where t.user_id=:userId and lpcode=:lpCode and t.status=1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOver.findPdaHandOverByTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.id,t.status,u.login_name as loginName from t_wh_pda_hand_Over t left join t_au_user u on u.id=t.user_id where t.tracking_no=:transNo
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="PdaHandOverLog.findPdaHandOverLogByTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.id,t.status from t_wh_pda_hand_Over_log t where t.tracking_no=:transNo and t.is_pre_sale='1'
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="PdaHandOverCurrency.findPdaHandOverCurrencyByTransNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select t.id,t.status from t_wh_pda_hand_Over_currency t where t.tracking_no=:transNo
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PdaHandOverCurrency.deletePdaHandOverCurrency" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 delete from t_wh_pda_hand_over_currency t where t.user_id = :userId and t.ou_id = :ouId 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findBySkuStorMode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
select stvl.sku_id,
       sum(stvl.quantity) as quantity,
       stvl.batch_code,
       stal.id,
       stal.owner,
       stal.sku_cost,
       stal.inv_Status_id as invStatusId
  from t_wh_stv      stv,
       t_wh_sta_line stal,
       t_wh_stv_line stvl,
       t_bi_inv_sku  sku
 where stv.sta_id = :staId
   and stal.sta_id = stv.sta_id
   and stal.sku_id = stvl.sku_id
   and stv.id = stvl.stv_id
   and stvl.staline_id = stal.id
   and stvl.direction = 2
   and sku.id = stvl.sku_id
   and sku.store_mode = 11
 group by stvl.sku_id,
          stvl.batch_code,
          stal.id,
          stal.owner,
          stal.sku_cost,
          stal.inv_Status_id
	          ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineByBarCodeOrCodePropsSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                    select stal.* from t_wh_sta_line stal,t_bi_inv_sku sku
                    where stal.sta_id=:staId and stal.sku_id=sku.id
                    #if($barCode)
                    and sku.BAR_CODE=:barCode
                    #end
                    #if($jmCode)
                    and sku.jm_code=:jmCode
                    #end
                    #if($keyProp)
                    and sku.KEY_PROPERTIES=:keyProp
                    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineByAddBarCodeSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                    select stal.* from t_wh_sta_line stal,t_bi_inv_sku_barcode sku
                    where stal.sta_id=:staId and stal.sku_id=sku.sku_id
                    #if($barCode)
                    	and sku.barcode=:barCode
                    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findNotEnoughtSalesAvailInvBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select line.skuId as skuId,
                				sku.code as skuCode,
                				sku.name as skuName,
						        sku.jm_code as jmCode,sku.bar_code as barCode,
						        sku.KEY_PROPERTIES as keyProperties,
				         		nvl(nvl(inv.sales_avail_qty,-line.qty),-1) as quantity from (
						             select l.owner as owner,sum(l.quantity) as qty,l.sku_id as skuId,sta.main_wh_id as whOuId
						             from t_wh_sta sta,t_wh_sta_line l
						             where sta.id=l.sta_id and sta.id = :staId
						             group by l.owner,l.sku_id,sta.main_wh_id
				             ) line
				             left join t_bi_inv_sku sku on line.skuId = sku.id
				         	 left join  v_wh_inventory_summary inv 
				         	 left join T_BI_WAREHOUSE wh on wh.ou_id = inv.wh_ouid
						         on inv.sku_Id = line.skuId
						         and (line.owner = inv.owner or wh.is_share = 1)
						         and inv.wh_ouid = line.whOuId
						 where nvl(nvl(inv.sales_avail_qty,-line.qty),-1) < 0]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.findUnCheckedPackageBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select count(1) as qty from t_wh_package_info where nvl(is_checked,0) = 0 and sta_delivery_info_id = :staId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findPickingSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				 select l.id id, sta.code staCode, sta.status intStatus, sku.code skuCode, sku.bar_code barCode, sku.name skuName, l.quantity quantity,
			         0 as completeQuantity, sta.pg_index pgIndex
			          from t_wh_sta_line l, t_wh_sta sta, t_bi_inv_sku sku where
			                 sta.id = l.sta_id 
			                 and sta.status = 2
			                 and sta.main_wh_id = :ouid
			                 and l.sku_id = sku.id
			                 and sta.picking_list_id = :plid
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findStaLineSkuByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select sum(l.quantity) as receiptQty from t_wh_sta_line l where l.sta_id=:staId 

				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 二次分拣意见，查询配货详情 fanht -->
	<bean id="StaLine.findStaLineByPickingId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select l.id         id,
					   sta.id 	    staId,
				       sta.code     staCode,
				       sta.status   intStatus,
				       sku.code     skuCode,
				       sku.bar_code barCode,
				       sku.ext_code1 extCode1,
				       sku.name     skuName,
				       l.quantity   quantity,
				       l.sku_id skuId,
				       0            as completeQuantity,
				       sta.pg_Index pgIndex
				  from t_wh_sta_line l, t_wh_sta sta, t_bi_inv_sku sku
				 where 1 = 1
				   and sta.id = l.sta_id
				   and sta.status = 2
				   and sta.main_wh_id = :ouid
				   and sta.picking_type != 1
				   and l.sku_id = sku.id
				   and sta.picking_list_id = :plid
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 二次分拣意见，查询配货详情 fanht -->
	<bean id="StaLine.findStaLineByPickingId2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select l.id         id,
					   sta.id 	    staId,
				       sta.code     staCode,
				       sta.status   intStatus,
				       sku.code     skuCode,
				       sku.bar_code barCode,
				       sku.ext_code1 extCode1,
				       sku.name     skuName,
				       l.quantity   quantity,
				       l.sku_id skuId,
				       0            as completeQuantity,
				       sta.rule_Code ruleCode
				  from t_wh_sta_line l, t_wh_sta sta, t_bi_inv_sku sku
				 where 1 = 1
				   and sta.id = l.sta_id
				  
				   and sta.main_wh_id = :ouid
				   and sta.picking_type != 1
				   and l.sku_id = sku.id
				   and sta.picking_list_id = :plid
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 二次分拣 核对明细 -->
	<bean id="StaLine.findStaLinePickingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select l.id         id,
					   sta.id 	    staId,
				       sta.code     staCode,
				       sta.status   intStatus,
				       sku.code     skuCode,
				       sku.bar_code barCode,
				       sku.ext_code1 extCode1,
				       sku.name     skuName,
				       l.quantity   quantity,
				       l.sku_id skuId,
				       0            as completeQuantity,
				       sta.rule_Code ruleCode,
				       sta.pg_index pgIndex
				  from t_wh_sta_line l, t_wh_sta sta, t_bi_inv_sku sku
				 where 1 = 1
				   and sta.id = l.sta_id
				   and sta.main_wh_id = :ouid
				   and sta.picking_type != 1
				   and l.sku_id = sku.id
				   and sta.picking_list_id = :plid
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findStaLineByPickingIdDiek" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select l.id         id,
				       sta.code     staCode,
				       sta.status   intStatus,
				       sku.code     skuCode,
				       sku.bar_code barCode,
				       sku.ext_code1 extCode1,
				       sku.name     skuName,
				       l.quantity   quantity,
				       l.sku_id skuId,
				       0            as completeQuantity,
				       sta.pg_index pgIndex
				  from t_wh_sta_line l, t_wh_sta sta, t_bi_inv_sku sku
				 where 1 = 1
				   and sta.id = l.sta_id
				   and sta.status = 2
				   and sta.main_wh_id = :ouid
				   --and sta.picking_type != 1
				   and l.sku_id = sku.id
				   and sta.picking_list_id = :plid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 二次分拣意见，查询配货详情 无仓库 -->
	<bean id="StaLine.findStaLineByPickingIdFast" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				select l.id         id,
				       sta.code     staCode,
				       sta.status   intStatus,
				       sku.code     skuCode,
				       sku.bar_code barCode,
				       sku.name     skuName,
				       l.quantity   quantity,
				       0            as completeQuantity,
				       sta.pg_index pgIndex
				  from t_wh_sta_line l, t_wh_sta sta, t_bi_inv_sku sku
				 where 1 = 1
				   and sta.id = l.sta_id
				   and sta.status = 2
				   and l.sku_id = sku.id
				   and sta.picking_list_id = :plid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据运营中心得到的仓库获取二次核对配货清单 -->
	<bean id="PickingList.findPickingListInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			      
   		select distinct 
		p.id, p.code, p.status intStatus, p.create_time createTime, p.plan_bill_count planBillCount, 
		u.user_name crtUserName,olist.name wname,olist.ID wid
		  from T_WH_STA_PICKING_LIST p inner join t_wh_sta a on a.picking_list_id = p.id ,T_AU_OPERATION_UNIT olist,T_AU_USER u
		  where  (p.status = 2 or p.status = 8)  and a.picking_type != 1
		  #if($ouid)
		  and p.wh_id = :ouid
		  #end
		  and p.out_creater_id = u.id
		  #if($ouid)
		  and olist.id = :ouid
          #end
          #if($code)
           and p.code like :code
          #end
          #if($createTimeStart)
            and p.create_time > :createTimeStart
          #end
          #if($createTimeEnd)
           and p.create_time < :createTimeEnd
          #end
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据运营中心得到的仓库获取二次核对配货清单 -->
	<bean id="PickingList.findPickingListInfoB" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select 
		p.id, p.code,p.status intStatus, p.create_time createTime, p.plan_bill_count planBillCount, 
		u.user_name crtUserName,olist.name wname,olist.ID wid
		  from T_WH_STA_PICKING_LIST p,T_AU_OPERATION_UNIT olist,T_AU_USER u,
		  (select distinct sta.picking_list_id as pid from t_wh_sta sta where 
		          sta.status = 2
		          #if($ouid)
				  and sta.main_wh_id = :ouid
				  #end
				    #if($test)
		       and sta.main_wh_id in( 
                #foreach( $whid in $wids)
		    		$whid ,
					#end
                      -1 )
		  #end
		   ) t
		  where p.id = t.pid 
		  and olist.id = p.wh_id
		  and (p.status = 2 or p.status = 8) 
		  #if($ouid)
		  and p.wh_id = :ouid
		  #end
		  #if($test)
		  and p.wh_id in( 
                #foreach( $whid in $wids)
		    		$whid ,
					#end
                      -1 )
		  #end
		  and p.out_creater_id = u.id
		  #if($ouid)
		  and olist.id = :ouid
          #end
          #if($code)
           and p.code like :code
          #end
          #if($createTimeStart)
            and p.create_time > :createTimeStart
          #end
          #if($createTimeEnd)
           and p.create_time < :createTimeEnd
          #end
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据运营中心得到的仓库获取二次核对配货清单 运营中心（剔除仓库id） -->
	<bean id="PickingList.findPickingListInfoFast" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select 
		p.id, p.code,p.status intStatus, p.create_time createTime, p.plan_bill_count planBillCount, 
		u.user_name crtUserName
		  from T_WH_STA_PICKING_LIST p,T_AU_USER u,
		  (select distinct sta.picking_list_id as pid from t_wh_sta sta where 
		          sta.status = 2
		   ) t
		  where p.id = t.pid 
		  and (p.status = 2 or p.status = 8) 
		  and p.out_creater_id = u.id
        #if($code)
           and p.code like :code
        #end
        #if($createTimeStart)
            and p.create_time > :createTimeStart
        #end
        #if($createTimeEnd)
           and p.create_time < :createTimeEnd
        #end
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据运营中心得到的仓库获取二次核对配货清单 运营中心 -->
	<bean id="PickingList.findPickingListInfoopc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select p.id, p.code,p.status intStatus, p.create_time createTime, p.plan_bill_count planBillCount, u.user_name crtUserName,olist.name wname,olist.ID wid
		  from T_WH_STA_PICKING_LIST p,T_AU_OPERATION_UNIT olist,T_AU_USER u,
		  (select distinct sta.picking_list_id as pid from t_wh_sta sta where 
		          sta.status = 2
				  and sta.main_wh_id in (
					#foreach($w in $ouid)
						$w,
					#end
					-1)
		   ) t
		  where p.id = t.pid 
		  and (p.status = 2 or p.status = 8) 
		  and p.wh_id in(
					#foreach($w in $ouid)
						$w,
					#end
					-1)
		  and olist.id = p.wh_id
		  and p.out_creater_id = u.id
        #if($code)
           and p.code like :code
        #end
        #if($createTimeStart)
            and p.create_time > :createTimeStart
        #end
        #if($createTimeEnd)
           and p.create_time < :createTimeEnd
        #end
 				]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- 配货出库单 -->
	<bean id="PickingList.addCheckedCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_sta_picking_list set check_bill_count = check_bill_count+1,check_sku_qty = check_sku_qty + :skuQty,check_time = sysDate where id = :plId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findOutputCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select output_count from t_wh_sta_picking_list where id = :plId]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSizeConfig.findBypicklistId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	  select config.name 
      from 
      t_wh_sku_size_config config 
      where 
      config.max_size>(select max(nvl(sku_max_length,0)) from t_wh_sta sta where sta.picking_list_id = :pid) 
      and config.min_size<= (select max(nvl(sku_max_length,0)) from t_wh_sta sta where sta.picking_list_id = :pid)
		]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.updateOutputCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_sta_picking_list set output_count=nvl(output_count,0)+1 where id = :plId and nvl(output_count,0)=0]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select pl.id as id,
					pl.CHECK_TIME as checkedTime,
					pl.wh_id as whId,
					pl.PICKING_TIME as pickingTime,
					pl.PACKAGE_SKU as packageSku,
					pl.status as intStatus,
					-1 as checkedSkuQty,
					pl.code as code,
					pl.plan_bill_count as planBillCount, 
					-1 as checkedBillCount,
					-1 sendStaQty,
					pl.plan_sku_qty as planSkuQty,
					-1 as sendSkuQty,
					pl.SORTING_MODE as sortingModeInt,
					nvl(pl.is_sn,0) isSn,
					u1.USER_NAME as crtUserName,
					u2.USER_NAME as operUserName,
					pl.is_postposition_packing_page as isPostpositionPackingPage,
					pl.is_postposition_express_bill as isPostpositionExpressBill,
					pl.to_location as toLocation,
          			pl.check_mode as intCheckMode,
          			pl.PACKING_TYPE as packingType
					from t_wh_sta_picking_list pl
					left join T_AU_USER u1 on  pl.OUT_CREATER_ID = u1.id 
                    left join t_au_user u2 on pl.OUT_OPERATOR_ID = u2.id 
					where pl.id = :plId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPickingListByPlid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[    
					select p.id as id,
            p.code as dphCode,
            p.plan_bill_count as planBillCount,
            p.plan_sku_qty as planSkuQty,
            whlocation.code location,   
            whPickZone.code as pickZoneCode, 
		  	whlocation.zoon_id as zoonId, 
           	whlocation.sort as zoonSort,   
            sku.id skuid,
            sku.code jmskucode,
            sku.bar_code  barCode,  
            sku.ext_code1 jmCode,  
            sku.key_properties keyProperty,          
            sku.supplier_code supplierCode,
            sku.name skuName,
           sum(stvl.quantity) as quantity,
            sum(stvl.quantity) as qty,
            ou.name warehouseName,
            p.lpcode,
            p.is_cod as isCod,
            decode(p.is_special_packaging,null,'',decode(p.is_special_packaging,0,'','需要特殊包装')) specialPackaging,
            1 bigBox,
            a.pg_index tagNumber,
            a.idx1 || '-' || a.idx2 as batchIndex,
            to_char(stvl.expire_date,'yyyyMMdd') as strExpireDate ,
			z.code as whZone
          from 
            T_WH_STA_PICKING_LIST p,
            t_au_operation_unit ou,
            T_BI_INV_SKU sku,
            T_WH_LOCATION whlocation
            left join T_WH_PICK_ZOON whPickZone on whlocation.zoon_id = whPickZone.id and whPickZone.status = 1
            LEFT JOIN t_wh_zoon z ON whPickZone.Wh_Zoon_Id=z.id,
            t_wh_sta a,
            t_wh_stv stv,
            t_wh_stv_line stvl
          where 
             p.id =:plid
            and ou.id =:ouid 
            and a.picking_list_id =:plid
            and a.main_wh_id =:ouid 
            and a.status not in (17,10) 
            and a.id = stv.sta_id 
            and stvl.stv_id = stv.id 
            and stvl.sku_id = sku.id 
            #if($pickZoneId)
				#if("$pickZoneId" == "0")
					and z.id is null
				#else
					and z.id=:pickZoneId
				#end
			#end
            and stvl.location_id = whlocation.id 
          group by  p.id, p.code,p.plan_bill_count,p.plan_sku_qty, whlocation.code, whPickZone.code, whlocation.zoon_id, whlocation.sort, sku.id, sku.code,sku.bar_code,stvl.quantity,p.is_cod,
          sku.ext_code1,sku.key_properties, sku.supplier_code,sku.name,ou.name,p.lpcode,p.is_special_packaging,a.pg_index,p.is_big_box,stvl.expire_date,z.code,a.batch_index,a.idx1 || '-' || a.idx2
          order by whlocation.zoon_id, whlocation.sort,whlocation.code,a.idx1 || '-' || a.idx2
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.findPickingListByPlidNew" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[    
					select p.id as id,
            p.code as dphCode,
            p.plan_bill_count as planBillCount,
            p.plan_sku_qty as planSkuQty,
            whlocation.code location,   
            whPickZone.code as pickZoneCode, 
		  	whlocation.zoon_id as zoonId, 
           	whlocation.sort as zoonSort,   
            sku.id skuid,
            sku.code jmskucode,
            sku.bar_code  barCode,  
            sku.ext_code1 jmCode,  
            sku.key_properties keyProperty,          
            sku.supplier_code supplierCode,
            sku.name skuName,
           sum(stvl.quantity) as quantity,
            sum(stvl.quantity) as qty,
            ou.name warehouseName,
            p.lpcode,
            p.is_cod as isCod,
            decode(p.is_special_packaging,null,'',decode(p.is_special_packaging,0,'','需要特殊包装')) specialPackaging,
            1 bigBox,
            a.pg_index tagNumber,
            to_char(stvl.expire_date,'yyyyMMdd') as strExpireDate ,
			z.code as whZone,
			a.idx1 || '-' || a.idx2 as batchIndex
          from 
            T_WH_STA_PICKING_LIST p,
            t_au_operation_unit ou,
            T_BI_INV_SKU sku,
            T_WH_LOCATION whlocation
            left join T_WH_PICK_ZOON whPickZone on whlocation.zoon_id = whPickZone.id and whPickZone.status = 1
            LEFT JOIN t_wh_zoon z ON whPickZone.Wh_Zoon_Id=z.id,
            t_wh_sta a,
            t_wh_stv stv,
            t_wh_stv_line stvl
          where 
             p.id =:plid
            and ou.id =:ouid 
            and a.picking_list_id =:plid
            and a.main_wh_id =:ouid 
            and a.status !=17
            and a.id = stv.sta_id 
            and stvl.stv_id = stv.id 
            and stvl.sku_id = sku.id 
            #if($pickZoneId)
				#if("$pickZoneId" == "0")
					and z.id is null
				#else
					and z.id=:pickZoneId
				#end
			#end
            and stvl.location_id = whlocation.id 
          group by  p.id, p.code,p.plan_bill_count,p.plan_sku_qty, whlocation.code, whPickZone.code, whlocation.zoon_id, whlocation.sort, sku.id, sku.code,sku.bar_code,stvl.quantity,p.is_cod,
          sku.ext_code1,sku.key_properties, sku.supplier_code,sku.name,ou.name,p.lpcode,p.is_special_packaging,a.pg_index,p.is_big_box,stvl.expire_date,z.code,a.idx1 || '-' || a.idx2
          order by whlocation.zoon_id, whlocation.sort,whlocation.code,a.idx1 || '-' || a.idx2
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="PickingList.findPickingListByPickingId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                          select
				        whlocation.code locationcode, 
				        whPickZone.code as pickZoneCode,     
				        sku.id skuid,
				        sku.code jmskucode,
				        sku.bar_code  barcode,
				         (select listagg(barcode,',') WITHIN GROUP(ORDER BY 1) from t_bi_inv_sku_barcode b where b.sku_id = sku.id) otherbarcode,          
				        sku.jm_code jmcode,          
				        sku.key_properties keyproperties,          
				        sku.supplier_code supplierCode,
				        sku.name skuname,
				        temp.is_cod as isCod,
				        temp.strExpireDate as strExpireDate,
				        temp.qty quantity,
				        z.code whZone,
				        temp.IDX1 idx1
				        from           
				        (
				        select sta.IDX1,li.is_cod,l.sku_id sku_id,l.location_id loc_id,to_char(l.expire_date,'yyyyMMdd') as strExpireDate, sum(nvl(l.quantity,0)) qty
				        from t_wh_stv_line l,
						t_wh_stv stv,
						t_wh_sta sta,
						t_wh_sta_picking_list li
						where sta.status not in (17,10) 
						and	li.id=sta.picking_list_id 
						and sta.MAIN_WH_ID= :ouid
						and stv.sta_id = sta.id 
						and l.stv_id=stv.id
						and sta.PICKING_LIST_ID = :pickingListId
						group by l.sku_id,l.location_id,l.expire_date,li.is_cod,sta.IDX1
						) temp,
						T_BI_INV_SKU sku,t_wh_zoon z,
						T_WH_LOCATION whlocation ,
						T_WH_PICK_ZOON whPickZone
						where temp.sku_id = sku.id
						and temp.loc_id = whlocation.id
						and whlocation.zoon_id = whPickZone.id(+)
						#if($pickZoneId)
							#if("$pickZoneId" == "0")
								and z.id is null
							#else
								and z.id=:pickZoneId
							#end
						#end
						and whPickZone.wh_zoon_id=z.id(+)
						and (whPickZone.status = 1 OR whPickZone.status IS NULL)
						order by whPickZone.code, whlocation.sort,whlocation.code,temp.IDX1
				 ]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="PickingList.findPickingListByPickingId3" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
    select
                          temp.slip_code,
				        whlocation.code locationcode, 
				        whPickZone.code as pickZoneCode,     
				        sku.id skuid,
				        sku.code jmskucode,
				        sku.bar_code  barcode,
				         (select listagg(barcode,',') WITHIN GROUP(ORDER BY 1) from t_bi_inv_sku_barcode b where b.sku_id = sku.id) otherbarcode,          
				        sku.jm_code jmcode,          
				        sku.key_properties keyproperties,          
				        sku.supplier_code supplierCode,
				        sku.name skuname,
				        temp.is_cod as isCod,
				        temp.strExpireDate as strExpireDate,
				        temp.qty quantity,
				        z.code whZone,
				        temp.IDX1 idx1
				        from           
				        (
				        select sta.IDX1,sta.slip_code,li.is_cod,l.sku_id sku_id,l.location_id loc_id,to_char(l.expire_date,'yyyyMMdd') as strExpireDate, sum(nvl(l.quantity,0)) qty
				        from t_wh_stv_line l,
						t_wh_stv stv,
						t_wh_sta sta,
						t_wh_sta_picking_list li
						where sta.status not in (17,10) 
						and	li.id=sta.picking_list_id 
						and sta.MAIN_WH_ID=:ouid
						and stv.sta_id = sta.id 
						and l.stv_id=stv.id
						and sta.PICKING_LIST_ID = :pickingListId
						group by l.sku_id,l.location_id,l.expire_date,li.is_cod,sta.IDX1,sta.slip_code,l.id
						) temp,
						T_BI_INV_SKU sku,t_wh_zoon z,
						T_WH_LOCATION whlocation ,
						T_WH_PICK_ZOON whPickZone
						where temp.sku_id = sku.id
						and temp.loc_id = whlocation.id
						and whlocation.zoon_id = whPickZone.id(+)
						and whPickZone.wh_zoon_id=z.id(+)
						and (whPickZone.status = 1 OR whPickZone.status IS NULL)
						order by temp.slip_code
				 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.findPickingListByPickingIdNew" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                          select
				        whlocation.code locationcode, 
				        whPickZone.code as pickZoneCode,     
				        sku.id skuid,
				        sku.code jmskucode,
				        sku.bar_code  barcode,
				        (select listagg(barcode,',') WITHIN GROUP(ORDER BY 1) from t_bi_inv_sku_barcode b where b.sku_id = sku.id) otherbarcode,          
				        sku.jm_code jmcode,          
				        sku.key_properties keyproperties,          
				        sku.supplier_code supplierCode,
				        sku.name skuname,
				        temp.is_cod as isCod,
				        temp.strExpireDate as strExpireDate,
				        temp.qty quantity,
				        z.code whZone,
				        temp.idx1
				        from           
				        (
				        select sta.idx1,li.is_cod,l.sku_id sku_id,l.location_id loc_id,to_char(l.expire_date,'yyyyMMdd') as strExpireDate, sum(nvl(l.quantity,0)) qty
				        from t_wh_stv_line l,
						t_wh_stv stv,
						t_wh_sta sta,
						t_wh_sta_picking_list li
						where sta.status !=17 
						and	li.id=sta.picking_list_id 
						and sta.MAIN_WH_ID= :ouid
						and stv.sta_id = sta.id 
						and l.stv_id=stv.id
						and sta.PICKING_LIST_ID = :pickingListId
						group by l.sku_id,l.location_id,l.expire_date,li.is_cod,sta.idx1
						) temp,
						T_BI_INV_SKU sku,t_wh_zoon z,
						T_WH_LOCATION whlocation ,
						T_WH_PICK_ZOON whPickZone
						where temp.sku_id = sku.id
						and temp.loc_id = whlocation.id
						and whlocation.zoon_id = whPickZone.id(+)
						#if($pickZoneId)
							#if("$pickZoneId" == "0")
								and z.id is null
							#else
								and z.id=:pickZoneId
							#end
						#end
						and whPickZone.wh_zoon_id=z.id(+)
						and (whPickZone.status = 1 OR whPickZone.status IS NULL)
						order by whPickZone.code, whlocation.sort,whlocation.code,temp.IDX1
				 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.findPickingListForVerifyByCmd" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime
					from t_wh_sta_picking_list pl
					where 
					pl.wh_id=:ouId
					#if($checkMode)
					and pl.check_mode=:checkMode
					#end
					#if($pickingMode)
					and pl.picking_mode=:pickingMode
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					#if($sortingMode)
					and pl.sorting_mode=:sortingMode
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPickingListForVerifyByCmd1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid,
					pl.is_bk_check as isBkCheckInteger
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
					where 
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)					
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPickingListForVerifyByCmdOtwoo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid,
					pl.is_bk_check as isBkCheckInteger
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
					where 
					pl.is_otwoo=1 and
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)					
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.queryPackageCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sum(nvl(ho.PACKAGE_COUNT,0)) as packageCount from t_wh_sta_picking_list l  left join t_wh_sta sta on l.id=sta.picking_list_id
                            left join t_wh_sta_ho_list_line line on line.sta_id=sta.id
                            left join t_wh_sta_ho_list ho on ho.id=line.ho_list_id
                            where l.code= :code					
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="PickingList.findPickingListForVerifyByCmd2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
					where pl.is_postposition_packing_page = 1 and
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 多件核对(后置送货单) -->
	<bean id="PickingList.findPickingListForVerifyByCodeId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
					where pl.is_postposition_packing_page = 1 and
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					#if($iptPlCode)
					and pl.code= :iptPlCode
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPickingListForVerifyByCmd3" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
					where pl.is_postposition_packing_page = 0 and
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPickingListForVerifyByCmd4" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid,
					pl.lpcode as lpcode,
					pp.id as pickingListPackageId,
					pp.tracking_no as trackingNo
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
                    left join t_wh_picking_package pp 
                    on (pl.id = pp.picking_list_id and pp.status = 1)
					where pl.is_postposition_packing_page = 0 and
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPickingListForVerifyByCmd1opc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid
					from t_wh_sta_picking_list pl   
                    inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
					where
					pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($wids)
					and	pl.wh_id in(
					#foreach($w in $wids)
						$w,
					#end
					-1)
					#end
					#if($code)
					and pl.code like :code
					#end
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if("$!isSpecialPackaging"=="true")
               			and pl.is_special_packaging=1
               		#else
               			and (pl.is_special_packaging is null or pl.is_special_packaging=0)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPickingListForVerifyByCmd1B" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	pl.id as id,
	pl.code code,
	pl.status as intStatus,
	pl.plan_bill_count as planBillCount,
	pl.CHECK_BILL_COUNT as checkedBillCount,
	pl.CHECK_SKU_QTY checkedSkuQty,
	-1 as shipStaCount,
	pl.plan_sku_qty as planSkuQty,
	-1 as shipSkuQty,
	pl.create_time createTime,
	pl.CHECK_TIME as checkedTime,
	pl.PICKING_TIME as pickingTime,
	olist.name wname,
	olist.ID wid
from 
	t_wh_sta_picking_list pl
	inner join T_AU_OPERATION_UNIT olist on pl.WH_ID= olist.ID
where 
	pl.check_mode in(
	#foreach($cl in $checkList)
		$cl,
	#end
	-1)
	#if($ouId)
        and 	pl.wh_id=:ouId
	#else 
	    #if($wids)
			and pl.wh_id in 
			(#foreach($w in $wids) 
	             $w, 
			#end 
			-1) 
		#end
	#end
	#if($code)
		and pl.code like :code
	#end
	#if($status)
		and pl.status=:status
	#else
		and pl.STATUS in (2,8)
	#end
	#if($fromTime)
		and pl.create_time>=:fromTime
	#end
	#if($toTime)
		and pl.create_time<=:toTime
	#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPackinglistByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
pl.id as id,pl.code code,pl.status as intStatus,pl.plan_bill_count as planBillCount,-1 as checkedBillCount,
-1 checkedSkuQty,-1 as shipStaCount,pl.plan_sku_qty as planSkuQty,
-1 as shipSkuQty,pl.create_time createTime, pl.CHECK_TIME as checkedTime,pl.PICKING_TIME as pickingTime
from t_wh_sta_picking_list pl
					where 
					pl.wh_id=:ouId
					#if($checkMode)
					and pl.check_mode=:checkMode
					#end
					#if($pickingMode)
					and pl.picking_mode=:pickingMode
					#end
					#if($code)
					and pl.code like :code
					#end
					and pl.STATUS in (2,8) 
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus) 
					and rownum = 1
					
					
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPickingListAll" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
						pl.id,
						pl.code,
						pl.create_time as createTime, 
						pl.plan_bill_count as planBillCount,
						pl.plan_sku_qty as planSkuQty,
						pl.picking_mode as pkModeInt,
						pl.status as intStatus,
						c.user_name as createName,
						o.user_name as operUserName
					from t_wh_sta_picking_list pl,
						t_wh_sta_picking_list tpl,
						T_AU_USER c,
						T_AU_USER o
					where pl.wh_id=:ouId
						and pl.id=tpl.id
						and tpl.Out_Creater_Id=c.id(+)
						and tpl.OUT_OPERATOR_ID=o.id(+)
						#if($fromCrtime)
							and pl.create_time>=:fromCrtime
						#end
						#if($ToCrtime)
							and pl.create_time<=:ToCrtime
						#end
						#if($formCheckedTime)
						and pl.CHECK_TIME>=:formCheckedTime
						#end
						#if($toCheckedTime)
						and pl.CHECK_TIME<=:toCheckedTime
						#end
						
						#if($formPickingTime)
						and pl.PICKING_TIME>=:formPickingTime
						#end
						#if($toPickingTime)
						and pl.PICKING_TIME<=:toPickingTime
						#end
						
						#if($otoPick)
						and pl.IS_OTO_PICKING = :otoPick
						#end
						
						#if($pkModeInt)
						and pl.picking_mode=:pkModeInt
						#end
						#if($status)
						and pl.status=:status
						#end
						#if($statusList)
						and pl.status in (
						 	#foreach( $s in $statusList )
		    					$s  ,
							#end
						-100 )
						#end
						#if($code)
						and pl.code like :code
						#end
						#if($refSlipCode)
						and exists (select 1 from t_wh_sta where picking_list_id = pl.id and slip_code like :refSlipCode)
						#end
						#if($operUserName)
						and o.user_name like :operUserName
						#end
						#if($staCode)
						and exists (select 1 from t_wh_sta where picking_list_id = pl.id and code like :staCode) 
						#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPickingListForModel" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
  select pl.id as id,pl.code code,pl.status as intStatus,pl.plan_bill_count as planBillCount,-1 as checkedBillCount,
              -1 checkedSkuQty,-1 as shipStaCount,pl.plan_sku_qty as planSkuQty,-1 as shipSkuQty,
                pl.create_time createTime, pl.CHECK_TIME as checkedTime,pl.PICKING_TIME as pickingTime,olist.name wname
                from t_wh_sta_picking_list pl,T_AU_OPERATION_UNIT olist 
            where pl.wh_id=olist.id
                   #if($wouid)
                   and pl.wh_id = :wouid
                   #end
                   #if($wids)
                   and pl.wh_id in ( 
                   #foreach( $whid in $wids)
		    	   $whid ,
					#end
                      -1 )
                   #end
                   #if($code)
                    and pl.code like :code
                   #end
                   #if($status)
                    and pl.status=:status
                   #else
                    and pl.STATUS in (0,1,2,8,10,20)
                   #end
                    #if($fromCrtime)
                     and pl.create_time>=:fromCrtime
                    #end
                    #if($ToCrtime)
                    and pl.create_time<=:ToCrtime
                    #end
                    #if($formPickingTime)
                     and pl.PICKING_TIME>=:formPickingTime
                    #end
                    #if($toPickingTime)
                    and pl.PICKING_TIME<=:toPickingTime
                    #end
					#if($formCheckedTime)
                     and pl.CHECK_TIME>=:formCheckedTime
                    #end
                    #if($toCheckedTime)
                    and pl.CHECK_TIME<=:toCheckedTime
                    #end
               #if($staCode || $refSlipCode || $owner)
                   and exists(SELECT pll.id
                FROM   t_wh_sta sta,t_wh_sta_picking_list pll
             	WHERE sta.picking_list_id = pll.id
					and pll.id = pl.id
             		#if($staCode)
					and sta.code like :staCode
                    #end
                    #if($refSlipCode)
					and sta.SLIP_CODE like :refSlipCode
                    #end
                    #if($owner)
					and sta.owner = :owner
                    #end
                      )
                #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findDetailInfoById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	pl.code,
	sta.slip_code as slipCode,
	sta.code as staCode,
	di.receiver,
	di.mobile,
	di.zipcode,
	di.address as receiveAddress,
	di.province,
	di.city,
	(sl.owner || '*' || sl.quantity) as temp,
	sl.owner,
	di.telephone,
	sl.total_actual as totalActual,
	di.transfer_fee as transferFee,
	di.lpcode,
	sku.name as skuname,
	sku.code as skuCode,
	sku.key_properties as keyproperties,
	sku.supplier_code as supplierCode,
	sku.bar_code as barcode,
	sl.quantity,
	sta.slip_code2 as tbCode,
	sta.order_create_time as paymentTime,
	sta.memo
from 
	t_wh_sta_picking_list pl,
	t_wh_sta_line sl,
	t_bi_inv_sku sku,
	t_wh_sta sta
	left join t_wh_sta_delivery_info di on sta.id=di.id
where 
	sta.picking_list_id=pl.id
	and sta.id=sl.sta_id
	and sl.sku_id=sku.id
	and (sta.status =1 or sta.status=2)
	and pl.id = :plId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findExpressOrderSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                  select 
                                sta.id id,
                                sta.code code,
                                sta.SLIP_CODE refSlipCode,
                                sta.create_time createTime,
                                sta.BI_SEQ_NO businessSeqNo,
                                cruser.USER_NAME crUser,
                                sta.status intStatus,
                                sta.TYPE intType,
                                dryInfo.lpcode lpcode,
                                dryInfo.TRACKING_NO as trackingNo,
                                staQty.sta_total planQty,
                                shop.name shopId,
                                warehouse.name wname
                            from 
                              t_wh_sta sta
                              left join T_AU_OPERATION_UNIT warehouse on sta.MAIN_WH_ID = warehouse.id
                                left join t_bi_channel shop on sta.owner = shop.code
                                left join T_AU_USER cruser on STA.CREATOR_ID = cruser.id
                                left join ((select sta2.id as sta_id,sum(stal.QUANTITY) as sta_total from t_wh_sta sta2,t_wh_sta_line stal where sta2.id=stal.sta_id group by sta2.id) staQty )
                                  on sta.id=staQty.sta_id,
                                    T_WH_STA_DELIVERY_INFO dryInfo
                                #if($trackingNo)
                                    ,(select pg.sta_delivery_info_id as stdId from t_wh_package_info pg 
                                     where pg.tracking_no like :trackingNo
                                     group by pg.sta_delivery_info_id) package
                                #end    
                                where 1=1
                                #if($ouid)
                               and sta.MAIN_WH_ID=:ouid
                                    #end
                                    #if($wids)
				                  and sta.MAIN_WH_ID  in (
                                   #foreach( $id in $wids )
	                              $id,
                                     #end
                                    -1)
                                    #end
                                    and sta.id=dryInfo.id
                                    #if($trackingNo)
                                        and dryInfo.id = package.stdId
                                    #end
                                    and ( 1 !=1
                                        #foreach($status in $statusList)
                                            or sta.status=$status       
                                        #end
                                    )
                                    #if($fromCrtime)
                                        and sta.create_time >= :fromCrtime
                                    #end
                                    #if($ToCrtime)
                                        and sta.create_time <=:ToCrtime
                                    #end
                                    #if($code)
                                        and sta.code like :code
                                    #end
                                    #if($refSlipCode)
                                        and sta.SLIP_CODE like :refSlipCode
                                    #end
                                    #if($lpCode)
                                        and dryInfo.LPCODE = :lpCode
                                    #end
                                    #if($owner)
                                        and  STA.OWNER = :owner
                                    #end
                                    #if($crUser)
                                       and upper(cruser.USER_NAME) like upper(:crUser)
                                    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findExportFileName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select com.code||'_'||lp.companyName||'_'||wh.code||'_'||lp.lpcode||'_'||to_char(sysdate,'yyyymmddhh24missSSS')||'_'||pk.code as fileName
						from 
							T_AU_OPERATION_UNIT com,
							T_AU_OPERATION_UNIT yy,
							T_AU_OPERATION_UNIT wh,
							(
							select rownum rn,di.lpcode,sta.picking_list_id, channel.company_name as companyName from 
								t_wh_sta sta,
								T_WH_STA_DELIVERY_INFO di,
								t_bi_channel channel
							where 
								di.id = sta.id
								and sta.owner = channel.code
								and sta.picking_list_id=:pickingListId
							) lp,
							t_wh_sta_picking_list pk
						where
							wh.parent_ou_id=yy.id
							and yy.parent_ou_id=com.id
							and pk.wh_id=wh.id
							and lp.picking_list_id=pk.id
							and lp.rn = 1
							and pk.id=:pickingListId
				
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.queryCoachSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
sta.id,
sta.code,
sta.slip_code as refSlipCode,
sta.type as intStaType,
sta.status as intStaStatus,
sta.create_time as createTime,
sta.owner
from 
t_wh_sta sta 
where 
sta.main_wh_id = :ouId
and sta.owner in ('1coach官方旗舰店','1Coach官方商城')
#if($code)
	and sta.code=:code
#end
#if($slipCode)
	and sta.slip_code=:slipCode
#end
#if($type)
	and sta.type=:type
#else
	and sta.type in (21,41,42)
#end
#if($status)
	and sta.status = :status
#else
	and sta.status in (3,4,10)
#end
#if($createTime || $endCreateTime)
	#if($createTime)
		and sta.create_time > :createTime
	#end
	#if($endCreateTime)
		and sta.create_time < :endCreateTime
	#end
#else
	and sta.create_time > sysdate - 90
#end

                ]]>
			</value>
		</constructor-arg>
	</bean>
	<!--物流交接清单打印  原始-->
	<bean id="HandOverListLine.findHandOverListExport2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[                 
         select
              t.code,
              t.lpcode,
			  l.tracking_no,
			  sta.owner,
              l.weight as weight,
              di.city,
              di.zipcode,
              di.receiver,
              di.address,
              case 
             	 when di.TRANS_TIME_TYPE = 5 then '当日'
              	 when di.TRANS_TIME_TYPE = 6 then '次日'
              else 
              	 '普通'
              end as transTimeType,
              case when di.mobile is null then di.telephone
				   when di.telephone is null then di.mobile
				   else di.telephone || ',' || di.mobile end as mobile,
              nvl(sta.total_actual,0) + nvl(di.transfer_fee,0) as totalActual,
              sta.slip_code as refSlipCode,
              sk.bar_code as barcode
         from 
              T_WH_STA_HO_LIST t,
              T_WH_STA_HO_LIST_LINE l,
              T_WH_STA sta,
              T_BI_INV_SKU sk,
              T_WH_STA_DELIVERY_INFO di,
              T_WH_STA_ADD_LINE sl
         where t.id=l.ho_list_id
         and   l.tracking_no = di.tracking_no
         and sta.id = di.id
         and sl.sku_id = sk.id(+)
         and sl.sta_id(+) = sta.id
         and l.sta_id = sta.id
          #if($fromDate)
           and t.create_time >= :fromDate
          #end
          #if($endDate) 
          and t.create_time <= :endDate
          #end 
          #if($lpCode)
          	and di.lpCode = :lpCode
          #end
          #if($whOuId)
          	and sta.MAIN_WH_ID = :whOuId
		 #else
			and sta.MAIN_WH_ID in (
				#foreach($id in $idList)
				$id,
				#end
				-1) 
			 #end
       
                        ]]>
			</value>
		</constructor-arg>
	</bean>

	<!--物流交接清单打印 -->
	<bean id="HandOverListLine.findHandOverListExport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[                 
       SELECT  
							t.code,
              t.lpcode,
l.tracking_no as trackingNo,
		  NVL(sta.owner, tOr.COST_CENTER_DETAIL) as owner,
			NVL(l.weight,tp.PACKAGE_WEIGHT) as weight,
			NVL(di.city, tOr.R_CITY) AS CITY,
			di.zipcode,
			NVL(di.receiver, tOr.RECEIVER) AS RECEIVER,
			NVL(di.address, tOr.R_ADDRESS) AS ADDRESS,
			case 
           when di.TRANS_TIME_TYPE = 5 then '当日'
           when di.TRANS_TIME_TYPE = 6 then '次日'
           else 
           '普通'
       end as transTimeType,
			NVL(di.mobile,tOr.R_TEL) as mobile,
			nvl(sta.total_actual,0) + nvl(di.transfer_fee,0) as totalActual,
		  sta.slip_code as refSlipCode,
		  sk.bar_code as barcode
		 FROM
		T_WH_STA_HO_LIST_LINE l,
		T_WH_PACKAGE_INFO p,
		T_WH_STA_DELIVERY_INFO di,
		T_WH_STA sta,
		T_BI_INV_SKU sk,
		T_WH_TRANS_PACKAGE tp,
		T_WH_TRANS_ORDER tOr,
		T_WH_HO_WH_LIST wh,
		T_WH_STA_HO_LIST  t
		WHERE
			l.id=p.HO_LIST_LINE_ID
		AND l.HO_LIST_ID=t.ID
		AND p.STA_DELIVERY_INFO_ID=di.ID(+)
		AND p.STA_DELIVERY_INFO_ID=sta.id(+)
		AND p.TANS_PG_ID=tp.ID(+)
		AND tp.ORDER_ID=tOr.ID(+)
		AND  p.SKU_ID =sk.ID(+)
    AND  wh.HO_LIST_ID=t.ID(+)
  #if($fromDate)
           and t.create_time >= :fromDate
          #end
          #if($endDate) 
          and t.create_time <= :endDate
          #end 
          #if($lpCode)
          	and t.lpcode = :lpCode
          #end
          #if($whOuId)
          	and wh.ou_id= :whOuId
		 #else
			and  wh.ou_id in (
				#foreach($id in $idList)
				$id,
				#end
				-1) 
			 #end
       
                        ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaByPickingListPartyFinish"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select sta.* from T_WH_STA sta, T_WH_STA_PICKING_LIST p where (p.status = 8 or p.status = 2) and sta.picking_list_id = :plid 
 						and p.id = :plid and p.wh_id= :ouid
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.backUpStastatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	
	insert into t_wh_sta_status_backup
  (id,
   sta_code,
   origin_status,
   aim_status,
   operate_use_id,
   create_time,
   batch_code)
  select s_t_wh_sta_status_backup.nextval,
         sta.code,
         sta.status origin_status,
         '10',
         '',
         sysdate,
         :code
    from t_wh_sta sta
   inner join t_au_operation_unit au on au.id = sta.main_wh_id
   where sta.status not in (10, 17)
     and sta.owner=:owner
     and au.code in(
       
       #foreach($ou in $ouNames)
				'$ou',
	   #end
				'-1') 
     
     
     
      ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.importStaByOwnerAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select sta.id as id,sta.type as intStaType,sta.owner owner,au.name ownerOuName,
     case when sta.type=1 then '订单号'
     when sta.type=2 then '退换货申请单号'
     when sta.type=11 then '采购入库'
     when sta.type=12 then '结算经销入库'
     when sta.type=13 then '其他入库'
     when sta.type=14 then '代销入库'
     when sta.type=15 then '赠品入库'
     when sta.type=16 then '移库入库'
     when sta.type=17 then '货返入库'
     when sta.type=21 then '销售出库'
     when sta.type=22 then '其他出库'
     when sta.type=25 then '外部订单销售出库'
     when sta.type=31 then '库内移动'
     when sta.type=32 then '库间移动'
     when sta.type=41 then '退换货申请-退货入库'
     when sta.type=42 then '退换货申请-换货出库'
     when sta.type=45 then '库存状态修改'
     when sta.type=61 then '采购出库（采购退货出库）'
     when sta.type=62 then '结算经销出库'
     when sta.type=64 then '代销 出库'
     when sta.type=65 then '采购退货调整入库'   
     when sta.type=81 then 'VMI移库入库'
     when sta.type=85 then 'VMI库存调整入库'
     when sta.type=86 then 'VMI库存调整出库'
     when sta.type=88 then '转店'
     when sta.type=90 then '同公司调拨'
     when sta.type=91 then '不同公司调拨'
     when sta.type=101 then 'VMI退大仓'
     when sta.type=102 then 'VMI转店退仓' 
     when sta.type=110 then '库存锁定'
     when sta.type=201 then '福利领用'
     when sta.type=202 then '报废出库'
     when sta.type=204 then '报废出库'
     when sta.type=205 then '促销领用'  
     when sta.type=206 then '低值易耗品'
     when sta.type=210 then '样品领用出库'
     when sta.type=211 then '样品领用入库'
     when sta.type=212 then '商品置换出库'
     when sta.type=213 then '商品置换入库' 
     when sta.type=214 then '送修出库'
     when sta.type=215 then '送修入库'
     when sta.type=216 then '串号拆分出库'
     when sta.type=217 then '串号拆分入库'
     when sta.type=218 then '串号组合出库'  
     when sta.type=219 then '串号组合入库'
     when sta.type=222 then ' wms其他类型出入库指令（无前置单据）'
     when sta.type=251 then '库存出入调整（针对盘点调整）'                         
end as strType,
sta.status as intStaStatus,    
case when sta.status=1 then  '已创建'
     when sta.status=2 then  '库存占用（配货中）'
     when sta.status=3 then  '已核对'
     when sta.status=4 then  '已转出'
     when sta.status=5 then  '部分转入'
     when sta.status=8 then  '装箱中'
     when sta.status=10 then  '已完成'  
     when sta.status=15 then  '取消未处理'
     when sta.status=17 then  '取消已处理'
     when sta.status=20 then  '配货失败'
     when sta.status=25 then  '冻结'           
end as statusName,
sta.code,
sta.slip_code as orderCode,
sta.slip_code1 as slipCode1,
sta.slip_code2 as slipCode2,
to_char(sta.create_time,'yyyy-mm-dd hh24/mi/ss') as startTime
 from t_wh_sta sta 
 inner join t_au_operation_unit au on au.id=sta.main_wh_id
where sta.status not in (10,17)
      
      and sta.owner = :owner
	  and au.code in (
	   #foreach($ou in $ouNames)
				'$ou',
	   #end
	   '-1')
	    
order by sta.owner,sta.type,sta.create_time desc
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findStaByPickList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select sta.id,sta.system_key,i.tracking_no as trackingNo,sta.status as intStaStatus from T_WH_STA sta,t_wh_sta_delivery_info i where 
 					 sta.picking_list_id = :plid and sta.main_wh_id=:ouId and i.id=sta.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findCartonStaByStaIdAndStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select t.* from t_wh_sta t where t.group_sta_id = :staId  and t.type in (11,81) and t.main_wh_id = :ouId
 					#if("$!status"=="finished")
               			and t.status = 10
               		#elseif("$!status"=="createOrPart")
               			and t.status in (1,5)
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findSurplusPlanByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select sum(sl.quantity)-sum(sl.complete_quantity) as totalSurplusPlan from t_wh_sta t ,t_wh_sta_line sl where  t.id = sl.sta_id and t.id = :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaOutboundPurchaseBySkuSn"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select s.id from t_wh_sta s where s.id in  ( select stv.sta_id from t_wh_stv stv where stv.id 
 					in (select t.stv_id from T_WH_SKU_SN_LOG t where t.sn = :skuSn and t.direction = 2 )) and s.type = '61'
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaRNPAdjustmentInboundBySkuSn"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select s.id from t_wh_sta s where s.id in  ( select stv.sta_id from t_wh_stv stv where stv.id in 
                    (select t.stv_id from T_WH_SKU_SN_LOG t where t.sn = :skuSn and t.direction = 1 )) and s.type = '11' and s.slip_type = '6'
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaByPickingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select id,code,refSlipCode,createTime,businessSeqNo,arriveTime,"index",
							inboundTime,intStatus,intType,memo,owner,lpcode,stvTotal,shopId,pickingCode,receiver,trackingNo,memo
						from(
							select 
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								sta.OWNER owner,
								sta.pg_index as "index",
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            staQty.sta_total stvTotal,
					            shop.name shopId
		                    from 
		                    	t_wh_sta sta
			                    	left join t_bi_channel shop on sta.owner = shop.code
			                    	left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id
			                    	left join ((select sta2.id as sta_id,sum(stal.QUANTITY) as sta_total from t_wh_sta sta2,t_wh_sta_line stal where sta2.id=stal.sta_id group by sta2.id) staQty )
			                    		on sta.id=staQty.sta_id
		                    		,T_WH_STA_DELIVERY_INFO dryInfo
		                    where 1=1
		                    #if($mainWarehouse)
		                    and	sta.MAIN_WH_ID=:mainWarehouse
		                    #end
		                    #if($wids)
		                     and sta.main_wh_id  in (
                                #foreach( $id in $wids )
	                           $id,
                             #end
                             -1)
		                    #end
		                    	and sta.id=dryInfo.id
		                    	and sta.PICKING_LIST_ID = :pickingListId
		                    order by sta.pg_index
		                    ) tmp
						
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!--运营中心 -->
	<bean id="StockTransApplication.findStaByPickingListopc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select id,code,refSlipCode,createTime,businessSeqNo,arriveTime,"index",
							inboundTime,intStatus,intType,memo,owner,lpcode,stvTotal,shopId,pickingCode,receiver,trackingNo,memo,mainName,wcenid
						from(
							select 
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								sta.OWNER owner,
								sta.pg_index as "index",
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            staQty.sta_total stvTotal,
					            shop.name shopId,
					            olist.name mainName,
					            olist.ID wcenid
		                    from 
		                    	t_wh_sta sta
			                    	left join t_bi_channel shop on sta.owner = shop.code
			                    	left join T_AU_OPERATION_UNIT olist on sta.MAIN_WH_ID= olist.ID
			                    	left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id
			                    	left join ((select sta2.id as sta_id,sum(stal.QUANTITY) as sta_total from t_wh_sta sta2,t_wh_sta_line stal where sta2.id=stal.sta_id group by sta2.id) staQty )
			                    		on sta.id=staQty.sta_id
		                    		,T_WH_STA_DELIVERY_INFO dryInfo
		                    where 
		                    	sta.MAIN_WH_ID in( 
                                #foreach( $whid in $mainWarehouse )
		    					$whid ,
								#end
								-1 )
		                    	and sta.id=dryInfo.id
		                    	and sta.PICKING_LIST_ID = :pickingListId
		                    order by sta.pg_index
		                    ) tmp
						
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 特殊处理作业单查询： 范围 type in(21,25,42) status in(已核对，已转出，已完成 ) -->
	<bean id="StockTransApplication.findEspStaLists" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.slip_code1 as slipCode1,
								sta.slip_code2 as slipCode2,
								sta.type as intType,
								sta.status as intStatus,
								l.name as owner,
								sta.create_time as createTime
							from
								T_WH_STA sta 
								inner join  T_BI_CHANNEL l on sta.owner = l.code
							where
								sta.type in(21,25,42) and sta.status in(3,4,10) and sta.SPECIAL_TYPE = 1 and sta.main_wh_id = :ouId
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($slipCode1)
									and sta.slip_code1 like :slipCode1
								#end
								#if($slipCode2)
									and sta.slip_code2 like :slipCode2
								#end
								#if($owner)
									and sta.owner like :owner
								#end
								#if($status)
									and sta.status = :status
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
							
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询预售订单进行物流推荐 -->
	<bean id="RecieverInfo.findByTransInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_Reciever_Info o where o.lpcode is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询预售订单进行获取运单号 -->
	<bean id="RecieverInfo.findByTrackingNumber" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_Reciever_Info o where o.lpcode is not null and o.status is null and rownum<=2000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WarehouseLocation.findLocationIdByStaOcpLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					     select id from t_wh_location t where t.zoon_id in(
					        select id from T_WH_PICK_ZOON where wh_zoon_id in 
						               (
							                select id from t_wh_zoon where code in(select distinct(l.ocp_code) from T_WH_STA_OCP_LINE l where l.sta_id =:id) 
						               )
					          )
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 查询锁定的sta (无sku字段，不关联sku表)-->
	<bean id="StockTransApplication.findlockedStaNoSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				#if($orderCode)
				select * from (
				#end
				select distinct
					sta.*, 
					d.lpcode as lpcode, 
					d.tracking_no as trackingNo,
					cnl.name channelName
				from 
					t_wh_sta sta
				left join t_wh_sta_delivery_info d
					on d.id = sta.id,
				t_bi_channel cnl
 				where sta.is_locked = 1 and sta.type=41 and sta.MAIN_WH_ID=:mainWarehouse and sta.owner = cnl.code
			   	#if($startTime)
		    	    and sta.create_time > :startTime
		    	#else
		    		and sta.create_time > sysdate - 120
                #end
		   		#if($endTime)
	          		and sta.create_time < :endTime
                #end
 				#if($code)
 					and sta.code like :code
 				#end 
 				#if($refSlipCode)
 					and sta.slip_code like :refSlipCode
 				#end 
				#if($owner)
 					and sta.owner like :owner
 				#end 
 				#if($lpcode)
 					and d.lpcode like :lpcode
 				#end
 				#if($trackingNo)
 					and d.tracking_no like :trackingNo
 				#end
 				#if($receiver)
 					and d.receiver like :receiver
 				#end
 				#if($receiverPhone)
 					and d.mobile like :receiverPhone
 				#end
 				#if($taobaoOrderCode)
 					and sta.slip_code2 like :taobaoOrderCode
 				#end
 				#if($slipCode3)
 					and sta.slip_code3 = :slipCode3
 				#end
 				#if($orderCode)
		          and sta.slip_code1 like :orderCode
		          union
		          select distinct
		          	sta.*, d.lpcode as lpcode, d.tracking_no as trackingNo,cnl.name channelName
		          from 
		            t_wh_sta sta
		            left join t_wh_sta_delivery_info d
		            	on d.id = sta.id,
		            t_bi_channel cnl
		          where 
		          	sta.slip_code1 in (select slip_code1 from t_wh_sta c where c.slip_code like :orderCode ) 
		          and 
		          	sta.is_locked = 1 and sta.type=41 and sta.MAIN_WH_ID=:mainWarehouse and sta.owner = cnl.code
		         ) sta
		        #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	
	
	<bean id="StockTransApplication.findSlipCodeBySkuOuIdOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
			 		select sta.code,sta.order_Create_Time,sum(line.QUANTITY) as skuQty from t_wh_sta sta,t_wh_Sta_line line 
			 		where sta.id=line.sta_id and line.sku_id=:skuId and sta.main_wh_id=:ouId
			 		and sta.type=:type and sta.status in(1,20) and sta.owner=:owner
			 		group by sta.code,sta.order_Create_Time order by sum(line.QUANTITY),sta.order_Create_Time desc 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findByStaCodeByArc" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
			 		select s.id from t_arc_sta s where s.code =:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StockTransApplication.findStaInfoByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
		select sta.code as code,sta.slip_code as slipCode,sta.slip_code2 as slipCode2,
    	sta.status as status,decode(sta.status,1,'已创建',2,'库存占用',3,'已核对',4,'已转出',5,'部分转入',8,'装箱中',10,'已完成',15,'取消未处理',17,'取消已处理',20,'配货失败',25,'冻结') as statusName,sta.type as type,
		decode(sta.type,11,'采购入库',12,'结算经销入库',13,'其他入库',14,'代销入库',15,'赠品入库',16,'移库入库',17,'货返入库',21,'销售出库',22,'其他出库',25,'外部订单销售出库',31,'库内移动',32,'库间移动',41,'退换货申请-退货入库',42,'退换货申请-换货出库',
          45,'库存状态修改',50,'库存初始化',55,'GI 上架',61,'采购出库<采购退货出库>',62,'结算经销出库',63,'包材领用出库',64,' 代销出库',65,'采购退货调整入库',81,'VMI移库入库',85,'VMI库存调整入库',86,'VMI库存调整出库',88,'转店',90,'同公司调拨',91,'不同公司调拨',
          101,'VMI退大仓',102,'VMI转店退仓',110,'库存锁定',201,'福利领用',202,'固定资产领用',204,'固定资产领用',205,'促销领用',206,'低值易耗品',210,'样品领用出库',211,'样品领用入库',212,'商品置换出库',213,'商品置换入库'
          ,214,'送修出库',215,'送修入库',216,'串号拆分出库',217,'串号拆分入库',218,'串号组合出库',219,'串号组合入库',222,'wms其他类型出入库指令<无前置单据>',251,' 库存出入调整<针对盘点调整>') as typeName,sta.owner as channelName ,sta.system_key as systemKey
			 		
		  from t_wh_sta sta 
		  where sta.code=:staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.reStoreStaStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					update t_wh_sta s set s.status=s.ext_memo2 where  s.main_wh_id=:ouId and s.owner=:owner and s.ext_memo2 is not null and s.ext_memo='WMS4.0切换手动关闭'
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.getInventoryByBarCodeAndOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
				select sku.id as skuId,
                  replace(sku.id || inv.inv_owner,'''','-')  as skuIdOwner,
                  sku.name as skuName,
                  sku.code as skuCode,
                  sku.key_properties as keyProperties,
                  sku.bar_code as barCode,
                  ch.code as invOwner,
                  ch.name as shopName,
                  sum(nvl(inv.quantity,0)) as quantity,
                    inv.ou_id as whOuId
            from  t_bi_inv_sku sku ,
                  t_bi_channel ch,
                  t_wh_sku_inventory inv
            where sku.id=inv.sku_id(+)      
                  and inv.inv_owner=ch.code
                  and (sku.store_mode != 33 or  inv.expire_date - nvl(sku.warning_date,0) > sysdate)
                 #if ($ouId)
                     and inv.ou_id = :ouId
                 #end
                 #if ($barCode)
                   and sku.bar_code = :barCode
                 #end
            group by sku.id,replace(sku.id || inv.inv_owner,'''','-'),
                    sku.name,
                    sku.code,
                    sku.key_properties,
                    sku.bar_code,
                    ch.code,
                    ch.name,
                    inv.ou_id
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.getInventoryLocationCodeAndOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
		    select      
              sku.id as id,
              sku.jm_code as jmCode,
              sku.code as skuCode,
              sku.bar_code as barCode,
              sku.KEY_PROPERTIES as keyProperties,
              sku.supplier_code as supplierSkuCode,
              sku.name as skuName,
              sku.ext_code2 as extCode2,
              loc.code as locationCode,
              status.name as invStatusName,
              ch.name as invOwner,
              inv.qty as quantity,
              inv.lock_qty as lockQty,
              inv.qty-inv.lock_qty as availQty,
              brand.name as brandName,                             
                  (SELECT (SELECT C.NAME
                            FROM T_WH_SKU_SIZE_CONFIG C
                           WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
                             AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
                        FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize
            from
              t_bi_inv_sku sku,
              T_bi_BRAND brand,
              (
                          select inv.ou_id as wh_ouId, inv.location_id, inv.sku_id, inv.status_id as invStatus_id，
                          inv.inv_owner as owner, sum(inv.quantity) as qty,
                          sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty
                          from t_wh_sku_inventory inv 
                          where inv.ou_id = :ouId
                          group by inv.ou_id, inv.location_id,inv.sku_id, inv.status_id,
                          inv.inv_owner
              ) inv,
              t_wh_location loc,
              t_bi_channel ch,
              t_wh_inventory_status status
            where
              inv.location_id=loc.id
              and ch.code = inv.owner
              and sku.brand_id=brand.id
              and inv.sku_id = sku.id
              and status.id = inv.invStatus_id
              and inv.wh_ouId=:ouId
              and loc.code = :locationCode    
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="RelationNike.findRelationNikeByOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		            select t.id,t.sysPid as sysPid,t.enPid as enPid  from T_WH_RELATION_NIKE t  
		              		where t.WH_OU_ID=:whOuId 
		            			#if($sysPid)
						        	and t.sysPid like :sysPid
						      	#end
						      	#if($enPid)
						        	and t.enPid like :enPid
						      	#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclarationLine.getCustomsDeclarationLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
						 select 
						 cl.id as id, 
						 cl.sku_code as skuCode,
						 cl.plan_qty as planQty,
						 cl.g_qty as gQty,
						 cl.g_unit as gUnit, 
						 cl.decl_price as declPrice,
						 decode(cl.is_manual_add,1,'是',0,'否') as isManualAdds,
						 cl.upc
						 from  t_wh_customs_declaration  cu left join t_wh_customs_declaration_line cl  
						 on cu.id= cl.customs_declaration_id
						 where 
 						 cu.id= :id
						 #if($skuCode)
						 	and cl.sku_code like :skuCode
						 #end
						 #if($upc)
						 	and cl.upc like :upc
						 #end				 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclarationLine.findCustomsDeclarationLineByCdId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
						select l.* from t_wh_customs_declaration_line l  where l.customs_declaration_id = :cdId
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuDeclaration.findSkuDeclarationMoreLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
				 select  
				 sd.code,
				 sd.sku_code,
				 sd.upc,
				 sd.sku_name,
				 sd.net_wt,
				 sd.decl_price 
				 from T_WH_SKU_DECLARATION sd 
				 left join  t_wh_sku_origin_declaration so on 
				 sd.id=so.sku_declaration_id
				 and sd.sku_code =:skuCode
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuDeclaration.findSkuDeclarationByHsCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
						 select  
					         sd.id,
					         sd.code,
					         sd.sku_code,
					         sd.upc,
					         sd.sku_name,
					         sd.net_wt,
					         sd.decl_price,
					         sd.hs_code
				         from T_WH_SKU_DECLARATION sd 
				         where sd.hs_code= :hsCode
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclarationLine.deleteCustomsDeclarationLineByCusId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
			 delete  from T_WH_CUSTOMS_DECLARATION_LINE dl where dl.customs_declaration_id= :id
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclarationLine.findNewCustomsDeclarationLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
			 select l.unit_price declPrice,l.quantity planQty,l.complete_quantity gqty,
			       (select d.origin from T_WH_SKU_ORIGIN_DECLARATION d where d.id=
			       ( select max(od.id) from T_WH_SKU_ORIGIN_DECLARATION od where od.sku_declaration_id=sd.id )) countryOfOrigin,
			       sd.sku_code skuCode,sku.ext_code2 upc,sd.hs_code hsCode
			from t_wh_sta sta,t_wh_sta_line l,t_bi_inv_sku sku,t_wh_sku_declaration sd
			where sta.id=l.sta_id
			      and l.sku_id=sku.id
			      and sku.code=sd.sku_code
			      and sta.id= :staId
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclarationLine.findNewCustomsDeclarationLineBySalesStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
			 			select a.unit_price,so.qty declPrice,so.qty planQty,so.origin countryOfOrigin,sd.sku_code skuCode,a.ext_code2 upc,sd.hs_code hsCode
						from T_WH_STA_SKU_ORIGIN so,t_wh_sku_declaration sd,
						     (select l.unit_price,s.code,s.ext_code2
						     from t_wh_sta_line l,t_bi_inv_sku s 
						     where l.sku_id=s.id
						           and l.sta_id= :staId
						           ) a
						where so.sku_code=sd.sku_code
						      and so.sku_code=a.code
						      and so.sta_id= :staId
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="SkuDeclaration.findNeedPushSkuInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
				<value>
					<![CDATA[
				 select  
				 	 sd.id,
			         sd.code,
			         sd.sku_code,
			         sd.upc,
			         sd.sku_name,
			         sd.net_wt,
			         sd.decl_price ,
			         sd.hs_code,
		               sd.is_discount,
		               sd.sku_describe,
		               sd.g_unit,
			         od.origin 
		         from T_WH_SKU_DECLARATION sd ,T_WH_SKU_ORIGIN_DECLARATION od
		         where  sd.is_push=1
		         		and sd.status in (1,3)
		               and sd.id=od.sku_declaration_id(+)
		               and sd.error_count <5
					]]>
			</value>
		</constructor-arg>
	</bean>
</beans>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
