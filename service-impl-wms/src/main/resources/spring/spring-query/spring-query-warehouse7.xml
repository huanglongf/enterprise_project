<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<bean id="Inventory.findInventoryByShelfLife" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select inv.* 
							from t_wh_sku_inventory inv,t_wh_inventory_status sts,t_bi_inv_sku sku  
							where sts.id = inv.status_id 
							      and sku.id = inv.sku_id 
							      and sts.is_forsale = 1 
							      and inv.occupation_code is null 
							      and nvl(inv.is_occupied,0) = 0 
							      and inv.quantity > 0 
							      and inv.expire_date is not null 
							      and sku.store_mode = :storeMode 
							      and inv.ou_id = :ouId 
							      and inv.inv_owner = :owner 
							      and to_char(sysdate+nvl(sku.warning_date,0),'yyyy-mm-dd HH24/mi/ss') > 
							      to_char(inv.expire_date,'yyyy-mm-dd HH24/mi/ss') 
							      order by inv.sku_id,inv.location_id,inv.status_id,inv.inv_owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="JdConfirmOrderQueue.findTransNoOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT *　from T_jd_CONFIRM_ORDER_QUEUE where trans_no= :transno
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSkuLocationOuIdOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select inv.*   
					from t_wh_sku_inventory inv 
					where  inv.location_id = :locationId  
					and inv.ou_id = :ouid  
					and inv.sku_id = :skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findAFInventoryReport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
         select 
          '4148' storeCode,
          to_char(sysdate, 'yyyymmdd') currentDate,
          sku.ext_code2 upc,
          max(inv.qty) as onHandUnits,
          sum(case y.status_id when 447 then y.quantity else 0 end) damaged 
          from
            v_wh_inventory_summary inv,
            t_bi_channel ch,
            T_BI_BRAND brand,
            t_bi_inv_sku sku,
            T_WH_SKU_INVENTORY y
          where inv.sku_id = sku.id
            and ch.code = inv.owner
            and sku.brand_id=brand.id
            and y.ou_id=inv.WH_OUID
            and y.sku_id=inv.SKU_ID
            and inv.wh_ouid in(4942)
            and inv.qty !=0 group by sku.ext_code2
        ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<bean id="Inventory.findAFInventoryReport2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
         select storeCode,currentDate ,upc,sum(onHandUnits) as onHandUnits ,sum(damaged) as damaged from (    
          select 
          '4148' storeCode,
          to_char(sysdate, 'yyyymmdd') currentDate,
          sku.ext_code2 upc,
          max(inv.qty) as onHandUnits,
          sum(case y.status_id when 447 then y.quantity else 0 end) damaged 
          from
            v_wh_inventory_summary inv,
            t_bi_channel ch,
            T_BI_BRAND brand,
            t_bi_inv_sku sku,
            T_WH_SKU_INVENTORY y
          where inv.sku_id = sku.id
            and ch.code = inv.owner
            and sku.brand_id=brand.id
            and y.ou_id=inv.WH_OUID
            and y.sku_id=inv.SKU_ID
            and inv.wh_ouid in(4942)
            and inv.qty !=0 group by sku.ext_code2
            union all 
            select '4148' storeCode, to_char(sysdate, 'yyyymmdd') currentDate, sku.ext_code2 upc ,sum (-s.quantity) as onHandUnits , 
            sum(case s.invs_tatus_id when 447 then -s.quantity else 0 end) damaged 
            from t_wh_st_log s,t_bi_inv_sku sku  where s.sku_id=sku.id and  s.wh_id='4942' and  s.tran_time>=:date and s.tran_time <=sysdate  and s.direction=1 group by sku.ext_code2
            union all
            select '4148' storeCode,to_char(sysdate, 'yyyymmdd') currentDate, sku.ext_code2 upc ,sum (s.quantity) as onHandUnits , 
            sum(case s.invs_tatus_id when 447 then s.quantity else 0 end) damaged 
            from t_wh_st_log s,t_bi_inv_sku sku  where s.sku_id=sku.id and  s.wh_id='4942'  and s.tran_time>=:date and s.tran_time <=sysdate and s.direction=2 group by sku.ext_code2
            )  group by currentDate,storeCode,upc
        ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findQtyByInventoryCheckPC" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sku.id || '-' || loc.id || '-' || inv.status_id || '-' || decode(sku.store_mode,33,to_char(inv.expire_date,'yyyymmdd'),'') as CODE,
          sum(inv.quantity) as ID 
            from t_wh_sku_inventory inv,t_bi_inv_sku sku,t_wh_location loc,
						     t_wh_inv_check ic,t_wh_inv_check_line icl
						where icl.inv_check_id = ic.id
						      and inv.ou_id = ic.ou_id
						      and inv.sku_id = sku.id
						      and loc.id = inv.location_id
						      and inv.location_id = icl.location_id
						      and ic.id = :invCkId
						group by sku.id || '-' || loc.id || '-' || inv.status_id || '-' || decode(sku.store_mode,33,to_char(inv.expire_date,'yyyymmdd'),'')
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuCountByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select count(1) from t_wh_sta sta, t_wh_sta_line staLine, t_bi_inv_sku sku 
				 where staLine.Sta_Id = sta.id and staLine.Sku_Id = sku.id 
				 and sta.code = :staCode and (sku.is_sn_sku = :sn or sku.store_mode = :storeM)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findShelfLifeSkuCountByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select count(1) from t_wh_sta sta, t_wh_sta_line staLine, t_bi_inv_sku sku 
				 where staLine.Sta_Id = sta.id and staLine.Sku_Id = sku.id 
				 and sta.code = :staCode and sku.store_mode = :storeM
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgSkuUpdate.findMsgSkuUpdate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		          select t.id as id,t.sku_id as skuId,t.customer_id as cId,t.creat_time as creatTime,
		                 t.valid_date as validDate,t.time_type as timeType,t.exe_count as exeCount 
		          from T_MSG_SKU_UPDATE_QUEUE t where t.exe_count < 5
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgSkuUpdate.updateMsgSkuExeCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
         			 update T_MSG_SKU_UPDATE_QUEUE t set t.exe_count = t.exe_count+1 where t.exe_count < 5
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findOrderBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select code from t_wh_sta where slip_code = :slipCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateReleaseInventoryByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					   update t_wh_sku_inventory inv set occupation_code = null,is_occupied = null where exists(
				             select 1 from t_wh_sta sta where inv.occupation_code=sta.code and sta.id = :staid
				      )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.deleteStvLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				      delete from t_wh_stv_line line where exists(
				             select 1 from t_wh_sta sta,t_wh_stv stv where stv.sta_id = sta.id and sta.id = :staid and stv.id=line.stv_id
				      )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--审核确认审核 （取消）删除mapping卡号 -->
	<bean id="SkuSnMapping.deleteSkuSnMappingByStaIdAndStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				      delete from T_WH_SKU_SN_MAPPING pa where pa.sta_id= :staId and pa.stv_id= :stvId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.deleteStvByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				      delete from t_wh_stv stv where exists(
				             select 1 from t_wh_sta sta where sta.id=stv.sta_id and sta.id = :staid
				      )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaToStatusByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_sta set status = 1 ,LAST_MODIFY_TIME = sysdate where id = :staid and status = 2 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaToPickingListByPickingListId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_sta set picking_list_id = null,pb_id = null,CONTAINER_CODE =null,SHIPMENT_CODE = null where picking_list_id = :plid 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updateStaDeTrackByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_sta_delivery_info o set o.tracking_no = null,o.ext_trans_order_id = null,o.ali_package_no = NULL where id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 渠道快递维护 start xiaolong.fei -->
	<bean id="TransportService.getTransportService" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select s.id,s.name,decode(s.type,'1','普通','4','航空','7','电商特惠') as serviceType,
						decode(s.time_type,'1','普通','3','及时达','5','当日','6','次日','7','次晨','8','云仓专配次日','9','云仓专配隔日') as timeTypes from t_bi_transport_service s 
						where status !=2 or status is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransportService.getTransportServiceById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select s.id,s.name,decode(s.type,'1','普通','4','航空','7','电商特惠') as serviceType,
						decode(s.time_type,'1','普通','3','及时达','5','当日','6','次日','7','次晨','8','云仓专配次日','9','云仓专配隔日') as timeTypes,
						decode(s.status,'1','可用','禁用') as statuss,
						s.create_time from t_bi_transport_service s 
						where s.trans_id =:transId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--通过物流商code来查询时效类型-->
	<bean id="TransportService.getTransportServiceByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						       select count(a.timeTypeKey) as num, a.timeTypeKey, a.timeTypes
         from (select s.id,
                      s.name,
                      decode(s.type,
                             '1',
                             '普通',
                             '4',
                             '航空',
                             '7',
                             '电商特惠') as serviceType,
                      s.time_type as timeTypeKey,
                      decode(s.time_type,
                             '1',
                             '普通',
                             '3',
                             '及时达',
                             '5',
                             '当日',
                             '6',
                             '次日',
                             '7','次晨','8','云仓专配次日','9','云仓专配隔日') as timeTypes,
                      decode(s.status, '1', '可用', '禁用') as statuss,
                      s.create_time
                 from t_bi_transport_service s
                where s.status = 1
                  and s.trans_id = (select r.id
                                      from T_MA_TRANSPORTATOR r
                                     where r.exp_code =:expcode)) a
        group by a.timeTypeKey, a.timeTypes
       having count(a.timeTypeKey) >= 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransAreaGroup.findTransAreaByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select * from t_bi_trans_area_group where code = :code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransAreaGroup.findTransAreaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select id,name,code,decode(status,'1','正常','2','禁用') as areaStatus from t_bi_trans_area_group where customer_id = :cstmId and status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransAreaGroup.findUpdateTransAreaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select id,name,code,decode(status,'1','正常','2','禁用') as areaStatus from t_bi_trans_area_group where customer_id = :cstmId
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="TransAreaGroupDetial.findTransAreaGDetiaByGId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select * from t_bi_trans_area_group_detial where group_id = :groupId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransAreaGroup.updateTransArea" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_bi_trans_area_group set name = :name ,status = :status where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransAreaGroupDetial.deleteTransADetialByGId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						delete from t_bi_trans_area_group_detial where group_id = :groupId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransportServiceArea.deleteTransAareByGId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						delete from T_BI_TRANSPORT_SERVICE_AREA where trans_service_id = :groupId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransportServiceArea.findTransServiceAreaById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select a.province,a.city,a.district from T_BI_TRANSPORT_SERVICE_AREA a where TRANS_SERVICE_ID = :groupId
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="SkuTag.findSkuTag" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
						 	id,code,name,decode(status,'1','正常','0','取消') as tagStatus,decode(type,'5','活动标签') as tagType 
						from 
							t_bi_sku_tag where status =1 
						#if ($code)
							and code like '%$code%'
						#end
						#if ($name)
							and name like '%$name%'
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRole.findTransRole" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							 e.id,e.code,e.name,e.create_time,e.sort,decode(e.status,'1','正常','2','禁用','') as roleStatu,
							 e.ts_id as roleServiceId ,l.id as roleDtalId,l.min_amount as minCount,l.max_amount as maxCount,l.time_type as timeType,
							 l.min_weight as minWCount,l.max_weight as maxWCount,p.id as areaGroupId,p.code as areaCode ,
							 p.name as areaName,p.status as areaStatus,l.remove_keyword as removeKeyword,l.is_cod as isCod
						from
							 t_bi_trans_role e
					    left join
					    	 t_bi_trans_role_detial l on e.id = l.trans_role_id
					    left join 
					    	t_bi_trans_area_group p on l.trans_area_group_id = p.id
					    where
					    	 e.channel_id =:chanId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.insertSkuRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				  insert into t_bi_trd_sku_ref
				       (sku_id,trd_id)
				  values 
			       (
			       :skuId,
			       :detialId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.insertSkuCateRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_bi_trd_sku_categories_ref
			       (SKU_CATEGORIES_ID,trd_id)
			 	 values 
			       (
			       :skuCateId,
			       :detialId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.insertSkuTagRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_bi_trd_sku_tag_ref
			       (sku_tag_id,trd_id)
				  values 
			       ( 
			       :skuTagId,
			       :detialId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.insertWhRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_bi_trd_wh_ref
			       (wh_id,trd_id)
				  values 
			       ( 
			       :whId,
			       :detialId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.deleteSkuRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete from t_bi_trd_sku_ref where trd_id =:detialId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.deleteSkuCateRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               		 delete from t_bi_trd_sku_categories_ref where trd_id =:detialId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.deleteSkuTagRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              		  delete from t_bi_trd_sku_tag_ref where trd_id =:detialId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRoleDetial.deleteWhRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              		  delete from t_bi_trd_wh_ref where trd_id =:detialId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRole.findSkuRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sku.id as id,
						sku.code as code,
						sku.bar_code as barCode,
             			sku.name as name,
             			b.name as brandName,
              			sku.EXT_CODE1 as extensionCode1
         		   from 
             			t_bi_inv_sku sku
             	   left join
             	   		t_bi_brand b on sku.brand_id=b.id
             	   left join
             	   		t_bi_trd_sku_ref f on f.sku_id=sku.id
            	   where
            	     f.trd_id =:roleDtalId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRole.findSkuCateRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						  s.id,s.SKU_CATEGORIES_NAME as skuCategoriesName
				    from
				    	  T_MA_SKU_CATEGORIES s
				    left join
				    	  t_bi_trd_sku_categories_ref sf on s.id = sf.sku_categories_id 
				    where
				    	  sf.trd_id =:roleDtalId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransRole.findSkuTagRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						  g.id,g.code as code,g.name as name,decode(g.status,'1','正常','0','取消') as tagStatus,decode(g.type,'5','活动标签') as tagType 
					from 
						  t_bi_sku_tag g  
				    left join
				    	  t_bi_trd_sku_tag_ref gf on g.id = gf.sku_tag_id
				    where
				    	  g.status =1 and gf.trd_id =:roleDtalId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransRole.getTransRoleIdByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id from T_BI_TRANS_ROLE t where t.code =:code
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransRole.updateTransRoleById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_BI_TRANS_ROLE t set t.status = :roleIsAvailable ,t.sort = :priority where t.id = :roleId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuTag.findSkuTagCountByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select count(1)	from t_bi_sku_tag where 1 = 1
						#if ($tagCode)
							and code = :tagCode
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findAllSkuByTagId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.code, sku.name, sku.bar_code as barCode,brand.name as brandName,customer.name as customerName,
						sku.EXT_CODE1 as extensionCode1,sku.EXT_CODE2 as extensionCode2	
					from t_bi_sku_tag tag,
						 t_bi_sku_tag_ref ref,
						 t_bi_inv_sku sku,
              			 t_bi_brand brand,
              			 t_bi_customer customer
               		where tag.id = ref.sku_tag_id 
               			and ref.sku_id = sku.id
               			and sku.brand_id=brand.id 
               			and sku.customer_id = customer.id
					#if ($tagId)
						and tag.id = :tagId
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findAllSkuRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.code, sku.name, sku.bar_code as barCode,brand.name as brandName,customer.name as customerName,
						sku.EXT_CODE1 as extensionCode1,sku.EXT_CODE2 as extensionCode2	
					from t_bi_sku_tag tag,
						 t_bi_sku_tag_ref ref, 
						 t_bi_inv_sku sku,
              			 t_bi_brand brand,
              			 t_bi_customer customer
               		where tag.id = ref.sku_tag_id 
               			and ref.sku_id = sku.id
               			and sku.brand_id=brand.id
               			and sku.customer_id = customer.id
               		#if($code)
						and sku.code like :code
					#end
					#if($barCode)
					   and sku.bar_code like :barCode
					#end
					#if($supplierCode)
					   and sku.supplier_code like :supplierCode
					#end
					#if($name)
					   and sku.name like :name
					#end
					#if($brandName)
					   and brand.name =substr(:brandName,0,length(:brandName)-1)
					#end
					#if($customerId)
					   and sku.customer_id = :customerId
					#end
					#if ($tagId)
						and tag.id = :tagId
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuTag.insertSkuRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_bi_sku_tag_ref
			       (id,sku_tag_id,sku_id)
				  values 
			       (S_t_bi_sku_tag_ref.Nextval,  
			       :skuTagId,
			       :skuId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuTag.deleteSkuRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete from t_bi_sku_tag_ref where sku_tag_id =:skuTagId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 渠道快递维护 end -->
	<bean id="StockTransApplication.updatePgIndex" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					   update t_wh_Sta sta1 set sta1.pg_index = (select tt.rn from 
   (select t.*,rownum rn from (
   select sta.id staId,min(inv.location_id) loc from t_wh_sta sta,t_wh_sku_inventory inv where sta.picking_list_id=:pId
   and inv.occupation_code in(select code from t_wh_sta sta1 where sta1.id = sta.id or sta1.group_sta_id=sta.id) 
   group by sta.id order by loc desc,staId)t)tt where tt.staid = sta1.id)
   where sta1.id in(select id from t_wh_sta where picking_list_id = :pId)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.insertTransRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_wh_warehouse_trans_ref
			       (wh_ou_id,trans_id)
				  values 
			       (:ouId,
			       :transId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.deleteTransRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete from t_wh_warehouse_trans_ref where wh_ou_id =:ouId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.findAllTransRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select trans.id as id,trans.exp_code as expCode,trans.name as name, trans.is_support_cod as isSupportCod
				from t_bi_warehouse wh, 
					t_au_operation_unit ou,
					t_wh_warehouse_trans_ref ref, 
					t_ma_transportator trans
				where wh.ou_id = ou.id and wh.ou_id = ref.wh_ou_id and ref.trans_id = trans.id
				and ou.id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 修改物流商 -->
	<bean id="Warehouse.updateLpCodeByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta_delivery_info
						 set lpcode = 'STO',EXT_TRANS_ORDER_ID='',tracking_no='' 
					where id in(select o.id from t_wh_sta_delivery_info o inner join t_wh_sta a on o.id = a.id where a.id= :id and a.status = 1)
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="Warehouse.updateTrackByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_TRANS_PROVIDE_NO set sta_id = null, version =  0 where sta_id in (select id from t_wh_sta where code = :code and status = 1)  and lpcode = 'EMS'
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="ChannelWhRef.findAllChannelRefByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select channel.id,channel.code,channel.name,channel.create_time as createTime,channel.is_marger as isMarger 
                	from t_bi_channel channel, 
                		 t_bi_channel_wh_ref ref, 
                		 t_au_operation_unit ou
					where channel.id = ref.channel_id and ref.wh_ou_id = ou.id
                	and ou.id = :ouId  
				]]>
			</value>
		</constructor-arg>
	</bean>


   <bean id="CreatePickingListSql.getAllRuleName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               
                select *  from t_wh_create_package_list_sql where ou_id=:ouId and mode_name=:modeName

				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CreatePickingListSql.findRuleNameByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               
                select *  from t_wh_create_package_list_sql where ou_id=:ouId and rule_name=:ruleName

				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="DeailyInventory.addDeailyInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into t_wh_deaily_inventory(id, create_time, customer_id, customer_code, channel_code, wh_ou_id, wh_ou_code, sku_id, customer_sku_code,sales_avail_qty)
						select s_t_wh_deaily_inventory.nextval,:datetime,customer_id,cusomer_code,channel_code   ,wh_ou_id,wh_ou_code,sku_id,customer_sku_code,qty
						from(
						select cm.id customer_id,cm.code cusomer_code,wh.id wh_ou_id,wh.code wh_ou_code,channel.code channel_code,nvl(inv.avail_qty,0) - nvl(oqty.qty,0) qty,sku.id sku_id,sku.customer_sku_code customer_sku_code
						from v_wh_sales_inventory inv
						     left join v_wh_occupied_inventory oqty
						     on inv.sku_id = oqty.sku_id
						        and inv.wh_ou_id = oqty.wh_ouId
						        and inv.owner = oqty.owner
						     inner join t_bi_channel channel on channel.code = inv.owner
						     inner join t_bi_customer cm on cm.id = channel.customer_id
						     inner join t_au_operation_unit wh on wh.id = inv.wh_ou_id
						     inner join t_bi_inv_sku sku on sku.id = inv.sku_id
						) inv
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DeailyInventory.addDeailyInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	insert into t_wh_deaily_inventory_log(id,log_time, create_time, customer_id, customer_code, channel_code, wh_ou_id, wh_ou_code, sku_id, customer_sku_code,sales_avail_qty)
						select id,sysdate,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,customer_sku_code,sales_avail_qty
						from(					
								  SELECT t.id,t.create_time,t.customer_id,t.customer_code,t.channel_code,t.wh_ou_id,t.wh_ou_code,t.sku_id,t.customer_sku_code,t.sales_avail_qty FROM T_WH_DEAILY_INVENTORY  T 
                				WHERE t.status = 10
						) inv
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.findAutoPickingListRoleList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					t.id as id,t.name as name,t.code as code,
					decode(t.status, '1', '可用', '禁用') as roleStatus,
					t.create_time as createTime 
					from
					t_wh_auto_pl_role t where t.status = 1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.findAutoPLRoleCountByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select count(1)	from t_wh_auto_pl_role where 1 = 1
						#if ($code)
							and code = :code
						#end  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.deletePLRoleDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete from t_wh_auto_pl_role_detial where role_id =:roleId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.insertPLRoleDetail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_wh_auto_pl_role_detial
			       (id,sort,picking_type,sku_category_id,sku_size_config_id,max_order,min_order,role_id,send_city,is_sn,IS_TRANS_AFTER)
				  values 
			       (s_t_wh_auto_pl_role_detial.nextval,:sort,:pickingType,:skuCategoryId,:skuSizeId,:maxOrder,:minOrder,:roleId,:sendCity,:isSn,:isTransAfter
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findAllChannelGroupByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select cg.id,cg.code,cg.name,cg.create_time,cg.wh_ou_id as ouId,cg.sort 
                	from t_wh_bi_channel_group cg, 
                		 t_au_operation_unit ou
					where cg.wh_ou_id = ou.id
                	and ou.id = :ouId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findChannelGroupCountByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select count(1)	from t_wh_bi_channel_group where 1 = 1
						#if ($code)
							and code = :code
						#end  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findChannelGroupCountByName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select count(1)	from t_wh_bi_channel_group where 1 = 1
						#if ($name)
							and name = :name
						#end  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.deleteChannelRefByGroupId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete from t_wh_bi_channel_ref where w_cg_id =:groupId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.insertChannelRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				  insert into t_wh_bi_channel_ref
				       (w_cg_id,bi_channel_id)
				  values 
			       (
			       :groupId,
			       :channelId
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findAllChannelRefByGroupId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select c.id as id, c.code as code, c.name as name, c.create_time as createTime
                from  t_wh_bi_channel_ref  ref left join t_bi_channel c on ref.bi_channel_id = c.id
                where ref.w_cg_id = :groupId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findAllChannelRefByGroupCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
       			select c.id as id, c.code as code, c.name as name, c.create_time as createTime
                from  t_wh_bi_channel_ref  ref left join t_bi_channel c on ref.bi_channel_id = c.id
                where ref.w_cg_id in(select id from t_wh_bi_channel_group where code=:code)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findAllChannelGroupByCIdAndOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select cg.id as id, cg.code as code, cg.name as name, cg.create_time as createTime
                from  t_wh_bi_channel_ref  ref left join t_wh_bi_channel_group cg on ref.w_cg_id = cg.id
                where ref.bi_channel_id = :channelId and cg.wh_ou_id = :ouId
                #if ($groupId)
					and cg.id != :groupId
				#end 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.updateLogQueueBatchId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					   update  (select q.batch_id from T_WH_ST_LOG_QUEUE q ,t_bi_customer c where q.customer_id=c.id and  c.is_oms is  null) a 
					                set a.batch_id=:batchId where a.batch_id is null and rownum <=200
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.queryLogQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	select t.*,s.code from T_WH_ST_LOG_QUEUE t inner join t_bi_inv_sku s on t.sku_id=s.id where t.batch_id=:batchId and t.customer_code<>'adidas'
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.queryLogQueueEmail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	select batch_id from T_WH_ST_LOG_QUEUE where error_count <=30 and error_count>0 and create_time >sysdate-1 and is_mail is null  group by batch_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeVmiStockInCommand.updateStatusToFinishByRefNo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     update T_NIKE_VMI_STOCKIN t
					      set t.status=10
					    where t.reference_no=:refNo
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="NikeVmiStockInCommand.findNikeVmiStockInByDeclaration"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				     select t.Id as id,t.STA_ID as staId from T_NIKE_VMI_STOCKIN t where t.IS_CUSTOMS_DECLARATION=0 and t.STA_ID is not null
				     	#if ($nikeVmiCode)
							and instr(:nikeVmiCode,t.to_location)>0
						#end 
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="LogQueue.addLogQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                insert into T_WH_ST_LOG_QUEUE_LOG(id,WH_OU_ID,WH_OU_CODE,TRANS_TYPE_NAME,CREATE_TIME,SKU_ID,CUSTOMER_SKU_CODE,CUSTOMER_ID,
					CUSTOMER_CODE,SALES_AVAIL_QTY,CHANNEL_CODE,STATUS,BATCH_ID,LOG_TIME)     
					select id,WH_OU_ID,WH_OU_CODE,TRANS_TYPE_NAME,CREATE_TIME,SKU_ID,CUSTOMER_SKU_CODE,CUSTOMER_ID,
					CUSTOMER_CODE,SALES_AVAIL_QTY,CHANNEL_CODE,STATUS,BATCH_ID,sysdate from(
					        select id,WH_OU_ID,WH_OU_CODE,TRANS_TYPE_NAME,CREATE_TIME,SKU_ID,CUSTOMER_SKU_CODE,CUSTOMER_ID,
					CUSTOMER_CODE,SALES_AVAIL_QTY,CHANNEL_CODE,STATUS,BATCH_ID from T_WH_ST_LOG_QUEUE where BATCH_ID=:batchId
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.getBiChannelGroupByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.* from t_wh_bi_channel_group t where t.wh_ou_id = :id order by t.sort asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.getBiChannelRefByCgId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.w_cg_id as cgId,t.bi_channel_id as channelId from t_wh_bi_channel_ref t where t.w_cg_id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceLine.getSortingDifferentByInvCheck"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[

select l.id,l.sku_id as skuId,
to_char(l.expire_date,'YYYYMMDD HH24MISS') as sexpireDate,
l.status_id as invStatusId,
l.location_id as locationId,
l.quantity ,
l.quantity as originalQuantity,
l.owner,
l.expire_date as expireDate,
l.production_date as productionDate
from 
T_WH_INV_CHECK_DIF_LINE l 
where 
l.inv_check_id=:icId

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceLine.updateLineQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
update
T_WH_INV_CHECK_DIF_LINE l
set
l.quantity=:qty
where
l.id=:lineId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPlConfig.getAllStaAutoLpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select stragg(sta.lpcode) as lpcode from (
						select td.lpcode as lpcode,count(1) from t_wh_sta sta, 
						  t_wh_sta_delivery_info td 
						  where 
						  sta.id not in
						  (
						    select ts.sta_id    
						    from t_wh_sta t,
						    t_wh_sta_invoice ts 
						    where t.main_wh_id = :ouid  
						    and t.owner in 
						    (
								#foreach($owner in $owner)
									'$owner',
								#end
								'-1'
				            )
						    and ts.sta_id = t.id 
						  ) 
						  and sta.main_wh_id = :ouid  
						  and sta.owner in 
						  (
								#foreach($owner in $owner)
									'$owner',
								#end
								'-1'
						  ) 
						  and sta.status = 1 
						  and sta.is_special_packaging = 0 
						  and td.id = sta.id 
						  and td.lpcode is not null 
						  and sta.picking_list_id is null 
						  and sta.picking_type = :pickType  
						  and sta.sku_categories_id = :skuCid  
						  GROUP BY td.lpcode 
						  HAVING COUNT(1) > 0) sta 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPlConfig.getAllAutoStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select sta.id,sta.lpcode,sta.skuid,sta.maxlength as skuSize from(
				  select sta.id as id,td.lpcode as lpcode,s.skuid as skuid,sta.sku_max_length as maxlength from 
				    t_wh_sta sta,
					  t_wh_sta_delivery_info td,
					    (
						    select skusize.min_size as minsize,skusize.max_size as maxsize 
						    from T_WH_SKU_SIZE_CONFIG skusize 
						    where skusize.id = :skuSize  
						) skusize, 
					    (select sta.staid,sta.skuid 
						    from(
						    select ts.sta_id as staid,ts.sku_id as skuid,row_number()over(partition by ts.sta_id order by ts.sku_id) num
						          from t_wh_sta t,
						           t_wh_sta_line ts 
						            where t.main_wh_id = :ouid  
						            and t.id = ts.sta_id 
						            and t.owner in 
						              (
						              		#foreach($owner in $owner)
												'$owner',
											#end
											'-1'
						              ) 
						              and t.picking_list_id is null 
									  and t.picking_type = :pickType  
									  and t.sku_categories_id = :skuCid  
									  and t.is_merge = 0 
									  and t.group_sta_id is null 
				  					  and t.type = 21 
              						  and t.status = 1 
              						  and (t.is_special_packaging = 0 or t.is_special_packaging is null) 
						 ) sta where num=1) s   
					  where 
					  sta.id not in
					  (
					    select ts.sta_id    
					    from t_wh_sta t,
					    t_wh_sta_invoice ts 
					    where t.main_wh_id = :ouid 
					    and t.owner in 
					    (
					    	#foreach($owner in $owner)
									'$owner',
								#end
								'-1'
					    ) 
					    and ts.sta_id = t.id 
						and t.picking_list_id is null 
						and t.picking_type = :pickType  
						and t.sku_categories_id = :skuCid  
						and t.is_merge = 0 
						and t.group_sta_id is null 
				  		and t.type = 21 
              			and t.status = 1 
              			and (t.is_special_packaging = 0 or t.is_special_packaging is null) 
					  ) 
					  and sta.main_wh_id = :ouid 
					  and sta.owner in 
					  (
					 		#foreach($owner in $owner)
									'$owner',
								#end
								'-1'
					  ) 
					  and sta.status = 1 
					  and (sta.is_special_packaging = 0 or sta.is_special_packaging is null) 
					  and td.id = sta.id 
					  #if($lpcode) 
						  and td.lpcode = :lpcode 
					  #end  
					  and sta.id = s.staid  
					  and sta.sku_max_length >= skusize.minsize 
  					  and sta.sku_max_length <= skusize.maxsize 
					  and td.lpcode is not null 
					  and sta.picking_list_id is null 
					  and sta.picking_type = :pickType  
					  and sta.sku_categories_id = :skuCid  
					  and sta.is_merge = 0 
					  and sta.group_sta_id is null 
  					  and sta.type = 21 
					  order by 
					  #if($lpcode) 
						  td.lpcode,	  
					  #end  
					  sta.order_create_time desc
					) sta where 
					rownum <= 20000
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPlConfig.getAllAutoStaIdByCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select staId as id from(
					select 
						sta.id staId,
						sta.order_create_time ot,
						min(line.sku_id) skuId 
					from t_wh_sta sta,
						t_wh_sta_delivery_info di,
						t_wh_sta_line line
					where sta.id = di.id
						and line.sta_id = sta.id
						and sta.status=1
						and sta.type=21
						and sta.main_wh_id=:ouId
						and di.trans_time_type not in(5,6)
						and (sta.is_special_packaging=0 or sta.is_special_packaging is null)
						and sta.special_type is null
						and sta.owner in(
							#foreach($owner in $chanelList)
							      '$owner',
							#end
							'-1'
						)
						#if($lpList)
							and di.lpcode in(
							    #foreach($lp in $lpList)
							        '$lp',
							    #end
							   '-1'
							)
						#end
						and sta.picking_type = :pickingType
						#if($isSn)
							and sta.is_sn =:isSn
						#end
						#if($sizeList)
							and( 1 != 1
								#foreach($ss in $sizeList)
								or (nvl(sta.sku_max_length,0)>= $ss.minSize and nvl(sta.sku_max_length,0)< $ss.maxSize)
								#end
							)
						#end
						#if($skuCategoryId)
							and sta.SKU_CATEGORIES_ID in(
								select sc.id from T_MA_SKU_CATEGORIES sc start with sc.id = :skuCategoryId
							connect by prior sc.id = sc.parent_sku_categories_id
						)
						#end
						#if($sendCity)
							and di.city = :sendCity
						#end
						group by sta.id,sta.order_create_time
						order by ot,skuId
					)where rownum <= :staCount
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.getPickListMergeSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select count(sta.id) from 
						T_WH_STA_PICKING_LIST p,
						t_wh_sta sta,
						t_au_operation_unit ou,
						T_AU_USER u   
						where p.id = :plid 
						and ou.id = :ouid 
						and sta.picking_list_id = :plid 
						and sta.main_wh_id = :ouid 
						and sta.status != 17
						and p.out_operator_id = u.id 
						and sta.is_merge = 1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPickingListByPlid1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select p.id as id,
							p.code as dphCode,
							p.is_cod as isCod,
							p.plan_bill_count as planBillCount,
							p.plan_sku_qty as planSkuQty,
							whlocation.code location,    
							whPickZone.code as pickZoneCode,  
							whlocation.zoon_id as zoonId, 
              		  		whlocation.sort as zoonSort,  
							sku.id skuid,
							sku.code jmskucode,
							sku.bar_code  barCode,  
							sku.ext_code1 jmCode,  
							sku.key_properties keyProperty,          
							sku.supplier_code supplierCode,
							sku.name skuName,
							sum(inv.quantity) as quantity,
							sum(inv.quantity) as qty,
							ou.name warehouseName,
							p.lpcode,
							decode(p.is_special_packaging,null,'',decode(p.is_special_packaging,0,'','需要特殊包装')) specialPackaging,
							:psize bigBox,
							a.pg_index tagNumber,
							a.idx1 || '-' || a.idx2 as batchIndex,
							to_char(inv.expire_date,'yyyyMMdd') as strExpireDate ,
							z.code as whZone
						from 
							T_WH_STA_PICKING_LIST p,
							t_au_operation_unit ou,
							T_BI_INV_SKU sku,
							T_WH_LOCATION whlocation
							left join T_WH_PICK_ZOON whPickZone on whlocation.zoon_id = whPickZone.id and whPickZone.status = 1
							LEFT JOIN t_wh_zoon z ON whPickZone.Wh_Zoon_Id=z.id,
							t_wh_sku_inventory inv,
							t_wh_sta a
						where 
						     inv.occupation_code=a.code
							and inv.sku_id=sku.id
							and inv.location_id=whlocation.id
							and p.id =:plid
							and ou.id = :ouid
							and a.picking_list_id = :plid
							and a.main_wh_id = :ouid
							#if($pickZoneId)
								#if("$pickZoneId" == "0")
									and z.id is null
								#else
									and z.id=:pickZoneId
								#end
						    #end
							and a.status !=17
						group by  p.id, p.code,p.plan_bill_count,p.plan_sku_qty,whlocation.code, whPickZone.code, whlocation.zoon_id, whlocation.sort, sku.id, sku.code,sku.bar_code,p.is_cod,
						sku.ext_code1,sku.key_properties, sku.supplier_code,sku.name,ou.name,p.lpcode,p.is_special_packaging,a.pg_index,p.is_big_box,inv.expire_date,z.code,a.idx1 || '-' || a.idx2
						order by whlocation.zoon_id, whlocation.sort,a.idx1 || '-' || a.idx2 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.findPickingListByPlid1New" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select p.id as id,
							p.code as dphCode,
							p.is_cod as isCod,
							p.plan_bill_count as planBillCount,
							p.plan_sku_qty as planSkuQty,
							whlocation.code location,    
							whPickZone.code as pickZoneCode,  
							whlocation.zoon_id as zoonId, 
              		  		whlocation.sort as zoonSort,  
							sku.id skuid,
							sku.code jmskucode,
							sku.bar_code  barCode,  
							sku.ext_code1 jmCode,  
							sku.key_properties keyProperty,          
							sku.supplier_code supplierCode,
							sku.name skuName,
							sum(sl.quantity) as quantity,
							sum(sl.quantity) as qty,
							ou.name warehouseName,
							p.lpcode,
							decode(p.is_special_packaging,null,'',decode(p.is_special_packaging,0,'','需要特殊包装')) specialPackaging,
							:psize bigBox,
							a.pg_index tagNumber,
							to_char(sl.expire_date,'yyyyMMdd') as strExpireDate ,
							z.code as whZone,
							a.idx1 || '-' || a.idx2 as batchIndex
						from 
							T_WH_STA_PICKING_LIST p,
							t_au_operation_unit ou,
							T_BI_INV_SKU sku,
							T_WH_LOCATION whlocation
							left join T_WH_PICK_ZOON whPickZone on whlocation.zoon_id = whPickZone.id and whPickZone.status = 1
							LEFT JOIN t_wh_zoon z ON whPickZone.Wh_Zoon_Id=z.id,
							t_wh_sta a,
				              t_wh_stv stv,
				              t_wh_stv_line sl
						where 
						     a.id=stv.sta_id
              				AND stv.id=sl.stv_id
							and sl.sku_id=sku.id
							and sl.location_id=whlocation.id
							and p.id =:plid
							and ou.id = :ouid
							and a.picking_list_id = :plid
							and a.main_wh_id = :ouid
							#if($pickZoneId)
								#if("$pickZoneId" == "0")
									and z.id is null
								#else
									and z.id=:pickZoneId
								#end
						    #end     
							and a.status !=17
						group by  p.id, p.code,p.plan_bill_count,p.plan_sku_qty,whlocation.code, whPickZone.code, whlocation.zoon_id, whlocation.sort, sku.id, sku.code,sku.bar_code,p.is_cod,
						sku.ext_code1,sku.key_properties, sku.supplier_code,sku.name,ou.name,p.lpcode,p.is_special_packaging,a.pg_index,p.is_big_box,sl.expire_date,z.code,a.idx1 || '-' || a.idx2
						order by whlocation.zoon_id, whlocation.sort,a.idx1 || '-' || a.idx2
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 区域下拉框 -->
	<bean id="Zoon.findPickingDistrictByPickingId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select  z.code,z.id,z.name
			              from t_wh_zoon z
			              right join T_WH_PICK_ZOON pz on pz.wh_zoon_id = z.id
			              left join t_wh_location lo on lo.zoon_id = pz.id
			              left join t_wh_stv_line vl on vl.location_id = lo.id
			              left join t_wh_stv stv on stv.id = vl.stv_id
			              left join t_wh_sta sta on sta.id=stv.sta_id 
			              left join t_wh_sta_picking_list l on l.id=sta.picking_list_id 
			              left join t_bi_warehouse se on se.ou_id = sta.main_wh_id
			              where l.id=:pickingId  and sta.main_wh_id=:ouId
			              group by z.code,z.id,z.name
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 区域下拉框 -->
	<bean id="Zoon.findPickingDistrictByPickingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select  z.code,z.id,z.name
			              from t_wh_zoon z
			              right join T_WH_PICK_ZOON pz on pz.wh_zoon_id = z.id
			              left join t_wh_location lo on lo.zoon_id = pz.id
			              left join t_wh_stv_line vl on vl.location_id = lo.id
			              left join t_wh_stv stv on stv.id = vl.stv_id
			              left join t_wh_sta sta on sta.id=stv.sta_id 
			              left join t_wh_sta_picking_list l on l.id=sta.picking_list_id 
			              where sta.main_wh_id=:ouId  
			              and  (1!= 1 
									#foreach($id in $pickingListId)
									or l.id= '$id'
									#end
						        )
			              group by z.code,z.id,z.name
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	
	<!-- 通过配货批ID查找ZOON ID -->
	<bean id="Zoon.findZoonIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select z.id
			              from t_wh_zoon z
			              right join T_WH_PICK_ZOON pz on pz.wh_zoon_id = z.id
			              left join t_wh_location lo on lo.zoon_id = pz.id
			              left join t_wh_stv_line vl on vl.location_id = lo.id
			              left join t_wh_stv stv on stv.id = vl.stv_id
			              left join t_wh_sta sta on sta.id=stv.sta_id 
			              left join t_wh_sta_picking_list l on l.id=sta.picking_list_id 
			              where sta.main_wh_id=:ouId  
			              and   
						  l.id=:pickingListId
						  group by z.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	

	<!-- 通知oms出库中间表操作 start -->
	<bean id="GymboreeReceiveData.getDataByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_GYMBOREE_RECEIVE_DATA where FCHR_CODE=:fchrCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 通知oms出库中间表操作 -->
	<bean id="WmsIntransitNoticeOms.findIntransit" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					select distinct(BATCH_CODE) from T_WH_INTRANSIT_TO_OMS where ERROR_COUNT < 10 and BATCH_CODE is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIntransitNoticeOms.findPartIntransit" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from (select * from T_WH_INTRANSIT_TO_OMS order by id) where rownum <= 1000  and batch_code is null order by rownum asc 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIntransitNoticeOms.findPartIntransitByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_INTRANSIT_TO_OMS where ERROR_COUNT < 10 and BATCH_CODE = :batchCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIntransitNoticeOms.updateNoticeById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_intransit_to_oms set error_count = :errorCount ,return_msg = :returnMsg ,last_modify_time = sysdate where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean
		id="WmsOtherOutBoundInvNoticeOms.updateOtherOutBoundInvNoticeOmsByStaCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_OTHEROUTINV_TO_OMS t set t.status = :status ,t.last_modify_time = sysdate where t.sta_code = :staCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOtherOutBoundInvNoticeOms.deleteAllNoUsedData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				delete from T_WH_OTHEROUTINV_TO_OMS tt where tt.sta_id in
                (select t.sta_id  from T_WH_OTHEROUTINV_TO_OMS t, t_wh_sta sta
                where t.sta_id = sta.id and ((t.occupation_is_send = 0 and t.status = 17) or
                (sta.status in (10, 17) and t.occupation_is_send = 0 and  t.status = 20))
                and (sta.type not in (12, 14, 15, 16, 13, 81, 22, 101, 102, 62, 64, 88)))
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOtherOutBoundInvNoticeOms.findAllOtherOutInvNoticeOms"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.sta_id from T_WH_OTHEROUTINV_TO_OMS t,t_wh_sta s where t.sta_code = s.code
                    #if("$!flag" == "occupation")
                      and t.occupation_is_send = 0 and ((t.status in (2,10) and s.type in (22,101,102,62,64) and t.finish_is_send = 2 ) or (t.status = 2 and t.finish_is_send = 4 and s.type in (88))) and t.occupation_error_count <10
                    #elseif("$!flag" == "cancel")
                      and t.occupation_is_send = 1  and t.status in (17) and t.finish_is_send in (2,4) and t.cancel_error_count < 10
                    #elseif("$!flag" == "finish")
                        and t.occupation_is_send = 1 and t.finish_is_send = 2 and  t.status in (10) and t.finish_error_count < 10
                    #elseif("$!flag" == "inbound")
                        and t.occupation_is_send = 0 and t.finish_is_send = 1 and t.status = 10 and s.type in (12,14,15,16,13,81)
                    #elseif("$!flag" == "vmiownertransfer")
                        and t.occupation_is_send = 1 and t.status = 10 and t.finish_is_send = 4 and s.type in (88)  
                    #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsOtherOutBoundInvNoticeOms.findAllVmiAdjustNoticeOms"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.sta_id from T_WH_OTHEROUTINV_TO_OMS t,t_wh_inv_check c where c.code = t.sta_code
                    #if("$!flag" == "vmiadjustment")
                       and t.occupation_is_send = 0 and t.status = 10 and t.finish_is_send = 3 
                    #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIntransitNoticeOms.findPartByErCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select * from T_WH_INTRANSIT_TO_OMS where ERROR_COUNT >= 10 and IS_SEND = 0
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIntransitNoticeOms.updateSendById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_intransit_to_oms set IS_SEND = 1  where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 通知oms出库中间表操作 end -->

	<bean id="DeailyInventory.queryDeailyInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select inv.create_time,inv.customer_id,inv.customer_code
			,inv.channel_code,inv.wh_ou_code,
			inv.customer_sku_code,inv.sales_avail_qty
			 from T_WH_DEAILY_INVENTORY inv where  create_time = :datetime and wh_ou_id=:ouid
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="DeailyInventory.updateDeailyInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	update T_WH_DEAILY_INVENTORY  set status=10 
                				WHERE create_time = :createTime
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="DeailyInventory.queryDeailyInventoryOuid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	select wh_ou_id from T_WH_DEAILY_INVENTORY where  create_time = :datetime  group by wh_ou_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.queryLogQueueBatchId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	select batch_id from T_WH_ST_LOG_QUEUE where create_time >=sysdate-1 and batch_id is not null and (error_count<30 or error_count is null) group by batch_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.updateLogQueueStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	update T_WH_ST_LOG_QUEUE set status=10 where batch_id= :batchId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.updateLogQueueEmail" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	update T_WH_ST_LOG_QUEUE set is_mail=1 where batch_id= :batchId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.updateLogQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	update T_WH_ST_LOG_QUEUE  set error_count=:count 
                				WHERE batch_id = :batchId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DeailyInventory.deleteDeailyInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	 delete T_WH_DEAILY_INVENTORY
                                 where status=10
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.deleteLogQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                delete T_WH_ST_LOG_QUEUE where status=10
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.getNeedSendDataUnit" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select 
			            u.code owner,count(distinct(sku.code)) quantity 
			          from 
			            t_bi_inv_sku sku,
			            t_wh_inventory_status st,
			            t_bi_warehouse w,
			            T_WH_WHOLE_INV_SYNCHRO_log inv,
			            t_au_operation_unit u
			          where 
			             inv.wh_ou_id=w.ou_id 
			            and inv.sku_id = sku.id
			            and inv.status=st.id 
			            and u.id = w.ou_id 
			            and inv.create_time = (select max(create_time) from T_WH_WHOLE_INV_SYNCHRO_log) 
			          group by u.code
			          union all
			          select 
			            'TOTAL' owner,
			            sum(v.sales_avail_qty) quantity 
			          from 
			            T_WH_WHOLE_INV_SYNCHRO_log v,
			            t_bi_warehouse w
			          where 
			            w.ou_id=v.WH_OU_ID 
			            and v.create_time = (select max(create_time) from T_WH_WHOLE_INV_SYNCHRO_log) 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSizeConfig.getSkuSizeConfigIdByDeatil" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_WH_SKU_SIZE_CONFIG where MAX_SIZE=:maxSize and min_size = :minSize and GROUP_SKU_QTY_LIMIT=:limitQty 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findErrorCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from t_wh_q_sta where error_count>=5 and error_count<99
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="QueueSta.findCreateStaTimeOutCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT count(1) 
					FROM t_wh_q_sta a
					WHERE a.error_count < 5
					     and a.create_time>sysdate-15
					     AND a.create_time<= (sysdate- $timeOut / 1440)
				]]>
			</value>
		</constructor-arg>
	</bean>

<bean id="QueueSta.findOrdercodeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT order_code 
					FROM t_wh_q_sta a
					WHERE a.error_count < 5
					     and a.create_time>sysdate-15
					     AND a.create_time<= (sysdate- $timeOut / 1440)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="QueueSta.deleteQueuesta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete t_wh_q_sta where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="LogQueue.findErrorCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from T_WH_ST_LOG_QUEUE where error_count>0 and create_time>= to_date(to_char(sysdate,'yyyy-MM-dd'),'yyyy-MM-dd')
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.getAllPrePackagedSkuByOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,code,name,bar_code from t_bi_inv_sku where id in(
						select distinct main_sku_id from t_pre_packaged_sku_ref where ou_id = :ouId)
					#if($barCode)
						and bar_code = :barCode
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.insertRoleTran" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 insert into t_wh_auto_role_transportator
			       (roleid,tranid)
				  values 
			       (:roleId,:tranId)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.deletePLRoleDetailById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete T_WH_AUTO_PL_ROLE_DETIAL where id = :id 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AutoPickingListRole.deletePLRoleDetailTranById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	 delete t_wh_auto_role_transportator t where t.roleid =  :id 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.finSubSkuByIdAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.id id,sku.code code,sku.name name,sku.bar_code barCode,pre.qty qty,null completeQty
					from t_bi_inv_sku sku,t_pre_packaged_sku_ref pre
					where sku.id = pre.sub_sku_id 
					and pre.main_sku_id = :skuId
					and pre.ou_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.getSkuByBarCodeAndOu" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.id id from t_bi_inv_sku sku,t_pre_packaged_sku_ref pre
					where pre.ou_id = :ouId and pre.main_sku_id=sku.id and sku.bar_code =:barCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.addPrepackagedSkuByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_PRE_PACKAGED_SKU_REF (ID, MAIN_SKU_ID, SUB_SKU_ID, QTY, OU_ID) 
          			values (
          			S_T_PRE_PACKAGED_SKU_REF.Nextval,
          			(select t.id from t_bi_inv_sku t where t.bar_code = :barCode),
          			null,
          			null,
          			:ouId
          			)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.insertPrepackagedSkuBySkuIdAndSubBarCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_PRE_PACKAGED_SKU_REF (ID, MAIN_SKU_ID, SUB_SKU_ID, QTY, OU_ID) 
                	values (
	                S_T_PRE_PACKAGED_SKU_REF.Nextval,
	                :mainSkuId,
	                (select t.id from t_bi_inv_sku t where t.bar_code = :barCode),
	                :qty,
	                :ouId
	                )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.deletePrepackagedSkuByMainSkuId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
          			delete T_PRE_PACKAGED_SKU_REF t where t.main_sku_id = :mainSkuId and t.ou_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.deletePrepackagedSkuByMainSkuIdAndSubSkuId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
          			delete T_PRE_PACKAGED_SKU_REF t where t.main_sku_id = :mainSkuId and t.sub_sku_id = :subSkuId and t.ou_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.findSkuByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
          			select t.id from t_bi_inv_sku t where t.bar_code = :barCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PrePackagedSkuRef.deleteEmptyPrepackagedSkuByMainSkuId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
          			delete from T_PRE_PACKAGED_SKU_REF t where t.main_sku_id = :mainSkuId and t.sub_sku_id is null and t.qty is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findAllStaByPickingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from t_wh_sta where picking_list_id = :id and status not in(15,17) order by pg_index
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaStatusByStaIdAndStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta sta set sta.status = :status ,sta.last_modify_time = sysdate where sta.id = :staId and sta.type in (11,81)
				]]>
			</value>
		</constructor-arg>
	</bean>

   <bean id="StaLine.updateStaLineIsCancel"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_STA_LINE line set line.is_cancel=:isCancel,line.quantity=:qty where line.order_line_no=:lineNo and line.sta_id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StaLine.updateStaLineOrderQtyIsCancel"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_STA_LINE line set line.order_qty=:qty where line.LINE_NO=:lineNo and line.sta_id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<bean id="StaLine.updateStaLineQtyIsCancel"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_WH_STA_LINE line set line.quantity=:qty,line.ext_memo='adidas',line.is_cancel='1' where line.order_line_no=:lineNo and line.sta_id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="StockTransApplication.findAllStaAndDeliveryInfoByPickingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.id,sta.skus,sta.status as intStaStatus,sta.slip_code as refSlipCode,sta.code,sta.pg_index as "index",
						di.tracking_no as trackingNo,di.is_cod as isCod,di.lpcode as lpcode,di.ext_trans_order_id as extTransOrderId
					from t_wh_sta sta,t_wh_sta_delivery_info di
					where sta.id = di.id(+)
					and sta.picking_list_id = :plId
					and sta.main_wh_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--记录 订单触发时间 -->
	<bean id="WhInfoTimeRef.insertWhInfoTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_WH_INFO_TIME_REF
				  (id, BILL_TYPE, NODE_TYPE, SLIP_CODE,  EXECUTION_TIME, CREATE_ID) 
				 values (
				 S_T_WH_INFO_TIME_REF.Nextval, 
				 :billType,
				 :nodeType,
				 :slipCode,
				 sysdate,
				 :createId
				 )

				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--记录 订单触发时间2 带仓库ID -->
	<bean id="WhInfoTimeRef.insertWhInfoTime2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_WH_INFO_TIME_REF
				 values (
				 S_T_WH_INFO_TIME_REF.Nextval, 
				 :billType,
				 :nodeType,
				 :slipCode,
				 sysdate,
				 :createId,
				 :ouId
				 )

				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhInfoTimeRef.getFirstPrintDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select min(tr.execution_time) as executionTime from T_WH_INFO_TIME_REF tr where 
					tr.slip_code=:slipCode and tr.node_type = :nodeType and tr.bill_type = :billType group by slip_code,node_type,bill_type
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhInfoTimeRef.getInfoBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id from T_WH_INFO_TIME_REF where slip_code =:slipCode and node_type =:nodeType
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 状态是取消未处理的作业单直接修改核对量 -->
	<bean id="StaLine.updateCompQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta_line e set e.complete_quantity = e.quantity where id = :staLineId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--物流省份编码维护1 -->
	<bean id="WhTransAreaNo.getFindAll" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	                   select
	                   		r.id,r.lpcode,r.province,r.area_number,r.create_time,er.user_name as crateUserName 
	                   from
	                   	    t_bi_trans_area_number r 
	                   inner join
	                   		t_au_user er on r.create_id = er.id where r.lpcode is not null
	                    #if($lpcode)
	                 	    and r.lpcode = :lpcode
	               		#end
	               		#if($province)
	                 	    and r.province like :province
	               		#end
	               	    #if($areaNumber)
	                 	    and r.area_number like :areaNumber
	               		#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 导出sql语句 -->
	<bean id="WhTransAreaNo.findSalesReportForm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select r.province,r.area_number from  t_bi_trans_area_number r
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 商品整箱数维护1 -->
	<bean id="Sku.findAllSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select p.id,p.code,p.name,p.supplier_code supplierCode,p.box_qty boxQty,p.bar_code barCode
				 from t_bi_inv_sku p where 1 = 1
		          #if($code)
		            and p.jm_code = :code
		          #end          
		          #if($supplierCode)
      				 and p.supplier_code = :supplierCode
		          #end
		          #if($name)
		           and p.name = :name
		          #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--根据slip_code查询 -->
	<bean id="PickingList.getByslipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					  SELECT f.id,f.slip_code,decode(f.node_type,'1','新建','2','配货','3','核对','4','已转出','5','已完成','6','取消未处理','7','取消已处理') as nodeType,R.USER_NAME,
                           f.execution_time FROM  T_WH_INFO_TIME_REF f  LEFT JOIN T_AU_USER R ON R.ID = F.CREATE_ID where f.slip_code = :slipCode and f.node_type in(1,2,3,4,5,6,7)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhInfoTimeRef.getInfoByUserId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select f.id,f.slip_code from  T_WH_INFO_TIME_REF f  where f.create_id = :userId and f.node_type = 12
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="OutBoundPack.findTrankNoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select
						 tracking_no as trackingNo ,id
					from
						 T_WH_OUTBOUND_PACK 
					where 
						tracking_no in (select fo.tracking_no from  t_wh_sta_delivery_info o inner join t_wh_package_info fo on fo.sta_delivery_info_id = o.id where o.id = :staId)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgSKUSync.findSfFlagSKUSync" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					    select t.sf_flag  from T_WH_MSG_SKU_SYNC t 
					    where t.sf_flag is not null and t.status in (0,1) and t.source = :source 
					    group by t.sf_flag				 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgSKUSync.findVmiMsgSKUSyncForSfFlag" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select sku.id, sku.BAR_CODE,sku.bar_code2 as barCode2,sku.sku_code, sku.sku_name,sku.BRAND_NAME,sku.type intType,
						sku.is_sn isSn,sku.sf_flag  from T_WH_MSG_SKU_SYNC sku 
						where sku.source=:source 
						and sku.status in(0,1) 
						and sku.sf_flag = :sfFlag  order by id 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 退货原因查询 -->
	<bean id="StockTransApplication.findAllReturnGoods" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					                   
			select sta.code code,sta.create_time createTime,sta.slip_code refSlipCode,sta.slip_code1 slipCode1,sta.finish_Time endCreateTime,  
			decode(d.return_reason_type,'1','7天无理由退/换货','2','商品质量问题','3','实物与订购商品不符','4','非COD订单客户拒收','5','COD订单客户拒收','6','三十天无理由退货','7','COD正常退货','99','其他')  returnReasonType,
               sta.slip_code2 slipCode2,d.tracking_No trackingNo,receiver receiver,telephone telephone,d.return_reason_memo returnReasonMemo from
               t_wh_sta_delivery_info d left join t_wh_sta sta  on sta.id=d.id 
               where sta.type=41  and status=10 and sta.main_wh_id = :ouId
                      #if($code)
			            	and sta.code = :code
			          #end          
			          #if($createTime)
							and sta.create_time >= :createTime
					  #end
					  #if($endCreateTime)
							and sta.create_time <= :endCreateTime
					   #end
			          #if($trackingNo)
			            	and d.tracking_No = :trackingNo
			          #end 
			           #if($returnReasonType)
			            	and d.return_reason_type = :returnReasonType
			          #end   
			          #if($refSlipCode)
			           		and sta.slip_code = :refSlipCode
			          #end
			          #if($slipCode1)
			          		 and sta.slip_code1= :slipCode1
			          #end
			          #if($slipCode2)
			          		 and sta.slip_code2= :slipCode2
			          #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOmsSkuLog.findMsgOmsSkuLogByTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct g.ext_code2, g.id,g.vmi_code from T_MSG_OMS_SKU_CREATE_LOG g 
					where g.CREATE_TIME <= sysdate-numtodsinterval(6,'hour') and g.CREATE_TIME > sysdate - 3 and is_mail = 0 and ext_code2 is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOmsSkuLog.updateMsgOmsSkuLogById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_MSG_OMS_SKU_CREATE_LOG set is_mail = 1 where id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findSlipCodeByid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					   select 
          pl.id as id,
          pl.code code,
          pl.status as intStatus,
          pl.plan_bill_count as planBillCount,
          pl.CHECK_BILL_COUNT as checkedBillCount,
          pl.CHECK_SKU_QTY checkedSkuQty,
          -1 as shipStaCount,
          pl.plan_sku_qty as planSkuQty,
          -1 as shipSkuQty,
          pl.create_time createTime,
          pl.CHECK_TIME as checkedTime,
          pl.PICKING_TIME as pickingTime,
          olist.name wname,
          olist.ID wid
          from t_wh_sta_picking_list pl
           inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
          where pl.wh_id= :ouId
          and pl.code = :code
          and pl.STATUS in (2,8)
          and (pl.wh_add_status is null or pl.wh_add_status = 29)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 预定义入库关闭/取消 修改作业单状态和完成时间 -->
	<bean id="StockTransApplication.updateTypeAndFinishTimeByid"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					update t_wh_sta sta set STATUS=10,finish_time=sysdate where sta.id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据条件查询可用库存效期范围 -->
	<bean id="Inventory.findInventoryByCode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					 select
					 	 max(l.name) as shopName,max(u.ext_code1) as extCode1,max(u.jm_code) as jmCode,max(y.expire_date) as maxExpDate,
					 	 min(y.expire_date) as minExpDate,max(y.production_date) as maxPDate,
					 	 min(y.production_date) as minPDate
					 from
					 	 t_wh_sku_inventory y 
					 left join
					 	 t_bi_inv_sku u on u.id = y.sku_id
 					 left join
 						 t_bi_channel l on l.code = y.inv_owner
 					left join
 						 T_WH_INVENTORY_STATUS s on s.id = y.status_id
 				     where
  						u.ext_code1 = :extCode1 and l.name = :owner and s.is_forsale = 1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 新增秒杀订单计数器功能维护 查询 -->
	<bean id="ChooseOption.findSecKillMaintain" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
				   select n.id id,n.category_name categoryName,n.category_code categoryCode,decode(n.is_available,1,'是',0,'否') isAvailables,option_value OptionValue from T_SYS_CHOOSE_OPTION n where category_code = 'secKillSKUCount'
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 新增秒杀订单计数器功能维护 修改常量值 -->
	<bean id="ChooseOption.updateOptionValue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					update T_SYS_CHOOSE_OPTION set option_value= :optionValue  where id= :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!--Id -->
	<bean id="StaLine.operationOthersOperateQueryDetails2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[ 
					select line.id            as id,
			       stvLine.QUANTITY   as quantity,
			       line.sku_cost      as skuCost,
			       sku.supplier_code  as supplierCode,
			       sku.code           as skuCode,
			       sku.name           as skuName,
			       sku.bar_code       as barCode,
			       sku.key_properties as keyProperties,
			       sku.jm_code        as jmcode,
			       d.code             AS district,
			       l.code             AS location,
			       s.NAME             AS status,
			       sku.is_sn_sku        as isSnSku
			  from t_wh_sta_line         line,
			       T_WH_INVENTORY_STATUS s,
			       T_BI_INV_SKU          sku,
			       T_WH_STA              sta,
			       t_wh_stv              stv,
			       t_Wh_Stv_Line         stvLine,
			       T_WH_DISTRICT         d,
			       T_WH_LOCATION         l
			 where sku.id = LINE.sku_id
			   and s.Id = line.INV_STATUS_ID
			   and line.sta_Id = STA.ID
			   and stv.sta_id = sta.id
			   and stvLine.staline_id = line.id
			   and d.ID = stvLine.DISTRICT_ID
			   and l.ID = stvLine.LOCATION_ID
			   and sta.ID =:staId and  sku.is_sn_sku = 1 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IdsInventorySynchronous.updateMsgStatusBywmsCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[				                   
			        update T_IDS_INV_SYNCHRONOUS s set s.sta_code=:staCode where s.Wms_Dockey=:wmsCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 配货批次分配 分页查询 -->
	<bean id="PickingList.findBatchAllocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
				select * from (			                   
			           select       
                                 l.id     id,
                                 l.code   code,
                                 decode(l.status,'2','未开始配货','8','部分完成','10','全部完成')  statusc,
                                 u.login_name        jobNumber,
                                 l.create_time       createTime,
                                 l.picking_start_time startTime,
                                 l.picking_end_time  execution_Time,
                                 decode(l.picking_status,13,'正在拣货',14,'拣货完成','未开始拣货')  nodeType,
                                 (SELECT SUM(sl.quantity) qty FROM t_wh_sta_line sl,t_wh_sta sta WHERE sl.sta_id=sta.id  AND sta.picking_list_id=l.id ) quantity
                            from t_wh_sta_picking_list l 
                            left join t_au_user u on u.id =l.picking_user
                            left join t_wh_sta sta on l.id=sta.picking_list_id
                            where l.status in (2,8,10) and sta.main_wh_id=:ouId
                           #if(!$createTime && !$endCreateDate && !$biginPickDate && !$endPickDate)
                             and l.create_time > sysdate - 91
                           #end
                           #if($createTime)
                             and l.create_time >= :createTime
                           #end
                           #if($endCreateDate)
                             and l.create_time <= :endCreateDate
                           #end
                           #if($biginPickDate)
                             and  l.picking_start_time >= :biginPickDate
                           #end
                           #if($endPickDate)
                             and l.picking_end_time <= :endPickDate
                           #end
                           #if($code)
                             and l.code = :code
                           #end
                           #if($jobNumber)
                             and  u.login_name = :jobNumber
                           #end
                           #if($statusInt)
                             and  l.status = :statusInt
                           #end
                            #if($nodeType)
                             and  l.picking_status = :nodeType
                           #end
                           
                           ) a
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ConverseYxTransferOut.saveRtnResult" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_CONVERSE_YX_TRANSFER_OUT(id,Create_Time,Version,Last_Modify_Time,Status,
					Transfer_Prefix,Receive_Date,From_Location,To_Location,Upc,Quantity,Line_Sequence_No,Transfer_No)
					select s_T_CONVERSE_YX_TRANSFER_OUT.Nextval,sysdate,sysdate,sysdate,1,c.vmi_code,
					to_char(sysdate,'yyyyMMdd'),c.vmi_code,sta.to_location,sku.ext_code2,line.complete_quantity,rownum,sta.slip_code
					from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku,t_bi_channel c
					where sta.id = :staId and line.sta_id= sta.id and line.sku_id=sku.id and c.code = sta.owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingListPackage.findPickingListPackageByTrackingNo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[				                   
					select
                 pp.id id,
                     pl.id plId,
                     nvl(ware.is_need_wrapstuff,0) isNeedWrapstuff,
                nvl(ware.is_manual_weighing,0) isManualWeighing,
                     pp.tracking_no trackingNo,
                     pl.code plCode,
                     pl.lpcode lpcode
                  from 
                      t_wh_picking_package pp,
                      t_wh_sta_picking_list pl,
                      t_bi_warehouse ware,
                      t_wh_sta t
                  where       
                      pp.picking_list_id = pl.id
                      and t.picking_package_id = pp.id
                      and ware.ou_id = pl.wh_id
                      and pl.status in (2,8) 
                      and pp.status = 3
                      and t.status =3                     
                    and pp.tracking_no = :trackingNo
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="VmiInventoryMovementData.findBillNoListByExecuteStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select distinct a.bill_no from T_VMI_INV_MOVEMENT_DATA a where a.execute_status=1 
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean
		id="VmiInventoryMovementData.findInventoryMovementListByBillNoExecuteStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select a.* from T_VMI_INV_MOVEMENT_DATA a where a.BILL_NO=:billno and a.execute_status=1
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="VmiInventoryMovementData.updateInvMovementListStatusByBillNo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update T_VMI_INV_MOVEMENT_DATA c set c.EXECUTE_STATUS='10',c.EXECUTE_TIME=sysdate where c.BILL_NO=:billno
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="VmiInventoryMovementData.updateInvMovementListICCodeByBillNo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update T_VMI_INV_MOVEMENT_DATA c set c.IC_CODE=:iccode where c.BILL_NO=:billno
						]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 全量库存同步 系统日志 -->
	<bean id="SystemLog.insertSystemLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				   	insert into t_sys_log
				    (id, type, node, status, create_time) 
				 	values (
						 S_T_SYS_LOG.Nextval, 
						 :type,
						 :node,
						 :status,
						 sysdate
				 )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 全量库存同步 上传任务记录 -->
	<bean id="SystemLog.insertTaskLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				   	insert into t_wh_task_log
				    (id, create_time, update_time, type, status) 
				 	values (
						 S_T_WH_TASK_LOG.Nextval, 
						 sysdate,
						 sysdate,
						 :type,
						 :status
				 )
				]]>
			</value>
		</constructor-arg>
	</bean>
	
  
	<!-- 全量库存同步 -->
	<bean id="WholeInventorySynchro.totalInventorySyn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into T_WH_WHOLE_INV_SYNCHRO(id, create_time, customer_id, customer_code, channel_code, wh_ou_id, wh_ou_code, sku_id, customer_sku_code,sales_avail_qty)
						select S_T_WH_TOTAL_INVENTORY.nextval,:datetime,customer_id,cusomer_code,channel_code   ,wh_ou_id,wh_ou_code,sku_id,customer_sku_code,qty
						from(
						select cm.id customer_id,cm.code cusomer_code,wh.id wh_ou_id,wh.code wh_ou_code,channel.code channel_code,nvl(inv.avail_qty,0) - nvl(oqty.qty,0) qty,sku.id sku_id,sku.customer_sku_code customer_sku_code
						from v_wh_sales_inventory inv
						     left join v_wh_occupied_inventory oqty
						     on inv.sku_id = oqty.sku_id
						        and inv.wh_ou_id = oqty.wh_ouId
						        and inv.owner = oqty.owner
						     inner join t_bi_channel channel on channel.code = inv.owner
						     inner join t_bi_customer cm on cm.id = channel.customer_id
						     inner join t_au_operation_unit wh on wh.id = inv.wh_ou_id
						     inner join t_bi_inv_sku sku on sku.id = inv.sku_id
						) inv
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySynchro.queryTotalInventoryOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	                	select wh_ou_id from T_WH_WHOLE_INV_SYNCHRO where  create_time = :datetime  group by wh_ou_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySynchro.queryTotalInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select inv.create_time,inv.customer_id,inv.customer_code
			,inv.channel_code,inv.wh_ou_code,
			inv.customer_sku_code,inv.sales_avail_qty
			 from T_WH_WHOLE_INV_SYNCHRO inv where  create_time = :datetime  and wh_ou_id=:ouid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySynchro.addTotalInventoryLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				       insert into T_WH_WHOLE_INV_SYNCHRO_log(id,log_time, create_time, customer_id, customer_code, channel_code, wh_ou_id, wh_ou_code, sku_id, customer_sku_code,sales_avail_qty)
						select id,sysdate,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,customer_sku_code,sales_avail_qty
						from(					
								  SELECT t.id,t.create_time,t.customer_id,t.customer_code,t.channel_code,t.wh_ou_id,t.wh_ou_code,t.sku_id,t.customer_sku_code,t.sales_avail_qty FROM T_WH_WHOLE_INV_SYNCHRO  T 
                				WHERE t.create_time = (select max(create_time) from T_WH_WHOLE_INV_SYNCHRO)
						) inv
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySynchro.deleteTotalInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete T_WH_WHOLE_INV_SYNCHRO
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WholeInventorySynchro.findSyncInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT count(t.id) as lineCount,sum(t.sales_avail_qty) as qtyCount FROM T_WH_WHOLE_INV_SYNCHRO  T 
                				WHERE t.create_time = :datetime
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findInventoryByLocationOuIdOwnerSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select s.location_id from t_wh_sku_inventory s where 
						s.inv_owner= :owner
						and s.ou_id = :ouid 
						and s.quantity > 0 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransVoucher.getInvStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select l.inv_status_id as invS
							from t_wh_stv_line l where 
							l.stv_id = :stvId 
							and l.sku_id = :skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.findStaLogByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						log.invs_tatus_id as invStatus,
						log.location_id as locationCode,
						log.sku_id as skuCode,
						log.quantity as inQty 
						from 
						t_wh_sta sta,
						t_wh_stv stv,
						t_wh_st_log log
						where 
						sta.id = :staid 
						and stv.sta_id = sta.id 
						and log.stv_id = stv.id 
						order by log.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransTxLog.findLocLogByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					    loc.is_mixtime as isMixTime,
						log.sku_id,
						log.quantity,
						sta.type as staType,
						log.expire_date,
						log.production_date
						from 
						t_wh_st_log log,
				        t_wh_location loc,
				        t_wh_Sta sta
						where sta.id= :staId and  sta.code=log.sta_code
					    and log.location_id=loc.id
						
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findInboundStaFinish" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
						select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.SLIP_CODE1 as slipCode1,
								sta.type as intStaType,
								sta.status as intStaStatus,
								sta.memo,
								cnl.name channelName,
								sta.owner,
								sta.create_time,
				                sta.type,
				                sta.status
							from 
								t_wh_sta sta,
								t_bi_channel cnl
              				where 
                      				sta.type = 81 
									and sta.owner = cnl.code 
									and sta.main_wh_id = :ouId 
									and not exists (select 1 from t_wh_sta t where t.group_sta_id = sta.id and t.status in(1,5))
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($owner)
									and sta.owner like  :owner
								#end
								#if($intStatus)
									and sta.status = :intStatus 
								#end
								
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStaLineByStaFinish" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					sku.id,
					sku.id as skuId,
					sku.BAR_CODE as barCode,
					sku.SUPPLIER_CODE as supplierCode,
					sku.KEY_PROPERTIES as keyProperties,
					sku.NAME  as skuName,
					stal.complete_quantity as receiptQty 
					from t_wh_sta_line stal,
					t_bi_inv_sku sku
					where stal.sta_id=:staId
					and stal.sku_id=sku.id
					group by sku.id,sku.BAR_CODE,sku.SUPPLIER_CODE,sku.KEY_PROPERTIES,sku.NAME,stal.complete_quantity 
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannelGroup.findChannelGroupByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select cg.id,cg.code,cg.name,cg.create_time,cg.wh_ou_id as ouId,cg.sort 
                	from t_wh_bi_channel_group cg, 
                		 t_au_operation_unit ou
					where cg.wh_ou_id = ou.id
                	and ou.id = :ouId  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findCathKidstonRDSEQ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select S_T_WH_CATHKIDSTON_RD_SEQ_NO.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查找OTO目的地编码 -->
	<bean id="ChooseOption.findOtoLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select option_key, option_value from T_SYS_CHOOSE_OPTION a where category_code = :code
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ChooseOption.getChooseOptionByCodeEsprit" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
					<![CDATA[
		select option_key, b.name as option_value from T_SYS_CHOOSE_OPTION a,t_bi_channel b  where a.option_key=b.code and a.category_code =:categoryCode
					]]>
				</value>
			</constructor-arg>
		</bean>
	<!--删除特殊订单 中间表-->
	<bean id="WhOrderSpecialExecute.delSpecialExecute" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from  T_WH_ORDER_SPECIAL_EXECUTE e
				    where e.q_id=:qId
				]]>
			</value>
		</constructor-arg>
	</bean>
		
	<!--记录 特殊类型日志 -->
	<bean id="WhOrderSpecialExecute.inserSpecialExecuteLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_WH_ORDER_SPECIAL_EXECUTE_LOG
				  (id, Q_ID,  TYPE,  MEMO) 
				 values (
				 S_ORDER_SPECIAL_EXECUTE_LOG.Nextval, 
				 :qId,
				 :type,
				 :memo
				 )

				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.insertIncrementInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			insert into t_wh_st_log_queue(
            	id,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,
            	customer_sku_code,trans_type_name,sales_avail_qty
          	)
            select 
                s_t_wh_st_log_queue.nextval,sysdate,c.id,c.code,inv.inv_owner,inv.ou_id,ou.code,inv.sku_id,
                sku.code,tt.name,-inv.quantity
            from 
  				t_wh_sku_inventory inv,t_bi_warehouse w,t_wh_inventory_status s,
  				t_au_operation_unit ou,t_bi_inv_sku sku,t_wh_sta sta,
  				t_wh_stv stv,T_WH_TRANSACTION_TYPE tt,t_bi_customer c
  			where 
  				sta.id = :id and stv.sta_id = sta.id 
  				and tt.id = stv.transtype_id and inv.occupation_code=sta.code 
  				and inv.ou_id = ou.id and w.ou_id=ou.id and w.op_mode=1 
          		and w.customer_id = c.id and c.code <> 'adidas'
  				and inv.status_id = s.id and s.is_forsale=1
  				and sku.id = inv.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.insertIncrementInv2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			insert into t_wh_st_log_queue(
            	id,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,
            	customer_sku_code,trans_type_name,sales_avail_qty
          	)
            select 
                s_t_wh_st_log_queue.nextval,sysdate,c.id,c.code,inv.inv_owner,inv.ou_id,ou.code,inv.sku_id,
                sku.code,tt.name,inv.quantity
            from 
  				t_wh_sku_inventory inv,t_bi_warehouse w,t_wh_inventory_status s,
  				t_au_operation_unit ou,t_bi_inv_sku sku,t_wh_sta sta,
  				t_wh_stv stv,T_WH_TRANSACTION_TYPE tt,t_bi_customer c
  			where 
  				sta.id = :id and stv.sta_id = sta.id 
  				and tt.id = stv.transtype_id and inv.occupation_code=sta.code 
  				and inv.ou_id = ou.id and w.ou_id=ou.id and w.op_mode=1 
          		and w.customer_id = c.id and c.code <> 'adidas'
  				and inv.status_id = s.id and s.is_forsale=1
  				and sku.id = inv.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.insertIncrementInvWhenSalesQtyChange" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			insert into t_wh_st_log_queue(
                  id,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,
                  customer_sku_code,trans_type_name,sales_avail_qty
            )
            select 
                  s_t_wh_st_log_queue.nextval,sysdate,c.id,c.code,stvLine.owner,
                  stvLine.wh_id,ou.code,stvLine.sku_id,sku.code,tt.name,
                  (case when stv.direction = 1 then stvLine.quantity else -stvLine.quantity end)
            from  t_wh_sta sta, t_wh_stv stv, t_wh_stv_line stvLine, 
                  t_au_operation_unit ou,t_bi_warehouse w,t_wh_inventory_status s,
                  t_bi_inv_sku sku,t_wh_transaction_type tt,t_bi_customer c     
	        where 
		          sta.id = :staId 
		          and stv.sta_id = sta.id 
		          and stv.id=stvLine.stv_id
		          and tt.id = stv.transtype_id 
		          and stvLine.wh_id = ou.id 
		          and w.ou_id=ou.id 
		          and w.customer_id = c.id and c.code <> 'adidas'
		          and stvLine.inv_status_id = s.id and s.is_forsale=1
		          and sku.id = stvLine.sku_id
		          and stv.status =10
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.findStLogByInventoryCheckId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
								l.id as id,
								l.sku_id as skuId,
								l.quantity as quantity,
								l.invs_tatus_id as invStatusId,
								l.direction as intDirection
								from t_wh_st_log l 
								where l.inventory_check_id = :invId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SfExpressTypeConfig.findSfExpressTypeByCondition" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select express_type from T_BI_SF_EXPRESSTYPE where TRANS_TIME_TYPE=:transTimeType and TRANS_DELIVERY_TYPE=:deliveryType and LPCODE=:lpCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ShopStoreInfo.findAllShopStore" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,code,name,receiver,telephone,address,create_time as createTime,last_modify_time as lastModifyTime，country as country,province as province,city as city,district as district 
					from T_BI_SHOP_STORE
					#if($code)
						where code = :code
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseMsgSku.getMsgSkuByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select * from T_WH_THREEPL_SKU u where u.status = 1 and (u.error_Count < 5  or u.error_count is null)  and u.source = :code       		
					order by u.carete_time
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.getInboundOrderByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              select u.sta_code,max(u.SOURCE) as source,max(u.shop_id) as shopId,max(u.SOURCEWH) as sourceWh,max(u.TYPE) as TYPE,max(u.id) as id from T_WH_MSG_INBOUND_ORDER u where (u.status = 1 or u.status = 0) and (u.error_Count < 5  or u.error_Count  is null)
               		and u.source =:code group by u.sta_code 
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.getOutboundOrderByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select * from T_WH_MSG_OUTBOUND_ORDER u where (u.status = 1 or u.status = 0) and (u.error_Count < 5  or u.error_Count  is null)
               		    and u.source =:code
					order by u.create_time

			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findInboundQueryDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select max(execute_time) as exeQueryDate from T_WH_THREEPL_INBOUND_QUERY where type =:type
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgInboundOrder.insertWlbInQueryTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					insert into T_WH_THREEPL_INBOUND_QUERY
				 values (
				 S_THREEPL_INBOUND_QUERY.Nextval, 
				 :endTime,
				 :type
				 )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ConvenienceStoreOrderInfo.findConvenienceStoreOrderInfo"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.code erpOrderCode,
						di.address address,
						p.tracking_no trackingNo,
						di.receiver receiver,
						nvl(di.mobile,di.telephone) telephone,
						sta.outbound_time outboundTime,
						p.weight weight,
						nvl(di.remark,sta.memo) memo,
						di.lpcode lpCode
					from 
						t_wh_sta sta,
						t_wh_sta_delivery_info di,
						t_wh_package_info p
					where 
						sta.type in(21,25,42) 
						and sta.status in(4,10) 
						and di.id = sta.id 
						and di.convenience_store is not null
						and p.sta_delivery_info_id = di.id
						and sta.outbound_time>=:fromDate
						and sta.outbound_time<=:endDate
						and sta.main_wh_id = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuWarehouseRef.findRefByBand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select e.source as source ,e.source_wh as sourceWh ,e.channel_id as channelId from t_wh_msg_sku_wh_ref e where e.brand_id =:brandId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrderCancel.getMsgOutboundByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select l.* from T_WH_MSG_OUTBOUND_ORDER_CANCEL l left join t_wh_sta a on a.code = l.sta_code where a.wlb_order_code is not null and l.source ='WLB' and l.status = 1 and (l.error_Count < 5  or l.error_Count  is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ShopStoreInfo.editShopStoreByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_BI_SHOP_STORE t set t.name=:name,t.receiver=:receiver,
					t.telephone=:telephone,t.address=:address,t.last_modify_time=sysdate,t.country=:country,
					t.province=:province,t.city=:city,t.district=:district where t.code = :code
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseMsgSku.updateMsgSkuById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update T_WH_THREEPL_SKU set status =:status where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgInboundOrder.updateInboundById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update T_WH_MSG_INBOUND_ORDER set IS_MAIL = 1 where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrder.updateOutboundById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update T_WH_MSG_OUTBOUND_ORDER set IS_MAIL = 1 where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AFLFInventoryInfo.insertAFLFInventoryInfoReport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              insert into AF_INVENTORY_COMPARE_REPORT(id,Create_Date,Inventory_Status,Upc,Lifeng_Qty,Baozun_Qty,Status,Difference_Qty)
           select S_AF_INV_COM_REPORT.Nextval,sysdate,inventoryStatusId,sku,LFLonhandQty,bz,1,bz-LFLonhandQty
             from (
                  select
                          d.status as inventoryStatusId,
                          d.sku,
                          nvl(totalQty,0) LFLonhandQty,
                          nvl(a.quantity,0) bz
                   from (
                   select af.sku,af.status,sum(af.total_qty) totalQty  from AF_LFINVENTORY_INFO af where 
                   af.compare_status=1  and af.create_date>=:today and af.storer_key=:vimCode
                   group by af.sku,af.status ) d
                   left join (
                              select sum(t.quantity) quantity,
                                     s.ext_code2,
                                     t.status_id 
                              from T_WH_SKU_INVENTORY t
                   join t_bi_inv_sku s on (s.id=t.sku_id)
                   where t.inv_owner=:innerShopid  and t.ou_id=:ouid and t.status_id is not null group by s.ext_code2,t.status_id ) a on (d.sku=a.ext_code2 and d.status=a.status_id)
            union
                   select 
                          t.status_id as inventoryStatusId,
                           s.bar_code,
                          sum(0) LFLonhandQty,
                          sum(t.quantity) bz
                    from T_WH_SKU_INVENTORY t
                    join t_bi_inv_sku s  on (s.id=t.sku_id)
                    join (
                  select  
                          s.bar_code upc,
                          t.status_id as inventoryStatusId
                   from T_WH_SKU_INVENTORY t
                   join t_bi_inv_sku s on (s.id=t.sku_id)
                   where   t.inv_owner=:innerShopid and t.ou_id=:ouid and t.status_id is not null group by s.bar_code, t.status_id
                      minus
                  select  d.sku upc,
                           d.status as inventoryStatusId
                    from AF_LFINVENTORY_INFO d
                   where d.compare_status=1 and d.create_date>=:today and d.storer_key=:vimCode
                    ) c on (s.bar_code=c.upc) and (t.status_id=c.inventoryStatusId)  and t.status_id is not null
                     group by s.bar_code,t.status_id
            ) v
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnInboundOrder.findRtnInboundByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select * from T_WH_MSG_RTN_INBOUND u where (u.status = 1 or u.status = 0) and (u.error_Count < 5  or u.error_Count  is null)
				      	  and (1!= 1 
							  #foreach($source in $sourceList)
							      or u.source= '$source'
							  #end
						  )
					order by u.create_time
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutbound.findRtnOutboundByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select * from T_WH_MSG_RTN_OUTBOUND u where (u.status = 1 or u.status = 0) and (u.is_mq is null or  u.is_mq='0') and (u.error_Count < 5  or u.error_Count  is null)
               		and (1!= 1 
							  #foreach($source in $sourceList)
							      or u.source= '$source'
							  #end
						  )
					order by u.create_time
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrder.updateRtnInboundById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update T_WH_MSG_RTN_INBOUND set IS_MAIL = 1 where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnOutbound.updateRtnOutboundById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update T_WH_MSG_RTN_OUTBOUND set IS_MAIL = 1 where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuWarehouseRef.findSkuRefBinnael" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select distinct channel_id as channelId from t_wh_msg_sku_wh_ref where source =:source
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuWarehouseRef.findBrandByRefSource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select distinct brand_id as brandId from t_wh_msg_sku_wh_ref where source =:source
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrderCancel.updateMsgCancelById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update T_WH_MSG_OUTBOUND_ORDER_CANCEL set IS_MAIL = 1 where id =:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取配货失败缺货sku信息 -->
	<bean id="StaErrorLine.findStaFailure" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select sta.code        as code,
					        sta.slip_code2     as slipCode2,
					        to_char(sta.create_time,'yyyy-MM-dd')    as createTime,
					        sku.code           as skuCode,
					        sku.name           as skuName,
					        sku.bar_code       as barCode,
					        sku.supplier_code  as supplierCode,
					        sku.key_properties as keyProperties,
					        er.quantity        as quantity
					   from t_wh_sta_error_line er, t_wh_sta sta, t_bi_inv_sku sku
					  where er.sta_id = sta.id
					    and er.sku_id = sku.id
					    and sta.status = 20
					    and sta.type=21
					    and sta.main_wh_id = :ouid
						
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PdaOrderLineSn.findPdaLineSnListById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
					t.id as id,
					t.sn_code as snCode 
					from t_wh_pda_order_line_sn t where t.pda_order_line_id = :plId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取 相关单据号和配货批编码 -->
	<bean id="PickingList.findSlipCodeAndPickingListCodeByStaCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
							select sta.id as id, sta.code as staCode, sta.slip_code as slipCode, li.code as supplierCode
								  from t_wh_sta sta, t_wh_sta_picking_list li
								 where sta.picking_list_id = li.id
								   and sta.code = :code
								   and sta.main_wh_id = :ouId
						
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannel.getIsSpecialByStaAndSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						case when (t.flag+t1.flag1)>0 then 1 else 0 end 
					from 
						(select case when count(1)>0 then 1 else 0 end as flag from t_bi_channel c,t_wh_sta sta,t_wh_sta sta1 where sta.code = :staCode
						and sta.slip_code1 = sta1.slip_code1 and sta1.type =21 and sta1.is_special_packaging =1 and (sta1.special_type is null or
						sta1.special_type = 0) and c.code =sta.owner
						and c.special_type = 1)t,
						(select case when count(1)>0 then 1 else 0 end as flag1 from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku,t_bi_channel c
						where sta.code = :staCode and line.sta_id = sta.id and line.sku_id  = sku.id and sku.bar_code = :barCode
						and c.code = sta.owner and c.special_type =1 and (line.unit_price>:priceLimit )) t1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="BiChannel.getIsSpecialByStaAndSku1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						case when (t.flag+t1.flag1)>0 then 1 else 0 end 
					from 
						(select case when count(1)>0 then 1 else 0 end as flag  from 
                         t_bi_inv_sku sku where sku.id in(select sku_id from t_bi_qs_sku s where s.ou_id=:ouId)  and sku.bar_code=:barCode)t,
						(select case when count(1)>0 then 1 else 0 end as flag1 from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku,t_bi_channel c
						where sta.code = :staCode and line.sta_id = sta.id and line.sku_id  = sku.id and sku.bar_code = :barCode
						and c.code = sta.owner and c.special_type =1 and (line.unit_price>:priceLimit )) t1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.updateDefaultStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta_line set default_status = 1 where id in(
					select line.id from t_wh_sta_line line,t_wh_sta sta,t_bi_inv_sku sku
					where line.sta_id = sta.id and sta.code = :staCode and line.sku_id = sku.id
					and sku.bar_code = :barCode)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Carton.checkCartonstatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select t.id as id from T_WH_CARTON t where t.sta_id = :staid and t.status = 10
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Carton.checkCartonSeqNoStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select t.id as id from T_WH_CARTON t where t.sta_id = :staid and  t.seqno= :seqNo
				]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="AgvOutBound.agvOutBoundDaemon" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select o.id  from T_AGV_OUTBOUND o,t_wh_sta s   where o.sta_code=s.code and s.status not in (15,17) and o.status =0 and o.error_count <5  and rownum <=1000 order by o.id desc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="AdPackageLineDeal.adPackageUpdate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select d.id from wms.t_ad_package_line_deal d where d.is_send=0 and (d.num is null or  d.num <5) and  d.status  in (2) and d.op_status='1'  order by d.last_update_time asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="AdPackageLineDeal.getAdPackageLineDealDtoByAdOrderId" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
	                <![CDATA[
					select d.* from wms.t_ad_package_line_deal d where  d.ad_order_id=:adOrderId
					]]>
				</value>
			</constructor-arg>
		</bean>


	<bean id="AgvOutBound.agvByStaCodeAndPlCodeInBound" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
	                <![CDATA[
select line.sku_id as skuId,line.quantity ,to_char(line.expire_date,'yyyyMMdd') as expireDateStr  from t_agv_outbound o ,t_agv_outbound_line line where  line.agv_id=o.id and o.sta_code=:staCode
					]]>
				</value>
			</constructor-arg>
		</bean>
		
		<bean id="InboundAgvToHub.inboundAgvToHubByApiName" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
	                <![CDATA[
				select h.*  from t_wh_in_agv_to_hub h  where h.sta_id=:staId and h.api_name=:apiName
					]]>
				</value>
			</constructor-arg>
		</bean>
		
		

	<bean id="AgvOutBound.getAgvOutBoundByStaCode" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
	                <![CDATA[
					select p.*  from T_AGV_OUTBOUND p  where p.sta_code=:staCode
					]]>
				</value>
			</constructor-arg>
		</bean>


	<bean id="AgvOutBoundLine.getAgvOutLineListByAgvId" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
	                <![CDATA[
				select  s.code as skuCode,p.*,to_char(p.expire_date,'yyyyMMdd') as expireDateStr from  T_AGV_OUTBOUND_line p,t_bi_inv_sku s  where p.sku_id=s.id(+) and  p.agv_id =:agvId
					]]>
				</value>
			</constructor-arg>
		</bean>





	<bean id="StaDeliveryInfo.printSingleVmiDelivery" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select d.id as id,
       w.departure as departure,
       cmpou.name as cmpname,
       --p.plan_bill_count as totalBillQty,
       --p.to_location as toLocation,
       d.trans_big_word as transBigWord,
       carton.tracking_no as trackingNo,
       to_char(sysdate, 'yyyy-MM-dd') as printTime,
       --p.code as pickingListCode,
       d.lpcode as lpcode,
       m.name as expName,
       d.address as address,
       d.country as country,
       d.province as province,
       d.city as city,
       d.district as district,
       d.zipcode as zipcode,
       d.lpcode as lpcode,
       d.telephone as telephone,
       d.remark as remark,
       d.mobile as mobile,
       case
         when d.mobile is null then
          d.telephone
         when d.telephone is null then
          d.mobile
         else
          d.mobile || ',' || d.telephone
       end as receverTel,
       d.receiver as receiver,
       d.transfer_fee as transferFee,
       sta.slip_code as refSlipCode,
       sta.code code,
       nvl(sa.shop_name, shop.name) as owner,
       whou.name as warehouseName,
       nvl(sa.shop_name, shop.name) as sender,
       nvl(sa.send_warehouse_name,w.address) as senderAddress,
       nvl(sa.contacts_phone,shop.telephone) as senderTel,
       '' as senderMobile,
       shop.zipcode as sendZipCode,
       transSF.jcustid as jcustid,
       w.CITY_CODE as sfWhCode,
       decode(d.is_cod, '1', '是', '否') as isSupportCod,
       sta.pg_index as pgindex,
       skuline.qty as quantity,
       sta.slip_code2 as slipCode2,
       d.trans_city_code as transCityCode,
       decode(d.is_cod, '1', nvl((nvl(sta.total_actual, 0) + nvl(d.transfer_fee, 0)), 0), null) as amount,
       sta.total_actual as totalactual,
       sta.order_total_actual as ordertotalactual,
       nvl(sta.order_transfer_free,0) orderTransferFree,
       fn_getregion_forwritebig(d.address, d.province, d.city, d.district) as bigAddress,
       decode(sta.is_rail_way,5,1,1,1,0) as isRailway,
       d.trans_type as transTypeB,
       d.trans_time_type as transTimeTypeB,
       d.trans_memo as transmemo,
       sa.contacts as contacts,
       sa.ext1 as ext1,
       sta.pg_index as pgIndex,
       shop.code as channelCode,
       shop.id as channelId,
       d.insurance_amount as insuranceAmount,
       skuline.barCode as barCode,
       skuline.staQuantity as staQuantity,
       decode(d.is_trans_cod_pos, '1', '是', '否') as isTransCodPos   
  from t_wh_sta               sta,
       t_wh_sta_delivery_info d,
       --t_wh_sta_picking_list  p,
       t_ma_transportator     m,
       T_WH_CARTON carton,
       (
       select stragg(sku.bar_code) as barCode,stragg(cl.qty) as staQuantity,wc.id as cartonId,sum(cl.qty) qty,
       COUNT(1) from T_WH_CARTON wc,T_WH_CARTON_LINE cl,t_bi_inv_sku sku 
       where wc.sta_id= :staid 
             and cl.carton_id=wc.id
             and cl.sku_id=sku.id
       GROUP BY wc.id having count(1)>0
       ) skuline,
       t_bi_channel           shop
  left join t_bi_channel_special_action sa on sa.channel_id = shop.id  and sa.type = 30, 
  t_bi_warehouse w, 
   t_au_operation_unit whou,
   t_au_operation_unit yun, 
   t_au_operation_unit cmpou
      left join t_wh_trans_sf transSF
        on transSF.ou_id = cmpou.id
 where sta.id = d.id
 	and carton.sta_id=sta.id
   --and sta.picking_list_id = p.id
   and m.exp_code = d.lpcode
   and w.ou_id = sta.main_wh_id
   and shop.code = sta.owner
   and whou.id = w.ou_id
   and yun.id = whou.parent_ou_id
   and cmpou.id = yun.parent_ou_id
   and sta.create_time >= sysdate - 180
   and sta.status != 15
   and sta.status != 17 
   and skuline.cartonId = carton.id
    and sta.id = :staid 
    and carton.tracking_no is not null
    #if($cartonId)
    	and carton.id=:cartonId
    #end
 order by sta.pg_index

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.printCategeryAndQtyDeliveryByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select sku.category as categoryName, sum(t.quantity) as categoryTotal
                from t_wh_stv_line t, t_bi_inv_sku sku, t_wh_sta sta, t_wh_stv stv
                where sku.id = t.sku_id
   				and sta.id = stv.sta_id
   				and stv.id = t.stv_id
   				and sta.id = :staId
   			    and sku.country_of_origin is not null
 				group by sku.category
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseMsgSku.findMsgSKuByTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					               
 				select
             u.uuid,u.id,nvl(sku.VALID_DATE, 0) validDate,es.sku_categories_name as categories,sku.ext_code1 as extCode1,sku.ext_code2 as extCode2,u.code,u.bar_code,u.bar_code,u.supplier_code,u.name,u.en_name,u.color,u.sku_size,u.length,u.width,u.height,u.is_sn,u.source,u.wh_code,d.name as brandName,sku.store_mode as storeMode
           from
               T_WH_THREEPL_SKU u
             left join
                 t_bi_inv_sku sku 
             on
                 sku.code = u.code  
             left join 
                 t_bi_brand d 
             on
                 d.id = u.brand 
             left join 
                  T_MA_SKU_CATEGORIES es
             on 
                  es.id = sku.sku_categories_id
   			 where 
              	 	 u.carete_time >=:startTime
            	and 
              	     u.carete_time <=:endTime and  u.source =:source and  u.status != 0 order by u.uuid 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.findMsgInListByDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select *  from T_WH_MSG_INBOUND_ORDER u  where
					 	   create_time >=:startTime
				     and 
 						  create_time <=:endTime
					 and 
					 	 source =:source
					 and type != 41
					 order by create_time
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.findMsgInListByDate2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select *  from T_WH_MSG_INBOUND_ORDER u  where
					 	   create_time >=:startTime
				     and 
 						  create_time <=:endTime
					 and 
					 	 source =:source
					 and type = 41
					 order by create_time
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrderCancel.findMsgCancelListByDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select u.id,u.uuid,u.sta_code,a.type as staType from T_WH_MSG_OUTBOUND_ORDER_CANCEL u  left join 
					 t_wh_sta a on a.code = u.sta_code where
					 	  u.create_time >=:startTime
				     and 
 						  u.create_time <=:endTime
					 and 
					 	  u.source =:source
					 and 
					      u.is_canceled is null
				     order by u.create_time
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrderCancel.findMsgCancelListKey" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
							select * from t_wh_msg_outbound_order_cancel where iskey=0 and is_canceled is not null and systemKey is not null and status=10
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseMsgSku.getThreePlSeq" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select S_T_WH_THREEPL_SEQ.nextval id from dual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findMsgOutListByDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select *  from T_WH_MSG_OUTBOUND_ORDER u  where
					 	  create_time >=:startTime
				     and 
 						  create_time <=:endTime
					 and 
					 	  source =:source
					 and
					      sta_type not in (21,42)
					 	
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgOutboundOrder.findMsgOutListByDate2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select * from (select (select count(id)  from T_WH_MSG_OUTBOUND_ORDER u  where
					 	  create_time >=:startTime
					 and (is_locked =0 or is_locked is null)
				     and 
 						  create_time <=:endTime
					 and 
					 	  source =:source
					 and
					      sta_type in (21,42)) as countSum,r.* from (
					select u.* ,Rownum rn from T_WH_MSG_OUTBOUND_ORDER u  where
					 	  create_time >=:startTime
					 	  and (is_locked =0 or is_locked is null)
				     and 
 						  create_time <=:endTime
					 and 
					 	  source =:source
					 and
					      sta_type in (21,42)
					 order by 
					 	  create_time,id) r where r.rn >:startNum and r.rn<=:endNum)
					 	
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MsgOutboundOrder.findSalesOrderSendToLFFailedMailIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				    select wm_concat(o.status||'==>'||nvl(count(1),0))  from t_wh_msg_outbound_order o,t_wh_sta sta
				    where o.source = :source
				         and o.status in (1,2,-1,5)
				         and o.sta_code=sta.code
             			 and sta.status <> '17'
				         and o.create_time>sysdate-7
				         and o.create_time<sysdate-1/24*:time
				    group by o.status 	
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrderLine.findMsgInLineBySkuCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
						 sku_code as skuCode,sum(qty)  as qty
					from
						 T_WH_MSG_RTN_INBOUND_line e 
					where
						 msg_rtn_inorder_id in (select id from T_WH_MSG_RTN_INBOUND where uuid=:batchId)  and sku_code =:skuCode group by sku_code

				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getEmsTranNoByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select trans_no from t_wh_trans_provide_no where rownum=1 
								and sta_id is null 
								and lpcode=:lpcode 
								#if($owner)
								and owner= :owner
								#end
								#if($isCod)
								and is_cod=:isCod 
								#else
								and is_cod=0
								#end
								
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getTranNoNumberByLpCodeAndRegionCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select count(1) from t_wh_trans_provide_no 
			            where 
			            lpcode=:lpcode
			            and sta_id is null
			            #if($regionCode)
			            and regionCode=:regionCode
			            #else
			            and regionCode is null
			            #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getEmsTranNoByLpcodeAndAccount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select trans_no from
					(select trans_no from t_wh_trans_provide_no where rownum<=500 
						and sta_id is null 
						and lpcode=:lpcode 
						#if($owner)
						and owner= :owner
						#end
						#if($isCod)
						and is_cod=:isCod 
						#else
						and is_cod=0
						#end
						#if($account)
						and EMS_ACCOUNT= :account
						#end
					order by dbms_random.value)
				where rownum=1								
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 配货规则维护 -->
	<bean id="DistributionRule.findAllDistributionRule" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.id as id , t.name as name,a.user_name as createName, t.create_time as createTime,
					t.last_modify_time as lastModifyTime,t.status as intStatus,decode(t.status,'1','启用','2','禁用','') as strStatus 
					from t_wh_distribution_rule t ,t_au_user a ,t_au_operation_unit au  where t.creator_id = a.id and au.id = t.ou_id and t.status = 1
					#if($ouId)
						and t.ou_id = :ouId
					#end
					#if($ruleName)
						and t.name like '%$ruleName%'
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistributionRule.checkRuleNameIsExist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.name as name from t_wh_distribution_rule t where t.name = :ruleName
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistributionRule.getIdByRuleName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.id  from T_WH_DISTRIBUTION_RULE t where t.name = :ruleName
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean
		id="DistributionRuleDetail.getDistributionRuleConditionCurrentDetail"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.id as id ,t.condition_id as l_conditionId,t.rule_id as l_ruleId,t.remark as remark,
					c.code as code,c.groupname as groupName,c.groupcode as groupCode,c.name as name,c.kvalue as l_kValue,
					c.type as intType from T_WH_DSR_DETAIL t,t_wh_dsr_condition c,t_wh_distribution_rule r where t.condition_id = c.id and t.rule_id = r.id
					#if($ruleId)
						and  t.rule_id  = :ruleId
					#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="DistributionRuleCondition.getDistributionRuleConditionList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.groupcode as groupCode, t.groupname as groupName from t_wh_dsr_condition t group by t.groupcode,t.groupname
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="DistributionRuleCondition.getDistributionRuleConditionDetail"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.id as id,t.code as code,t.name as name,t.groupcode as groupCode,t.groupname as groupName,t.kvalue as kValue,t.type as intType from T_WH_DSR_CONDITION t where 1=1 
					#if($groupCode)
						and t.groupcode = :groupCode 
					#end
					order by t.groupcode desc
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取wx中间表所需要的数据 -->
	<bean id="StockTransApplication.getWxconfirmOrderQueue" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                
			           select d.tracking_no trackingNo,
                           d.EXT_TRANS_ORDER_ID extTransOrderId,
                           sta.code code,
                           d.weight,
                           d.lpcode lpcode
                      from t_wh_sta sta, t_wh_sta_delivery_info d
                     where sta.id = d.id
                       and sta.id = :staId
				
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 获取数据 传到hub -->
	<bean id="StaDeliveryInfo.getWxData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select ch.id          channelId,
			              bw.id          warehouseId,
			              bw.phone       senderMobile,
			              bw.pic         pic,
			              bw.zipcode     sendZipCode,
			              bw.address     senderAddress,
			              bw.province    provinceF,
			              bw.city        cityF,
			              bw.district    districtF,
			              un.code        warehouseCode,
			              d.id           id,
			              d.lpcode       lpCode,
			              pa.tracking_no  trackingNo,
			              d.province     province,
			              d.city         city,
			              d.district     district,
			              d.receiver     receiver,
			              d.mobile       mobile,
			              d.ZIPCODE      zipCode,
			              d.address      address,
			              d.TRANS_TIME_TYPE transTimeTypeInt,
			              sta.id         staId,
			              sta.slip_code2 slipCode2,
			              pa.id          packageId,
			              pa.weight      weight
			         from t_wh_sta               sta,
			              t_bi_channel           ch,
			              t_au_operation_unit    un,
			              t_bi_warehouse         bw,
			              t_wh_sta_delivery_info d,
			              t_wh_package_info      pa
			        where sta.main_wh_id = un.id
			          and sta.owner = ch.code
			          and sta.id = d.id
			          and pa.sta_delivery_info_id = d.id
			          and un.id = bw.ou_id
			          and sta.code = :staCode
			          and pa.tracking_no = :mailno
  
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 获取商品信息传到hub -->
	<bean id="PackageInfo.getpackageInfoByDeliveryInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              select sku.name skuName,
					       sku.id skuId,
					       nvl(line.quantity, 0) skuQuantity,
					       line.total_actual totalActual,
					       sku.code skuCode,
					        sku.gross_weight  grossWeight,
					       sku.length     skuLength,
			               sku.width      skuWidth,
			               sku.height     skuHeight,
					       sta.slip_code2 slipCode2,
					       ch.id channelId
					  from t_wh_sta_delivery_info d,
					       t_wh_sta               sta,
					       t_wh_sta_line          line,
					       t_bi_inv_sku           sku,
					       t_bi_channel           ch
					 where sta.id = d.id
					   and sta.id = line.sta_id
					   and line.sku_id = sku.id
					   and sta.owner = ch.code
				   and d.id = :dId
				   and d.lpcode = :lpCode
			          
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaDeliveryInfo.getParentAndSonMailNoById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select di.tracking_no||decode(t.sunNo,'','',','||t.sunNo) from t_wh_sta_delivery_info di,
					(select stragg(pi.tracking_no) as sunNo from t_wh_package_info pi,t_wh_sta_delivery_info di where pi.sta_delivery_info_id
					= di.id and pi.tracking_no <> di.tracking_no and di.id = :staId) t
					where di.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.getVmiReturnLoaction" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
							select d.locationid from 
							(select sum(i.quantity) as quantity,i.location_id as locationid,i.sku_id,i.inv_owner,i.ou_id
				              from t_wh_sku_inventory i,
				              t_wh_location_transtype t 
				              where i.sku_id = :skuid 
				              and t.location_id=i.location_id
				              and t.transtype_id=:transactionTypeId 
				              and (i.is_occupied is null or i.is_occupied = 0) 
				              and i.occupation_code is null 
				              and i.quantity > 0  
				              and i.ou_id = :ouid 
				              and i.status_id = :status 
				              and i.inv_owner = :owner 
				              group by i.location_id,i.sku_id,i.inv_owner,i.ou_id
				              ) d ,v_wh_occupied_inventory vo
				              
				              where d.sku_id=vo.sku_id(+)
				                    and d.inv_owner=vo.owner(+)
				                    and d.ou_id=vo.wh_ouId(+)
				              
				                    and d.quantity-nvl(vo.qty,0) >= :qty  
				                    and rownum = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findQtyOccpInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select o.qty quantity
					from v_wh_occupied_inventory o                    
					where o.wh_ouId= :ouid
					      and o.sku_id= :skuid
					      and o.owner= :owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStaLineBystaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select u.code as code ,e.quantity as receiptQty from t_wh_sta_line e 
					left join t_wh_sta a on a.id = e.sta_id left join t_bi_inv_sku u on u.id = e.sku_id
					 where a.code =:code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseMsgSku.findMsgSKuByZdy" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select * from T_WH_THREEPL_SKU where bar_code is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransRoleAccord.findTransRoleAccord" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select tra.id as id,tr.code as roleCode, tr.name as roleName, c.code as channelCode,c.name as channelName,tra.priority as priority,decode(tra.status,'1','新建','0','取消/失败','10','已经执行','') as strChannelTransStatus,tra.status as intChannelTransStatus,
             tra.carete_time as createTime, u.user_name as createName,tra.change_time as changeTime,tra.last_operation as lastOperation,decode(tra.role_is_available,'1','是','0','否','') as strRoleIsAvailable,tra.role_is_available as intRoleIsAvailable
					  	from T_BI_TRANS_ROLE_accord tra,
					    t_bi_trans_role        tr,
					    t_bi_channel           c,
					    t_au_user              u
					    where tr.id = tra.role_id
					    and tr.channel_id = c.id
					    and tra.create_user = u.id
					    #if($channelCode)
	                 	    and c.code like '%$channelCode%' 
	               		#end
	               		#if($channelName)
	                 	    and c.name like '%$channelName%'
	               		#end
	               		#if($intStatus)
	                 	    and tra.status = :intStatus
	               		#end
	               		#if($roleCode)
	                 	    and tr.code like '%$roleCode%'   
	               		#end
	               		#if($roleName)
	                 	    and tr.name like '%$roleName%'
	               		#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransRoleAccord.findAvailableTransRoleAccord" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id as id ,t.role_id as lRoleId, t.priority as priority,t.role_is_available as intRoleIsAvailable
					from T_BI_TRANS_ROLE_ACCORD t where t.status = 1
					and t.change_time <= :changeTime
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="TransRoleAccord.updateTransRoleAccord" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update T_BI_TRANS_ROLE_accord t set t.change_time = :changeTime ,t.role_is_available = :roleIsAvailable ,t.priority = :priority ,t.last_operation = :lastOptionTime ,t.last_operationer = :userId  where t.id = :id and t.status = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgOutboundOrderCancel.updateOrderCancelById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update T_WH_MSG_OUTBOUND_ORDER_CANCEL t set t.update_time=:time,t.status=:status where t.id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ConsumptiveMaterialUseQueryCommand.findCmUseList" class="loxai.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id id,
						sta.outbound_time outboundTime,
						sta.slip_code slipCode,
						sku2.bar_code recommandSku,
						sku1.bar_code usedSku,
						user1.user_name checkUser,
						user2.user_name outboundUser,
						case 
							when sku2.bar_code is null then ''
							when sku2.bar_code is not null and sku2.bar_code = sku1.bar_code then '是'
							else '否'
						end isMatch						
					from t_wh_sta sta,
						t_wh_sta_add_line line,
						t_bi_inv_sku sku1,
						t_bi_inv_sku sku2,
						t_au_user user1,
						t_au_user user2
					where 
    					sta.picking_type=1 
						and sta.group_sta_id is null
						and sta.status in(4,10)
						and line.sta_id = sta.id
						and line.sku_id = sku1.id
						and sta.package_sku_id = sku2.id(+)
						and sta.checked_user_id = user1.id
						and sta.out_operator_id = user2.id
						#if($slipCode)
							and sta.slip_code = :slipCode
						#end
						#if($fromDate)
							and sta.outbound_time>=:fromDate
						#end
						#if($endDate)
							and sta.outbound_time<=:endDate
						#end
						#if(!$fromDate && !$endDate)
			                and sta.outbound_time > sysdate - 91
			            #end
						#if($recommandSku)
							and sku2.bar_code = :recommandSku
						#end
						#if($usedSku)
							and sku1.bar_code = :usedSku
						#end
						#if($checkUser)
							and user1.user_name = :checkUser
						#end
						#if($outboundUser)
							and user2.user_name = :outboundUser
						#end
						#if($isMatch)
							#if("$!isMatch"=="是")
								and sku2.bar_code is not null and sku2.bar_code = sku1.bar_code
							#else
								and sku2.bar_code is not null and sku2.bar_code <> sku1.bar_code
							#end
						#else
							and sku2.bar_code is null
						#end				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.getPackageSkuIdBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sku.paper_sku_id id
					from 
						t_wh_sta_line line,
						t_bi_inv_sku sku 
					where sku.id = line.sku_id and line.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.checkVmiReturnSkuQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
						sum(i.quantity)
										from t_wh_sku_inventory i 
										where i.occupation_code is null 
										and (i.is_occupied is null or i.is_occupied = 0) 
										and i.ou_id = :ouid 
										and i.sku_id = :skuid  
										and i.quantity > 0 
										and i.inv_owner = :owner  
										and i.status_id = :status 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findVmiReturnSkuQtyLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
									i.location_id as locationId,
									i.quantity as quantity 
										from t_wh_sku_inventory i,
										t_wh_location_transtype t   
										where
										    t.location_id=i.location_id 
										and t.transtype_id=:transactionTypeId     
										and i.occupation_code is null 
										and (i.is_occupied is null or i.is_occupied = 0) 
										and i.ou_id = :ouid 
										and i.sku_id = :skuid  
										and i.quantity > 0 
										and i.inv_owner = :owner  
										and i.status_id = :status 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="Inventory.findVmiReturnSkuQtyLocation2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							   select
	                  i.location_id as locationId,
	                  i.quantity as quantity 
	                    from t_wh_sku_inventory i,
	                    t_wh_location l,
	                    t_wh_zoon z,
	                    t_wh_pick_zoon pz,
	                    t_wh_location_transtype t   
	                    where
	                        t.location_id=i.location_id 
	                    and i.location_id=l.id(+)
	                    and l.zoon_id=pz.id(+)
	                    and pz.wh_zoon_id=z.id(+)
	                    and t.transtype_id=:transactionTypeId     
	                    and i.occupation_code is null 
	                    and (i.is_occupied is null or i.is_occupied = 0) 
	                    and i.ou_id = :ouid 
	                    and i.sku_id = :skuid  
	                    and i.quantity > 0 
	                    and i.inv_owner = :owner  
	                    and i.status_id = :status
	                    order by z.seq asc,l.sort asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="SkuSn.getStaIdBySnStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select  
								sta.id as id,
								sta.code as code 
								from 
								t_wh_sta sta,
								t_wh_stv stv,
								T_WH_SKU_SN sn 
								where 1=1 
								and sta.id = stv.sta_id 
								and stv.id = sn.stv_id
								and sn.sn = :sn 
								and sn.ou_id = :ouid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.checkStvBinding" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select 
									sn.id as id,
									sn.sn as sn 
									from 
									t_wh_sta sta,
									t_wh_stv stv,
									T_WH_SKU_SN sn 
									where 
									sta.id = :staid  
									and sta.id = stv.sta_id 
									and stv.id = sn.stv_id 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findInvStatusChangeStaBySource"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select sta.id ,t.id  as adjustMentId from t_wh_sta sta left join T_WH_MSG_RTN_ADJUSTMENT t on t.ORDER_CODE = sta.slip_code1
						where sta.IS_LOCKED = 0 and sta.type = 45 and sta.status = 2 and t.r_entity_id <:version
						and t.status = 10
						 and (1!= 1 
							  #foreach($source in $sourceList)
							      or t.source= '$source'
							  #end
						  )
						  order by t.create_time 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransOlConfig.findTransOlConfig" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select toc.id,toc.departure,toc.username,toc.ext1,toc.ext2,toc.pwd,toc.lpcode,toc.type
						from T_WH_TRANS_OL_CONFIG toc
						where toc.lpcode= :lpcode
						#if($departure)
							and toc.departure= :departure
						#end
							
						      
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.activateCardStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select  
				                sn.id as id,
				                sn.sn as sn,
				                sku.interface_type as interfaceType,
				                sku.id as skuid,
				                sn.card_status as cStatus,
				                sku.sp_type as spType  
								from 
								t_wh_sta sta,
								t_wh_stv stv,
								T_WH_SKU_SN sn,
              					 T_BI_INV_SKU sku  
								where 1=1 
                				and sta.id = :staid  
								and sta.id = stv.sta_id 
								and stv.id = sn.stv_id
                				and sn.sku_id = sku.id 
                				and sn.sn = :sn 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.getSnCountForStvSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
								count(sn.id)
								from
								t_wh_stv stv,
								t_bi_inv_sku sku,
								T_WH_SKU_SN sn 
								where
								stv.sta_id = :staid 
								and sku.bar_code = :barcode  
								and sn.stv_id = stv.id 
								and sn.sku_id = sku.id 
								and sku.sn_type = 3 
								and sn.card_status = :cardStatus
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ReturnPackage.getReturnPackageSequence" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						SELECT S_T_WH_RETURN_PACKAGE.nextval FROM DUAL
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ReturnPackage.updatePackageStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
update t_wh_return_package t set 
t.status=:status
,t.sta_id=:staId
,t.wh_ou_id=:ouId
,t.last_modify_time=sysdate
where t.tracking_no =:trackingNo
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ReturnApplication.updateReturnApplication" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
update t_wh_return_application t set t.slip_Code=:slipCode,
t.status=:status,t.Oms_Status=:OmsStatus,t.last_modift_time=sysdate,t.feed_back_time=sysdate
where t.trank_no =:trackingNo
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ReturnPackage.findReturnPackageList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select t.batch_code,t.lpcode,
t.tracking_no as trackingNo,
to_char(t.create_time,:dataFormat) as createDateStr,
t.rejection_reasons as rejectionReasons,
decode(t.status,0,'已拒收',1,'已收件',3,'处理中','已入库') as strStatus,
u.user_name as userName
from T_WH_RETURN_PACKAGE t 
left join t_au_user u on u.id = t.creator_id 
where 
t.batch_code = :batchCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ReturnPackage.findReturnPackage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
t.id,
t.batch_code,
t.status as intStatus,
decode(t.status,0,'已拒收',1,'已收件',3,'处理中','已入库') as strStatus,
t.lpcode,
t.tracking_no,
t.rejection_reasons,
ou.name as warehouseName,
a.code as returnApplicationCode,
sta.code as staCode,
sta.unlock_user as unlockUser,
sta.slip_code as staSlipCode,
t.create_time,
t.last_modify_time,
u.user_name as userName,
pw.name as physicalWarehouse,
t.weight as weight,
t.remarksb
from 
T_WH_RETURN_PACKAGE t
left join t_wh_return_application a on t.rp_id = a.id
left join t_wh_sta sta on sta.id = t.sta_id
left join t_au_user u on t.creator_id = u.id
left join t_au_operation_unit ou on ou.id = t.wh_ou_id
left join t_wh_physical_warehouse pw on pw.id = t.pw_id
where 1=1
#if($batchCode)
	and t.batch_code=:batchCode
#end
#if($lpcode)
	and t.lpcode=:lpcode
#end
#if($createTime)
	and t.create_time > :createTime
#end
#if($entCreateTime)
	and t.create_time < :entCreateTime
#end
#if($trackingNo)
	and t.tracking_no=:trackingNo
#end
#if($staCode)
	and sta.code = :staCode
#end
#if($intStatus)
	and t.status = :intStatus
#end
#if($rejectionReasons)
	and t.rejection_reasons = :rejectionReasons
#end
#if($whName)
	and ou.name = :whName
#end
#if($userName)
	and u.user_name like :userName
#end
#if($registerWHId)
	and pw.id= :registerWHId
#end



				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnOutbound.updateGymboreeErrorOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_msg_rtn_outbound set status = 5 where id in(
						select t.id from (
							select 
								ot.id,sta.sku_qty,nvl(sum(nvl(line.qty,0)),0) 
							from 
								t_wh_msg_rtn_outbound ot,t_wh_sta sta,t_wh_msg_rtn_outbound_line line
							where 
								ot.sta_code=sta.code and line.msg_outbound_id(+)=ot.id and ot.source='GYMBOREE' and ot.status in(0,1)
							group by ot.id,sta.sku_qty having sta.sku_qty<> nvl(sum(nvl(line.qty,0)),0)
						)t
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MsgRtnOutbound.findNeedEmailGymboreeOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.code staCode,sta.slip_code lpCode,sta.slip_code2 trackingNo
					from 
						t_wh_msg_rtn_outbound ot,t_wh_sta sta
					where 
						ot.sta_code= sta.code
						and ot.source='GYMBOREE'
						and ot.status=5
				]]>
			</value>
		</constructor-arg>
	</bean>
		<bean id="MsgRtnOutbound.wmsRtnOutBountMq" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id from t_wh_msg_rtn_outbound t where  (t.is_mq='1' and t.status in (0,1,-1) and t.mq_status is null and (t.mq_error_count is null or t.mq_error_count<3 ) and (t.next_time is null or t.next_time <sysdate)) and (t.error_count is null or t.error_count<5 ) and   t.create_time>sysdate-90 and rownum<=10000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MessageProducerError.wmsCommonMessageProducerErrorMqList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select r.* from T_MESSAGE_PRODUCER_ERROR r  where (r.status=1 or r.status is null ) and (r.num is null or r.num<3 ) and (r.next_time is null or r.next_time<sysdate) and rownum<=10000  order by r.id asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MsgRtnOutbound.updateGymboreeErrorOrderSend" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_msg_rtn_outbound set status =2 where status =5 and source='GYMBOREE'
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findOneWarehouseLocationByOuidAndSku"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select s.id as id,s.owner as owner from 
					(select n.id as id,y.inv_owner as owner from 
						t_wh_sku_inventory  y 
					left join 
						T_WH_LOCATION n 
					on
						 n.id = y.location_id 
					where 
						y.sku_id =:skuId and y.status_id =:statusId and y.ou_id =:ouId and n.is_available = 1 and 
						(n.is_locked is null or n.is_locked = 0 ) and (y.is_occupied is null or y.is_occupied = 0 )
					order by
						 y.quantity desc ) s 
				where rownum < =1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransTxLog.findOwnerByWHAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,owner from (select * from T_WH_ST_LOG where wh_id =:ouId and sku_id =:skuId and direction = 1 order by transtype_id) where rownum <= 1				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheck.getInventoryCheckByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,code,remork from T_WH_INV_CHECK where status =:status
					  and (1!= 1 
							  #foreach($source in $sourceList)
							      or remork = '$source'
							  #end
						  )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnAdjustment.getBySourceAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select id,uuid,type,effective_date,ext_memo,version,order_code,source,source_wh,memo,OWNER_WH_SOURCE
					 from T_WH_MSG_RTN_ADJUSTMENT where (status = 1 or status = 0) and (r_entity_id is null or r_entity_id<=5) and type =:type 
					 and (1!= 1 
							  #foreach($source in $sourceList)
							      or source= '$source'
							  #end
						  )
					order by create_time
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.getSkuByBarCodeAndCostomer" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
									sku.id as id,
									sku.code as code,
									sku.bar_code as barCode,
									sku.sn_check_mode as snCheckModeInteger 
									from t_bi_inv_sku sku 
									where 
									sku.bar_code = :barcode 
									and sku.customer_id = :cid 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnCheckCfg.getSkuSnCheckCfgBySnCheckMode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
							t.id as id,
							t.type as typeInt,
							t.memo as memo,
							t.sn_check_mode as snCheckModeInt 
							from T_BI_INV_SKU_SN_CHECK_CFG t 
							where t.sn_check_mode = :sncheckmode 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnMapping.findByStaIdAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select t.* from T_WH_SKU_SN_MAPPING t 
						where  t.sn = :sn 
						      #if ($staId)
							    and t.sta_id=:staId
						      #end 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnMapping.getSkuSnMappingBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select t.* from T_WH_SKU_SN_MAPPING t where t.sn = :sn  and t.ou_id = :ouid and t.sku_id = :skuid 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- -->
	<bean id="SkuSnMapping.findMappingSkuSnBySn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select t.* from T_WH_SKU_SN_MAPPING t where t.sn = :sn
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransVoucher.findTwhStvById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id               as id,
					       t.business_seq_no  as businessSeqNo,
					       t.code             as code,
					       t.create_time      as createTime,
					       t.direction        as directionInt,
					       t.finish_time      as finishTime,
					       t.owner            as owner,
					       t.status           as statusInt,
					       t.creator_id       as creatorId,
					       t.operator_id      as operatorId,
					       t.sta_id           as staId,
					       t.transtype_id     as transactionTypeId,
					       t.wh_id            as whId,
					       t.Last_Modify_Time as last_Modify_Time
					  from t_wh_stv t
					 where t.id = :stvid 	
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransVoucher.findStockTransVoucherByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select min(stv.finish_time) finish_time from t_wh_stv stv  where stv.sta_id=:staId and stv.status=10 and stv.type=11 order by stv.finish_time asc
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PickingList.searchSnCardCheckList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid
				from 
					t_wh_sta_picking_list pl
					inner join T_AU_OPERATION_UNIT olist on pl.WH_ID= olist.ID,
					  (
						    select 
						    distinct sta.picking_list_id as pid 
						    from t_wh_sta sta,
						    t_wh_sku_sn sn 
						    where sta.id = sn.sta_id 
						    and sta.main_wh_id = :ouid 
						    and sta.status in (2,8) 
						    and sn.card_status = 3 
						    #if($slipCode)
						    	and sta.slip_code = :slipCode
						    #end
						    #if($staCode)
				    			and sta.code = :staCode 
				    		#end
				  ) sta 
				where 
					sta.pid = pl.id 	
					#if($code)
						and pl.code = :code
					#end
					#if($status)
						and pl.status=:status
					#else
						and pl.status in (2,8)
					#end
					#if($pickingTime)
						and pl.create_time>=:pickingTime
					#end
					#if($executedTime)
						and pl.create_time<=:executedTime
					#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findSnCardErrorList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select 
							sta.id as staid,
			                sn.id as snid,
			                sku.id as skuid,
			                sku.bar_code as barCode,
			                sku.customer_id as customerid,
			                sta.code as code,
							sta.slip_code as slipCode,
							sku.code as skuCode,
							sn.sn as sn,
							sku.name as skuName,
							decode(sn.card_status, '3', '激活失败') as cardStatus
							from 
							t_wh_sta sta,
							T_WH_SKU_SN sn,
							t_bi_inv_sku sku,
							t_wh_sta_picking_list p  
							where 1=1 
							#if($staCode)
								and sta.code = :staCode 
							#end 
							#if($plCode)
								and p.code = :plCode  
							#end 
							and p.id = sta.picking_list_id 
							and sta.id = sn.sta_id 
							and sta.status in (2,8) 
							and sn.card_status = 3 
							and sn.sku_id = sku.id 
							order by sta.code 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findSnCardErrorByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
								sta.id as id,
								sta.picking_list_id as pickingListId
								from 
								t_wh_sta sta,
								T_WH_SKU_SN sn 
								where 
								sta.code = :staCode 
								and sta.id = sn.sta_id 
								and sn.card_status = 3 
								and sta.status in (2,8) 
								and sta.main_wh_id = :ouid
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.getSnCardErrorPl" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
							pl.id as id,
							pl.code code,
							pl.status as intStatus,
							pl.plan_bill_count as planBillCount,
							pl.CHECK_BILL_COUNT as checkedBillCount,
							pl.CHECK_SKU_QTY checkedSkuQty,
							-1 as shipStaCount,
							pl.plan_sku_qty as planSkuQty,
							-1 as shipSkuQty,
							pl.create_time createTime,
							pl.CHECK_TIME as checkedTime,
							pl.PICKING_TIME as pickingTime 
						from 
							t_wh_sta_picking_list pl 
		         			 where pl.id = :id 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findSnCardCheckSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			select sta.id,
						       sku.name as skuName,
						       sku.code as skuCode,
						       sku.bar_code as barCode,
						       sta.status as intStatus,
						       l.quantity,
						       sta.code as staCode,
						       d.lpcode as lpcode,
						       sta.slip_code as staSlipCode,
						       l.owner as owner,
						       sta.pg_index as pgIndex,
						       d.tracking_no as trackingNo1,
						       nvl(sku.is_sn_sku, 0) isSnSku,
						       sku1.bar_code packageBarCode,
						       sta.is_bk_check as isBkcheckString,
						       sku.customer_id as customerId,
		                       sta.picking_type as pickType,
		                       p.is_postposition_packing_page as isPostpositionPackingPage,
                               p.is_postposition_express_bill as isPostpositionExpressBill,
                               p.id as plid         
								  from t_wh_sta               sta,
								       t_wh_sta_line          l,
								       t_wh_sta_delivery_info d,
								       t_bi_inv_sku           sku,
								       t_wh_sta_picking_list  p,
								       t_bi_inv_sku sku1
								 where sta.id = l.sta_id
								   and sta.picking_list_id = p.id
								   and sku.id = l.sku_id
								   and d.id = sta.id
								   and sta.status in(2,8) 
								   and sta.id = :id 
								   and sta.PACKAGE_SKU_ID = sku1.id(+) 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingList.findPickListBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select pl.id,pl.code,pl.picking_status pickingStatus from t_wh_sta_picking_list pl left join t_wh_sta a on a.picking_list_id = pl.id 
					where a.slip_code =:code
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.printSnCardErrorStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						 select 
							              distinct sta.id as id,
							              sta.code as code,
							              sta.slip_code as refSlipCode,
							              ou.name as ouName,
							              p.code as plCode,
							              sta.owner as owner  
											from 
											t_wh_sta sta,
											T_WH_SKU_SN sn,
											t_bi_inv_sku sku,
											t_wh_sta_picking_list p,
				   				           t_au_operation_unit ou   
											where 1=1 
											#if($staCode)
												and sta.code = :staCode 
											#end 
											#if($plCode)
												and p.code = :plCode  
											#end 
											and p.id = sta.picking_list_id 
											and sta.id = sn.sta_id 
											and sta.status in (2,8) 
											and sn.card_status = 3 
											and sn.sku_id = sku.id 
				     				         and sta.main_wh_id = ou.id 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.getSnCardErrorListSkuCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select 
								 sn.sku_id as skuid,
								 i.location_id as loctionid,
								 sta.id as staId,
								 count(*) as countNumber  
								 from 
								 T_WH_SKU_SN sn,
								 t_wh_sta sta,
								 t_wh_sku_inventory i 
								 where sn.card_status = 3  
								 and sta.id = :staid   
								 and sta.id = sn.sta_id 
								 and sta.code = i.occupation_code 
								 group by sn.sku_id,i.location_id,sta.id 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSnCardSkuQtyLocation" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
										distinct i.location_id as locationId,
										sum(i.quantity) as quantity 
										from t_wh_sku_inventory i 
										where i.occupation_code is null 
										and (i.is_occupied is null or i.is_occupied = 0) 
										and i.ou_id = :ouid 
										and i.sku_id = :skuid  
										and i.quantity > 0 
										and i.inv_owner = :owner  
										and i.status_id = :status 
										and i.location_id = :locationid 
										group by i.location_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSn.getSnCardListByStaIdAndCardStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select 
		                    sn.id as id,
		                    sn.sn as sn,
		                    sn.sku_id as skuid,
		                    sn.sta_id as staid 
		                    from 
		                    T_WH_SKU_SN sn
		                    where 
		                    sn.sta_id = :staid  
		                    and sn.card_status = :cardstatus 
		                    and sn.sku_id = :skuid  
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSnCardSkuQtyLocation1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
										distinct i.location_id as locationId,
										sum(i.quantity) as quantity 
										from t_wh_sku_inventory i 
										where i.occupation_code is null 
										and (i.is_occupied is null or i.is_occupied = 0) 
										and i.ou_id = :ouid 
										and i.sku_id = :skuid  
										and i.quantity > 0 
										and i.inv_owner = :owner  
										and i.status_id = :status 
										and i.location_id <> :locationid 
										group by i.location_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.getIsBkCheckStaByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				   select 
				                    sta.id as id,
				                    sta.code as code,
				                    sta.slip_code as refSlipCode 
				                    from t_wh_sta sta
				                    where sta.id in 
				                    (
				                    	#foreach($id in $staidlist)
							                 $id,
							                #end
						               -1
				                    ) 
				                    and sta.is_bk_check = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GuessEcomAdjData.findGuessEcomAdjDataDataListBystatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select distinct a.adj_code  from T_GUESS_ECOM_ADJ_DATA a where a.status in (1,-1) and a.stacode is null
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GuessEcomAdjData.findGuessEcomAdjDataDataListByCode"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select a.adj_code adj_code,sum(a.qty) qty,a.short_sku short_sku,a.bin_code bin_code from T_GUESS_ECOM_ADJ_DATA a 
                                    where a.status in (1,-1) and a.stacode is null and a.adj_code=:adjCode
                                    group by a.adj_code,a.short_sku,a.bin_code
                                  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GuessEcomAdjData.updateGuessEcomAdjDataByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update T_GUESS_ECOM_ADJ_DATA a set a.stacode=:staCode ,a.status=:status,a.update_date=sysdate where a.adj_code=:adjCode
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaLsingle" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			    select 
            sta.id id,
            sta.code code,
            sta.slip_code refSlipCode,
            sta.status intStatus,
            sta.ORDER_CREATE_TIME orderCreateTime,
            s.name shopId,
            sta.special_type intSpecialType,
            decode(sta.IS_SPECIAL_PACKAGING,0,'否',1,'是','') isQs,
            sta.create_time createTime,
            dryInfo.lpcode lpcode,
            sta.sku_qty stvTotal,
            nvl(dryInfo.Store_Com_Is_Need_Invoice,0) as isNeedInvoice,
            nvl(sta.is_sn,0) isSn
          
          from 
            t_wh_sta sta,
            t_bi_channel s,
            T_WH_STA_DELIVERY_INFO dryInfo,
            t_ma_transportator trans,
            t_bi_transport_service ser,
            t_bi_transport_service_area ar
          where
            sta.id=dryInfo.id
            and sta.is_trans_upgrade=1
            and sta.owner = s.code
            and dryInfo.lpcode is not null
            and dryInfo.lpcode = trans.exp_code
            and sta.PICKING_LIST_ID is null
            and sta.main_wh_id = :id
            and (sta.is_locked = 1 or sta.is_locked is null)
            and (sta.status=1 or sta.status=2 or sta.status=20)  
            and (sta.type=21 or sta.type=25 or sta.type=42)  
            and sta.GROUP_STA_ID is null
            and ser.status!=2
            and trans.id=ser.trans_id
            and ser.id=ar.trans_service_id
            and dryInfo.Province=ar.province
            and dryInfo.City=ar.city
            and dryInfo.District=ar.district
            #if($transTimeType)
                    and ser.time_type = :transTimeType
                  #else
                    and (dryInfo.Trans_Time_Type is null or dryInfo.Trans_Time_Type=1)
                      #end
                      #if($fromDate)
                      and sta.create_time>=:fromDate
                      #end
                      #if($toDate)
                      and sta.create_time<=:toDate
                      #end
                      #if($code)
                      and sta.code=:code
                      #end
                      #if($slipCode)
                      and sta.slip_Code=:slipCode
                      #end
                      #if($slipCode1)
                      and sta.slip_Code1=:slipCode1
                      #end
                      #if($slipCode2)
                      and sta.slip_Code2=:slipCode2
                      #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询尚未完成升单单据发送邮件 -->
	<bean id="StockTransApplication.queryUpgrade" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sta.main_wh_id from t_wh_sta sta where 
					sta.is_trans_upgrade=1 group by sta.main_wh_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.printImportEntryList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		             select 
				              sta.id as STAID,
				              sta.code as STACODE,
				              i.receiver as RECEIVER,
				              i.mobile as MOBILE,
				              i.address as ADDRESS,
				              i.telephone as TELEPHONE,
				              i.zipcode as ZIPCODE,
		                     case
		                     when sku.name is null then
		                        sku.en_name 
		                     else 
		                        sku.name
		                     end as SKUNAME, 
				              sku.color as COLOR,
				              sku.sku_size as SKUSIZE,
				              l.unit_price as UNITPRICE,
				              sku.ext_code2 as UPC,
				              l.quantity as QUANTITY,
				              sku.country_of_origin as COUNTRYOFORIGIN,
				              sta.order_transfer_free as ORDERTRANSFERFREE,
				              c.vmi_code as VMICODE 
				              from 
				              t_wh_sta sta,
				              t_wh_sta_line l,
				              t_wh_sta_delivery_info i,
				              t_bi_inv_sku sku,
				              t_bi_channel c   
				              where 
				              sta.id = :id  
				              and sta.id = l.sta_id 
				              and sta.id = i.id 
				              and l.sku_id = sku.id
				              and c.code = sta.owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.printImportMacaoEntryList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		             select 
				              sta.id as STAID,
				              sta.code as STACODE,
				              i.receiver as RECEIVER,
				              i.mobile as MOBILE,
				              i.address as ADDRESS,
				              i.telephone as TELEPHONE,
				              i.zipcode as ZIPCODE,
				              i.TRACKING_NO as trackingNo,
				              sta.slip_Code2 as slipCode2,
		                      case
		                      when sku.name is null then
		                        sku.en_name 
		                      else 
		                        sku.name
		                      end as SKUNAME,
		                      
				              sku.color as COLOR,
				              sku.sku_size as SKUSIZE,
				              l.unit_price as UNITPRICE,
				              sku.ext_code2 as UPC,
				              l.quantity as QUANTITY,
				              sku.country_of_origin as COUNTRYOFORIGIN,
				              sta.order_transfer_free as ORDERTRANSFERFREE,
				              sku.supplier_code as supplineCode,
				              sku.unit_name as unitName,
				              sku.hts_code as htsCode,
				              c.vmi_code as VMICODE,
				              l.TOTAL_ACTUAL as totalActual,
				              nvl(i.weight, (select sum(nvl(ssku.gross_weight,0)*sl.quantity) 
		                                      from t_wh_sta s,t_wh_sta_line sl,t_bi_inv_sku ssku 
		                                      where  s.id=sl.sta_id 
		                                             and ssku.id=sl.sku_id  
		                                             and s.id = :id  ) )   as weight
				              from 
				              t_wh_sta sta
				              left join t_wh_sta_line l on sta.id = l.sta_id 
				              left join t_wh_sta_delivery_info i on sta.id = i.id 
				              left join t_bi_inv_sku sku on l.sku_id = sku.id
				              left join t_bi_channel c on c.code = sta.owner
				              where 
				              sta.id = :id  
				          
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.printImportMacaoHGDEntryList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		             select sta.id as STAID,
                            sta.code as STACODE,
                            stad.receiver as RECEIVER,
                            stad.address as ADDRESS,
                            sta.sku_qty as TOTALQTY,
                           (select sum(l.quantity*nvl(sku.gross_weight,0)) 
                            from t_wh_sta s,t_wh_sta_line l,t_bi_inv_sku sku
                            where s.id=sta.id and l.sku_id=sku.id and s.id=l.sta_id) as TOTALWEIGHT,
                            sta.total_actual TOTALACTUAL,
                            to_char(sysdate, 'yyyy') YEAR ,
                            to_char(sysdate, 'MM') MONTH,
                            to_char(sysdate, 'dd') DAY,
                            case when sku.name is null then sku.en_name else sku.name end as SKUNAME,
                            sku.code as SUPPLINECODE,
                            l.quantity as QTY,
                            sku.country_of_origin as COUNTRYOFORIGIN,
                            l.quantity*nvl(sku.gross_weight,0)  as suttleWeight,
                            l.quantity*l.unit_price as UNITPRICE
                      from  t_wh_sta sta
                      inner join t_wh_sta_line l on sta.id = l.sta_id 
                      inner join t_wh_sta_delivery_info stad on sta.id = stad.id 
                      inner join t_bi_inv_sku sku on l.sku_id = sku.id
                      where  sta.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findPackageCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select count(1) as completeQuantity from t_wh_sta sta, t_wh_sta_delivery_info i, t_wh_package_info info   
                            where sta.id = :id  and i.id=sta.id and info.sta_delivery_info_id=i.id 
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findExtCode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sku.ext_code1 as extCode1
					from
						v_wh_inventory_summary inv,
						t_bi_inv_sku sku
					where inv.sku_id = sku.id
						#if ($ouId)
						and inv.wh_ouid = :ouId
						#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransVoucher.findIsSnByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku.is_sn_sku as isSnSku,sku.sn_type as snType from t_bi_inv_sku sku left join t_wh_stv_line stvl on stvl.sku_id=sku.id where stvl.stv_id=:stvId group by sku.is_sn_sku,sku.sn_type
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseDistrict.findDistrictList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select district.id as id, district.code as code ,district.name as name
					from t_wh_district district
					where district.ou_id = :ouId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findLocationByLocationAndDistrict"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select location.id 		as  location, 
						   pickZone.code 	as  code,
						   location.sort 	as 	sort
					from t_wh_location location
						 left join t_wh_pick_zoon pickZone on location.zoon_id=pickZone.id 
					where 
						location.code = :location 
						and location.district_id in (select district.id from t_wh_district district where district.code = :district) 
						and location.ou_id = :ouId					
						
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.updateByLocationAndDistrict" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_location 
					set 
					#if($userId)
						creator_id = :userId,
					#end
					#if($createDate)
						create_time = :createDate,
					#end
					#if($lastModifyTime)
						last_modify_time = :lastModifyTime,
					#end
					#if($sort)
						sort = :sort,
					#else
						sort = '',
					#end 
					#if($pickZoneCode)
						zoon_id = (select zone.id from t_wh_pick_zoon zone where zone.code = :pickZoneCode and zone.status = 1 and wh_ou_id = :ouId) 
					#else
						zoon_id = ''
					#end
						
					where code = :location 
						and district_id in (select id from t_wh_district where code = :district) 
						and t_wh_location.ou_id = :ouId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WhTransProvideNo.getYamatoTranNoByLpcodeAndAccount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select id from
					(select id from t_wh_trans_provide_no where rownum<=500 
						and sta_id is null 
						and lpcode=:lpcode 
						and lengthb(trans_no)<=11
						#if($owner)
						and owner= :owner
						#end
						#if($isCod)
						and is_cod=:isCod 
						#else
						and is_cod=0
						#end
					order by dbms_random.value)
				where rownum=1								
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GucciVMIInFeedback.findVMIInFBListByJDADocumentNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select t.id id,
				       t.sta_code            staCode,
				       t.vendor_number       vendorNumber,
				       t.jda_document_number JDADocumentNumber,
				       t.jda_document_date   JDADocumentDate,
				       t.receipt_date        receiptDate,
				       t.physical_rec_date   physicalRecDate,
				       t.jda_warehouse_code  JDAWarehouseCode,
				       t.brand_code          brandCode,
				       t.status              status,
				       t.err_count           errCount,
				       t.err_msg             errMsg,
				       t.jda_document_type   JDADocumentType,
				       t.type                type
				 from t_gucci_vmi_in_feedback t
				 where t.receipt_date >=:startTime
				       and t.receipt_date <=:endTime
				       #if($type)
				       and t.type=:type
				       #end 
				       order by t.id						
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiRtoDefault.findVmiRtoByVmiCodeAndStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
					select 
					a.id as id,
					a.uuid as uuid,
					a.create_time as createTime,
					a.finish_time as finishTime,
					a.store_code as storeCode,
					a.vmi_source as vmiSource,
					a.order_code as orderCode,
					a.arrive_date as arriveDate,
					a.ext_memo as extMemo,
					a.wh_code as whCode,
					a.status as intStatus,
					a.sta_id as staId 
					from 
					t_vmi_rto a 
					where 
						#if($vmicode)
						   a.store_code = :vmicode
						#end 
						#if($status)
						   and a.status = :status
						#end 
          ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiRtoDefault.findVmiRtoByCreGucciRtn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
					select 
					a.id as id,
					a.uuid as uuid,
					a.create_time as createTime,
					a.finish_time as finishTime,
					a.store_code as storeCode,
					a.vmi_source as vmiSource,
					a.order_code as orderCode,
					a.arrive_date as arriveDate,
					a.ext_memo as extMemo,
					a.wh_code as whCode,
					a.status as intStatus,
					a.sta_id as staId 
					from 
					t_vmi_rto a 
					where a.store_code = 'gucci'
						and not exists (select 1 from t_vmi_rto_line rl where rl.rto_id=a.id and rl.inv_status is null)
						
						#if($status)
						   and a.status = :status
						#end 
						
          ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiRtoDefault.findVmiRtoByGucci" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
					select 
					    a.id as id,
					    a.uuid as uuid,
					    a.create_time as createTime,
					    a.finish_time as finishTime,
					    a.store_code as storeCode,
					    a.vmi_source as vmiSource,
					    a.order_code as orderCode,
					    a.arrive_date as arriveDate,
					    a.ext_memo as extMemo,
					    a.wh_code as whCode,
					    a.status as intStatus,
					    a.sta_id as staId 
					  from t_vmi_rto a 
					  where a.store_code = 'gucci'
					  		and a.status not in (10,11,17)
					  		and a.sta_id is null
					  		#if($startTime)
						        and a.create_time >=:startTime
					  		#end 
					  		#if($endTime)
						        and a.create_time < :endTime
					  		#end 
					  		#if($slipCode)
						        and a.order_code = :slipCode
					  		#end 
					  		#if($toLoction)
						        and a.ext_memo like '%$toLoction%'
					  		#end 
          ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="VmiRtoDefault.findVmiRtoByVmiCodeAndOrderCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
					select 
					a.id as id,
					a.uuid as uuid,
					a.create_time as createTime,
					a.finish_time as finishTime,
					a.store_code as storeCode,
					a.vmi_source as vmiSource,
					a.order_code as orderCode,
					a.arrive_date as arriveDate,
					a.ext_memo as extMemo,
					a.wh_code as whCode,
					a.status as intStatus,
					a.sta_id as staId 
					from 
					t_vmi_rto a 
					where 
						#if($vmicode)
						   a.store_code = :vmicode
						#end 
						#if($orderCode)
						   and a.order_code = :orderCode
						#end 
						#if($status)
						   and a.status = :status
						#end 
          ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GucciVMIRtnFB.findVMIRtnFBListByTime" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select t.id id,
					       t.jda_batch_number  JDABatchNumber,
					       t.pd_number         PDNumber,
					       t.to_jda_location   toJDALocation,
					       t.document_type     documentType,
					       t.goods_issue_date  goodsIssueDate,
					       t.jda_warehouse_code  JDAWarehouseCode,
					       t.brand_code        brandCode,
					       t.status            status,
					       t.create_time       createTime,
					       t.sta_code          staCode
					 from t_gucci_vmi_rtn_fb t
					 where t.create_time >=:startTime
					       and t.create_time <=:endTime
					       order by t.id						
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GucciVMIRtnFBLine.generatePckNumberSequence" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select SEQ_GUCCI_VMI_OUT_PCKNUMBER.nextval from dual					
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="GucciVMIRtnFBLine.getPickingListNumber" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select distinct(l.pck_number) pickListNumber from t_gucci_vmi_rtn_fb_line l
					inner join t_gucci_vmi_rtn_fb g on g.id=l.gucci_vmi_rtn_fb_id
					inner join t_wh_sta sta on sta.code=g.sta_code
					and sta.id=:staId					
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findIfExistsDiffer" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sku_id id,sum(qty) quantity from(
						select sku_id,sum(quantity) qty from t_wh_sta_line line where sta_id = :staId and quantity>0 group by sku_id
						union all
						select sku_id,-sum(quantity) qty from t_wh_sku_inventory where occupation_code = (select code from t_wh_sta where id = :staId)
						group by sku_id
					)group by sku_id having sum(qty)<0
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findListPriceByStaIdAndSkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.id,l.list_price  from t_wh_sta_line l where l.sta_id=:staId and l.sku_id=:skuId and rownum=1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="SnAndValidDateSkuFlow.getSnAndValidDateSkuFlowDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select * from (
						select t.id staId,
						       s.id skuId,
						       nvl(t.slip_code1,t.slip_code) slipCode1,
						       ch.name shopName,
						       s.code skuCode,
						       s.is_sn_sku isSn,
						       s.store_mode storeMode,
						       case
						         when exists
						                    (select insta.id
						                           from t_wh_sta insta
						                          where insta.status = 10
						                            and insta.type = 41
						                            and insta.slip_code1 in (t.slip_code, t.slip_code1)) 
						         then 
						                (select t.complete_quantity + sum(temp.qty)
						                   from (select insta.slip_code1,
						                                inline.sku_id,
						                                case
						                                  when insta.type = 41 then  -inline.complete_quantity
						                                  else inline.complete_quantity
						                                end qty
						                           from t_wh_sta insta, t_wh_sta_line inline
						                          where insta.id = inline.sta_id
						                            and insta.status = 10
						                            and insta.type in (41, 42)
						                            and inline.complete_quantity > 0) temp
						                  where temp.slip_code1 in (t.slip_code, t.slip_code1)
						                        and temp.sku_id = t.sku_id)
						         else t.complete_quantity   
						       end qty
						  from (select sta.id,
						               sta.slip_code,
						               sta.slip_code1,
						               sta.owner,
						               line.sku_id,
						               line.complete_quantity
						          from t_wh_sta sta, t_wh_sta_line line
						         where line.sta_id = sta.id
						           and exists
						                     (select sku.id
						                              from t_bi_inv_sku sku
						                             where line.sku_id = sku.id
						                               and (sku.is_sn_sku = '1' or sku.store_mode = '33'))
						           and (sta.is_merge is null or sta.is_merge = '0')
						           and sta.status = 10
						           and sta.type = 21
						           and line.complete_quantity > 0
						           #if($startTime)
						              and  sta.create_time>=:startTime
						           #end 
						           #if($endTime)
						              and  sta.create_time<=:endTime
						           #end 
						           #if($owner)
						              and  sta.owner=:owner
						           #end 
						           #if($slipCode1s)
						              and (
						                 sta.slip_code1 in  (
						                        #foreach($code in $slipCode1s)
						                          '$code',
						                        #end
						                          '-1')
						                 or sta.slip_code in  (
						                        #foreach($code in $slipCode1s)
						                          '$code',
						                        #end
						                          '-1'
						                           ) 
						                               )
						           #end 
						        ) t
						 inner join t_bi_inv_sku s on t.sku_id = s.id
						 inner join t_bi_channel ch on ch.code = t.owner
					 ) w  where w.qty>0 order by w.staId,w.skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="SkuSnLog.findSnFromSnLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				        select t.sn
				        from 
				            ( select  snlog.sn 
				                from  t_wh_sku_sn_log snlog, t_wh_stv stv
				               where  snlog.stv_id=stv.id 
				                     and snlog.direction='2' 
				                     and stv.sta_id=:staId
				                     and snlog.sku_id=:skuId
				               union all
				               select  snlog.sn 
				                from  t_wh_sku_sn_log snlog, t_wh_stv stv
				               where  snlog.stv_id=stv.id 
				                     and exists(select sta1.id 
				                                     from t_wh_sta sta1,t_wh_sta sta2
				                                     where sta2.id=:staId
				                                          and sta1.status=10
				                                          and sta1.type in(41,42)
				                                          and sta1.slip_code1 in (sta2.slip_code,sta2.slip_code1))
				                     and stv.sta_id in (
				                                     select sta1.id 
				                                     from t_wh_sta sta1,t_wh_sta sta2
				                                     where sta2.id=:staId
				                                          and sta1.status=10
				                                          and sta1.type in(41,42)
				                                          and sta1.slip_code1 in (sta2.slip_code,sta2.slip_code1)
				                                    )
				                     and snlog.sku_id=:skuId
				              )t	
				          group by t.sn having count(t.sn)!=2
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.findExpDateFromStockTransTxLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					    select sum(t.quantity)||','||t.expire_date||','||t.type
					     from (          
					          select log.quantity, to_char(log.expire_date,'yyyy-mm-dd') expire_date,'0' type
					          from t_wh_st_log log,t_wh_stv stv
					          where log.stv_id=stv.id
					               and stv.sta_id=:staId
					               and log.expire_date is not null
					               and log.sku_id=:skuId
					               and log.expire_date is not null
					          union all     
					          select log.quantity, to_char(log.expire_date,'yyyy-mm-dd') expire_date,'1' type
					          from t_wh_st_log log,t_wh_stv stv
					          where log.stv_id=stv.id
					               and  exists  (
					                               select sta1.id 
					                               from t_wh_sta sta1,t_wh_sta sta2
					                               where sta2.id=:staId
					                                    and sta1.status=10
					                                    and sta1.type =42
					                                    and sta1.slip_code1 in (sta2.slip_code,sta2.slip_code1)
					                              )
					               and stv.sta_id in (
					                               select sta1.id 
					                               from t_wh_sta sta1,t_wh_sta sta2
					                               where sta2.id=:staId
					                                    and sta1.status=10
					                                    and sta1.type =42
					                                    and sta1.slip_code1 in (sta2.slip_code,sta2.slip_code1)
					                              )
					               and log.expire_date is not null
					               and log.sku_id=:skuId
					           union all
					           select log.quantity, to_char(log.expire_date,'yyyy-mm-dd') expire_date,'-1' type
					           from t_wh_st_log log,t_wh_stv stv
					           where log.stv_id=stv.id
					               and  exists (
					                               select sta1.id 
					                               from t_wh_sta sta1,t_wh_sta sta2
					                               where sta2.id=:staId
					                                    and sta1.status=10
					                                    and sta1.type =41
					                                    and sta1.slip_code1 in (sta2.slip_code,sta2.slip_code1)
					                              )
					               and stv.sta_id in (
					                               select sta1.id 
					                               from t_wh_sta sta1,t_wh_sta sta2
					                               where sta2.id=:staId
					                                    and sta1.status=10
					                                    and sta1.type =41
					                                    and sta1.slip_code1 in (sta2.slip_code,sta2.slip_code1)
					                              )
					               and log.direction='1'
					               and log.expire_date is not null
					               and log.sku_id=:skuId
					        )t group by t.expire_date,t.type
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsSkuInventoryFlow.removeExpireData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  delete from t_wh_sku_inv_flow inv 
				  where inv.create_time < to_date(:date,'yyyy-mm-dd')
				        and (inv.status='1' or inv.status='20' or inv.status is null)
				        and (inv.error_count<5 or inv.error_count=99 or inv.error_count is null)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsSkuInventoryFlow.updateWmsSkuInvFlowStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  update t_wh_sku_inv_flow inv 
				  set inv.status=1
				  where inv.status =0
				        #if($stLogIds)
							and inv.st_log_id in(
								#foreach($stLogId in $stLogIds)
									'$stLogId',
								#end
						   -1)
					    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsSkuInventoryFlow.updateSkuInventoryFlowErrorCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  update t_wh_sku_inv_flow inv 
				    set inv.error_count=(case when inv.error_count is null then 1 else inv.error_count+1 end)
				  where  #if($ids)
				           inv.st_log_id in(
								#foreach($id in $ids)
									'$id',
								#end
						   -1)
					    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.getWmsIMOccupiedAndRelease" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				              select id,
                                     customer_code customerCode,
                                     owner_code ownerCode,
                                     bin_code binCode,
                                     sku_code skuCode,
                                     qty,
                                     inv_status_code invStatusCode,
                                     sta_code  pfDocNo,
                                     sta_type  docType,
                                     inv_transaction_time invTransactionTime
                                from t_wh_im_occupied_release t
                                where t.create_time>=:startTime
                                      and t.create_time<=:endTime
                                      #if($customerCode)
                                          and t.customer_code=:customerCode
                                      #end
                                      #if($owner)
                                          and t.owner_code=:owner
                                      #end
                                      #if($type)
                                          and t.type=:type
                                      #end
                                order by t.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.getOccupiedAndReleaseByStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				              select id,
                                     customer_code customerCode,
                                     owner_code ownerCode,
                                     bin_code binCode,
                                     sku_code skuCode,
                                     qty,
                                     inv_status_code invStatusCode,
                                     sta_code  pfDocNo,
                                     sta_type  docType,
                                     inv_transaction_time invTransactionTime
                                from t_wh_im_occupied_release t
                                where t.status=:status
                                      and  (t.error_count <5 or t.error_count is null)
                                      and  t.create_time is not null
                                order by t.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.getOccupiedAndReleaseByStatusAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				              select id,
                                     customer_code customerCode,
                                     owner_code ownerCode,
                                     bin_code binCode,
                                     sku_code skuCode,
                                     qty,
                                     inv_status_code invStatusCode,
                                     sta_code  pfDocNo,
                                     sta_type  docType,
                                     inv_transaction_time invTransactionTime
                                from t_wh_im_occupied_release t
                                where t.status=:status
                                      and  (t.error_count <5 or t.error_count is null)
                                      and  t.create_time is not null
                                      and  t.type= :type
                                order by t.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.transferExpireData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    insert into t_wh_im_occupied_release_log
					      (id,unique_key,customer_code,owner_code,bin_code,sku_code,qty,inv_status_code,sta_code,sta_type,inv_transaction_time,create_time,type,status,log_time)
					select s_t_wh_im_occupied_release_log.nextval,id,customer_code,owner_code,bin_code,sku_code,qty,inv_status_code,sta_code,sta_type,inv_transaction_time,create_time,type,status,sysdate
					from  t_wh_im_occupied_release t 
					where t.create_time<to_date(:date,'yyyy-mm-dd')
					      and t.status=:status
					      and (t.error_count <5 or  t.error_count =99 or t.error_count is null)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.removeExpireData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  delete from t_wh_im_occupied_release t  
				  where t.create_time<to_date(:date,'yyyy-mm-dd')
				        and t.status=:status
				        and (t.error_count <5 or  t.error_count =99 or t.error_count is null)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.updateOccupiedAndReleaseStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  update t_wh_im_occupied_release inv 
				  set inv.status=1
				  where inv.status =0
				        #if($ids)
							and inv.id in(
								#foreach($id in $ids)
									'$id',
								#end
						   -1)
					    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.updateIMOccupiedAndReleaseErrorCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  update t_wh_im_occupied_release inv 
				  set inv.error_count=(case when inv.error_count is null then 1 else inv.error_count+1 end)
				  where #if($ids)
						   inv.id in(
								#foreach($id in $ids)
									'$id',
								#end
						   -1)
					    #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsIMOccupiedAndRelease.deleteIMByOwnerAndouId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  delete t_wh_im_occupied_release inv 
				 
				  where   
						   inv.owner_code =:owners
						   and inv.bin_code in
						   (
						        #foreach($ouName in $ouNames)
									'$ouName',
								#end
								
						   '-1')
					   
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="WmsIMOccupiedAndRelease.insertWmsOccupiedAndRelease" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	insert into t_wh_im_occupied_release(id, customer_code, owner_code, bin_code,sku_code,qty, inv_status_code,sta_code,
   sta_type,inv_transaction_time,create_time,type, status)
   select s_t_wh_im_occupied_release.nextval,t.* from 
       ( select  c.code customerCode,
                 inv.inv_owner  ownerCode,
                 au.code binCode,
                 sku.code skuCode,
                 -inv.quantity qty,
                (case when status.name='良品' and status.is_forsale=1 then '10'
                     when status.name='待处理品' then '40'
                     else '20'
                end ) invStatusCode,
                (case when sta.type in (21,42) then nvl(sta.slip_code2,sta.slip_code1) else sta.code end ) pfDocNo,
                sta.type,
                sysdate inv_transaction_time , sysdate create_time ,0 type2,0 status
        from wms.t_wh_sku_inventory  inv
        inner join wms.t_au_operation_unit au on au.id=inv.ou_id
        inner join wms.t_bi_inv_sku sku on sku.id=inv.sku_id
        inner join wms.t_wh_inventory_status  status on inv.status_id=status.id 
        inner join wms.t_wh_sta sta on sta.code=inv.occupation_code 
        inner join wms.t_bi_customer c on c.id=sku.customer_id
        where inv.is_occupied='1' and sta.type not in('31') 
              and inv.quantity>0
              and inv.inv_owner =:owners
              
              
              and  au.code in  
                             (
						        #foreach($ouName in $ouNames)
									'$ouName',
								#end
								
						   '-1')
                 
        union all
        select   c.code customerCode,
                 nvl(stal.owner,sta.owner) ownerCode,
                 au.code  binCode,
                 sku.code skuCode,
                 -stal.quantity qty,
                (case WHEN(status.name='良品' and status.is_forsale=1) OR (STA.TYPE IN (25,42,21)) then '10'
                     when status.name='待处理品' then '40'
                     else '20'
                end ) invStatusCode,
                (case when sta.type in (21,42) then nvl(sta.slip_code2,sta.slip_code1) else sta.code end ) pfDocNo,
                 sta.type,
                  sysdate inv_transaction_time , sysdate create_time ,0 type2,0 status
          from wms.t_wh_sta sta, wms.t_wh_sta_line stal,wms.t_au_operation_unit au,wms.t_wh_inventory_status status,wms.t_bi_inv_sku sku,wms.t_bi_customer c
          where sta.id = stal.sta_id
            and sku.id=stal.sku_id
            and stal.inv_status_id = status.id(+)
            and c.id=sku.customer_id
            and au.id = sta.main_wh_id
            and (sta.status = 1 or sta.status = 20 or sta.status = 25)
            and sta.is_need_occupied = 1
            and sta.type not in('31') 
            and sta.create_time >= sysdate - 90
            and 
             (sta.owner=:owners 
               
			  or stal.owner=:owners
		     )
            and  au.code in  (
						        #foreach($ouName in $ouNames)
									'$ouName',
								#end
								
						   '-1')
            
      ) t
      
       ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- vmi退仓拣货单头信息 -->
	<bean id="StaLine.findBackPrintHanderInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.create_time createtime,un.name housename,sta.code stacode,sta.sku_qty skyqty from t_wh_sta sta,t_au_operation_unit un where sta.main_wh_id=un.id and sta.id=:staid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 获取staId头信息 -->
	<bean id="StaLine.findStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.sta_id 
					from t_wh_sta_line l
					where l.id=:staLineId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findBackListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select
            dis.code AS district,
            whlocation.code locationcode,
            whPickZone.code as pickZoneCode,  
            sku.code skucode,
            sku.bar_code  barcode,      
            sku.jm_code jmcode,
            sku.key_properties keyproperties, 
            temp.strExpireDate as strexpiredate,
            temp.qty quantity
            from           
            (
            select sta.IDX1,l.sku_id sku_id,l.location_id loc_id,to_char(l.expire_date,'yyyyMMdd') as strExpireDate, sum(nvl(l.quantity,0)) qty
            from t_wh_stv_line l,
                     t_wh_stv stv,
                     t_wh_sta sta
            where sta.status not in (17,10) 
                      and stv.sta_id = sta.id 
                      and l.stv_id=stv.id
                      and sta.id = :staid
            group by l.sku_id,l.location_id,l.expire_date,sta.IDX1
            ) temp,
            T_BI_INV_SKU sku,t_wh_zoon z,
            T_WH_LOCATION whlocation ,
            T_WH_DISTRICT dis,
            T_WH_PICK_ZOON whPickZone
            where temp.sku_id = sku.id
            and temp.loc_id = whlocation.id
            and dis.id=whlocation.district_id
            and whlocation.zoon_id = whPickZone.id(+)
            and whPickZone.wh_zoon_id=z.id(+)
            and (whPickZone.status = 1 OR whPickZone.status IS NULL)
            order by whPickZone.code, whlocation.sort,whlocation.code,temp.IDX1
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ImportFileLog.findAllTodoFile" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select id,type,wh_id,file_name,create_id,colum1,colum2 from t_wh_import_file_log g where sta_code is null and status = 1 and wh_id=:whId  and rownum <5 order by create_time 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ImportFileLog.findAllTodoWhId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  select wh_id from t_wh_import_file_log g where sta_code is null and status = 1 group by wh_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ImportFileLog.bindFileByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
         			 update t_wh_import_file_log t set t.sta_code =:code,t.memo=:memo,status=10,last_modify_time=sysdate where  id =:id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="ImportFileLog.findAllToDeleteFile" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select g.id,g.type,g.file_name,g.colum2 from t_wh_import_file_log g  left join t_wh_sta a on a.code = g.sta_code 
 	where g.status = 10 and   ((g.sta_code is not null and a.status in(10,17)) or (g.sta_code is null and g.create_time <sysdate -7))
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<bean id="LevisYxTransferOut.saveRtnResult" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into T_LEVIS_YX_TRANSFER_OUT(id,Create_Time,Version,Last_Modify_Time,Status,
					Transfer_Prefix,Receive_Date,From_Location,To_Location,Upc,Quantity,Line_Sequence_No,Transfer_No)
					select s_T_CONVERSE_YX_TRANSFER_OUT.Nextval,sysdate,sysdate,sysdate,1,c.vmi_code,
					to_char(sysdate,'yyyyMMdd'),c.vmi_code,sta.to_location,sku.ext_code2,line.complete_quantity,rownum,sta.slip_code
					from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku sku,t_bi_channel c
					where sta.id = :staId and line.sta_id= sta.id and line.sku_id=sku.id and c.code = sta.owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MessageConsumer.findByMsgList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
					        t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        to_char(t.receive_time,'yyyy-mm-dd hh24/mi/ss') receiveTime,
					        to_char(t.deal_time,'yyyy-mm-dd hh24/mi/ss') dealTime,
					        t.compensate_count as compensateCount
					 from t_message_consumer t
					 where '1'='1'
							 #if($id)
									and t.id = :id
							 #end
							 #if($msgId)
									and t.msg_id = :msgId
							 #end
							 #if($msgType)
									and t.msg_type = :msgType
							 #end
							 #if($topics)
									and t.topic in(
										#foreach($topic in $topics)
											'$topic',
										#end
								   -1)
							 #end
									and t.status in ('0','2')
									and t.brand='2'
									and (t.compensate_count is null or t.compensate_count<5 )
									and t.receive_time <=sysdate-1/(24*12)
									and rownum<=5000
				     order by t.id desc
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MessageConsumer.findListByQueryMapWithPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
					        t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        to_char(t.receive_time,'yyyy-mm-dd hh24/mi/ss') receiveTime,
					        to_char(t.deal_time,'yyyy-mm-dd hh24/mi/ss') dealTime,
					        t.compensate_count as compensateCount
					 from t_message_consumer t
					 where '1'='1'
							 #if($id)
									and t.id = :id
							 #end
							 #if($msgId)
									and t.msg_id = :msgId
							 #end
							 #if($msgType)
									and t.msg_type = :msgType
							 #end
							 #if($topics)
									and t.topic in(
										#foreach($topic in $topics)
											'$topic',
										#end
								   -1)
							 #end
							 #if($status)
									and t.status = :status
							 #end
							 #if($receiveTime)
									and t.receive_time = :receiveTime
							 #end
							 #if($dealTime)
									and t.deal_time = :dealTime
							 #end
							 #if($tags)
									and t.tags = :tags
							 #end
				     order by t.id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MessageConsumer.findMsgByMsgId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
					        t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        to_char(t.receive_time,'yyyy-mm-dd hh24/mi/ss') receiveTime,
                 			to_char(t.deal_time,'yyyy-mm-dd hh24/mi/ss') dealTime,
                 			t.compensate_count as compensateCount
					 from t_message_consumer t
					 where '1'='1'
					  #if($msgId)
						   and t.msg_id = :msgId
					  #end
					    #if($msgType)
						   and t.msg_type = :msgType
					  #end
					 
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<bean id="MessageConsumer.delMsgByMsgId" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
					<![CDATA[
						delete from T_MESSAGE_CONSUMER t where t.msg_id=:msgId and t.msg_type=:msgType
					]]>
				</value>
			</constructor-arg>
		</bean>
		
		
			<bean id="MessageConsumer.updateMsgByMsgId" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
					<![CDATA[
						update  T_MESSAGE_CONSUMER t  set t.status=1,t.deal_time=sysdate where t.msg_id=:msgId and t.msg_type=:msgType
					]]>
				</value>
			</constructor-arg>
		</bean>
		
	
		<bean id="MessageConsumer.findMsgByMsgIdByDto" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
					        t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        t.receive_time  receiveTime,
                 			t.deal_time   dealTime
					 from t_message_consumer t
					 where '1'='1'
					  #if($msgId)
						   and t.msg_id = :msgId
					  #end
					    #if($msgType)
						   and t.msg_type = :msgType
					  #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<bean id="MessageProducer.findMsgList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
				            t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        to_char(t.send_time,'yyyy-mm-dd hh24/mi/ss') sendTime,
					        to_char(t.feedback_time,'yyyy-mm-dd hh24/mi/ss') feedbackTime
					 from t_message_producer t
					 where '1'='1'
							 #if($id)
									and t.id = :id
							 #end
							 #if($msgId)
									and t.msg_id = :msgId
							 #end
							 #if($msgType)
									and t.msg_type = :msgType
							 #end
							 #if($topics)
									and t.topic in(
										#foreach($topic in $topics)
											'$topic',
										#end
								   -1)
							 #end
							 #if($status)
									and t.status = :status
							 #end
							 #if($sendTime)
									and t.send_time = :sendTime
							 #end
							 #if($feedbackTime)
									and t.feedback_time = :feedbackTime
							 #end
							 #if($tags)
									and t.tags = :tags
							 #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="MessageProducer.findListByQueryMapWithPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
				            t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        to_char(t.send_time,'yyyy-mm-dd hh24/mi/ss') sendTime,
					        to_char(t.feedback_time,'yyyy-mm-dd hh24/mi/ss') feedbackTime
					 from t_message_producer t
					 where '1'='1'
							 #if($id)
									and t.id = :id
							 #end
							 #if($msgId)
									and t.msg_id = :msgId
							 #end
							 #if($msgType)
									and t.msg_type = :msgType
							 #end
							 #if($topics)
									and t.topic in(
										#foreach($topic in $topics)
											'$topic',
										#end
								   -1)
							 #end
							 #if($status)
									and t.status = :status
							 #end
							 #if($sendTime)
									and t.send_time = :sendTime
							 #end
							 #if($feedbackTime)
									and t.feedback_time = :feedbackTime
							 #end
							 #if($tags)
									and t.tags = :tags
							 #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MessageProducer.findMsgByMsgId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
				            t.msg_id msgId,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.status status,
					        to_char(t.send_time,'yyyy-mm-dd hh24/mi/ss') sendTime,
					        to_char(t.feedback_time,'yyyy-mm-dd hh24/mi/ss') feedbackTime
					 from t_message_producer t
					 where '1'='1'
							#if($msgId)
							    and t.msg_id = :msgId
							#end
							#if($msgType)
							    and t.msg_type = :msgType
							#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="MessageConfig.findMessageConfigByParameter" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.is_open isOpen
					 from t_message_config t
					 where '1'='1'
							#if($msgType)
							    and t.msg_type = :msgType
							#end
							#if($topic)
							    and t.topic = :topic
							#end
							#if($tags)
							    and t.tags = :tags
							#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="MessageConfig.findMessageConfigPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				     select t.id,
					        t.msg_type msgType,
					        t.topic topic,
					        t.tags tags,
					        t.description,
					        t.is_open isOpen
					 from t_message_config t
					 where '1'='1'
							#if($msgType)
							    and t.msg_type = :msgType
							#end
							#if($topic)
							    and t.topic = :topic
							#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ApplyInvoiceRequestCommand.findApplyInvoiceRequest" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    select sta.slip_code2 orderCode,
				           sta.total_actual *100||''  amount,
				           to_char(sta.order_create_time,'yyyyMMddhhmmss') time, 
				           nvl(ac.ext1,sta.owner) shopCode, 
					       nvl(sta.is_online_invoice,0)||'' isCheckedInvoice 
					from t_wh_sta sta ,t_bi_channel ch , t_bi_channel_special_action ac 
					where sta.owner=ch.code 
					     and ch.id=ac.channel_id
					     and ac.type=20
					     and sta.id= :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findCancelStaByPickingCode" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				 SELECT 
				 sta.id as id,
				 sta.code as code ,
				 sta.slip_code as refSlipCode ,
				 d.lpcode as lpcode ,
				 d.tracking_no  as transNo,
				 sta.PG_INDEX as pgIndex  
				 FROM t_wh_sta sta ,
				 t_wh_sta_delivery_info d ,
				 T_WH_STA_PICKING_LIST pic WHERE
				sta.id=d.id AND  
				sta.picking_list_id =pic.id AND
				 pic.code=:pickingListCode AND 
				 pic.wh_id=:ouId	AND
				 (sta.status =15 or sta.status=17) 
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
		<bean id="StockTransApplication.getPickingListIdByCode" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				SELECT sta.picking_list_id  as pickId FROM wms.t_wh_sta sta WHERE CODE = :code
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.getListWmsZhanYongLastTime" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				SELECT sta.id    FROM  t_wh_sta sta WHERE   sta.status in (1,20) and sta.type in (21,42) and   sta.ocp_code like 'MQ%'  and sta.create_time >sysdate-30 and sta.last_modify_time <= sysdate -:num  and rownum<=5000
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
	<bean id="StockTransApplication.findAdCheckSta" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				select id from t_wh_ad_check_log l where l.sta_id = :staId
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
	<bean id="StockTransApplication.saveAdCheck" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				insert into t_wh_ad_check_log l values(S_WH_AD_CHECK_LOG.nextval, :staId, :msg, :isBeforePrint)
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaLinePrintBeforeCancel" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				select (a.invQty-a.lineQty) qty
				from (
				select sta.id,
				       nvl((select sum(l.quantity) from t_wh_sta_line l where l.sta_id=sta.id),0) lineQty,
				       nvl((select sum(inv.quantity) from t_wh_sku_inventory inv where inv.occupation_code=sta.code),0) invQty
				from t_wh_sta sta
				where sta.id= :staId
				) a
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaLineCancel" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
	     <value>
	       <![CDATA[
				
				select l.sta_id  from t_wh_ad_check_log l where l.sta_id = :staId and l.is_before_print=0
	         ]]>
	     </value>
	   </constructor-arg>
	</bean>
	
	<bean id="Warehouse.insertLfRtnOutbound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		insert into T_WH_MSG_RTN_OUTBOUND(ID,LP_CODE,OUTBOUND_TIME,SOURCE,STA_CODE,STATUS,TRACK_NAME,
		TRACKING_NO,VERSION,WEIGHT,CREATE_TIME,UPDATE_TIME,field1,CTN_TYPE)values
		(S_T_WH_MSG_RTN_OUTBOUND.Nextval,:wls,sysdate,(
		select source  from t_wh_msg_outbound_order  where sta_code=:staCode),
		:staCode,1,:wls,:ydh,1,:weight,sysdate,sysdate,:field,:ctnType)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Warehouse.insertLfRtnLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		insert into T_WH_MSG_RTN_ADD_LINE(ID,BAR_CODE,QTY,SKU_CODE,VERSION,MSG_RTN_OUTBOUND_ID)values
		(S_T_WH_MSG_RTN_ADD_LINE.nextval,:ctnType,1,:ctnType,0,(select id from T_WH_MSG_RTN_OUTBOUND where field1 = :field))
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.insertWmsOccupiedAndReleaseByInvCheckLoss" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_wh_im_occupied_release(id,customer_code,owner_code,bin_code,sku_code,qty,inv_status_code,sta_code,sta_type,inv_transaction_time,create_time,
						type,status) 
						select S_T_WH_INV_CHECK_DIF_LINE.Nextval,
						customerCode,
						OWNER_CODE,
						BIN_CODE,
						SKU_CODE,
						QTY,
						INV_STATUS_CODE,
						STA_CODE,
						STA_TYPE,
						sysdate,
						sysdate,
						0,
						0
						from (
						select  
						dif.quantity as QTY,
						c.code as customerCode,
						dif.owner as OWNER_CODE,
						c.code as CUSTOMER_CODE,
						ou.code as BIN_CODE,
						sku.code as SKU_CODE,
						(case when status.name='良品' and status.is_forsale=1 then '10'
						when status.name='待处理品' then '40'
						else '20'
						end ) INV_STATUS_CODE,
						invc.code as STA_CODE,
						invc.type as STA_TYPE
						from 
						t_wh_inv_check invc,
						t_wh_inv_check_dif_line dif,
						t_wh_sku_inventory inv,
						t_bi_inv_sku sku,
						t_bi_channel o,
						t_bi_customer c,
						T_AU_OPERATION_UNIT ou,
						T_WH_INVENTORY_STATUS status 
						where
						invc.id = :invCheckId 
						and invc.id = dif.inv_check_id
						and dif.quantity < 0
						and inv.occupation_code = :invCheckCode
						and inv.location_id = dif.location_id
						and inv.sku_id = dif.sku_id 
						and sku.id = dif.sku_id
						and inv.status_id = inv.status_id
						and inv.status_id = status.id
						and o.code = dif.owner 
						and o.customer_id = c.id
						and ou.id = invc.ou_id)
       			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WmsIMOccupiedAndRelease.insertWmsOccupiedAndReleaseByInvCheckLossCancel" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					insert into t_wh_im_occupied_release(id,customer_code,owner_code,bin_code,sku_code,qty,inv_status_code,sta_code,sta_type,inv_transaction_time,create_time,
					type,status) 
					select S_T_WH_INV_CHECK_DIF_LINE.Nextval,
					customerCode,
					OWNER_CODE,
					BIN_CODE,
					SKU_CODE,
					QTY,
					INV_STATUS_CODE,
					STA_CODE,
					STA_TYPE,
					sysdate,
					sysdate,
					1,
					0
					from (
					select  
					abs(dif.quantity) as QTY,
					c.code as customerCode,
					dif.owner as OWNER_CODE,
					c.code as CUSTOMER_CODE,
					ou.code as BIN_CODE,
					sku.code as SKU_CODE,
					(case when status.name='良品' and status.is_forsale=1 then '10'
					when status.name='待处理品' then '40'
					else '20'
					end ) INV_STATUS_CODE,
					invc.code as STA_CODE,
					invc.type as STA_TYPE
					from 
					t_wh_inv_check invc,
					t_wh_inv_check_dif_line dif,
					t_wh_sku_inventory inv,
					t_bi_inv_sku sku,
					t_bi_channel o,
					t_bi_customer c,
					T_AU_OPERATION_UNIT ou,
					T_WH_INVENTORY_STATUS status 
					where
					invc.id = :invCheckId 
					and invc.id = dif.inv_check_id
					and dif.quantity < 0
					and inv.occupation_code = :invCheckCode 
					and inv.location_id = dif.location_id
					and inv.sku_id = dif.sku_id 
					and sku.id = dif.sku_id
					and inv.status_id = inv.status_id
					and inv.status_id = status.id
					and o.code = dif.owner 
					and o.customer_id = c.id
					and ou.id = invc.ou_id)
       			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="IntfcCfm.findIntfcCfmByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select c.id,c.uuid,c.wms_code,c.store_code
					from T_WH_INTFC_CFM c
					where c.wms_code= :staCode
					      and c.stv_id= :stvId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="IntfcCfm.findIntfcCfmDataSource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select distinct c.data_source
					from t_wh_intfc_cfm c
					where c.status in (1,3)
						  and (c.error_count is null or c.error_count <5)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="IntfcCfm.getIntfcCfmByNeedSend" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select a.*
					from (
					select c.*
					from t_wh_intfc_cfm c
					where c.status in (1,3)
					      and (c.error_count is null or c.error_count <5)
					      and c.data_source= :dataSource
					order by c.id asc  
					) a
					where rownum<=10000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="IntfcCfm.findIntfcCfmByNeedSend" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select a.*
					from (
					select c.*
					from t_wh_intfc_cfm c
					where c.status in (1,3) and wms_type=:type
					      and (c.error_count is null or c.error_count <5)
					      and c.data_source= :dataSource
					order by c.id asc  
					) a
					where rownum<=1000
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="IntfcLineCfm.findIntfcLineCfmByIcId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					
					select c.CARTON_NO,c.outbound_box_code outboundBoxCode,c.upc,c.INV_STATUS,sum(ACTUAL_QTY) as actualQty
					from T_WH_INTFC_line_CFM c
					where c.intfc_id=:icId group by c.CARTON_NO,c.outbound_box_code ,c.upc,c.INV_STATUS
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.findOccupyInventoryByStaIdPartial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			        select inv.id
			  from t_wh_sku_inventory inv,t_wh_inventory_status ss,t_wh_location loc,t_wh_location_transtype lt,
			        (select sta.code,
			               stvl.owner,
			               sta.main_wh_id,
			               stvl.sku_id,
			               stvl.location_id,
			               stvl.inv_status_id,
			               stv.transtype_id,
			               sum(stvl.quantity) as quantity
			        from t_wh_sta sta,t_wh_stv stv,t_wh_stv_line stvl
			        where sta.id = stv.sta_id
			              and stv.id = stvl.stv_id
			              and sta.id = :staid 
			              and stvl.sku_id = :skuid
			        group by sta.code,
			               stvl.owner,
			               sta.main_wh_id,
			               stvl.sku_id,
			               stvl.location_id,
			               stvl.inv_status_id,
			                stv.transtype_id) stvl
			  where inv.status_id = ss.id
			        and loc.id = inv.location_id
			        and loc.IS_AVAILABLE = 1
			        and nvl(loc.is_locked,0) = 0
			        and (inv.occupation_code is NULL or inv.occupation_code = '')
			        and stvl.owner = inv.inv_owner
			        and stvl.main_wh_id = inv.ou_id
			        and stvl.sku_id = inv.sku_id
			        and stvl.location_id = inv.location_id
			        and stvl.inv_status_id = inv.status_id
			        and lt.location_id=loc.id
			        and stvl.transtype_id=lt.transtype_id
			        and inv.quantity > 0
			      order by inv.sku_id,inv.location_id,inv.status_id
			       for update of inv.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="WhPingAnCover.findPingAnCoverToHub4" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select  id,
					    pa.sta_code,
						pa.trans_serial_no,
						pa.cargo_info,
						pa.conveyance_no,
						pa.consignor_date,
						pa.signing_odd_date,
						pa.cargo_big_type,
						pa.cargo_detail_type,
						pa.cargo_risk_depict,
						pa.status,
						pa.cover_error_code,
						pa.main_wh_id,
						pa.merit,
						pa.EXPRESS_CODE,
						pa.create_time
					from T_WH_PINGAN_COVER pa 
					where rownum<=5000 and pa.cover_error_number<3 and pa.status!=2
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheck.findInventoryCheckCommandListByType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
          					select 
          					    t.id as id,
                      			t.code as code,
                      			t.status as intInvCheckStatus,
								t.create_time as createTime,
			                    t.slip_code as slipCode,
			                    b.name as owner,
			                    c.option_value as reasonCode
          						from 
          						T_WH_INV_CHECK t 
          						left join t_sys_choose_option c on t.reason_code = c.option_key and c.category_code = 'converseADJReason',
          					t_bi_channel b
          					where 
          					t.ou_id = :ouid 
          					and t.TYPE= :type
          					and (t.STATUS = 1 or t.STATUS = 5) 
          					and t.shop_id = b.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="InventoryBatch.getWmsSalesInventoryBatch" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
        <![CDATA[
				select t.BATCH_CODE as batchCode,t.LINE_COUNT as lineCount,t.TOTAL_INVENTORY as totalInventory from T_INVENTORY_BATCH t where 1=1 
				  #if($startTime)
			   		and	t.CREATE_TIME> :startTime 
			   	  #end
			   	  
			   	  #if($endTime)
			   		and	t.CREATE_TIME< :endTime 
			   	  #end
          ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclaration.findOrderNetWt" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sum(l.quantity * (select sum(d.net_wt) from T_WH_SKU_DECLARATION d where d.sku_code=sku.code)) netWt
					from t_wh_sta_line l,t_bi_inv_sku sku
					where l.sku_id=sku.id
					      and l.sta_id= :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="CustomsDeclaration.countCustomsDeclarationWeight" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		  update T_WH_CUSTOMS_DECLARATION t1  
	      set  t1.net_wt=
	      CASE WHEN t1.net_wt is null or t1.net_wt='' then
	        (select t2.weight from (select  cu.id as id2,sum(cl.plan_qty*nvl(sku.net_wt,0)) as weight from T_WH_CUSTOMS_DECLARATION cu  
	        left join T_WH_CUSTOMS_DECLARATION_LINE cl 
	        on cu.id=cl.customs_declaration_id,
	        T_WH_SKU_DECLARATION sku where 
	        cl.sku_code=sku.sku_code group by 
	        cu.id) t2 where t1.id= t2.id2)
	      ELSE t1.net_wt END,
	        t1.gross_wt=
	      CASE WHEN t1.gross_wt is null or t1.gross_wt='' then
	        (select t2.weight from (select  cu.id as id2,sum(cl.plan_qty*nvl(sku.net_wt,0)) as weight from T_WH_CUSTOMS_DECLARATION cu  
	        left join T_WH_CUSTOMS_DECLARATION_LINE cl 
	        on cu.id=cl.customs_declaration_id,
	       T_WH_SKU_DECLARATION sku where cl.sku_code=sku.sku_code group by cu.id) t2 where t1.id= t2.id2)
	       ELSE t1.gross_wt END ,
	          t1.is_lack_sku = 0     
	    	where (t1.is_lack_sku = 1 or t1.is_lack_sku is null)   and t1.main_wh_id =:ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="CustomsDeclaration.findCustomsDeclarationLackSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select  cd.id,cd.wms_code from T_WH_CUSTOMS_DECLARATION  cd where cd.is_lack_sku =1 and cd.main_wh_id= :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="CustomsDeclaration.findCustomsDeclarationByNeedSend" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select  
                	 cd.id,
                     cd.form_id_source fromIdSource,
                     cd.wms_code,
                     cd.slip_code,
                     cd.platform_code platFromCode,
                     cd.owner,
                     cd.wms_type,
                     cd.wms_status,
                     cd.prestowage_no,
                     cd.gross_wt,
                     cd.net_wt,
                     cd.pack_no,
                     cd.wrap_type,
                     cd.license_plate_number licensePlateNumber,
                     cd.is_to_modify,
                     cd.status,
                     cd.main_wh_id mainWhId,
                     cd.create_time,
                     cd.create_id,
                     cd.create_user,
                     cd.version,
                     cd.type,
                     cd.is_loading,
                     cd.is_lack_sku,
                     cd.error_count,
                     cd.error_msg,
                     cd.declaration_status 
                from T_WH_CUSTOMS_DECLARATION  cd 
                where cd.status in (1,3) 
                	and (cd.error_count<5 or cd.error_count is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
</beans>	
