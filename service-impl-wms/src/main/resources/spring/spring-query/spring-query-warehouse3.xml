<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<bean id="StockTransApplication.findSalesStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							#if($skus || $skuQty || $skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
								distinct 
							#end
							#if("$skuQty"=="1")
								pro_id,
								sku_id,
							#end
							id,code,refSlipCode,createTime,businessSeqNo,arriveTime,
							inboundTime,intStatus,intType,owner,lpcode,stvTotal,shopId,
							isManualWeighing,
							pickingCode,receiver,trackingNo,memo,isNeedInvoice
						from(
							select 
								#if("$skuQty"=="1")
									sku.product_id pro_id,
									sku.id sku_id,
								#end
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								dryInfo.Store_Com_Is_Need_Invoice as isNeedInvoice,
								sta.OWNER owner,
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            sta.sku_qty stvTotal,
					            nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,
					            sta.OWNER shopId
					        from 
					          t_wh_sta sta
					            #if($skus || $skuQty || $skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
		                            left join t_wh_sta_line l on l.sta_id=sta.id
	                                left join t_bi_inv_sku sku on sku.id = l.sku_id
					            #end
					            #if($industryId)
					             	inner join t_bi_channel s on sta.owner = s.code
					             	inner join t_au_operation_unit shopau on s.ou_id = shopau.id
					            #end
					            left join T_BI_WAREHOUSE wh on wh.OU_ID=sta.MAIN_WH_ID
					            left join t_bi_channel shop on sta.owner = shop.code
					            left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id,
					          T_WH_STA_DELIVERY_INFO dryInfo
					            #if($trackingNo)
					            	,(select pg.sta_delivery_info_id as stdId from t_wh_package_info pg 
					            	 where
			                    		#if($isLike)
			                    			pg.tracking_no like :trackingNo
			                    		#else
			                    			pg.tracking_no = :trackingNo
			                    		#end
					            	 group by pg.sta_delivery_info_id) package
					            #end	
			                    where 
			                    	sta.id <> -1
			                    	#if($mainWarehouse)
			                    		and sta.MAIN_WH_ID=:mainWarehouse
			                    	#else
			                    		and sta.MAIN_WH_ID in (
			                    			#foreach($id in $idList)
			                    				$id,
			                    			#end
			                    			-1
			                    		)
			                    	#end
			                    	and sta.id=dryInfo.id
			                    	#if($skuQty)
			                    		and sta.sku_qty = $skuQty
			                    	#end
			                    	#if($skuName)
			                    		and sku.name like '$skuName%'
			                    	#end
			                    	#if($skuCode)
			                    		and sku.jm_code = '$skuCode'
			                    	#end
									#if($skuCodeList)
			                    		and ( 1 != 1
			                    		#foreach($skuTmp in $skuCodeList )
			                    			or sku.jm_code = '$skuTmp'
			                    		#end
			                    		)
			                    	#end
			                    	#if($skuJmCode)
			                    		and sku.jm_code like '$skuJmCode%'
			                    	#end
			                    	#if($skuKeyProperties)
			                    		and sku.key_properties like '$skuKeyProperties%'
			                    	#end
			                    	#if($skuBarCode)
			                    		and sku.bar_code like '$skuBarCode%'
			                    	#end
			                    	#if($province)
			                    		and dryInfo.province like :province
			                    	#end
									#if($cities)
			                    		and ( 1 != 1
			                    		#foreach($city in $cities )
			                    			or dryInfo.city like '%$city%'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isLpcodeNotNull || "$!isLpcodeNotNull"=="false")
			                    		#if("$!isLpcodeNotNull"=="true")
			                    			and dryInfo.lpcode is not null
			                    		#else
			                    			and dryInfo.lpcode is null
			                    		#end
			                    	#end
			                    	#if($pickingMode)
			                    		and pl.picking_mode = :pickingMode
			                    	#end
			                    	#if($skus)
			                    		and sta.skus like :skus
			                    	#end
			                    	#if ($isCkSameSeqNoSta)
				                    	and not exists (
				                    		select 1 from t_wh_sta sta1 
				                    		where sta.bi_seq_no = sta1.bi_seq_no and sta1.status != 10 and sta1.type = 41
				                    		#if($fromDate)
					                    		and sta1.create_time >= :fromDate
					                    	#end
					                    	#if($toDate)
					                    		and sta1.create_time <=:toDate
					                    	#end
				                    		#if(!$fromDate && !$toDate)
							            		and sta1.create_time > sysdate - 91
							            	#end
				                    		)
			                    	#end
			                    	#if($trackingNo)
			                    		and dryInfo.id = package.stdId
			                    	#end
			                    	and (1 !=1 
			                    		#foreach($status in $statusList)
			                    			or sta.status=$status       
			                    		#end
			                    	)
			                    	#if($fromDate)
			                    		and sta.create_time >= :fromDate
			                    	#end
			                    	#if($toDate)
			                    		and sta.create_time <=:toDate
			                    	#end
			                    	#if(!$fromDate && !$toDate)
			                    		and sta.create_time > sysdate - 91
			                    	#end
			                    	#if($code)
			                    		and sta.code like :code
			                    	#end
			                    	#if($refSlipCode)
			                    		and sta.SLIP_CODE like :refSlipCode
			                    	#end
			                    	and(1 != 1
			                    		#foreach($type in $typeList)
			                    			or sta.type = $type
			                    		#end
			                    	)
			                    	#if("$!isNeedInvoice"=="true")
			                    		and dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice
			                    	#end
			                    	#if("$!isNeedInvoice"=="false")
			                    		and (dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice or dryInfo.Store_Com_Is_Need_Invoice is null)
			                    	#end
			                    	#if($pickingListCode)
			                    		and pl.code like :pickingListCode
			                    	#end
			                    	#if($lpCode)
			                    		and dryInfo.LPCODE = :lpCode
			                    	#end
			                    	#if($receiver)
			                    		and dryInfo.receiver like :receiver
			                    	#end
			                    	
			                    	#if($shopInnerCodes)
			                    		and ( 1 != 1
			                    		#foreach($innercode in $shopInnerCodes)
			                    			or sta.owner = '$innercode'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isSpPg)
								        #if("$!isSpPg"=="true")
								           and  sta.IS_SPECIAL_PACKAGING = 1
								        #end
								        #if("$!isSpPg"=="false")
								           and  (sta.IS_SPECIAL_PACKAGING = 0 or sta.IS_SPECIAL_PACKAGING is null)
								        #end
							        #end
							        #if($shopId)
			                    		and  sta.owner = :shopId
			                    	#end
			                    	#if($checkPickingList)
			                    		and sta.PICKING_LIST_ID is null
			                    	#end
			                    	#if("$!isSnSta"=="true")
			                    		and sta.is_sn = 1
									#end
			                    	#if("$!isSnSta"=="false")
			                    		and (sta.is_sn = 0 or sta.is_sn is null)
									#end
									#if($industryId)
										and shopau.parent_ou_id = :industryId
									#end
									#if($skuMaxLength)
										#if("$!skuMaxLength"=="1")
											and nvl(sta.sku_max_length,0) >= (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
										#if("$!skuMaxLength"=="0")
											and nvl(sta.sku_max_length,0) < (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
									#end
			              ) tmp
			                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransApplication.updateStaSkus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_sta set skus = (select count(1) || :skuSlipChar || stragg(sku_id) 
						from (select l.sku_id from t_wh_sta_line l where l.sta_id = :staId group by l.sku_id order by sku_id)) where id = :staId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CoachPriceData.updatePriceStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_coach_price_data set status = :newStatus where status = :oldStatus]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CoachPriceData.updateNotRmbPriceStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_coach_price_data set status = :newStatus where currentcy<>:currentcy]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CoachProductData.updateProductStatusByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_coach_product_data set master_status = :newStatus where upccode=:skuCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CacheProductData.updateCchCPStatusByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update T_CACHE_PRODUCT_DATA set status = :newStatus where items_barcode=:skuCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CoachProductData.deleteProductStatusByBarCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[delete from t_coach_product_data where upccode=:skuCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CoachPriceData.insertPriceLogFromCoachPrice" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[insert into T_MQ_SKU_PRICE_LOG
					  (ID, SUPPLIER_CODE, RETAIL_PRICE, EFF_DATE, SHOP_ID, OP_TYPE)
					  select S_T_MQ_SKU_PRICE_LOG.nextval,
					         ITEM_CODE,
					         RETAIL_PRICE,
					         sysdate,
					         :shopId as SHOP,
					         :opType as OP_TYPE
					    from t_coach_price_data
					   where status = 1 and currentcy='RMB'  
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 页面查询追加查询条件：行业、是否包含大件商品fanht -->
	<bean id="StockTransApplication.findSalesStaListPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select 
							#if($skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
								distinct
							#end
							id,code,refSlipCode,createTime,businessSeqNo,arriveTime,
							inboundTime,intStatus,intType,owner,lpcode,stvTotal,shopId,pickingCode,receiver,trackingNo,memo,isNeedInvoice
						from(
							select 
								sta.id id,
		            			pl.code pickingCode,
								sta.code code,
								sta.SLIP_CODE refSlipCode,
								sta.create_time createTime,
								sta.BI_SEQ_NO businessSeqNo,
								sta.ARRIVE_TIME arriveTime,
								sta.INBOUND_TIME inboundTime,
								sta.status intStatus,
								sta.TYPE intType,
								sta.MEMO memo,
								dryInfo.Store_Com_Is_Need_Invoice as isNeedInvoice,
								sta.OWNER owner,
					            dryInfo.lpcode lpcode,
					            dryInfo.receiver receiver,
					            dryInfo.TRACKING_NO as trackingNo,
					            sta.sku_qty stvTotal,
					            sta.owner shopId
					        from 
					          t_wh_sta sta
					            #if($skuCode || $skuJmCode || $skuName || $skuKeyProperties || $skuBarCode || $skuCodeList)
		                            left join t_wh_sta_line l on l.sta_id=sta.id
	                                left join t_bi_inv_sku sku on sku.id = l.sku_id
					            #end
					            #if($industryId)
					             	inner join t_bi_channel s on sta.owner = s.code
					             	inner join t_au_operation_unit shopau on s.ou_id = shopau.id
					            #end
					            left join t_bi_channel shop on sta.owner = shop.code
					            left join t_wh_sta_picking_list pl on sta.picking_list_id = pl.id,
					            	T_WH_STA_DELIVERY_INFO dryInfo
					            #if($trackingNo)
					            	,(select pg.sta_delivery_info_id as stdId from t_wh_package_info pg 
					            	 where
			                    		#if($isLike)
			                    			pg.tracking_no like :trackingNo
			                    		#else
			                    			pg.tracking_no = :trackingNo
			                    		#end
					            	 group by pg.sta_delivery_info_id) package
					            #end	
			                    where 
			                    	sta.MAIN_WH_ID=:mainWarehouse
			                    	and sta.id=dryInfo.id
			           
			                    	#if($skuQty)
			                    		and sta.sku_qty = $skuQty
			                    	#end
			                    	#if($skuName)
			                    		and sku.name like '$skuName%'
			                    	#end
			                    	#if($skuCode)
			                    		and sku.jm_code = '$skuCode'
			                    	#end
									#if($skuCodeList)
			                    		and ( 1 != 1
			                    		#foreach($skuTmp in $skuCodeList )
			                    			or sku.jm_code = '$skuTmp'
			                    		#end
			                    		)
			                    	#end
			                    	#if($skuJmCode)
			                    		and sku.jm_code like '$skuJmCode%'
			                    	#end
			                    	#if($skuKeyProperties)
			                    		and sku.key_properties like '$skuKeyProperties%'
			                    	#end
			                    	#if($skuBarCode)
			                    		and sku.bar_code like '$skuBarCode%'
			                    	#end
			                    	
			                    	#if($province)
			                    		and dryInfo.province like :province
			                    	#end
									#if($cities)
			                    		and ( 1 != 1
			                    		#foreach($city in $cities )
			                    			or dryInfo.city like '%$city%'
			                    		#end
			                    		)
			                    	#end
			                    	#if($isLpcodeNotNull || "$!isLpcodeNotNull"=="false")
				                    	#if("$!isLpcodeNotNull"=="true")
				                    		and dryInfo.lpcode is not null
				                    	#else
				                    		and dryInfo.lpcode is null
				                    	#end
				                    #end
			                    	#if($pickingMode)
			                    		and pl.picking_mode = :pickingMode
			                    	#end
			                    	#if($skus)
			                    		and sta.skus like :skus
			                    	#end
			                    	#if ($isCkSameSeqNoSta)
				                    	and not exists (
				                    		select 1 from t_wh_sta sta1 
				                    		where sta.bi_seq_no = sta1.bi_seq_no and sta1.status != 10 and sta1.type = 41
				                    		#if($fromDate)
					                    		and sta1.create_time >= :fromDate
					                    	#end
					                    	#if($toDate)
					                    		and sta1.create_time <=:toDate
					                    	#end
				                    		#if(!$fromDate && !$toDate)
												and sta1.create_time > sysdate - 91
											#end
				                    		)
			                    	#end
			                    	#if($trackingNo)
			                    		and dryInfo.id = package.stdId
			                    	#end
			                    	and (1 !=1 
			                    		#foreach($status in $statusList)
			                    			or sta.status=$status       
			                    		#end
			                    	)
			                    	#if($fromDate)
			                    		and sta.create_time >= :fromDate
			                    	#end
			                    	#if($toDate)
			                    		and sta.create_time <=:toDate
			                    	#end
			                    	#if(!$fromDate && !$toDate)
										and sta.create_time > sysdate - 91
									#end
			                    	#if($code)
			                    		and sta.code like :code
			                    	#end
			                    	#if($refSlipCode)
			                    		and sta.SLIP_CODE like :refSlipCode
			                    	#end
			                    	and(1 != 1
			                    		#foreach($type in $typeList)
			                    			or sta.type = $type
			                    		#end
			                    	)
			                    	#if("$!isNeedInvoice"=="true")
			                    		and dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice	
			                    	#end
			                    	#if("$!isNeedInvoice"=="false")
			                    		and (dryInfo.Store_Com_Is_Need_Invoice = :isNeedInvoice or dryInfo.Store_Com_Is_Need_Invoice is null)
			                    	#end
			                    	#if($pickingListCode)
			                    		and pl.code like :pickingListCode
			                    	#end
			                    	#if($lpCode)
			                    		and dryInfo.LPCODE = :lpCode
			                    	#end
			                    	#if($receiver)
			                    		and dryInfo.receiver like :receiver
			                    	#end
			                    	
			                    	
			                    	#if($shopInnerCodes)
			                    		and ( 1 != 1
			                    		#foreach($innercode in $shopInnerCodes)
			                    			or sta.owner = '$innercode'
			                    		#end
			                    		)
			                    	#end
			                    	#if($shopId)
							           and  sta.owner = :shopId
							        #end
							        #if($isSpPg)
				                    	#if("$!isSpPg"=="true")
								           and  sta.IS_SPECIAL_PACKAGING = 1
								        #end
				                    	#if("$!isSpPg"=="false")
								           and (sta.IS_SPECIAL_PACKAGING = 0 or sta.IS_SPECIAL_PACKAGING is null)
								        #end
								    #end
			                    	#if($checkPickingList)
			                    		and sta.PICKING_LIST_ID is null
			                    	#end
			                    	#if("$!isSnSta"=="true")
			                    		and sta.is_sn = 1
									#end
			                    	#if("$!isSnSta"=="false")
			                    		and (sta.is_sn = 0 or sta.is_sn is null)
									#end
									#if($industryId)
										and shopau.parent_ou_id = :industryId
									#end
									#if($skuMaxLength)
										#if("$!skuMaxLength"=="1")
											and nvl(sta.sku_max_length,0) >= (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
										#if("$!skuMaxLength"=="0")
											and nvl(sta.sku_max_length,0) < (select to_number(sco.option_key) from t_sys_choose_option sco where sco.category_code = 'skuMaxLength')
										#end
									#end
			                    	) tmp
			                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.removeStaFromPickingListByStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_sta sta set picking_list_id = null where sta.picking_list_id = :plId
							and (1 !=1 
                    		#foreach($status in $statusList)
                    			or sta.status=$status       
                    		#end)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.removeTransFailedStaFromPickingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_sta sta set picking_list_id = null where sta.picking_list_id = :plId
						  and exists(select 1 from t_wh_sta_delivery_info d where d.id = sta.id and (d.ext_trans_order_id is null or d.tracking_no is null))
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.staRemoveFromPickingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						update t_wh_sta sta set sta.picking_list_id = null,sta.version = sta.version + 1
						where sta.id = :staId and sta.version = :intVer
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaListForVerifyByPickingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   SELECT sta.*, statotal.stv_total,delinfo.lpcode,nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,picking.check_mode as intCheckMode,delinfo.TRACKING_NO as transNo
				   FROM t_wh_sta sta,
					   T_BI_WAREHOUSE wh,
					   t_wh_sta_delivery_info delinfo,
					   T_WH_STA_PICKING_LIST picking,
				       ( SELECT   stal.sta_id, SUM (stal.quantity) stv_total
				            FROM t_wh_sta_line stal, t_wh_sta sta2
				           WHERE sta2.ID = stal.sta_id and 		           
				 		  (
					 		  1 != 1 
					 		  #foreach($sts in $status)
	                   		       or sta2.status=$sts       
	                   		  #end
				 		  )
				           #if($plId)
				          AND sta2.picking_list_id = :plId  
				           #end
				        GROUP BY stal.sta_id ) statotal
				 WHERE 
				 sta.ID = statotal.sta_id and sta.id=delinfo.id
				  and sta.MAIN_WH_ID=wh.ou_id
				   and(
			 		 1 != 1 
			 		 #foreach($sts in $status)
	                    or sta.status=$sts       
	                 #end
		 		  )
				 #if($plId)
				 	and sta.picking_list_id = :plId
				 #end
				 #if($plcode)
				 	and picking.code = :plcode
				 #end
				 #if($refSlipCode)
				 and sta.slip_code=:refSlipCode
				 #end
				 and sta.main_wh_id=:ouId
				 and sta.picking_list_id=picking.id
				 #if($pickingMode)
				 	and picking.picking_mode=:pickingMode
				 #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findO2OQSStaListForVerifyByPickingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   SELECT sta.*,staline.id as staLineId,staline.quantity,staline.complete_quantity as completeQuantity,sku.name as skuName,sku.code as skuCode,sku.bar_code as barCode,
                   picking.lpcode,nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,picking.check_mode as intCheckMode,pp.TRACKING_NO as transNo
				   FROM t_wh_sta sta,
					   T_BI_WAREHOUSE wh,
					   T_WH_STA_PICKING_LIST picking
					   left join t_wh_picking_package pp 
                    	on (picking.id = pp.picking_list_id and pp.status=1),
				       ( SELECT   stal.id,stal.sta_id, stal.quantity, stal.complete_quantity,stal.sku_id
				            FROM t_wh_sta_line stal, t_wh_sta sta2
				           WHERE sta2.ID = stal.sta_id and 		           
				 		  (
					 		  1 != 1 
					 		  #foreach($sts in $status)
	                   		       or sta2.status=$sts       
	                   		  #end
				 		  )
				           #if($plId)
				          AND sta2.picking_list_id = :plId  
				           #end
				       ) staline,
				       t_bi_inv_sku sku
				 WHERE 
				 sta.ID = staline.sta_id 
				 and staline.sku_id = sku.id
				 and sta.MAIN_WH_ID=wh.ou_id
				 and(
			 		 1 != 1 
			 		 #foreach($sts in $status)
	                    or sta.status=$sts       
	                 #end
		 		  )
				 #if($plId)
				 	and sta.picking_list_id = :plId
				 #end
				 #if($plcode)
				 	and picking.code = :plcode
				 #end
				 #if($refSlipCode)
				 and sta.slip_code=:refSlipCode
				 #end
				 and sta.main_wh_id=:ouId
				 and sta.picking_list_id=picking.id
				 #if($pickingMode)
				 	and picking.picking_mode=:pickingMode
				 #end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PickingListPackage.findO2OQSPackListForVerifyByPickingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select pp.id as id, pp.tracking_no as trackingNo, pl.id as plId, pl.code as plCode,pl.lpcode lpcode,
                stas.ptotal as checkQty, pl.plan_bill_count as planQty
                 from t_wh_sta_picking_list pl,t_wh_picking_package pp left join
				(select sta.picking_package_id as ppId,sta.picking_list_id as plId, count(1) as ptotal from t_wh_sta sta 
				where sta.main_wh_id=:ouId
				 and 
				 (
					 	1 != 1 
					 	#foreach($sts in $status)
	                   		 or sta.status=$sts       
	                   	#end
				  )
				 #if($plId)
				         and sta.picking_list_id = :plId  
				 #end
				group by sta.picking_package_id,sta.picking_list_id) stas
				on (stas.ppId = pp.id and pp.picking_list_id=stas.plId)
				where pp.picking_list_id = pl.id 
				and pp.status in (3,10) 
				and pp.id = stas.ppId
				and pl.id = stas.plId 
				and pl.check_mode=:checkMode
				and pl.status in (2,8)
				#if($plId)
				 	and pl.id = :plId
				#end
				#if($plcode)
				 	and pl.code = :plcode
				#end
                #if($pickingMode)
				 	and pl.picking_mode=:pickingMode
				#end
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaListForVerifyByPickingListopc"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   SELECT sta.*,picking.check_mode as intCheckMode, statotal.stv_total,delinfo.lpcode as lpcode,delinfo.EXT_TRANS_ORDER_ID as extTransOrderId,delinfo.IS_COD as isCod,nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,picking.check_mode as intCheckMode,delinfo.TRACKING_NO as transNo,
                   		  picking.is_postposition_packing_page as isPostpositionPackingPage,
						  picking.is_postposition_express_bill as isPostpositionExpressBill,delinfo.ali_package_no as aliPackageNo
				   FROM t_wh_sta sta,
					   T_BI_WAREHOUSE wh,
					   t_wh_sta_delivery_info delinfo,
					   T_WH_STA_PICKING_LIST picking,
				       ( SELECT   stal.sta_id, SUM (stal.quantity) stv_total
				            FROM t_wh_sta_line stal, t_wh_sta sta2
				           WHERE sta2.ID = stal.sta_id and 		           
				 		  (
					 		  1 != 1 
					 		  #foreach($sts in $status)
	                   		       or sta2.status=$sts       
	                   		  #end
				 		  )
				           #if($plId)
				          AND sta2.picking_list_id = :plId  
				           #end
				        GROUP BY stal.sta_id ) statotal
				 WHERE 
				 sta.ID = statotal.sta_id and sta.id=delinfo.id
				  and sta.MAIN_WH_ID=wh.ou_id
				   and(
			 		 1 != 1 
			 		 #foreach($sts in $status)
	                    or sta.status=$sts       
	                 #end
		 		  )
				 #if($plId)
				 	and sta.picking_list_id = :plId
				 #end
				 #if($plcode)
				 	and picking.code = :plcode
				 #end
				 #if($refSlipCode)
				 and (sta.slip_code=:refSlipCode or (sta.code =:refSlipCode))
				 #end
				 #if($ouId)
				 and sta.main_wh_id=:ouId
				 #end
				 #if($wids)
				 and sta.main_wh_id  in (
                 #foreach( $id in $wids )
	            $id,
                #end
                 -1)
				 #end
				 and sta.picking_list_id=picking.id
				 #if($pickingMode)
				 	and picking.picking_mode=:pickingMode
				 #end
				 #if($whStatus)
				 	and (picking.wh_add_status is null or picking.wh_add_status = :whStatus) 
				 #end
				 and (picking.check_mode = 1 or picking.check_mode = 10 or picking.check_mode = 2 or picking.check_mode = 3) 
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaListForVerifyByBigPickingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   SELECT sta.*,picking.check_mode as intCheckMode, statotal.stv_total,delinfo.lpcode as lpcode,delinfo.EXT_TRANS_ORDER_ID as extTransOrderId,delinfo.IS_COD as isCod,nvl(wh.IS_MANUAL_WEIGHING,0) as isManualWeighing,picking.check_mode as intCheckMode,delinfo.TRACKING_NO as transNo,
                   		  picking.is_postposition_packing_page as isPostpositionPackingPage,
						  picking.is_postposition_express_bill as isPostpositionExpressBill,delinfo.ali_package_no as aliPackageNo
				   FROM t_wh_sta sta,
					   T_BI_WAREHOUSE wh,
					   t_wh_sta_delivery_info delinfo,
					   T_WH_STA_PICKING_LIST picking,
				       ( SELECT   stal.sta_id, SUM (stal.quantity) stv_total
				            FROM t_wh_sta_line stal, t_wh_sta sta2
				           WHERE sta2.ID = stal.sta_id and 		           
				 		  (
					 		  1 != 1 
					 		  #foreach($sts in $status)
	                   		       or sta2.status=$sts       
	                   		  #end
				 		  )
				           #if($plId)
				          AND sta2.picking_list_id = :plId  
				           #end
				        GROUP BY stal.sta_id ) statotal
				 WHERE 
				 sta.ID = statotal.sta_id and sta.id=delinfo.id
				  and sta.MAIN_WH_ID=wh.ou_id
				   and(
			 		 1 != 1 
			 		 #foreach($sts in $status)
	                    or sta.status=$sts       
	                 #end
		 		  )
				 #if($plId)
				 	and sta.picking_list_id = :plId
				 #end
				 #if($plcode)
				 	and picking.code = :plcode
				 #end
				 #if($refSlipCode)
				 and (sta.slip_code=:refSlipCode or (sta.code =:refSlipCode))
				 #end
				 #if($ouId)
				 and sta.main_wh_id=:ouId
				 #end
				 #if($wids)
				 and sta.main_wh_id  in (
                 #foreach( $id in $wids )
	            $id,
                #end
                 -1)
				 #end
				 and sta.picking_list_id=picking.id
				 #if($pickingMode)
				 	and picking.picking_mode=:pickingMode
				 #end
				 #if($whStatus)
				 	and (picking.wh_add_status is null or picking.wh_add_status = :whStatus) 
				 #end
				 and (picking.check_mode = 1 or picking.check_mode = 5 or picking.check_mode = 10 or picking.check_mode = 2 or picking.check_mode = 3) 
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PickingList.findPLForVerifyByPickingListCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select 
					pl.id as id,
					pl.code code,
					pl.status as intStatus,
					pl.plan_bill_count as planBillCount,
					pl.CHECK_BILL_COUNT as checkedBillCount,
					pl.CHECK_SKU_QTY checkedSkuQty,
					-1 as shipStaCount,
					pl.plan_sku_qty as planSkuQty,
					-1 as shipSkuQty,
					pl.create_time createTime,
					pl.CHECK_TIME as checkedTime,
					pl.PICKING_TIME as pickingTime,
					olist.name wname,
					olist.ID wid,
					pl.lpcode as lpcode,
					pp.id as pickingListPackageId,
					pp.tracking_no as trackingNo
					from t_wh_sta_picking_list pl
					 inner join 
                    T_AU_OPERATION_UNIT olist  
                    on pl.WH_ID= olist.ID
                    left join t_wh_picking_package pp 
                    on (pl.id = pp.picking_list_id and pp.status=1)
					where pl.is_postposition_packing_page = 0 and
                    pl.check_mode in(
					#foreach($cl in $checkList)
						$cl,
					#end
					-1)
					#if($ouId)
                    and pl.wh_id=:ouId
					#end
					and pl.code=:plCode
					#if($status)
					and pl.status=:status
					#else
					and pl.STATUS in (2,8)
					#end
					#if($fromTime)
					and pl.create_time>=:fromTime
					#end
					#if($toTime)
					and pl.create_time<=:toTime
					#end
					and (pl.wh_add_status is null or pl.wh_add_status = :whStatus)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.getBusinessSeqNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select S_T_WH_STA_SEQ_NO.NEXTVAL from DUAL]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.findCompleteStvLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select vl.sku_id as id, sum(nvl(vl.quantity,0)) as quantity from t_wh_stv_line vl where 
      					exists (select 1 from t_wh_stv v where vl.stv_id = v.id and v.sta_id = :staid
      					and v.status != 0 and v.direction = 2)               
               			 group by vl.sku_id  
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStaLineListByStaIdSql2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select
	   stal.id,
       stal.complete_quantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode,
       status.name as intInvstatusName,
       sku.warranty_card_type as warrantyCardType,
       stvl.receiptQty
  from t_wh_sta_line stal
 inner join t_bi_inv_sku sku
    on stal.sku_id = sku.id
  left join t_wh_inventory_status status
    on stal.inv_status_id = status.id
  left join (select s3.staline_id, sum(receipt_Qty) as receiptQty
               from t_wh_stv s2, t_wh_stv_line s3
              where s3.stv_id = s2.id
                and s2.sta_id = :staId
                and s2.status = 1
              group by s3.staline_id) stvl
    on stal.id = stvl.staline_id
 where stal.sta_id = :staId
 #if($isNotFinish)
   and stal.quantity > nvl(stal.COMPLETE_QUANTITY, 0) 
 #end
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineListByStaIdSqlByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	   stal.id,
       stal.complete_quantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode,
       status.name as intInvstatusName,
       sku.STORE_MODE as storeMode,
       stvl.receiptQty,
       cnl.name channelName
  from t_wh_sta sta,
  t_wh_sta_line stal,
  		t_bi_channel cnl,
       (select s3.staline_id, sum(receipt_Qty) as receiptQty
          from t_wh_stv s2, t_wh_stv_line s3
         where s3.stv_id = s2.id
           and s2.sta_id = :staId
           and s2.status = 1
         group by s3.staline_id) stvl,
       t_bi_inv_sku sku,
       t_wh_inventory_status status
 where stal.sta_id = :staId
 	and case
       when sta.type in (32,90,91)
       then sta.addi_owner
       else stal.owner
       end  = cnl.code
   and stal.sku_id = sku.id
   and stal.inv_status_id = status.id(+)
   and stal.id = stvl.staline_id(+)
   and sta.id = stal.sta_id(+)
 #if($isNotFinish)
   and stal.quantity > nvl(stal.COMPLETE_QUANTITY, 0) 
 #end
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineListByStaIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	   stal.id,
       stal.complete_quantity as completeQuantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.IS_RFID as skuRfid,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode,
       status.name as intInvstatusName,
       sku.STORE_MODE as storeMode,
       sku.warranty_card_type as warrantyCardType,
       stvl.receiptQty,
       cnl.name channelName,
       sku.interface_type as interfaceType,
       sku.sn_type as snType,
       sku.sp_type as spType
  from t_wh_sta_line stal,
  		t_bi_channel cnl,
       (select s3.staline_id, sum(receipt_Qty) as receiptQty
          from t_wh_stv s2, t_wh_stv_line s3
         where s3.stv_id = s2.id
           and s2.sta_id = :staId
           and s2.status = 1
         group by s3.staline_id) stvl,
       t_bi_inv_sku sku,
       t_wh_inventory_status status
 where stal.sta_id = :staId
 	and stal.owner = cnl.code
   and stal.sku_id = sku.id
   and stal.inv_status_id = status.id(+)
   and stal.id = stvl.staline_id(+)
 #if($isNotFinish)
   and stal.quantity > nvl(stal.COMPLETE_QUANTITY, 0) 
 #end
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findStalinelist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	   stal.id,
       stal.complete_quantity as completeQuantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode,
       status.name as intInvstatusName,
       sku.STORE_MODE as storeMode,
       sku.warranty_card_type as warrantyCardType,
       stvl.receiptQty,
       cnl.name channelName,
       sku.interface_type as interfaceType,
       sku.sn_type as snType,
       sku.sp_type as spType
  from t_wh_sta_line stal,
  		t_bi_channel cnl,
       (select s3.staline_id, sum(receipt_Qty) as receiptQty
          from t_wh_stv s2, t_wh_stv_line s3
         where s3.stv_id = s2.id
           and s2.sta_id = :staId
           and s2.status = 1
           and s2.id is null
         group by s3.staline_id) stvl,
       t_bi_inv_sku sku,
       t_wh_inventory_status status
 where stal.sta_id = :staId
 	and stal.owner = cnl.code
   and stal.sku_id = sku.id
   and stal.inv_status_id = status.id(+)
   and stal.id = stvl.staline_id(+)

                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StaLine.findSnOrExpDateSkuByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                
                     select sku.id as skuId,sku.is_sn_sku isSn,sku.STORE_MODE effectSku,sku.is_rfid as isRFID  
                     from t_wh_sta_line line,t_bi_inv_sku sku where line.sku_id=sku.id and line.sta_id=:staId
                     and (sku.is_sn_sku=1 or sku.store_mode=33)  
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findStaLineByStaId5" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	   stal.id,
       stal.complete_quantity as completeQuantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id invStatusId,
       stal.sku_id skuId,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date
  from t_wh_sta_line stal
 where stal.sta_id = :staId
 	

                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StaLine.findLineQtyListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select sum(l.quantity) as  quantity  from t_wh_sta_line l where l.sta_id=:staId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="StockTransApplication.findCartonStaListByStaIdSql"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select sta.id,sta.slip_code refSlipCode,sta.code code,sta.create_time createTime,sta.status intStaStatus,sta.type intStaType,sta.owner from t_wh_sta sta
                	where sta.group_sta_id = :staId order by sta.id desc
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findLineListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
					sku.id,
					sku.id as skuId,
					sku.BAR_CODE as barCode,
					sku.SUPPLIER_CODE as supplierCode,
					sku.KEY_PROPERTIES as keyProperties,
					sku.NAME  as skuName,
					stal.complete_quantity as receiptQty 
					from t_wh_sta_line stal,
					t_bi_inv_sku sku
					where stal.sta_id=:staId
					and stal.sku_id=sku.id
					group by sku.id,sku.BAR_CODE,sku.SUPPLIER_CODE,sku.KEY_PROPERTIES,sku.NAME,stal.complete_quantity
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<!--手动入库明细（星巴克） -->
	<bean id="StaLine.findHandStaLineStarbucksBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					   select
					   		 sku.id,
			                 sku.id as skuId,
			                 sku.code as skuCode,
			                 sku.bar_code as barCode,
			                 sku.NAME  as skuName,
			                 line.complete_quantity as completeQuantity,
			                 line.quantity as quantity,
			                 sku.key_properties as keyProperties,
			                 sku.sn_check_mode snCheckMode,
			                 ch.name as channelName
			            from t_wh_sta      sta,
			                 t_wh_sta_line line,
			                 t_bi_inv_sku  sku,
			                 t_bi_channel  ch
			           where sta.id = line.sta_id
			             and line.sku_id = sku.id
			             and sta.owner = ch.code
			             and sta.id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStaLineDetailByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                     select stal.id,
       stal.complete_quantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       tmp.quantity as quantity,
       tmp.owner as owner,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode
  from t_wh_sta_line stal,
       t_bi_inv_sku sku,
       (select stvl.sku_id,
               sum(nvl(stvl.quantity, 0)) as quantity,
               stvl.owner
          from t_wh_stv_line stvl, T_wh_stv stv
         where stv.sta_id = :staId
           and stvl.stv_id = stv.id
           and stv.status != 0
           and stv.direction = 2
         group by stvl.sku_id, stvl.owner) tmp
 where stal.sta_id = :staId
   and stal.sku_id = tmp.sku_id
   and stal.sku_id = sku.id
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStaLinePageListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select stal.id,
       stal.complete_quantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode
  from t_wh_sta_line stal,t_bi_inv_sku sku
 where stal.sta_id = :staId
   and stal.sku_id = sku.id
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findVMIFlittingEnterLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select stal.id,
       stal.complete_quantity,
       stal.owner,
       stal.quantity,
       stal.sku_cost,
       stal.total_actual,
       stal.inv_status_id,
       stal.sku_id,
       stal.sta_id,
       stal.unit_price,
       stal.activity_source,
       stal.group_sta_id,
       stal.order_total_actual,
       stal.order_total_bf_discount,
       stal.list_price,
       stal.expire_date,
       sta.ADDI_OWNER as owner,
       nvl(sku.IS_SN_SKU, 0) as isSnSku,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode,
       sku.JM_CODE as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME as skuName,
       sku.SUPPLIER_CODE as jmskuCode
  from t_wh_sta_line stal, t_bi_inv_sku sku, t_wh_sta sta
 where stal.sta_id = :staId
   and sta.id = stal.sta_id
   and stal.sku_id = sku.id
 #if($isNotFinish)
   and stal.quantity > nvl(stal.COMPLETE_QUANTITY, 0) 
 #end
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findStaLineListByStaIdWithSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select distinct 
                   stal.id,
			       stal.complete_quantity,
			       stal.owner,
			       stal.quantity,
			       stal.sku_cost,
			       stal.total_actual,
			       stal.inv_status_id,
			       stal.sku_id,
			       stal.sta_id,
			       stal.unit_price,
			       stal.activity_source,
			       stal.group_sta_id,
			       stal.order_total_actual,
			       stal.order_total_bf_discount,
			       stal.list_price,
			       stal.expire_date,
                nvl(sku.IS_SN_SKU, 0) as isSnSku,
                decode(stal.inv_status_id, null, null, invStatus.Name) as status,
                sku.BAR_CODE as barCode,
                sku.CODE as skuCode,
                sku.JM_CODE as jmcode,
                sku.KEY_PROPERTIES as keyProperties,
                sku.NAME as skuName,
                sku.SUPPLIER_CODE as jmskuCode
  from t_wh_sta_line         stal,
       t_wh_inventory_status invStatus,
       t_bi_inv_sku          sku
 where stal.sta_id = :staId
   and stal.sku_id = sku.id
   and (stal.inv_status_id = invStatus.Id or stal.inv_status_id is null)
   and 1 = 1
      #if("$!isDistinguishSnSku"=="true")
      #if("$!isSnSku"=="false")
   and (sku.is_sn_sku is null or sku.is_sn_sku = 0)
      #else
   and sku.is_sn_sku = 1
      #end
      #end
      #if($isNotFinish)
   and stal.quantity > nvl(stal.COMPLETE_QUANTITY, 0)
#end
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findInBoundStaLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select invStatus.Name     as status,
       sku.BAR_CODE       as barCode,
       sku.CODE           as skuCode,
       sku.JM_CODE        as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME           as skuName,
       sku.SUPPLIER_CODE  as jmskuCode,
       decode(sku.IS_SN_SKU,null,'否',0,'否',1,'是','') as isSku,
       decode(sku.STORE_MODE,33,'是','否') as isStore, 
       cnl.name owner
  from t_wh_sta_line         stal,
  	   t_bi_channel cnl,
       t_wh_inventory_status invStatus,
       t_bi_inv_sku          sku
 where stal.sta_id = :staId
 and stal.owner = cnl.code
   and stal.sku_id = sku.id
 #if($condition)
   and stal.quantity > stal.complete_quantity
 #end
   and stal.inv_status_id = invStatus.Id(+)
                   
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findInBoundStaLineForPrint" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select rownum             as "index",
       sta.code           as code,
       invStatus.Name     as status,
       sku.BAR_CODE       as barCode,
       sku.CODE           as skuCode,
       sku.JM_CODE        as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME           as skuName,
       sku.SUPPLIER_CODE  as jmskuCode,
       stal.owner,
       stal.quantity      as quantity
  from t_wh_sta              sta,
       t_wh_sta_line         stal,
       t_wh_inventory_status invStatus,
       t_bi_inv_sku          sku
 where stal.sta_id = :staId
   and stal.sku_id = sku.id
   and sta.id = stal.sta_id
 #if($condition)
   and stal.quantity > stal.complete_quantity
 #end
   and stal.inv_status_id = invStatus.Id(+)
                ]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="StaLine.findPredefinedOutCreateInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[

select line.skuId as skuId,
sku.name as skuName,
sku.jm_code as jmCode,
sku.bar_code as barCode,
sku.KEY_PROPERTIES as keyProperties,
st.name as intInvstatusName,
nvl(nvl(inv.sales_avail_qty,-line.qty),-1) as quantity 
from (
select l.owner as owner,sum(l.quantity) as qty,l.sku_id as skuId,sta.main_wh_id as whOuId,l.inv_status_id
from t_wh_sta sta,t_wh_sta_line l
where sta.id=l.sta_id and sta.id = :staId
group by l.owner,l.sku_id,sta.main_wh_id,l.inv_status_id
) line
left join t_bi_inv_sku sku on line.skuId = sku.id
left join t_wh_inventory_status st on st.id=line.inv_status_id
left join  v_wh_inventory_summary inv 
left join T_BI_WAREHOUSE wh on wh.ou_id = inv.wh_ouid
on inv.sku_Id = line.skuId
and (line.owner = inv.owner or wh.is_share = 1)
and inv.wh_ouid = line.whOuId
where nvl(nvl(inv.sales_avail_qty,-line.qty),-1) < 0 and st.is_forsale = 1


                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findStaLineByStaIdAndNotSNSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.BAR_CODE       as barCode,
       sku.CODE           as skuCode,
       sku.JM_CODE        as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME           as skuName,
       sku.SUPPLIER_CODE  as jmskuCode,
       status.name        as status,
       sku.id             as skuId,
       stal.quantity
  from t_wh_sta              sta,
       t_wh_sta_line         stal,
       t_bi_inv_sku          sku,
       T_WH_INVENTORY_STATUS status
 where sta.id = stal.sta_id
   and sta.id = :staId
   and stal.sku_id = sku.id
   and stal.inv_status_id = status.id(+)
 #if("$!isSnSku" == "false")
   and (sku.Is_Sn_Sku is null or sku.Is_Sn_Sku = 0)
 #else
   and sku.Is_Sn_Sku = 1 
 #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findkuByStaIdAndIsSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.BAR_CODE       as barCode,
       sku.CODE           as skuCode,
       sku.JM_CODE        as jmcode,
       sku.KEY_PROPERTIES as keyProperties,
       sku.NAME           as skuName,
       sku.SUPPLIER_CODE  as jmskuCode,
       status.name        as status,
       batch_code         as batchCode,
       sku.id             as skuId,
       a.STORE_MODE,
       a.owner,
       a.quantity
  from (select stvl.sku_id,
                stvl.inv_status_id,
                sum(stvl.quantity) as quantity,
                stvl.batch_code,
                sku.STORE_MODE,
                stvl.owner
           from t_wh_sta sta
          inner join t_wh_stv stv
             on sta.id = stv.sta_id
            and stv.direction = 2
            and sta.id = :staId
          inner join t_wh_stv_line stvl
             on stvl.stv_id = stv.id
          inner join t_bi_inv_sku sku
             on stvl.sku_id = sku.id
          where
          1=1
         #if("$!isSnSku" == "false")
          and (sku.Is_Sn_Sku is null or sku.Is_Sn_Sku = 0)
         #else
          and sku.Is_Sn_Sku = 1
         #end
       and sku.STORE_MODE = 22
          group by stvl.owner,
                   stvl.sku_id,
                   stvl.batch_code,
                   stvl.inv_status_id,
                   stvl.staline_id,
                   sku.STORE_MODE
         
         union all
         
         select stvl.sku_id,
                stvl.inv_status_id,
                sum(stvl.quantity) as quantity,
                '' as batch_code,
                sku.STORE_MODE,
                stvl.owner
           from t_wh_sta sta
          inner join t_wh_stv stv
             on sta.id = stv.sta_id
            and stv.direction = 2
            and sta.id = :staId
          inner join t_wh_stv_line stvl
             on stvl.stv_id = stv.id
          inner join t_bi_inv_sku sku
             on stvl.sku_id = sku.id
          where
          1=1
         #if("$!isSnSku" == "false")
          and (sku.Is_Sn_Sku is null or sku.Is_Sn_Sku = 0)
         #else
          and sku.Is_Sn_Sku = 1
         #end
       and sku.STORE_MODE = 11
          group by stvl.owner,
                   stvl.sku_id,
                   stvl.inv_status_id,
                   stvl.staline_id,
                   sku.STORE_MODE) a
 inner join t_bi_inv_sku sku
    on a.sku_id = sku.id
 inner join T_WH_INVENTORY_STATUS status
    on status.id = a.inv_status_id
                ]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="Inventory.findFlittingOutInfoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
sku.bar_code as barCode,
sku.jm_code as jmCode,
sku.key_properties as keyProperties,
sku.name as skuName,
sku.SUPPLIER_CODE as supplierSkuCode,
loc.code as locationCode,
sts.name as inventoryStatusName,
stal.owner as invOwner,
sum(inv.quantity) as quantity,
stal.qty as initQty
from t_wh_sta sta,
	t_bi_inv_sku sku,
	t_wh_location loc,
	T_WH_INVENTORY_STATUS sts,
	t_wh_sku_inventory inv,
(select l.sku_id,owner,sum(l.quantity) as qty 
	from t_wh_sta_line l 
	where l.sta_id = :staId
	group by l.sku_id,owner
) stal
where inv.sku_id = sku.id 
	and inv.occupation_code = sta.code 
	and inv.location_id = loc.id
	and inv.status_id = sts.id
	and stal.sku_id = inv.sku_id
	and stal.owner = inv.inv_owner
	and sta.id=:staId
group by loc.code,sku.bar_code,sts.name,sku.name,sku.jm_code,sku.key_properties,sku.SUPPLIER_CODE,stal.owner,stal.qty
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select l.id                as id,
       sku.code            as skuCode,
       l.QUANTITY          as quantity,
       l.complete_quantity as completeQuantity,
       l.sku_cost          as skuCost,
       sku.supplier_code   as supplierCode,
       sku.jm_code         as jmcode,
       sku.name            as skuName,
       sku.bar_code        as barCode,
       status.name         as intInvstatusName,
       sku.KEY_PROPERTIES  as keyProperties,
       sku.is_sn_sku       as isSnSku
  from T_BI_INV_SKU sku, t_wh_sta_line l
  left join T_WH_INVENTORY_STATUS status
    on status.id = l.inv_status_id
 where sku.id = l.sku_id
   and l.sta_Id = :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findHistoricalOrderDetailListByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select * from                 
				(select l.id                as id,
				       sku.code            as skuCode,
				       l.QUANTITY          as quantity,
				       l.complete_quantity as completeQuantity,
				       l.sku_cost          as skuCost,
				       sku.supplier_code   as supplierCode,
				       sku.jm_code         as jmcode,
				       sku.name            as skuName,
				       sku.bar_code        as barCode,
				       status.name         as intInvstatusName,
				       sku.KEY_PROPERTIES  as keyProperties,
				       sku.is_sn_sku       as isSnSku
				  from T_BI_INV_SKU sku, t_wh_sta_line l
				  left join T_WH_INVENTORY_STATUS status
				    on status.id = l.inv_status_id
				 where sku.id = l.sku_id
				   and l.sta_Id = :staId
				   
				   union all 
				   
				   select l.id                as id,
				       sku.code            as skuCode,
				       l.QUANTITY          as quantity,
				       l.complete_quantity as completeQuantity,
				       l.sku_cost          as skuCost,
				       sku.supplier_code   as supplierCode,
				       sku.jm_code         as jmcode,
				       sku.name            as skuName,
				       sku.bar_code        as barCode,
				       status.name         as intInvstatusName,
				       sku.KEY_PROPERTIES  as keyProperties,
				       sku.is_sn_sku       as isSnSku
				  from T_BI_INV_SKU sku, t_arc_sta_line l
				  left join T_WH_INVENTORY_STATUS status
				    on status.id = l.inv_status_id
				 where sku.id = l.sku_id
				   and l.sta_Id = :staId
				   ) data
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	
	<bean id="StaLine.findStaLineSkuInfoByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.gross_Weight as weight
          from t_wh_sta_line l left join t_bi_inv_sku sku on sku.id=l.sku_id
         where  l.sta_Id = :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	

	<!-- 分拣核对，查询订单核对明细信息：考虑合单情况 fanht -->
	<bean id="StaLine.findStaLineGiftByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select stal.id as id,
       sku.id as skuId,
       stal.quantity as quantity,
       stal.complete_Quantity as completeQuantity,
       stal.sku_Cost as skuCost,
       sku.code as skuCode,
       sku.supplier_code as supplierCode,
       sku.jm_code as jmcode,
       sku.name as skuName,
       sku.bar_code as barCode,
       sku.KEY_PROPERTIES as keyProperties,
       decode(gift.giftNum, null, 0, 1) as isGift,
       sku.is_sn_sku as isSnSku,
       sku.sn_type as snType,
       sku.customer_id as customerId,
       stal.unit_price as unitPrice,
       sku.sp_type spType  
  from t_wh_sta_line stal
  left join (select sta_line_id, count(1) giftNum
               from t_wh_gift_line
              group by sta_line_id) gift
    on gift.sta_line_id = stal.id
 inner join T_BI_INV_SKU sku
    on sku.id = stal.sku_id
 where stal.sta_id = :staId
 order by sku.code,(select l.memo from t_wh_gift_line l where l.sta_line_id=stal.id and rownum = 1) desc
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.updateQuantityById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                update T_WH_STV_LINE set quantity = :qty,version=version+1
                        where id= :stvlId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findNotEqualSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku_id,inv_status_id as intInvstatus,owner,sum(qty) as quantity from 
(
select l.sku_id,l.inv_status_id,l.owner,sum(l.quantity) as qty 
from t_wh_stv stv,t_wh_stv_line l where stv.id=l.stv_id
and stv.direction=2 and stv.sta_id=:staId
group by l.sku_id,l.inv_status_id,l.owner
union 
select l.sku_id,l.inv_status_id,l.owner,-sum(l.quantity) as qty 
from t_wh_stv stv,t_wh_stv_line l where stv.id=l.stv_id 
and stv.direction=1 and stv.sta_id=:staId
group by l.sku_id,l.inv_status_id,l.owner
)
group by sku_id,inv_status_id,owner
having sum(qty) != 0
order by sku_id,inv_status_id,owner

                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.updateCompleteQuantity" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update T_WH_STA_LINE set COMPLETE_QUANTITY=(case when COMPLETE_QUANTITY is null
                        then :completeQuantity else :completeQuantity + COMPLETE_QUANTITY end),version=version+1
                        where id=:id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.updateCompleteQuantityByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
update T_WH_STA_LINE stal set version=version+1,COMPLETE_QUANTITY=
(
select nvl(sum(nvl(stvl.quantity,0)),0) from t_wh_stv stv,t_wh_stv_line stvl where stv.sta_id = :staId and stv.status = 10 and stv.id=stvl.stv_id and stvl.sku_id=stal.sku_id and stvl.inv_status_id = stal.inv_status_id
) where sta_id=:staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findTotalSkuCountByStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select sum(QUANTITY) as total 
                	from T_WH_STA_LINE sl,t_wh_sta sta 
                	where sta.id=sl.sta_id 
	                	and (1!=1 
                			#foreach($status in $statusList)
	                  			or sta.status = $status
	                  		#end)
	                	and (1 !=1 
	                			#foreach($staId in $staList)
		                  			or sl.sta_id = $staId
		                  		#end)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.updateSkuCostBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[update t_wh_sta_line l set l.version = l.version + 1,
					       l.sku_cost = (select c.sku_cost from t_wh_sku_inventory_cost c where c.sku_id = l.sku_id and c.comp_ou_id  = :ouCompId)
					       where l.sta_id = :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findStaLineListByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select  stvl.staLine_id as id,sum(stvl.QUANTITY) as complete_Quantity
									from t_wh_stv_line stvl where stvl.STV_ID=:stvId
									group by stvl.staLine_id ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransVoucher.findStvOrderByStvIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 
SELECT to_number(substr(stv.code, 14, 2))
FROM t_wh_stv stv
WHERE stv.id=:stvid

                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.deleteRawStvlineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 delete from t_wh_stv_line l where exists 
			             (
			             select 1 from t_wh_stv v
			             where l.stv_id = v.id
			             and v.status != 0
			             and v.sta_id = :staId  
			             )
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.deleteByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 delete from t_wh_stv_line l where exists 
			       (
			       select 1 from t_wh_sta_line staline
			       where l.staline_id = staline.id
			       and staline.sta_id = :staID
      			   )
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.deleteStvLineOver" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
delete t_wh_stv_line sl where sl.stv_id=:stvId and sl.staline_id in 
(
select stal.id from t_wh_sta_line stal where stal.sta_id=:staId and stal.complete_quantity=stal.quantity
)

                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findByInvStatusSkuSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                  select l.* from t_wh_sta_line l
				    where l.inv_status_id = :invStatusId
				    and l.sku_id = :skuId
				    and l.sta_id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaLine.findBySkuSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                  select l.* from t_wh_sta_line l
                  where l.sku_id = :skuId
				        and l.sta_id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StaLine.findByPredefinedOutByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sl.id,
       sku.code         as skuCode,
       sl.sku_id,
       sl.inv_status_id,
       sl.quantity,
       0                as isSnSku
  from t_wh_sta_line sl, t_bi_inv_sku sku
 where sl.sta_id = :staId
   and sl.sku_id = sku.id
   and (sku.is_Sn_Sku is null or sku.is_Sn_Sku = 0)
union
select sl.id,
       sku.code         as skuCode,
       sl.sku_id,
       sl.inv_status_id,
       sl.quantity,
       1                as isSnSku
  from t_wh_sta_line sl, t_bi_inv_sku sku
 where sl.sta_id = :staId
   and sl.sku_id = sku.id
   and (sku.is_Sn_Sku = 1)
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransVoucher.getSequence" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select  S_T_WH_STV.NEXTVAL  from dual
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.findByStvIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select s from StockTransVoucher s where s.id in (
#foreach( $id in $ids )
	$id,
#end
-1)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.generateCancelStatusStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			insert into t_wh_stv
			    (id,BUSINESS_SEQ_NO,code,create_time,owner,
			    status,sta_id,creator_id,direction,wh_id,transtype_id,version)
			select  
			    :newStvId, stv.business_seq_no, stv.code, sysdate , stv.owner,
			    :intStatus, :staid, stv.creator_id, stv.direction, stv.wh_id, stv.transtype_id, 0    
			    from t_wh_stv stv where stv.sta_id = :staid
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.createStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[insert into t_wh_stv
		                	(id,BUSINESS_SEQ_NO,code,create_time,LAST_MODIFY_TIME,owner,
		                	status,sta_id,creator_id,direction,wh_id,transtype_id,version)
						values
							(S_T_WH_STV.NEXTVAL,S_T_WH_STV_SEQ_NO.NEXTVAL,:code,sysdate,sysdate,:owner,
							:status,:sta_id,:creator_id,:direction,:wh_id,:transtype_id,1)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.createGIOutStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into t_wh_stv (id,business_seq_no,code,create_time,direction,owner,status,version,creator_id,sta_id,transtype_id,wh_id)
select s_t_wh_stv.nextval,S_T_WH_STV_SEQ_NO.Nextval,:code,sysdate,stv.direction,stv.owner,1,0,:creatorId,stv.sta_id,stv.transtype_id,stv.wh_id
from t_wh_stv stv
where stv.id=:stvId
                ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransVoucher.getBusinessSeqNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select S_T_WH_STV_SEQ_NO.NEXTVAL from DUAL]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.findInboundDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                   select sl.inbound_time from t_wh_sta sta,
                   t_wh_stv stv,
                   t_wh_stv_line sl
                   where stv.sta_id = sta.id
                   and stv.id = sl.stv_id
                   and stv.direction = 2
                   and sta.id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.getCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select nvl
(
(
select sta.code||trim(to_char(max(to_number(substr(stv.code,length(stv.code)-3,4)))+1,'0000')) as code from t_wh_stv stv,t_wh_sta sta where stv.sta_id = sta.id and sta.id = :staId group by sta.code
),sta.code||'0001'
) as code
from t_wh_sta sta where sta.id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransVoucher.deleteByPikcingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete t_wh_stv stv where exists (select 1 from t_wh_sta sta where sta.id = stv.sta_id and sta.picking_list_id = :plId)]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransTxLog.findOwnerBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select owner from T_WH_ST_LOG where sku_id =1 and wh_id= 181 and owner is not null]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.findStockTransTxLogList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select * from (
				select 
				   case when lg.DIRECTION = 1 then lg.quantity else 0 end as inQty,
                   case when lg.DIRECTION = 2 then lg.quantity else 0 end as outQty,
                   lg.id as id, 
                   ch.name as owner,
                   lg.TRAN_TIME as transactionTime,
                   ic.code as inventoryCheckCode,
                   tt.name as transactionTypeName,
                   dt.code as districtCode,
                   ln.code as locationCode,
                   lg.sta_code as staCode,
                   lg.op_user_name as operator,
                   nvl(lg.slip_code,ic.slip_code) as refSlipCode,
                   sku.supplier_Code as supplierCode,
                   sku.jm_code as jmCode,
                   sku.code as skuCode,
                   sku.name as skuName,
                   sku.bar_code as barCode,
                   invStatus.name as invStatus,
                   sku.key_properties as keyProperties,
                   lg.expire_date AS expireDate,
                   (SELECT (SELECT C.NAME
                      FROM T_WH_SKU_SIZE_CONFIG C
                     WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
                       AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
                  FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize
                from T_WH_ST_LOG lg
                 left join t_wh_inv_check ic on lg.inventory_check_id = ic.id
                 left join t_bi_channel ch on lg.owner = ch.code
                 left join T_WH_TRANSACTION_TYPE tt on  lg.transtype_id = tt.id
                 left join T_WH_DISTRICT dt on lg.district_id = dt.id
                 left join T_WH_LOCATION ln on lg.location_id = ln.id
                 left join t_bi_inv_sku sku on lg.sku_id = sku.id
                 left join T_WH_INVENTORY_STATUS invStatus on lg.INVS_TATUS_ID = invStatus.id			
			where lg.wh_id = :ouid
			#if($invStatus)
			   and lg.invs_tatus_id =:invStatus
			#end
		   #if($refSlipCode)
				and
				( lg.slip_code like (:refSlipCode)
					or ic.slip_code like (:refSlipCode)
				)
			#end
			#if($supplierCode)
				and sku.supplier_code like :supplierCode
			#end
			#if($icCode)
				and ic.code like :icCode
			#end
		 	#if($staCode)
				and lg.sta_code like :staCode			 
		  	#end 
		 	#if($operator)
				and lg.op_user_name like :operator	 
		  	#end 
			#if($stockStartTime)
				and lg.tran_time >= :stockStartTime
			#end
			#if($stockEndTime)
				and lg.tran_time <= :stockEndTime
			#end
			
			#if($transactionTypeid)
			   and lg.transtype_id = :transactionTypeid 
			#end
			#if($owner)
			   and lg.owner = :owner 
			#end
			#if($barCode)
			    and  sku.bar_code like :barCode 
			#end
			#if($jmCode)
			    and  sku.jm_code like :jmCode
			#end
			#if($skuCode)
			    and  sku.code like :skuCode 
			#end
			#if($skuName)
 				and sku.name like :skuName		    
			#end
			#if($districtCode)
				and   dt.code like :districtCode 
			#end
			#if($locationCode)
			  and   ln.code like :locationCode
			#end
			  ) data
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransTxLog.findSkuInvLogPageByDate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select case when lg.DIRECTION = 1 then lg.quantity else 0 end as inQty,
       						   case when lg.DIRECTION = 2 then lg.quantity else 0 end as outQty,
						       ch.code as owner,
						       lg.TRAN_TIME as transactionTime,
						       tt.name as transactionTypeName,
						       dt.code as districtCode,
						       ic.code as inventoryCheckCode,
						       ln.code as locationCode,
						       sta.code as staCode,
						       sku.jm_code as jmCode,
						       sku.key_properties as keyProperties
						from T_WH_ST_LOG lg
							 left join t_wh_inv_check ic on ic.id = lg.inventory_check_id
						     left join T_WH_TRANSACTION_TYPE tt on  lg.transtype_id = tt.id
						     left join T_WH_DISTRICT dt on lg.district_id = dt.id
						     left join T_WH_LOCATION ln on lg.location_id = ln.id
						     left join t_bi_inv_sku sku on lg.sku_id = sku.id
						     left join t_bi_channel ch on lg.owner =ch.code
						     left join (select stv.id as id,sta.code as code 
						          from t_wh_sta sta,t_wh_stv stv where stv.sta_id=sta.id) sta
						          on lg.stv_id = sta.id
						 where lg.TRAN_TIME >=:startDate
						 		and lg.TRAN_TIME <:endDate
								and sku.id = :skuId
								#if($owner)
									and lg.owner = :owner
								#end
								#if($whOuId)
                                    and lg.wh_id = :whOuId
                                #else
                                   and lg.wh_id in( 
                                   #foreach( $ouId in $ouIds )
		    								$ouId 
		    								,
											#end
											-1 )
                                   #end
							]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.createForCrossByStaIdNoOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into T_WH_STV_LINE(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,inbound_time, staline_id,Expire_Date,Valid_Date,Production_Date)

select 
    S_T_WH_STV_LINE.Nextval,stvl.batch_code,stvl.direction,stvl.inv_owner,stvl.quantity,stvl.version,stvl.district_id,
    stvl.status_id, stvl.location_id,stvl.sku_id, stvl.stvid,stvl.transtype_id,stvl.ou_id,stvl.sku_cost, stvl.inbound_time,
    stvl.staline_id,stvl.expire_date,stvl.valid_date,stvl.production_date
from (
    select 
      stvLine.BATCH_CODE,stvLine.direction,stvLine.inv_owner,stvLine.quantity,stvLine.version,stvLine.District_Id,stvLine.status_id,
      stvLine.Location_Id,stvLine.Sku_Id,stvLine.stvid,stvLine.transtype_id,stvLine.ou_id,stvLine.sku_cost, stvLine.inbound_time,
      staLine.staline_id,stvLine.expire_date,stvLine.valid_date,stvLine.production_date
    from (
        select 
          inv.BATCH_CODE,2 direction,inv.inv_owner,inv.quantity, 1 version, inv.District_Id, inv.status_id,
          inv.Location_Id,inv.Sku_Id,stv.ID stvid, stv.transtype_id, inv.ou_id, nvl(inv.sku_cost,0) as sku_cost ,
          inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
        from t_wh_sku_inventory inv,
        t_wh_stv stv, 
        (
            select sta.id as sta_id,sta.code as code,l.sku_Id as sku_id, sta.main_wh_id
            from t_wh_sta sta,t_wh_sta_line l 
            where sta.id = l.sta_id and sta.id = :staId
            group by l.sku_id,sta.code,sta.id, sta.main_wh_id
        ) sta
        where inv.occupation_code = sta.code 
        and stv.sta_id = sta.sta_id 
        and inv.sku_id = sta.sku_id
        and inv.ou_id = sta.main_wh_id
        and stv.direction = 2
    ) stvLine,
    (select l.id staline_id,l.owner,l.sku_Id as sku_id,L.QUANTITY
    from t_wh_sta sta,t_wh_sta_line l
    where sta.id = l.sta_id 
    and sta.id = :staId ) staLine 
    where STVLINE.SKU_ID = STALINE.SKU_ID
) stvl
			                          ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.createForCrossByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into T_WH_STV_LINE(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,inbound_time, staline_id,Expire_Date,valid_date,production_date)

select 
S_T_WH_STV_LINE.Nextval,
stvl.batch_code,
stvl.direction,
stvl.inv_owner,
stvl.quantity,
stvl.version,
stvl.district_id, 
stvl.status_id,
stvl.location_id,
stvl.sku_id,
stvl.stvid,
stvl.transtype_id,
stvl.ou_id,
stvl.sku_cost,
stvl.inbound_time,
stvl.staline_id,
stvl.expire_date,
stvl.valid_date,
stvl.production_date
from (
    select 
        stvLine.BATCH_CODE,stvLine.direction,stvLine.inv_owner,stvLine.quantity,stvLine.version, stvLine.District_Id,
        stvLine.status_id, stvLine.Location_Id,stvLine.Sku_Id, stvLine.stvid, stvLine.transtype_id, stvLine.ou_id,
        stvLine.sku_cost,stvLine.inbound_time, staLine.staline_id,stvLine.expire_date,stvLine.valid_date,stvLine.production_date
    from 
    (
        select inv.BATCH_CODE, 2 direction, inv.inv_owner, inv.quantity, 1 version, inv.District_Id, inv.status_id,
        inv.Location_Id, inv.Sku_Id, stv.ID stvid, stv.transtype_id, inv.ou_id, nvl(inv.sku_cost,0) as sku_cost,
        inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
        from t_wh_sku_inventory inv,
        t_wh_stv stv,
        (
            select sta.id as sta_id,sta.code as code,l.sku_Id as sku_id
            from t_wh_sta sta,t_wh_sta_line l 
            where sta.id = l.sta_id and sta.id = :staId 
            group by l.sku_id,sta.code,sta.id 
        ) sta
        where 
        inv.occupation_code = sta.code 
        and stv.sta_id = sta.sta_id 
        and inv.sku_id = sta.sku_id
    ) stvLine,                                    
    (
        select l.id staline_id,l.owner,l.sku_Id as sku_id,l.QUANTITY,l.inv_status_id statusId
        from t_wh_sta sta,t_wh_sta_line l
        where sta.id = l.sta_id 
        and sta.id = :staId 
    )staLine 
    where stvLine.inv_owner = staLine.owner
    and staLine.statusId = stvLine.status_id
    and STVLINE.SKU_ID = STALINE.SKU_ID
) stvl
			    ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.createForCrossByStaId2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into T_WH_STV_LINE(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,inbound_time, staline_id,Expire_Date,valid_date,production_date)
select S_T_WH_STV_LINE.Nextval,
       stv2.batch_code,
       stv2.direction,
       stv2.inv_owner,
       stv2.quantity,
       stv2.version,
       stv2.district_id,
       stv2.status_id,
       stv2.location_id,
       stv2.sku_id,
       stv2.stvid,
       stv2.transtype_id,
       stv2.ou_id,
       stv2.sku_cost,
       stv2.inbound_time,
       stv2.staline_id,
       stv2.expire_date,
       stv2.valid_date,
       stv2.production_date
  from (select stvl.batch_code,
               stvl.direction,
               stvl.inv_owner,
               sum(stvl.quantity) quantity,
               stvl.version,
               stvl.district_id,
               stvl.status_id,
               stvl.location_id,
               stvl.sku_id,
               stvl.stvid,
               stvl.transtype_id,
               stvl.ou_id,
               stvl.sku_cost,
               stvl.inbound_time,
               stvl.staline_id,
               stvl.expire_date,
               stvl.valid_date,
               stvl.production_date
          from (select stvLine.BATCH_CODE,
                       stvLine.direction,
                       stvLine.inv_owner,
                       stvLine.quantity,
                       stvLine.version,
                       stvLine.District_Id,
                       stvLine.status_id,
                       stvLine.Location_Id,
                       stvLine.Sku_Id,
                       stvLine.stvid,
                       stvLine.transtype_id,
                       stvLine.ou_id,
                       stvLine.sku_cost,
                       stvLine.inbound_time,
                       staLine.staline_id,
                       stvLine.expire_date,
                       stvLine.valid_date,
                       stvLine.production_date
                  from (select inv.BATCH_CODE,
                               2 direction,
                               inv.inv_owner,
                               inv.quantity,
                               1 version,
                               inv.District_Id,
                               inv.status_id,
                               inv.Location_Id,
                               inv.Sku_Id,
                               stv.ID stvid,
                               stv.transtype_id,
                               inv.ou_id,
                               nvl(inv.sku_cost, 0) as sku_cost,
                               inv.inbound_time,
                               inv.expire_date,
                               inv.valid_date,
                               inv.production_date
                          from t_wh_sku_inventory inv,
                               t_wh_stv stv,
                               (select sta.id   as sta_id,
                                       sta.code as code,
                                       l.sku_Id as sku_id
                                  from t_wh_sta sta, t_wh_sta_line l
                                 where sta.id = l.sta_id
                                   and sta.id = :staId 
                                 group by l.sku_id, sta.code, sta.id) sta
                         where inv.occupation_code = sta.code
                           and stv.sta_id = sta.sta_id
                           and inv.sku_id = sta.sku_id) stvLine,
                       (select l.id            staline_id,
                               l.owner,
                               l.sku_Id        as sku_id,
                               l.QUANTITY,
                               l.inv_status_id statusId
                          from t_wh_sta sta, t_wh_sta_line l
                         where sta.id = l.sta_id
                           and sta.id = :staId ) staLine
                 where stvLine.inv_owner = staLine.owner
                   and staLine.statusId = stvLine.status_id
                   and STVLINE.SKU_ID = STALINE.SKU_ID) stvl
         group by stvl.batch_code,
                  stvl.direction,
                  stvl.inv_owner,
                  stvl.version,
                  stvl.district_id,
                  stvl.status_id,
                  stvl.location_id,
                  stvl.sku_id,
                  stvl.stvid,
                  stvl.transtype_id,
                  stvl.ou_id,
                  stvl.sku_cost,
                  stvl.inbound_time,
                  stvl.staline_id,
                  stvl.expire_date,
                  stvl.valid_date,
                  stvl.production_date) stv2
			    ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findSkuIdStalineIdByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	select al.sku_id as  skuId, al.id as staLineId from t_wh_sta_line al where 
       al.sta_id = :staId group by al.sku_id, al.id
			         ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.updateStaLineIdByskuIdStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                update t_wh_stv_line vl set vl.staline_id = :staLineId
				       where vl.sku_id = :skuId
				       and exists 
				             (
				             select 1 from t_wh_stv v
				             where vl.stv_id = v.id
				             and v.status = 0
				             and v.sta_id = :staId
				             )
			         ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.updateAddedQtyByShelves" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
update t_wh_stv_line line set line.added_qty = nvl(line.added_qty,0) + nvl((
		select sum(l.quantity) from t_wh_stv_line l where l.stv_id=:shelvesStvId
		and l.staline_id=line.staline_id
		group by l.staline_id
	),0)
where line.stv_id=:stvId
			         ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findNotFinishedStvLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select * from t_wh_stv_line l where l.stv_id=:stvId and l.quantity != nvl(l.added_qty,0) 
			         ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.createByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into T_WH_STV_LINE(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,inbound_time,Expire_Date,Valid_Date,Production_Date)

select 
s_T_WH_STV_LINE.Nextval,
stvl.batch_code, 
stvl.direction,
stvl.inv_owner, 
stvl.quantity,
stvl.version, 
stvl.district_id, 
stvl.status_id, 
stvl.location_id, 
stvl.sku_id, 
stvl.stvid, 
stvl.transtype_id, 
stvl.ou_id,
decode(stvl.sku_cost,null,0,stvl.sku_cost), 
--stvl.staline_id,
stvl.inbound_time,
stvl.expire_date,
stvl.valid_date,
stvl.production_date
from (
    select 
        inv.BATCH_CODE,2 direction,inv.inv_owner,sum(inv.quantity) quantity,1 version,inv.District_Id,inv.status_id,
        inv.Location_Id,inv.Sku_Id,stv.ID stvid,stv.transtype_id,inv.ou_id,inv.sku_cost,--sta.staline_id,
        inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
    from 
        t_wh_sku_inventory inv,t_wh_stv stv,
        (
            select sta.id as sta_id,min(l.id) as staLine_id,sta.code as code,l.sku_Id as sku_id
            from t_wh_sta sta,t_wh_sta_line l 
            where sta.id = l.sta_id and sta.id = :staId
            group by l.sku_id,sta.code,sta.id
        ) sta
    where inv.occupation_code = sta.code 
        and stv.status != 0
        and stv.sta_id = sta.sta_id 
        and inv.sku_id = sta.sku_id
        group by inv.BATCH_CODE,2,inv.inv_owner,1,inv.District_Id,inv.status_id,inv.Location_Id,inv.Sku_Id,stv.ID,stv.transtype_id,inv.ou_id,inv.sku_cost,inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
) stvl              
			         ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.createTIOutByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into T_WH_STV_LINE
(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,staline_id,inbound_time,Expire_Date,Valid_Date,Production_Date)

select s_T_WH_STV_LINE.Nextval,
stvl.batch_code, 
stvl.direction,
stvl.inv_owner,
stvl.quantity,
stvl.version, 
stvl.district_id,
stvl.status_id, 
stvl.location_id,
stvl.sku_id,
stvl.stvid,
stvl.transtype_id, 
stvl.ou_id,
decode(stvl.sku_cost,null,0,stvl.sku_cost),
stvl.staline_id,
stvl.inbound_time,
stvl.expire_date,
stvl.valid_date,
stvl.production_date
from 
(
    select 
    inv.BATCH_CODE,2 direction,inv.inv_owner,sum(inv.quantity) quantity,1 version,inv.District_Id,inv.status_id,
    inv.Location_Id,inv.Sku_Id,stv.ID stvid,stv.transtype_id,inv.ou_id,inv.sku_cost,sta.staline_id,
    inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
    from t_wh_sku_inventory inv,t_wh_stv stv,
    (
        select sta.id as sta_id,min(l.id) as staLine_id,sta.code as code,l.sku_Id as sku_id
        from t_wh_sta sta,t_wh_sta_line l 
        where sta.id = l.sta_id and sta.id = :staId
        group by l.sku_id,sta.code,sta.id
    ) sta
    where inv.occupation_code = sta.code 
    and stv.id = :stvId
    and stv.sta_id = sta.sta_id 
    and inv.sku_id = sta.sku_id
    group by inv.BATCH_CODE,2,inv.inv_owner,1,inv.District_Id,inv.status_id,inv.Location_Id,inv.Sku_Id,stv.ID,stv.transtype_id,inv.ou_id,inv.sku_cost,sta.staline_id,inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
) stvl
			         ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.createPurchaseOutByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
insert into T_WH_STV_LINE
(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,staline_id,inbound_time,Expire_Date,Valid_Date,Production_Date)
select s_T_WH_STV_LINE.Nextval,stvl.batch_code, stvl.direction,stvl.inv_owner, stvl.quantity,stvl.version, stvl.district_id, stvl.status_id, stvl.location_id, stvl.sku_id, stvl.stvid, stvl.transtype_id, stvl.ou_id,decode(stvl.sku_cost,null,0,stvl.sku_cost), stvl.staline_id,stvl.inbound_time,stvl.Expire_Date,stvl.Valid_Date,stvl.Production_Date
from (
    select inv.BATCH_CODE,2 direction,inv.inv_owner,sum(inv.quantity) quantity,1 version,inv.District_Id,inv.status_id,inv.Location_Id,inv.Sku_Id,stv.ID stvid,stv.transtype_id,inv.ou_id,inv.sku_cost,stal.id as staline_id,inv.inbound_time,inv.Expire_Date,inv.Valid_Date,inv.Production_Date
    from 
    t_wh_sku_inventory inv,
    t_wh_stv stv,
    t_wh_sta sta,
    t_wh_sta_line stal
    where inv.occupation_code = sta.code 
    and sta.id=:staId
    and stal.sta_id=sta.id
    and stal.inv_status_id=inv.status_id
    and stal.sku_id=inv.sku_id
    and stal.owner=inv.inv_owner    
    and stv.status != 0
    and stv.sta_id = sta.id 
    group by inv.BATCH_CODE,2,inv.inv_owner,1,inv.District_Id,inv.status_id,
    inv.Location_Id,inv.Sku_Id,stv.ID,stv.transtype_id,inv.ou_id,inv.sku_cost,stal.id,inv.inbound_time,inv.Expire_Date,inv.Valid_Date,inv.Production_Date
) stvl
				]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="StvLine.createInBoundStvLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into T_WH_STV_LINE
(id,BATCH_CODE,Direction,owner,Quantity,Version,District_Id,Inv_Status_Id,Location_Id,Sku_Id,Stv_Id,transtype_id,Wh_Id,Sku_Cost,staline_id,inbound_time,production_date,valid_date,expire_date)

select s_T_WH_STV_LINE.Nextval,
stvl.batch_code,
stvl.direction, 
stvl.owner,  
stvl.quantity,
stvl.version,
stvl.district_id,
stvl.status_id,
stvl.location_id,
stvl.sku_id,
stvl.stvid,
stvl.transtype_id, 
stvl.ou_id,
decode(stvl.sku_cost,null,0,stvl.sku_cost),
stvl.staline_id,
stvl.inbound_time,
stvl.production_date,
stvl.valid_date,
stvl.expire_date
from (
    select inv.BATCH_CODE,
    1 direction,
    :addiowner as owner,
    sum(inv.quantity) quantity,
    1 version,
    inv.District_Id,
    inv.status_id,inv.Location_Id,inv.Sku_Id,
    stv.ID stvid, 
    :ttid as transtype_id,
    inv.ou_id,
    inv.sku_cost,
    sta.staline_id,
    inv.inbound_time,
    inv.production_date,
    inv.valid_date,
    inv.expire_date
    from t_wh_sku_inventory inv,t_wh_stv stv,
    (
        select sta.id as sta_id,min(l.id) as staLine_id,sta.code as code,l.sku_Id as sku_id
        from t_wh_sta sta,t_wh_sta_line l 
        where sta.id = l.sta_id and sta.id = :staId
        group by l.sku_id,sta.code,sta.id
    ) sta           
    where inv.occupation_code = sta.code 
    and stv.status != 0
    and stv.sta_id = sta.sta_id 
    and stv.direction = 1
    and inv.sku_id = sta.sku_id
    group by inv.BATCH_CODE,1,inv.inv_owner,1,inv.District_Id,inv.status_id,
    inv.Location_Id,inv.Sku_Id,stv.ID,stv.transtype_id,inv.ou_id,inv.sku_cost,
    sta.staline_id,inv.inbound_time,inv.production_date,inv.valid_date,inv.expire_date
)
stvl
               	]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- create pda stvline -->
	<bean id="StvLine.createPDAInBoundStvLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
                insert into T_WH_STV_LINE
				        (id,BATCH_CODE,Direction,
				        owner,Quantity,Version,
				        Inv_Status_Id,
				        Sku_Id,Stv_Id,
				        transtype_id,Wh_Id,Sku_Cost,staline_id)
				     select s_T_WH_STV_LINE.Nextval,
				         stvl.batch_Code,
				         stvl.direction, 
				         stvl.owner,  
				         stvl.quantity,
				         stvl.version,
				         stvl.status_id,
				         stvl.sku_id,
				         stvl.stvid,
				         stvl.transtype_id, 
				         stvl.ou_id,
				         stvl.sku_cost,
				         stvl.staline_id
				    from (        
				select
				  :batchCode as batch_Code,
				   1 direction,
				         l.owner ,
				         l.quantity, 
				         1 version,
				         l.inv_status_id as status_id,
				         l.sku_id,
				         stv.id as stvid,
				         :ttid as transtype_id,
				         stv.wh_id as ou_id,
				        decode(l.sku_cost,null,0,l.sku_cost) as sku_cost,
				        l.id as staline_id
				    from            
				        t_wh_sta_line l,t_wh_stv stv
				        where l.sta_id = :staid
				        and stv.sta_id = :staid
				        and stv.STATUS=1
				        and stv.direction = 1
				        and nvl(l.complete_quantity,0) != nvl(l.quantity,0)
				    ) stvl
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.updateStvInvStruts" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_stv_line l set l.inv_status_id=:invStatus where l.id in (
						#foreach($id in $stvId)
							$id,
						#end
						-1)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByStvIdGroupBySkuLocationOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[select l.sku_id,l.owner,l.inv_status_id as intInvstatus,sum(l.quantity) as quantity,l.batch_code as batchCode  from t_wh_stv_line l 
							where l.stv_id = :stvId
							group by l.sku_id,l.owner,l.inv_status_id,l.batch_code
							]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.deleteByPickinglist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[delete t_wh_stv_line l where exists(select 1 from t_wh_stv stv,t_wh_sta sta where sta.picking_list_id =:plId and sta.id = stv.sta_id and l.stv_id = stv.id)]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineCommandListByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[             
SELECT stvl.*, sku.NAME AS skuname,
	sku.code AS skucode, 
	sku.bar_code,
	sku.jm_code, 
	sku.key_properties,
	decode(sku.store_mode,33,'1','0') as isShelfManagement,
	sku.supplier_code,
	status.name as intInvstatusName,
	to_char(stvl.production_date,'yyyyMMdd') as strPoductionDate,
	stvl.valid_date as validDate,
	to_char(stvl.expire_date,'yyyyMMdd') as strExpireDate,
	loc.code AS locationcode,
	NVL (loc.capacity, 0) * loc.capacity_ratio / 100 AS locationAvailable,
	NVL (lq.quantity, 0) AS locationInventory,
	total.totalQuantity
FROM t_wh_stv_line stvl, t_bi_inv_sku sku, t_wh_location loc,
	(SELECT   i.location_id, SUM (i.quantity) AS quantity  FROM t_wh_sku_inventory i  GROUP BY i.location_id) lq,
	(select stvl2.staline_id,sum(stvl2.quantity) as totalQuantity from t_wh_stv_line stvl2  WHERE stvl2.stv_id =:stvId group by stvl2.STALINE_ID) total,
	T_WH_INVENTORY_STATUS status
WHERE stvl.stv_id =:stvId
	AND stvl.sku_id = sku.ID
	and stvl.inv_status_id=status.id(+)
	AND stvl.location_id = loc.ID(+)
	AND stvl.location_id = lq.location_id(+)
	and stvl.STALINE_ID=total.staline_id  ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findVMIReceiveDataByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[SELECT stvl.staline_id as stalineId ,stvl.sku_id as skuId ,
					       sku.bar_code as barCode ,sum(stvl.quantity)
						FROM t_wh_stv_line stvl, t_bi_inv_sku sku
						WHERE stvl.sku_id=sku.id
						and stvl.stv_id = :stvId
						group by stvl.staline_id ,stvl.sku_id,sku.bar_code]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineListForTranCossByStaLineIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[SELECT   SUM (quantity) quantity, owner, sku_id,batch_code
								    FROM (SELECT   SUM (stvl_out.quantity) quantity, stvl_out.owner,stvl_out.batch_code,
								                   stvl_out.sku_id
								              FROM t_wh_stv_line stvl_out, t_wh_stv stv_out
								             WHERE stvl_out.stv_id = stv_out.ID
								               AND stv_out.direction = 2
								               AND stv_out.sta_id = :staid
								               AND stvl_out.staline_id = :stalineid
								          GROUP BY stvl_out.owner, stvl_out.sku_id,stvl_out.batch_code
								          UNION ALL
								          SELECT   -1 * SUM (stvl_in.quantity) quantity, stvl_in.owner,stvl_in.batch_code,
								                   stvl_in.sku_id
								              FROM t_wh_stv_line stvl_in, t_wh_stv stv_in
								             WHERE stvl_in.stv_id = stv_in.ID
								               AND stv_in.direction = 1
								               AND stv_in.sta_id = :staid
								               AND stvl_in.staline_id = :stalineid
								          GROUP BY stvl_in.owner, stvl_in.sku_id,stvl_in.batch_code)
								GROUP BY owner, sku_id,batch_code  ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findWarehouseLocationByCodeNull"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select * from t_wh_location t where t.IS_AVAILABLE=1 and (t.IS_LOCKED is null or t.IS_LOCKED=0)  
					and not exists (select 1 from t_wh_sku_inventory where location_id 
                     =t.id)
					#if($ouId)
						 and t.ou_id = :ouId 
					#end
					#if($code)
						 and t.code like :code 
					#end 
					order by t.code
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findWarehouseLocationNull" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					
       select t.*,t.capacity_ratio*t.capacity/100 as available_num from t_wh_location t,
            (select h.location_id from t_wh_location_transtype h ,T_WH_TRANSACTION_TYPE p 
            where  h.transtype_id=p.id and p.code = :code) A
                where (t.IS_LOCKED is null or t.IS_LOCKED=0) and t.IS_AVAILABLE=1 and A.location_id=t.id and not exists 
         (select 1 from t_wh_sku_inventory where location_id 
                     =t.id)	 and t.ou_id = :ouId and  t.IS_AVAILABLE=1
                         order by t.code

                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findWarehouseLocationByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
			 select t.* from t_wh_location t,T_WH_LOCATION_TRANSTYPE w ,t_wh_transaction_type y  
   where t.id=w.location_id and w.transtype_id=y.id and t.is_available=1 and (t.IS_LOCKED is null or t.IS_LOCKED=0)
    and t.ou_id=:ouId and t.code=:code and y.code=:tranCode					 
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findLocationListByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					select  l.id, l.code as code, d.name as districtName, d.code as districtCode 
						from t_wh_location l,t_wh_district d 
            where 
            l.district_id=d.id and
            l.id in (select distinct(l.id) id  from t_wh_location l
               left join (select inv.*,b.name as b_name from  t_wh_sku_inventory inv,t_bi_inv_sku sku,t_bi_brand b
                             where inv.sku_id = sku.id 
                                   and sku.brand_id = b.id
                                   and inv.ou_id = :ouid) inv 
                 			 on inv.location_id = l.id
						,t_wh_district d 
						where l.is_available=1 and l.ou_id=:ouid and l.district_id = d.id
						#if($districtCode)
							and d.code like :districtCode
						#end
						#if($districtName)
							and d.name like :districtName
						#end
						#if($code)
							and l.code like :code
						#end
						#if($owner)
							 and inv.inv_owner like :owner
						#end
						#if($brand)
							and inv.b_name like :brand
						#end)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findPurchaseSkuInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 	t.name as skuName,
						t.key_properties as keyProperties,
						t.bar_code as barCode,
						t.jm_code as jmCode,
						t.supplier_code as supplierCode,
						loc.code as locationCode
					from t_wh_location loc,T_BI_INV_SKU t, t_wh_stv_line stvline 
					where stvline.sku_id=t.id 
					and stvline.location_id=loc.id 
					and stvline.stv_id= :stvid 
					and stvline.wh_id= :ouid
						]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findRelevanceTrackingno" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select tracking_no 
					from t_wh_sta sta 
					left join 
						(select dryInfo.id id,pg.tracking_no tracking_no 
						from t_wh_package_info pg 
						join T_WH_STA_DELIVERY_INFO dryInfo 
						on dryInfo.id = pg.sta_delivery_info_id) info 
						on sta.id = info.Id where sta.code=:stacode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updateStaIsPDAByStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					update t_wh_sta set is_pda=0 where is_pda=1 and id=(select sta_id from t_wh_stv stv where stv.id=:stvId )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.getWarehouseDataByWarehouse" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select ou.id value,ou.name name from T_AU_OPERATION_UNIT ou
                        where  ou.id = :ouId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.updateDistrict" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[update t_wh_sku_inventory inv set inv.district_id = (select loc.district_id from t_wh_location loc where loc.id = inv.location_id) where inv.district_id is null and inv.ou_id = :ouId]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.updateByOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[delete t_wh_sku_inventory inv where inv.ou_id = :ouId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.getWarehouseDataByCompany" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select wh.id value,wh.Name name from 
					T_AU_OPERATION_UNIT wh,
					T_AU_OPERATION_UNIT opc,
					T_AU_OPERATION_UNIT_Type ouType
				where wh.IS_AVAILABLE=1
					and ouType.Name='Warehouse'
					and ouType.Id=wh.ou_type_id
					and wh.PARENT_OU_ID = opc.ID
					and opc.PARENT_OU_ID = :ouId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryStatus.findListByInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select sts.id as id,sts.name as name
							from t_wh_sku_inventory inv,
								 t_wh_location_transtype tt,
							     t_wh_location loc,
							     t_wh_inventory_status sts
							where  inv.status_id = sts.id
									and inv.location_id = loc.id
									and tt.location_id = loc.id
									and tt.transtype_id = :ttId
									and inv.location_id = :whLocId						
							 		and inv.ou_id = :ouid
									and inv.sku_id = :skuId 
									and inv.inv_owner = :owner
							group by sts.id,sts.name]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransApplication.findElseComeInAndGoOut" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
              sta.id as id,
              sta.code as code,
              sta.slip_code as refSlipCode,
              sta.type as transaction,
              sta.status as status1,
              ch.name as store,
              sta.create_time as createTime,
              sta.finish_time as finishTime,
              t.name as transactionTypeName,
              sta.memo memo,
              tsdi.address as address,
              tsdi.receiver as receiver,
              tsdi.mobile as mobile,
              sta.sku_qty as count
            from
              t_wh_sta sta
              inner join t_bi_channel ch on ch.code = sta.owner
              left join t_wh_stv stv on stv.sta_id = sta.id
              left join t_wh_transaction_type t on t.id=stv.transtype_id
              left join t_wh_sta_delivery_info tsdi on sta.id=tsdi.id
            where 
              (sta.type=13 or sta.type=22)
              and sta.main_wh_id = :whOuId
              #if($createDate)
                and sta.create_time >= :createDate
              #end
              #if($endCreateDate)
                and sta.create_time <= :endCreateDate
              #end
              #if($startDate)
                and sta.finish_time >= :startDate
              #end
              #if($offStfindWlbMsgInboundByStatusartDate)
                and sta.finish_time <= :offStartDate
              #end
              #if($code)
                and sta.code like :code
              #end
              #if($owner)
                and sta.owner like :owner
              #end
              #if($status)
                and sta.status = :status
              #end
              #if($transaction)
                and sta.type = :transaction
              #end
              #if($slipCode)
                and sta.slip_code like :slipCode
              #end
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- vmi 转店 sta查询 -->
	<bean id="StockTransApplication.findVMITransferStaPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							sta.id as id,
							sta.code as code,
							sta.type as intStaType, 
							sta.status as status1,
							ch.name as store,
							sta.create_time as createTime,
							sta.finish_time as finishTime,
							c.user_name as creater,
							u.user_name as operator,
							sta.sku_qty as skuQty,
							sta.memo
						from
							t_wh_sta sta 
							inner join t_bi_channel ch on ch.code = sta.owner
							left join t_au_user c on sta.creator_id=c.id
							left join t_au_user u on sta.in_operator_id = u.id
						where 
							sta.type= :staType
							and sta.main_wh_id = :whOuId						      
							#if($createDate)
								and sta.create_time >= :createDate
							#end
							#if($endCreateDate)
								and sta.create_time <= :endCreateDate
							#end
							#if($startDate)
								and sta.finish_time >= :startDate
							#end
							#if($offStartDate)
								and sta.finish_time <= :offStartDate
							#end
							#if($code)
								and sta.code like :code
							#end
							#if($owner)
								and sta.owner like :owner
							#end
							#if($creater)
								and c.user_name like :creater
							#end
							#if($operator)
								and u.user_name like :operator
							#end
							#if($status)
								and sta.status = :status
							#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- vmi 退仓 -->
	<bean id="StockTransApplication.findVMIReturnSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							sta.id as id,
							sta.code as code,
							sta.status as status1,
							sta.owner as store,
							sta.create_time as createTime,
							sta.slip_code as refSlipCode,
							sta.slip_code2 as slipCode2,
							sta.is_sn,
							sta.type as strType,
							sta.to_freight_mode as freightType,
							sta.is_esprit as isEsprit,
							sta.is_pf as isPf
						from
							t_wh_sta sta 
						where 
							((sta.type= 101 or sta.type= 102  )
							or (sta.type =61 and sta.is_pf ='1'))
							and sta.main_wh_id = :whOuId		
							#if($startTime)  
								and sta.create_time >= :startTime
							#end
							#if($endTime)
								and sta.create_time <= :endTime
							#end
							#if($code)
								and sta.code like :code
							#end
							#if($owner)
								and sta.owner like :owner
							#end
							#if($status)
								and sta.status = :status
							#else
								and sta.status not in(10,17)
							#end
							#if($refSlipCode)
								and sta.slip_code like :refSlipCode
							#end
							#if($slipCode2)
								and sta.slip_code2 like :slipCode2
							#end
							
					]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- vmi 调拨-all stas -->
	<bean id="StockTransApplication.findVMIFlittingStas" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			          select
			             sta.id as id,
			             sta.code as code,
			             sta.status as status,
			             sta.owner as owner,
 			             ou1.name as mainName,         
			             sta.memo as memo,
			             sta.SLIP_CODE as refSlipCode,
			             pt.type as ptType,
			             decode(pt.type,1,0,3,1.86,null) as dutyPercentage,
     					 decode(pt.type,1,0,3,1.00,null) as miscFeePercentage,
     					 sta.create_time as createTime,
     					 t.qty as totalQty
			          from
			             t_wh_sta sta,
			             t_au_operation_unit ou1,
			             t_esprit_po_type pt,
			            (select stal.sta_id, sum(stal.quantity) qty
				          from t_wh_sta_line stal
				         group by stal.sta_id)t
			           where 
			             sta.type= :statype
			             and sta.status = :status   
			             and sta.main_wh_id = ou1.id(+)
			             and sta.slip_code=pt.po(+)
			             and sta.main_wh_id = :ouid
			             and sta.id=t.sta_id(+)
			             #if($code)
							and sta.code like :code
						#end
			            #if($refcode)
							and sta.slip_code like :refcode
						#end						
			            #if($owner)
							and sta.owner = owner
						#end
						
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findIsNeedSnByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select count(1)
  from t_wh_sta_line l, t_wh_sta sta, T_BI_INV_SKU sku
 where l.sta_id = sta.id
   and sta.id = :staid
   and sta.main_wh_id = :ouid
   and l.sku_id = sku.id
   and nvl(l.quantity, 0) != nvl(l.complete_quantity, 0)
   and sku.is_sn_sku = 1
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- pda 查寻 -->
	<bean id="StockTransApplication.findPdaPurchaseStas" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sta.*,stv.id as stv_id,sta.type as intStaType,shop.is_inbound_invoice as isInboundInvoice,
stv.is_pda as isPda,
decode(stv.id,null,sta.status,1) as process_status from
t_wh_sta sta
left join t_bi_channel shop on sta.owner=shop.code
left join t_wh_stv stv on sta.id=stv.sta_id and stv.status = 1
where
sta.main_wh_id=:ouid
and (sta.type = 11 or sta.type = 12 or sta.type=14 or sta.type= 81)
and (sta.is_pda=1 or (sta.status=1 or sta.status=5))

#if($createDate)
	and sta.create_time >= :createDate
#end
#if($endCreateDate)
	and sta.create_time <= :endCreateDate
#end
#if($code)
	and sta.code like :code
#end
#if($refCode)
	and sta.slip_code like :refCode
#end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLineOthersOperate" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select line.id            as id,
		       stvLine.QUANTITY   as quantity,
		       line.sku_cost      as skuCost,
		       sku.supplier_code  as supplierCode,
		       sku.code           as skuCode,
		       sku.name           as skuName,
		       sku.bar_code       as barCode,
		       sku.key_properties as keyProperties,
		       sku.jm_code        as jmcode,
		       d.code             AS district,
		       l.code             AS location,
		       s.NAME             AS status,
		       sku.is_sn_sku        as isSnSku
		  from t_wh_sta_line         line,
		       T_WH_INVENTORY_STATUS s,
		       T_BI_INV_SKU          sku,
		       T_WH_STA              sta,
		       t_wh_stv              stv,
		       t_Wh_Stv_Line         stvLine,
		       T_WH_DISTRICT         d,
		       T_WH_LOCATION         l
		 where sku.id = LINE.sku_id
		   and s.Id = line.INV_STATUS_ID
		   and line.sta_Id = STA.ID
		   and stv.sta_id = sta.id
		   and stvLine.staline_id = line.id
		   and d.ID = stvLine.DISTRICT_ID
		   and l.ID = stvLine.LOCATION_ID
		   and sta.ID = :staId
							]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- vmi 转店明细 -->
	<bean id="StaLine.findStaLinesVmiTransDetails" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select stvinfo.*, 
				  sku.id as id,
				  sku.supplier_code as supplierCode,
				  sku.code as skuCode,
				  sku.name as skuName,
				  sku.bar_code as barCode,
				  sku.key_properties as keyProperties,
				  sku.jm_code as jmcode
				 from 
				     (
				     select
				          stvLine.Sku_id as sku_id,
				          d.code AS district,
				          l.code AS location,
				          s.NAME AS status,
				          nvl(sum(stvLine.QUANTITY),0) as quantity
				        from
				          T_WH_INVENTORY_STATUS s,
				          T_WH_STA sta,
				          t_Wh_Stv_Line stvLine,
				          t_Wh_Stv stv,
				          T_WH_DISTRICT d ,
				          T_WH_LOCATION l
				       where
				          s.Id = stvLine.INV_STATUS_ID
				          and d.ID=stvLine.DISTRICT_ID
				          and l.ID=stvLine.LOCATION_ID
				          and stv.sta_id=sta.id
				          and stv.direction=2
				          and stv.id = stvLine.stv_id
				          and sta.ID= :staId
				          group by stvline.sku_id,d.code,l.code,s.name
				     ) stvinfo
				     left join  T_BI_INV_SKU sku on sku.id= stvinfo.sku_id order by stvinfo.sku_id
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- vmi 退仓明细 -->
	<bean id="StaLine.findStaLinesVmiReturnDetails" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select stvinfo.*,
       sku.id             as id,
       sku.supplier_code  as supplierCode,
       sku.code           as skuCode,
       sku.name           as skuName,
       sku.bar_code       as barCode,
       sku.key_properties as keyProperties,
       sku.jm_code        as jmcode,
       sku.is_sn_sku      as isSnSku,
       sku.SALES_MODEL	  as invStatusId
  from (select stvLine.Sku_id as sku_id,
               d.code AS district,
               l.code AS location,
               s.NAME AS status,
               nvl(sum(stvLine.QUANTITY), 0) as quantity
          from T_WH_INVENTORY_STATUS s,
               T_WH_STA              sta,
               t_Wh_Stv_Line         stvLine,
               t_Wh_Stv              stv,
               T_WH_DISTRICT         d,
               T_WH_LOCATION         l
         where s.Id = stvLine.INV_STATUS_ID
           and d.ID = stvLine.DISTRICT_ID
           and l.ID = stvLine.LOCATION_ID
           and stv.sta_id = sta.id
           and stv.direction = 2
           and stv.id = stvLine.stv_id
           and sta.ID = :staId
         group by stvline.sku_id, d.code, l.code, s.name) stvinfo
  left join T_BI_INV_SKU sku
    on sku.id = stvinfo.sku_id
 order by stvinfo.sku_id
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findVmiUnfreezeDetails" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select 
	                  sku.bar_code barCode,
					  sku.code as jmskuCode,
	                  sku.key_properties keyProperties,
	                  nvl(stal.quantity,0) quantity,
	                  nvl(stal.complete_quantity,0) completeQuantity,
	                  stal.id
	             from 
	             t_wh_sta_line stal,
	             T_BI_INV_SKU sku
	             where stal.sta_id = :staid
	             and stal.sku_id = sku.id
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findByStaIdByBatis" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select  l.quantity,l.total_actual,l.order_qty from wms.t_wh_sta_line l where l.sta_id=:id 
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findByOwnerAndStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select t from StaLine t where t.sta.id=:staId and t.sku.id=:skuId
#if($status_id)
	and t.invStatus.id=:status_id
#end
#if($owner)
	and t.owner=:owner
#end
				
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findByOwnerAndStatusSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                 select distinct sl.inv_status_id as invStatusId,
                    stal.complete_quantity as completeQuantity, 
                     stal.quantity as quantity,
                    stal.id as id
                    from t_wh_sta sta
                    inner join t_wh_sta_line stal on stal.sta_id = sta.id
                    left join t_wh_stv stv on sta.id = stv.sta_id
                    left join t_wh_stv_line sl on sl.stv_id = stv.id
                    where sta.id = :staId
                    and stal.sku_id=:skuId
					#if($status_id)
					and stal.inv_status_id = :status_id
					#end
					#if($owner)
					and stal.owner=:owner
					#end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findByStatusAndSn" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                 select 
                    stal.complete_quantity as completeQuantity, 
                     stal.quantity as quantity,
                    stal.id as id
                    from t_wh_sta sta
                    inner join t_wh_sta_line stal on stal.sta_id = sta.id
                    left join t_bi_inv_sku sku on sku.id = stal.sku_id
                    where sta.id = :staId
                    and stal.sku_id=:skuId
                    and sku.is_sn_sku = 1
					#if($status_id)
					and stal.inv_status_id = :status_id
					#end
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLinesQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select stal.id,
       nvl(stal.complete_quantity, 0) as completeQuantity,
       stal.quantity,
       sku.BAR_CODE as barCode,
       sku.CODE as skuCode
  from t_wh_sta_line stal,t_bi_inv_sku sku
 where stal.sta_id = :staId
   and stal.sku_id = sku.id
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findStaLinesByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select stal.id,
					       nvl(stal.complete_quantity, 0) as completeQuantity,
					       stal.quantity,
					       sku.BAR_CODE as barCode,
					       sku.CODE as skuCode,
					       s.name as intInvstatusName,
					       stal.sku_id as skuId
					  from t_wh_sta_line stal,t_bi_inv_sku sku,T_WH_INVENTORY_STATUS s
					 where stal.sta_id = :staId
					   and stal.sku_id = sku.id
					   and stal.inv_status_id = s.id
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findstaLineStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			    select status.name as intInvstatusName,sta.owner  from t_wh_sta sta,t_wh_sta_line li,T_WH_INVENTORY_STATUS status 
			    where sta.id=li.sta_id and li.inv_status_id=status.id and sta.code=:staCode
                group by status.name,sta.owner
                
               
					]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaLine.findStaLineAndEspPO" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select ord.OD_PO as po ,ord.OD_POREFERENCE as poreference,
	                  stal.*
	             from 
	             t_wh_sta_line stal,
	             t_esprit_transfer_order ord
	             where stal.sta_id = :staId
	             and stal.id = ord.TRANSFER_WH_STA_LINE_ID
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findIsSnSkuQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sku.code as code, sum(line.QUANTITY) as id
  from t_wh_sta_line line, T_BI_INV_SKU sku, T_WH_STA sta
 where sku.id = LINE.sku_id
   and line.sta_Id = :staid
   and sta.id = :staid
   and sta.main_wh_id = :ouid
   and sku.is_sn_sku = 1
 group by sku.code
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaLine.findIsSnSkuCodeQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select
 #if("$!type"=="true")
 sku.code as code,
 #else
 sku.bar_code as code,
 #end                
 sum(line.QUANTITY) as id
  from t_wh_sta_line line, T_BI_INV_SKU sku, T_WH_STA sta
 where sku.id = LINE.sku_id
   and line.sta_Id = :staid
   and sta.id = :staid
   and sta.main_wh_id = :ouid
   and sku.is_sn_sku = 1
 group by sku.code, sku.bar_code
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findIsSnSkuCodeUnCompleteQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
      select
        #if("$!type"=="true")
          sku.code as code,
        #else
          sku.bar_code as code,
        #end 
        t.qty-t.ComQty as id from 
        (
          select 
              sku.id as skuid,
              sum(nvl(line.QUANTITY,0)) as qty,
              sum(nvl(line.complete_quantity,0)) as ComQty
            from
              t_wh_sta_line line,
              T_BI_INV_SKU sku,
              T_WH_STA sta
            where
              sku.id= LINE.sku_id
              and line.sta_Id= :staid
              and sta.id = :staid
              and sta.main_wh_id = :ouid
              and sku.is_sn_sku = 1
           group by sku.id
        ) t,T_BI_INV_SKU sku where t.skuid = sku.id
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuSn.findIsSnSkuQtyByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select sku.code as code,count(1) as id from  
			          t_wh_sku_sn sn ,
			          t_bi_inv_sku sku
			          where sn.stv_id = :stvid
			          and sn.status=1
			          and sn.ou_id = :ouid
			          and sn.sku_id = sku.id
			          and sn.sn is not null group by sn.sku_id,sku.code
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCost.findCostByCmpIdSkuIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 select t.sku_cost from T_WH_SKU_INVENTORY_COST t where t.sku_id = :skuid and  t.comp_ou_id = :cmpid
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Carton.deleteCreatedCartonBySta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from t_wh_carton c where c.sta_id = :staid and c.status != 10
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findSameSeqNoOutBoundStaByStaId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.id from t_wh_sta sta 
					where exists (select 1 from t_wh_sta s where sta.bi_seq_no = s.bi_seq_no and s.id= :staId)
					and sta.type = 42
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
							select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.type as intType,
								sta.status as intStatus,sta.memo,
								sta.owner,
								sta.addi_owner,
								di.lpcode,
								di.tracking_no,
								sta.create_time,
								sta.finish_time,
								u.user_name as operator,
								mianWH.name as mainName,
								addiWH.name as addiName,
								sta.sku_qty as totalSkuQty
							from 
								t_wh_sta sta
								left join T_AU_OPERATION_UNIT mianWH on mianWH.Id=sta.main_wh_id
								left join T_AU_OPERATION_UNIT addiWH on addiWH.Id=sta.addi_wh_id
								left join t_au_user u on  u.id=sta.out_operator_id
								left join t_wh_sta_delivery_info di 
								#if($trackingNo)
									left join 
									(
										select 
											pg.sta_delivery_info_id as id,
											pg.tracking_no as tracking_no
										from 
											t_wh_package_info pg
										where 
											pg.tracking_no like :trackingNo
										group 
											by pg.sta_delivery_info_id,pg.tracking_no
									) pg on pg.id = di.id
								#end 
								on sta.id = di.id
							where 
								(sta.main_wh_id = :ouId
									or (sta.type in (32,90,91) and sta.addi_wh_id = :ouId))
								#if($trackingNo)
									and pg.tracking_no like :trackingNo
								#end
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($owner)
									and sta.owner like :owner
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
								#if($finishTime)
									and sta.finish_time >= :finishTime
								#end
								#if($endFinishTime)
									and sta.finish_time <= :endFinishTime
								#end
								#if($lpcode)
									and di.lpcode = :lpcode
								#end
								#if($status)
									and sta.status = :status
								#else
									#if($statusList)
										and sta.status in (
										#foreach($status in $statusList)
	                    					$status,
	                    				#end
	                    				-1)
                    				#end
								#end
								#if($type) 
									and sta.type = :type
								#end
								#if($operator) 
									and upper(u.user_name) like upper(:operator)
								#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 作业单查询：追加条件 是否分包 fanht -->
	<bean id="StockTransApplication.findStaLists" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	select * from (
								select 
									sta.id,
									sta.code,
									sta.slip_code as refSlipCode,
									sta.slip_code1 as slipCode1,
									sta.slip_code2 as slipCode2,
									sta.ORDER_CREATE_TIME orderCreateTime,
									sta.type as intType,
									case
	                     				 when sta.picking_list_id is not null
					                     then '是'
					                     when sta.group_sta_id is not null and 
					                     	  (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is not null
					                     then '是'
					                     else '否'
				                	end as pickStatus,
									sta.status as intStatus,sta.memo,
									mch.name  owner,
									addch.name addi_owner,
									nvl(sta.IS_LOCKED,0) as isLocked,
									di.lpcode,
									di.tracking_no,
									sta.create_time,
									sta.finish_time,
									sta.to_location as toLocation,
									sta.from_location as fromLocation,
									u.user_name as operator,
									mianWH.name as mainName,
									addiWH.name as addiName,
									sta.inbound_time,
									--sta.sku_qty as skuQty,
									(select sum(l.QUANTITY) from t_wh_sta_line l where l.sta_Id = sta.id)as skuQty,
									sta.picking_list_id as pickListId,
									gp.code as groupStaCode,
								 	(SELECT C.NAME
	                  				 FROM T_WH_SKU_SIZE_CONFIG C
	                  					WHERE C.MAX_SIZE > sta.sku_max_length
	                  				  AND C.MIN_SIZE <= sta.sku_max_length) AS productSize,
							
					                sta.tracking_and_sku AS trackingAndSku,
					                decode(di.is_cod, '1', '是', '否') as isCod,
					                decode(sta.IS_SPECIAL_PACKAGING,'1', '是', '否') as isQs,
					                (SELECT shop.name FROM T_BI_SHOP_STORE shop WHERE shop.code = sta.to_location) AS o2oShop,
					                decode(sta.picking_type, 1, '单件', 2, '套装', 3, 'O2OQS', 10, '多件',20, '团购', 30, '秒杀')  pickingTypeString,
					                decode((SELECT d.trans_time_type FROM T_WH_STA_DELIVERY_INFO d WHERE d.id = sta.id) , 1, '普通', 3, '及时达', 5, '当日', 6, '次日',7, '次晨达',8,'云仓专配次日',9,'云仓专配隔日') transTimeType,
					                (select c.sku_categories_name from T_MA_SKU_CATEGORIES c where c.id = sta.sku_categories_id) AS skuCategoriesName
								from 
									t_wh_sta sta
									left join t_bi_channel mch on mch.code = sta.owner
									left join t_bi_channel addch on addch.code = sta.addi_owner
									left join T_AU_OPERATION_UNIT mianWH on mianWH.Id=sta.main_wh_id
									left join T_AU_OPERATION_UNIT addiWH on addiWH.Id=sta.addi_wh_id
									left join t_wh_sta gp on sta.group_sta_id=gp.id and gp.create_time >= sta.create_time
									left join t_au_user u on sta.main_wh_id = :ouId and u.id=sta.out_operator_id
								#if($supplierCode||$skuCode||$barCode||$jmCode)
									inner join 	(select distinct sl.STA_ID 	from T_WH_STA_LINE sl 
									left join 	T_BI_INV_SKU tis on tis.id=sl.SKU_ID   where 1=1
				                          #if($jmCode)
				                            and tis.jm_code like :jmCode
				                         #end
				                         #if($supplierCode)
				                            and tis.supplier_code like :supplierCode
				                         #end
				                         #if($skuCode)
				                            and tis.code like :skuCode
				                         #end
				                         #if($barCode)
				                            and tis.bar_code like :barCode
				                         #end
									) tis on tis.STA_ID=sta.id  
								#end
								left join t_wh_sta_delivery_info di 
								#if($trackingNo)
									left join 
									(
										select 
											pg.sta_delivery_info_id as id,
											pg.tracking_no as tracking_no
										from 
											t_wh_package_info pg
										where 
											pg.tracking_no like :trackingNo
										group 
											by pg.sta_delivery_info_id,pg.tracking_no
									) pg on pg.id = di.id
								#end 
							on sta.id = di.id
							#if($pickingListCode)
							left join t_wh_sta_picking_list pl on pl.id = sta.picking_list_id
							#end
							where (sta.main_wh_id = :ouId
			                 or (sta.type in (32,90,91) and sta.addi_wh_id = :ouId))
					                #if($trackingNo)
					                  and pg.tracking_no like :trackingNo
					                #end
					                #if($code)
					                  and sta.code like :code
					                #end
					                #if($slipCode1)
					                  and sta.slip_code1 like :slipCode1
					                #end
					                #if($slipCode2)
					                  and sta.slip_code2 like :slipCode2
					                #end
					                
					                #if($slipCode)
					                  and sta.slip_code like :slipCode
					                #end
					                #if($owner)
					                  and sta.owner like :owner
					                #end
					                #if($createTime)
					                  and sta.create_time >= :createTime
					                #end
					                #if($endCreateTime)
					                  and sta.create_time <= :endCreateTime
					                #end
					                #if($orderCreateTime)
					                    and sta.ORDER_CREATE_TIME >= :orderCreateTime
					                #end
					                #if($toOrderCreateTime)
					                    and sta.ORDER_CREATE_TIME <=:toOrderCreateTime
					                #end
					                #if($finishTime)
					                  and sta.finish_time >= :finishTime
					                #end
					                #if($endFinishTime)
					                  and sta.finish_time <= :endFinishTime
					                #end
					                #if(!$createTime && !$endCreateTime && !$finishTime && !$endFinishTime)
					                  and sta.create_time > sysdate - 91
					                #end
					                #if($lpcode)
					                  and di.lpcode = :lpcode
					                #end
					                #if($status)
					                  and sta.status = :status
					                #else
						               #if($statusList)
						                    and sta.status in (
						               #foreach($status in $statusList)
						                                $status,
						               #end
						                              -1)
						             #end
					                #end
					                #if($type) 
					                  and sta.type = :type
					                #end
					                #if($operator) 
					                  and upper(u.user_name) like upper(:operator)
					                #end
					                #if($isMorePackage)
					                  and nvl(di.is_more_package,0) = 1
					                #end 
					                #if($isCod)
					                  #if($isCod == "0")
					                    and (di.is_cod = 0 or di.is_cod is null)          
					                  #end 
					                  #if($isCod == "1")
					                    and di.is_cod = 1          
					                  #end 
					                #end 
					                #if($isQs)
					                  and sta.is_special_packaging = :isQs
					                #end 
					                #if($o2oShop)
					                  and sta.to_location = :o2oShop
					                #end 
					                #if($pickingTypeString)
					                  and sta.picking_type = :pickingTypeString
					                #end 
					                #if($transTimeType)
					                  and di.trans_time_type = :transTimeType
					                #end 
					                #if($isMerge)
					                  and sta.is_merge = :isMerge
					                #end 
					                #if($groupStaCode)
					                  and sta.group_sta_id = (select t.id from t_wh_sta t where t.code like :groupStaCode)
					                #end 
					                #if($pickingListCode)
					                  and pl.code like :pickingListCode
					                #end
					                #if($isPickingList)
					                	#if($isPickingList == "1")
					                		and 
					                		(sta.picking_list_id is not null or (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is not null)
					                	#end
					                	#if($isPickingList == "2")
					                		and
					                		(sta.picking_list_id is null and (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is  null)
					                	#end
					                #end
					                ) data
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findHistoricalStaLists" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	select * from (
									select 
										sta.id,
										sta.code,
										sta.slip_code as refSlipCode,
										sta.slip_code1 as slipCode1,
										sta.slip_code2 as slipCode2,
										sta.ORDER_CREATE_TIME orderCreateTime,
										sta.type as intType,
										case
		                     				 when sta.picking_list_id is not null
						                     then '是'
						                     when sta.group_sta_id is not null and 
						                     	  (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is not null
						                     then '是'
						                     else '否'
					                	end as pickStatus,
										sta.status as intStatus,sta.memo,
										mch.name  owner,
										addch.name addi_owner,
										nvl(sta.IS_LOCKED,0) as isLocked,
										di.lpcode,
										di.tracking_no,
										sta.create_time,
										sta.finish_time,
										sta.to_location as toLocation,
										sta.from_location as fromLocation,
										u.user_name as operator,
										mianWH.name as mainName,
										addiWH.name as addiName,
										sta.inbound_time,
										--sta.sku_qty as skuQty,
										(select sum(l.QUANTITY) from t_wh_sta_line l where l.sta_Id = sta.id)as skuQty,
										sta.picking_list_id as pickListId,
										#if($isShowMerge == "1")
						                		gp.code as groupStaCode,
						                #else 
						               			'' as groupStaCode,
						                #end
									 	(SELECT C.NAME
		                  				 FROM T_WH_SKU_SIZE_CONFIG C
		                  					WHERE C.MAX_SIZE > sta.sku_max_length
		                  				  AND C.MIN_SIZE <= sta.sku_max_length) AS productSize,
								
						                sta.tracking_and_sku AS trackingAndSku,
						                decode(di.is_cod, '1', '是', '否') as isCod,
						                decode(sta.IS_SPECIAL_PACKAGING,'1', '是', '否') as isQs,
						                nvl((SELECT shop.name FROM T_BI_SHOP_STORE shop WHERE shop.code = sta.to_location),sta.ct_code)AS o2oShop,
						                decode(sta.picking_type, 1, '单件', 2, '套装', 3, 'O2OQS', 10, '多件',20, '团购', 30, '秒杀')  pickingTypeString,
						                decode((SELECT d.trans_time_type FROM T_WH_STA_DELIVERY_INFO d WHERE d.id = sta.id) , 1, '普通', 3, '及时达', 5, '当日', 6, '次日', 7, '次晨达',8,'云仓专配次日',9,'云仓专配隔日') transTimeType,
						                (select c.sku_categories_name from T_MA_SKU_CATEGORIES c where c.id = sta.sku_categories_id) AS skuCategoriesName,
						                decode(sta.IS_PRE_SALE,'1', '是', '否') as isPreSale
									from 
										t_wh_sta sta
										left join t_bi_channel mch on mch.code = sta.owner
										left join t_bi_channel addch on addch.code = sta.addi_owner
										left join T_AU_OPERATION_UNIT mianWH on mianWH.Id=sta.main_wh_id
										left join T_AU_OPERATION_UNIT addiWH on addiWH.Id=sta.addi_wh_id
										#if($isShowMerge == "1")
										left join t_wh_sta gp on sta.group_sta_id=gp.id and gp.create_time >= sta.create_time
										#end
										left join t_au_user u on sta.main_wh_id = :ouId and u.id=sta.out_operator_id
									#if($supplierCode||$skuCode||$barCode||$jmCode)
										inner join 	(select distinct sl.STA_ID 	from T_WH_STA_LINE sl 
										left join 	T_BI_INV_SKU tis on tis.id=sl.SKU_ID   where 1=1
					                          #if($jmCode)
					                            and tis.jm_code like :jmCode
					                         #end
					                         #if($supplierCode)
					                            and tis.supplier_code like :supplierCode
					                         #end
					                         #if($skuCode)
					                            and tis.code like :skuCode
					                         #end
					                         #if($barCode)
					                            and tis.bar_code like :barCode
					                         #end
										) tis on tis.STA_ID=sta.id  
									#end
									left join t_wh_sta_delivery_info di on sta.id = di.id
								#if($pickingListCode)
								left join t_wh_sta_picking_list pl on pl.id = sta.picking_list_id
								#end
								where (sta.main_wh_id = :ouId
				                 or (sta.type in (32,90,91) and sta.addi_wh_id = :ouId))
						                #if($trackingNo)
						                  and di.tracking_no like :trackingNo
						                #end
						                #if($code)
						                  and sta.code like :code
						                #end
						                #if($slipCode1)
						                  and sta.slip_code1 like :slipCode1
						                #end
						                #if($slipCode2)
						                  and sta.slip_code2 like :slipCode2
						                #end
						                
						                #if($slipCode)
						                  and sta.slip_code like :slipCode
						                #end
						                #if($owner)
						                  and sta.owner like :owner
						                #end
						                #if($createTime)
						                  and sta.create_time >= :createTime
						                #end
						                #if($endCreateTime)
						                  and sta.create_time <= :endCreateTime
						                #end
						                #if($orderCreateTime)
						                    and sta.ORDER_CREATE_TIME >= :orderCreateTime
						                #end
						                #if($toOrderCreateTime)
						                    and sta.ORDER_CREATE_TIME <=:toOrderCreateTime
						                #end
						                #if($finishTime)
						                  and sta.finish_time >= :finishTime
						                #end
						                #if($endFinishTime)
						                  and sta.finish_time <= :endFinishTime
						                #end
						                #if(!$createTime && !$endCreateTime && !$finishTime && !$endFinishTime)
						                  and sta.create_time > sysdate - 91
						                #end
						                #if($lpcode)
						                  and di.lpcode = :lpcode
						                #end
						                #if($status)
						                  and sta.status = :status
						                #else
							               #if($statusList)
							                    and sta.status in (
							               #foreach($status in $statusList)
							                                $status,
							               #end
							                              -1)
							             #end
						                #end
						                #if($type) 
						                  and sta.type = :type
						                #end
						                #if($operator) 
						                  and upper(u.user_name) like upper(:operator)
						                #end
						                #if($isMorePackage)
						                  and nvl(di.is_more_package,0) = 1
						                #end 
						                #if($isCod)
						                  #if($isCod == "0")
						                    and (di.is_cod = 0 or di.is_cod is null)          
						                  #end 
						                  #if($isCod == "1")
						                    and di.is_cod = 1          
						                  #end 
						                #end 
						                #if($isQs)
						                  and sta.is_special_packaging = :isQs
						                #end 
						                #if($o2oShop)
						                  and sta.to_location = :o2oShop
						                #end 
						                #if($pickingTypeString)
						                  and sta.picking_type = :pickingTypeString
						                #end 
						                #if($transTimeType)
						                  and di.trans_time_type = :transTimeType
						                #end 
						                #if($isMerge)
						                  and sta.is_merge = :isMerge
						                #end 
						                #if($groupStaCode)
						                  and sta.group_sta_id = (select t.id from t_wh_sta t where t.code like :groupStaCode)
						                #end 
						                #if($pickingListCode)
						                  and pl.code like :pickingListCode
						                #end
						                #if($isPickingList)
						                	#if($isPickingList == "1")
						                		and 
						                		(sta.picking_list_id is not null or (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is not null)
						                	#end
						                	#if($isPickingList == "2")
						                		and
						                		(sta.picking_list_id is null and (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is  null)
						                	#end
						                #end
						                
						                #if($cityList)
						                and (sta.type=21 or sta.type=25 or sta.type=42)	
					                   		#if($flag)
												and  di.city in( 
						                    			#foreach($city in $cityList )
						                    				 '$city',
						                    			#end
						                    			'-1')
				                    				
											#else
												and ( 1 = 1
						                    			#foreach($city in $cityList )
						                    				and di.city != '$city'
						                    			#end
						                    		)
											#end
				                    	#end
				                    	
				                    	#if($priorityList)
				                    	and (sta.type=21 or sta.type=25 or sta.type=42)	
					                   		#if($msg)
												and di.PROVINCE in(
						                    			#foreach($city in $priorityList )
						                    				'$city',
						                    			#end
				                    				'-1')
											#else
												and ( 1 = 1
						                    			#foreach($city in $priorityList )
						                    				and di.PROVINCE != '$city'
						                    			#end
						                    		)
											#end
				                    	#end
						                
						                union all 
						                
						                select 
						                  sta.id,
						                  sta.code,
						                  sta.slip_code as refSlipCode,
						                  sta.slip_code1 as slipCode1,
						                  sta.slip_code2 as slipCode2,
						                  sta.ORDER_CREATE_TIME orderCreateTime,
						                  sta.type as intType,
						                  case
						                                when sta.picking_list_id is not null
						                               then '是'
						                               when sta.group_sta_id is not null and 
						                                   (select picking_list_id from t_arc_sta where id = sta.group_sta_id) is not null
						                               then '是'
						                               else '否'
						                          end as pickStatus,
						                  sta.status as intStatus,sta.memo,
						                  mch.name  owner,
						                  addch.name addi_owner,
						                  nvl(sta.IS_LOCKED,0) as isLocked,
						                  di.lpcode,
						                  di.tracking_no,
						                  sta.create_time,
						                  sta.finish_time,
						                  sta.to_location as toLocation,
						                  sta.from_location as fromLocation,
						                  u.user_name as operator,
						                  mianWH.name as mainName,
						                  addiWH.name as addiName,
						                  sta.inbound_time,
						                  --sta.sku_qty as skuQty,
						                  (select sum(l.QUANTITY) from t_arc_sta_line l where l.sta_Id = sta.id)as skuQty,
						                  sta.picking_list_id as pickListId,
						                  '' as groupStaCode,
						                   (SELECT C.NAME
						                             FROM T_WH_SKU_SIZE_CONFIG C
						                              WHERE C.MAX_SIZE > sta.sku_max_length
						                              AND C.MIN_SIZE <= sta.sku_max_length) AS productSize,
						              
						                          sta.tracking_and_sku AS trackingAndSku,
						                          decode(di.is_cod, '1', '是', '否') as isCod,
						                          decode(sta.IS_SPECIAL_PACKAGING,'1', '是', '否') as isQs,
						                          (SELECT shop.name FROM T_BI_SHOP_STORE shop WHERE shop.code = sta.to_location) AS o2oShop,
						                          decode(sta.picking_type, 1, '单件', 2, '套装', 3, 'O2OQS', 10, '多件',20, '团购', 30, '秒杀')  pickingTypeString,
						                          decode((SELECT d.trans_time_type FROM T_WH_STA_DELIVERY_INFO d WHERE d.id = sta.id) , 1, '普通', 3, '及时达', 5, '当日', 6, '次日',7, '次晨达',8,'云仓专配次日',9,'云仓专配隔日') transTimeType,
						                          (select c.sku_categories_name from T_MA_SKU_CATEGORIES c where c.id = sta.sku_categories_id) AS skuCategoriesName,
						                  '' as isPreSale        
						                from 
						                  t_arc_sta sta
						                  left join t_bi_channel mch on mch.code = sta.owner
						                  left join t_bi_channel addch on addch.code = sta.addi_owner
						                  left join T_AU_OPERATION_UNIT mianWH on mianWH.Id=sta.main_wh_id
						                  left join T_AU_OPERATION_UNIT addiWH on addiWH.Id=sta.addi_wh_id
						                  --left join t_arc_sta gp on sta.group_sta_id=gp.id and gp.create_time >= sta.create_time
						                  left join t_au_user u on sta.main_wh_id = :ouId and u.id=sta.out_operator_id
						                #if($supplierCode||$skuCode||$barCode||$jmCode)
						                  inner join   (select distinct sl.STA_ID   from T_ARC_STA_LINE sl 
						                  left join   T_BI_INV_SKU tis on tis.id=sl.SKU_ID   where 1=1
						                                  #if($jmCode)
						                                    and tis.jm_code like :jmCode
						                                 #end
						                                 #if($supplierCode)
						                                    and tis.supplier_code like :supplierCode
						                                 #end
						                                 #if($skuCode)
						                                    and tis.code like :skuCode
						                                 #end
						                                 #if($barCode)
						                                    and tis.bar_code like :barCode
						                                 #end
						                  ) tis on tis.STA_ID=sta.id  
						                #end
						                left join t_wh_sta_delivery_info di 
						              on sta.id = di.id
						              #if($pickingListCode)
						              left join t_wh_sta_picking_list pl on pl.id = sta.picking_list_id
						              #end
						              where (sta.main_wh_id = :ouId
						                       or (sta.type in (32,90,91) and sta.addi_wh_id = :ouId))
						                          #if($trackingNo)
						                            and di.tracking_no like :trackingNo
						                          #end
						                          #if($code)
						                            and sta.code like :code
						                          #end
						                          #if($slipCode1)
						                            and sta.slip_code1 like :slipCode1
						                          #end
						                          #if($slipCode2)
						                            and sta.slip_code2 like :slipCode2
						                          #end
						                          
						                          #if($slipCode)
						                            and sta.slip_code like :slipCode
						                          #end
						                          #if($owner)
						                            and sta.owner like :owner
						                          #end
						                          #if($createTime)
						                            and sta.create_time >= :createTime
						                          #end
						                          #if($endCreateTime)
						                            and sta.create_time <= :endCreateTime
						                          #end
						                          #if($orderCreateTime)
						                              and sta.ORDER_CREATE_TIME >= :orderCreateTime
						                          #end
						                          #if($toOrderCreateTime)
						                              and sta.ORDER_CREATE_TIME <=:toOrderCreateTime
						                          #end
						                          #if($finishTime)
						                            and sta.finish_time >= :finishTime
						                          #end
						                          #if($endFinishTime)
						                            and sta.finish_time <= :endFinishTime
						                          #end
						                          #if(!$createTime && !$endCreateTime && !$finishTime && !$endFinishTime)
						                            and sta.create_time > sysdate - 91
						                          #end
						                          #if($lpcode)
						                            and di.lpcode = :lpcode
						                          #end
						                          #if($status)
						                            and sta.status = :status
						                          #else
						                           #if($statusList)
						                                and sta.status in (
						                           #foreach($status in $statusList)
						                                            $status,
						                           #end
						                                          -1)
						                         #end
						                          #end
						                          #if($type) 
						                            and sta.type = :type
						                          #end
						                          #if($operator) 
						                            and upper(u.user_name) like upper(:operator)
						                          #end
						                          #if($isMorePackage)
						                            and nvl(di.is_more_package,0) = 1
						                          #end 
						                          #if($isCod)
						                            #if($isCod == "0")
						                              and (di.is_cod = 0 or di.is_cod is null)          
						                            #end 
						                            #if($isCod == "1")
						                              and di.is_cod = 1          
						                            #end 
						                          #end 
						                          #if($isQs)
						                            and sta.is_special_packaging = :isQs
						                          #end 
						                          #if($o2oShop)
						                            and sta.to_location = :o2oShop
						                          #end 
						                          #if($pickingTypeString)
						                            and sta.picking_type = :pickingTypeString
						                          #end 
						                          #if($transTimeType)
						                            and di.trans_time_type = :transTimeType
						                          #end 
						                          #if($isMerge)
						                            and sta.is_merge = :isMerge
						                          #end 
						                          #if($groupStaCode)
						                            and sta.group_sta_id = (select t.id from t_arc_sta t where t.code like :groupStaCode)
						                          #end 
						                          #if($pickingListCode)
						                            and pl.code like :pickingListCode
						                          #end
						                          #if($isPickingList)
						                            #if($isPickingList == "1")
						                              and 
						                              (sta.picking_list_id is not null or (select picking_list_id from t_arc_sta where id = sta.group_sta_id) is not null)
											        #end
											        #if($isPickingList == "2")
											        	and
											            (sta.picking_list_id is null and (select picking_list_id from t_arc_sta where id = sta.group_sta_id) is  null)
											        #end
											      #end
											      
											      #if($cityList)
											      	and (sta.type=21 or sta.type=25 or sta.type=42)	
							                   		#if($flag)
														and  di.city in( 
								                    			#foreach($city in $cityList )
								                    				 '$city',
								                    			#end
								                    			'-1')
						                    				
													#else
														and ( 1 = 1
								                    			#foreach($city in $cityList )
								                    				and di.city != '$city'
								                    			#end
								                    		)
													#end
						                    	#end
						                    	
						                    	#if($priorityList)
						                    		and (sta.type=21 or sta.type=25 or sta.type=42)	
							                   		#if($msg)
														and di.PROVINCE in(
								                    			#foreach($city in $priorityList )
								                    				'$city',
								                    			#end
						                    				'-1')
													#else
														and ( 1 = 1
								                    			#foreach($city in $priorityList )
								                    				and di.PROVINCE != '$city'
								                    			#end
								                    		)
													#end
						                    	#end
						                ) data
					]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 只查t_wh_sta -->
	<bean id="StockTransApplication.findHistoricalStaLists2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	
					select * from (
									select 
										sta.id,
										sta.code,
										sta.slip_code as refSlipCode,
										sta.slip_code1 as slipCode1,
										sta.slip_code2 as slipCode2,
										sta.ORDER_CREATE_TIME orderCreateTime,
										sta.type as intType,
										case
		                     				 when sta.picking_list_id is not null
						                     then '是'
						                     when sta.group_sta_id is not null and 
						                     	  (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is not null
						                     then '是'
						                     else '否'
					                	end as pickStatus,
										sta.status as intStatus,sta.memo,
										mch.name  owner,
										addch.name addi_owner,
										nvl(sta.IS_LOCKED,0) as isLocked,
										di.lpcode,
										di.tracking_no,
										sta.create_time,
										sta.finish_time,
										sta.to_location as toLocation,
										sta.from_location as fromLocation,
										u.user_name as operator,
										mianWH.name as mainName,
										addiWH.name as addiName,
										sta.inbound_time,
										--sta.sku_qty as skuQty,
										(select sum(l.QUANTITY) from t_wh_sta_line l where l.sta_Id = sta.id)as skuQty,
										sta.picking_list_id as pickListId,
										#if($isShowMerge == "1")
						                		gp.code as groupStaCode,
						                #else 
						               			'' as groupStaCode,
						                #end
									 	(SELECT C.NAME
		                  				 FROM T_WH_SKU_SIZE_CONFIG C
		                  					WHERE C.MAX_SIZE > sta.sku_max_length
		                  				  AND C.MIN_SIZE <= sta.sku_max_length) AS productSize,
								
						                sta.tracking_and_sku AS trackingAndSku,
						                decode(di.is_cod, '1', '是', '否') as isCod,
						                decode(sta.IS_SPECIAL_PACKAGING,'1', '是', '否') as isQs,
						                nvl((SELECT shop.name FROM T_BI_SHOP_STORE shop WHERE shop.code = sta.to_location),sta.CT_CODE) AS o2oShop,
						                decode(sta.picking_type, 1, '单件', 2, '套装', 3, 'O2OQS', 10, '多件',20, '团购', 30, '秒杀')  pickingTypeString,
						                decode((SELECT d.trans_time_type FROM T_WH_STA_DELIVERY_INFO d WHERE d.id = sta.id) , 1, '普通', 3, '及时达', 5, '当日', 6, '次日', 7, '次晨达',8,'云仓专配次日',9,'云仓专配隔日') transTimeType,
						                (select c.sku_categories_name from T_MA_SKU_CATEGORIES c where c.id = sta.sku_categories_id) AS skuCategoriesName,
						                decode(sta.IS_PRE_SALE,'1', '是', '否') as isPreSale
									from 
										t_wh_sta sta
										left join t_bi_channel mch on mch.code = sta.owner
										left join t_bi_channel addch on addch.code = sta.addi_owner
										left join T_AU_OPERATION_UNIT mianWH on mianWH.Id=sta.main_wh_id
										left join T_AU_OPERATION_UNIT addiWH on addiWH.Id=sta.addi_wh_id
										#if($isShowMerge == "1")
						                		left join t_wh_sta gp on sta.group_sta_id=gp.id and gp.create_time >= sta.create_time
						                #end
										left join t_au_user u on sta.main_wh_id = :ouId and u.id=sta.out_operator_id
									#if($supplierCode||$skuCode||$barCode||$jmCode)
										inner join 	(select distinct sl.STA_ID 	from T_WH_STA_LINE sl 
										left join 	T_BI_INV_SKU tis on tis.id=sl.SKU_ID   where 1=1
					                          #if($jmCode)
					                            and tis.jm_code like :jmCode
					                         #end
					                         #if($supplierCode)
					                            and tis.supplier_code like :supplierCode
					                         #end
					                         #if($skuCode)
					                            and tis.code like :skuCode
					                         #end
					                         #if($barCode)
					                            and tis.bar_code like :barCode
					                         #end
										) tis on tis.STA_ID=sta.id  
									#end
									left join t_wh_sta_delivery_info di on sta.id = di.id
								#if($pickingListCode)
								left join t_wh_sta_picking_list pl on pl.id = sta.picking_list_id
								#end
								where (sta.main_wh_id = :ouId
				                 or (sta.type in (32,90,91) and sta.addi_wh_id = :ouId))
						                #if($trackingNo)
						                  and di.tracking_no like :trackingNo
						                #end
						                #if($code)
						                  and sta.code like :code
						                #end
						                #if($slipCode1)
						                  and sta.slip_code1 like :slipCode1
						                #end
						                #if($slipCode2)
						                  and sta.slip_code2 like :slipCode2
						                #end
						                
						                #if($slipCode)
						                  and sta.slip_code like :slipCode
						                #end
						                #if($isPreSale)
											#if($isPreSale == "1")
												and sta.is_pre_sale = '1'
											#end
											#if($isPreSale == "0")
												and (sta.is_pre_sale is null or sta.is_pre_sale = '0') 
											#end
						                #end
						                #if($owner)
						                  and sta.owner like :owner
						                #end
						                #if($createTime)
						                  and sta.create_time >= :createTime
						                #end
						                #if($endCreateTime)
						                  and sta.create_time <= :endCreateTime
						                #end
						                #if($orderCreateTime)
						                    and sta.ORDER_CREATE_TIME >= :orderCreateTime
						                #end
						                #if($toOrderCreateTime)
						                    and sta.ORDER_CREATE_TIME <=:toOrderCreateTime
						                #end
						                #if($finishTime)
						                  and sta.finish_time >= :finishTime
						                #end
						                #if($endFinishTime)
						                  and sta.finish_time <= :endFinishTime
						                #end
						                #if(!$createTime && !$endCreateTime && !$finishTime && !$endFinishTime)
						                  and sta.create_time > sysdate - 91
						                #end
						                #if($lpcode)
						                  and di.lpcode = :lpcode
						                #end
						                #if($status)
						                  and sta.status = :status
						                #else
							               #if($statusList)
							                    and sta.status in (
							               #foreach($status in $statusList)
							                                $status,
							               #end
							                              -1)
							             #end
						                #end
						                #if($type) 
						                  and sta.type = :type
						                #end
						                #if($operator) 
						                  and upper(u.user_name) like upper(:operator)
						                #end
						                #if($isMorePackage)
						                  and nvl(di.is_more_package,0) = 1
						                #end 
						                #if($isCod)
						                  #if($isCod == "0")
						                    and (di.is_cod = 0 or di.is_cod is null)          
						                  #end 
						                  #if($isCod == "1")
						                    and di.is_cod = 1          
						                  #end 
						                #end 
						                #if($isQs)
						                  and sta.is_special_packaging = :isQs
						                #end 
						                #if($o2oShop)
						                  and sta.to_location = :o2oShop
						                #end 
						                #if($pickingTypeString)
						                  and sta.picking_type = :pickingTypeString
						                #end 
						                #if($transTimeType)
						                  and di.trans_time_type = :transTimeType
						                #end 
						                #if($isMerge)
						                  and sta.is_merge = :isMerge
						                #end 
						                #if($groupStaCode)
						                  and sta.group_sta_id = (select t.id from t_wh_sta t where t.code like :groupStaCode)
						                #end 
						                #if($pickingListCode)
						                  and pl.code like :pickingListCode
						                #end
						                #if($isPickingList)
						                	#if($isPickingList == "1")
						                		and 
						                		(sta.picking_list_id is not null or (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is not null)
						                	#end
						                	#if($isPickingList == "2")
						                		and
						                		(sta.picking_list_id is null and (select picking_list_id from t_wh_sta where id = sta.group_sta_id) is  null)
						                	#end
						                #end
						                #if($cityList)
						                	and (sta.type=21 or sta.type=25 or sta.type=42)	
					                   		#if($flag)
												and  di.city in( 
						                    			#foreach($city in $cityList )
						                    				 '$city',
						                    			#end
						                    			'-1')
				                    				
											#else
												and ( 1 = 1
						                    			#foreach($city in $cityList )
						                    				and di.city != '$city'
						                    			#end
						                    		)
											#end
				                    	#end
				                    	
				                    	#if($priorityList)
				                    		and (sta.type=21 or sta.type=25 or sta.type=42)	
					                   		#if($msg)
												and di.PROVINCE in(
						                    			#foreach($city in $priorityList )
						                    				'$city',
						                    			#end
				                    				'-1')
											#else
												and ( 1 = 1
						                    			#foreach($city in $priorityList )
						                    				and di.PROVINCE != '$city'
						                    			#end
						                    		)
											#end
				                    	#end
						            )  data
					]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="StockTransApplication.findCreateOutOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
							select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.type as intType,
								sta.status as intStatus,
								sta.memo,
								ch.name owner,
								di.lpcode,
								di.tracking_no,
								sta.create_time,
								u.user_name as operator
							from 
								t_wh_sta sta
								inner join t_bi_channel ch on ch.code = sta.owner
								left join t_au_user u on (u.id=sta.out_operator_id or u.id = sta.in_operator_id)
								left join t_wh_sta_delivery_info di on sta.id = di.id
							where (sta.status = 1 or sta.status=10 or sta.status= 2)
								and (sta.type = 42 or sta.type=21 or sta.type=25)
								and sta.picking_list_id is null
								#if($ouId)
								and sta.main_wh_id = :ouId
								#end
								#if($olist)
								and sta.main_wh_id in(
					           #foreach($w in $olist)
					        	$w,
				             	#end
					           -1)
								#end
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
								#if($owner)
									and sta.owner = :owner
								#end
								#if($lpcode)
									and di.lpcode = :lpcode
								#end
									
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findInBoundStaAll" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
select 
	sta.id,
	sta.code,
	sta.slip_code as refSlipCode,
	sta.SLIP_CODE1 as slipCode1,
	sta.type as intStaType,
	sta.status as intStaStatus,
	sta.memo,
	sta.owner,
	cnl.name channelName,
	sta.finish_time,
	sta.create_time
from 
t_wh_sta sta,
t_bi_channel cnl
where sta.type in (11)
and sta.status in (5,10)
and cnl.code = sta.owner
and sta.main_wh_id = :ouId
#if($code)
	and sta.code like :code
#end
#if($slipCode)
	and sta.slip_code like :slipCode
#end
#if($slipCode1)
	and sta.SLIP_CODE1 like :slipCode1
#end
#if($createTime)
	and sta.create_time >= :createTime
#end
#if($endCreateTime)
	and sta.create_time <= :endCreateTime
#end
#if($owner)
	and sta.owner like  :owner
#end
#if($type)
	and sta.type= :type
#end
				
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findInBoundSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
							select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.SLIP_CODE1 as slipCode1,
								sta.type as intStaType,
								sta.status as intStaStatus,
								sta.memo,
								cnl.name channelName,
								sta.owner,
								sta.create_time,
				                sta.type,
				                sta.status
							from 
								t_wh_sta sta,
								t_bi_channel cnl
              				where ((sta.status in (1,5) and sta.type in (11,12,14,15,16,17,81) and sta.main_wh_id = :ouId)
                				or (sta.status = 4 and sta.type in (32,90,91)  and sta.addi_wh_id = :ouId))
                  				and not exists(select 1 from t_wh_stv stv where stv.sta_id=sta.id and (stv.status=3 or stv.status=5) and stv.type= 1)
								and sta.owner = cnl.code
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($slipCode1)
									and sta.SLIP_CODE1 like :slipCode1
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
								#if($owner)
									and sta.owner like  :owner
								#end
								#if($type)
									and sta.type= :type
								#end
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findInBoundStas" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
							select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.SLIP_CODE1 as slipCode1,
								sta.type as intStaType,
								sta.status as intStaStatus,
								sta.memo,
								cnl.name channelName,
								sta.owner,
								sta.create_time,
				                sta.type,
				                sta.status
							from 
								t_wh_sta sta,
								t_bi_channel cnl
              				where (sta.status in (1) and sta.type in (81) and sta.main_wh_id = :ouId)
                  				and not exists(select 1 from t_wh_stv stv where stv.sta_id=sta.id and (stv.status=3 or stv.status=5) and stv.type= 1)
                  				and sta.group_sta_id is null and not exists (select 1 from t_wh_sta t where t.group_sta_id = sta.id )
								and sta.owner = cnl.code
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($slipCode1)
									and sta.SLIP_CODE1 like :slipCode1
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
								#if($owner)
									and sta.owner like  :owner
								#end
								#if($type)
									and sta.type= :type
								#end
				
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findInBoundAllSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
							select 
								sta.id,
								stv.id as stvId,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.SLIP_CODE1 as slipCode1,
								sta.type as intStaType,
								sta.status as intStaStatus,
								sta.memo,
								sta.owner,
								cnl.name channelName,
								sta.create_time,
								u.user_name as receiptor,
								shop.is_inbound_invoice as isInboundInvoice,
								u2.user_name as affirmor,
								stv.SKU_QTY as receiptNumber
							from 
								t_wh_sta sta,
								t_bi_channel shop,
								t_wh_stv stv,
								t_au_user u,
								t_au_user u2,
								t_bi_channel cnl
							where 
								((sta.type in (11,12,14,15,16,17,81)and sta.main_wh_id = :ouId and sta.status in(1,5)) or(sta.type in (32,90,91) and sta.status = 4 and sta.ADDI_WH_ID=:ouId))
								and sta.owner = cnl.code
								#if("$!isPda"=="true")
									and exists(select * from t_wh_pda_order pda where (pda.status = 1 or pda.status = 0 or pda.status = 5) and pda.type = 3 and pda.order_code=sta.code)
								#end
								and sta.id=stv.sta_id
								and shop.code=sta.owner
								and stv.receiptor_id = u.id(+)
								and stv.AFFIRMOR_ID = u2.id(+)
								and stv.status=:status
								and stv.type = :stvtype
								#if($stvLine)
									and stv.id in (
									#foreach($stvId in $stvLine)
										$stvId,
									#end
									-1)
								#end
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($slipCode1)
									and sta.SLIP_CODE1 like :slipCode1
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
								#if($owner)
									and sta.owner like  :owner
								#end
								#if($type)
									and sta.type= :type
								#end
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- pda上架审核查询 -->
		<bean id="StockTransApplication.findPdaShelvesSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
    			select sta.id,
                sta.code,
                sta.slip_code as refSlipCode,
                sta.SLIP_CODE1 as slipCode1,
                sta.type as intStaType,
                sta.status as intStaStatus,
                sta.memo,
                sta.owner,
                cnl.name channelName,
                sta.create_time
                from t_wh_sta sta,t_bi_channel cnl
                where sta.owner = cnl.code and
                sta.main_wh_id=:ouId and sta.type in (11,12,14,15,16,17,81) 
                and sta.status in(1,5) 
                and exists(select c.id from t_wh_sta_carton c where (c.status = 5 or c.status =10) and c.sta_id=sta.id)
			#if($code)
				and sta.code like :code
			#end
			#if($slipCode)
				and sta.slip_code like :slipCode
			#end
			#if($slipCode1)
				and sta.SLIP_CODE1 like :slipCode1
			#end
			#if($createTime)
				and sta.create_time >= :createTime
			#end
			#if($endCreateTime)
				and sta.create_time <= :endCreateTime
			#end
			#if($owner)
				and sta.owner like  :owner
			#end
			#if($type)
				and sta.type= :type
			#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- pda上架审核明细查询 -->
	<bean id="StockTransApplication.checkPdaShelvesStaLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
    			select 
                sta.id,
                sta.slip_code as refSlipCode,
                sta.SLIP_CODE1 as slipCode1,
                sta.type as intStaType,
                sta.status as intStaStatus,
                sta.memo,
                sta.owner,
                sta.create_time,
                line.sku_id as skuId,
                s.name as skuName,
                s.code,
                s.bar_code as barCode,
                s.supplier_code as supplierCode,
                s.key_properties as keyProperties,
                nvl(s1.quantity2,0) as quantity2,
                nvl(s2.quantity3,0) as quantity3,
                sum(line.complete_quantity) as comleteQuantity,
                sum(line.quantity) as quantity,
                sum(line.quantity)-sum(line.complete_quantity) as quantity4
                from t_wh_sta sta,t_wh_sta_line line,t_bi_inv_sku s,
                (select sku_id,sum(line.quantity) as quantity2  from t_wh_stv stv,t_wh_stv_line line where stv.id=line.stv_id and stv.type=11 and stv.status=10 and stv.sta_id=:staId group by line.sku_id) s1,
                (select sku_id,sum(qty) as quantity3 from t_wh_sta_carton c,t_wh_sta_carton_line line where c.id=line.c_id and c.sta_id=:staId group by line.sku_id) s2
                where sta.id=line.sta_id  
                and s.id=line.sku_id
                and s.id=s1.sku_id(+)
                and s.id=s2.sku_id(+)
                and sta.main_wh_id=:ouId
                and sta.type in (11,12,14,15,16,17,81) 
                and sta.status in(1,5) and  sta.id=:staId
                group by 
                sta.id,
                sta.slip_code,
                sta.SLIP_CODE1,
                sta.type,
                sta.status,
                sta.memo,
                sta.owner,
                sta.create_time,
                line.sku_id,
                s.name,
                s.code,
                s.bar_code,
                s.supplier_code,
                s.key_properties,
                nvl(s1.quantity2,0),
                nvl(s2.quantity3,0)
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransApplication.updateLpcodeByForm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
update t_wh_sta_delivery_info di set lpcode=:updateLpcode where id in (
	select 
		sta.id
	from 
		t_wh_sta sta
		#if($lpcode)
			left join t_wh_sta_delivery_info di on sta.id = di.id
		#end
	where sta.status = 1
		and (sta.type = 42 or sta.type=21)
		and sta.picking_list_id is null
		and sta.main_wh_id = :ouId
		#if($code)
			and sta.code like :code
		#end
		#if($slipCode)
			and sta.slip_code like :slipCode
		#end
		#if($createTime)
			and sta.create_time >= :createTime
		#end
		#if($endCreateTime)
			and sta.create_time <= :endCreateTime
		#end
		#if($owner)
			and sta.owner = :owner
		#end
		#if($lpcode)
			and di.lpcode = :lpcode
		#end
)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.queryLpcodeByForm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select 
		sta
	from 
		StockTransApplication as sta
		
	where sta.status = 1
		and (sta.type = 42 or sta.type=21)
		and sta.pickingList is null
		#if($ouId)
		and sta.mainWarehouse.id = :ouId
		#end
		#if($wids)
			and sta.mainWarehouse.id in(
			#foreach($w in $wids)
			$w,
			#end
			-1)
		#end
		#if($code)
			and sta.code like :code
		#end
		#if($slipCode)
			and sta.refSlipCode like :slipCode
		#end
		#if($createTime)
			and sta.createTime >= :createTime
		#end
		#if($endCreateTime)
			and sta.createTime <= :endCreateTime
		#end
		#if($owner)
			and sta.owner = :owner
		#end
		#if($lpcode)
			and exists(select di from StaDeliveryInfo as di where di.id=sta.id and di.lpCode= :lpcode)
		#else 
			and exists(select di from StaDeliveryInfo as di where di.id=sta.id and di.lpCode is null)
		#end

				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateLpcodeById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
					update t_wh_sta_delivery_info di set lpcode=:lpcode,tracking_no = null where id=:staId
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StockTransApplication.findExcStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	select 
		sta.id,
		sta.code,
		sta.slip_code as refSlipCode,
		sta.type as intType,
		sta.status as intStatus,sta.memo,
		sta.owner,
		di.lpcode,
		di.tracking_no,
		sta.create_time,
		sta.finish_time,
		u.user_name as operator,
		sta.sku_qty as totalSkuQty
	from 
		t_wh_sta sta
		left join t_au_user u on u.id=sta.out_operator_id or u.id = sta.in_operator_id
		left join t_wh_sta_delivery_info di 
		#if($trackingNo)
			left join 
			(
			  select 
			    pg.sta_delivery_info_id as id,
			    pg.tracking_no as tracking_no
			  from 
			    t_wh_package_info pg
			  where
			    pg.tracking_no like :trackingNo
			  group 
			    by pg.sta_delivery_info_id,pg.tracking_no
			) pg on pg.id = di.id
		#end 
		on sta.id = di.id
	where 
		((sta.type=41 and sta.status!=1) or sta.type=42)
		and sta.main_wh_id = :ouId
		  
		#if($trackingNo)
		  and pg.tracking_no like :trackingNo
		#end
		
		#if($code)
		  and sta.code like :code
		#end
		#if($slipCode)
		  and sta.slip_code like :slipCode
		#end
		#if($owner)
		  and sta.owner like :owner
		#end
		#if($createTime)
		  and sta.create_time >= :createTime
		#end
		#if($endCreateTime)
		  and sta.create_time <= :endCreateTime
		#end
		#if($finishTime)
		  and sta.finish_time >= :finishTime
		#end
		#if($endFinishTime)
		  and sta.finish_time <= :endFinishTime
		#end
		#if($lpcode)
		  and di.lpcode = :lpcode
		#end
		#if($status)
		  and sta.status = :status
		#else
			#if($statusList)
				and sta.status in (
				#foreach($status in $statusList)
					$status,
				#end
				-1)
			#end
		#end
		#if($type) 
		  and sta.type = :type
		#end
		#if($operator) 
			and upper(u.user_name) like upper(:operator)
		#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaForTransitCrossByModelSql"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sta.*,u.user_name as creater,main.name as mainName,addi.name as addiName,
						owner.ownerOuName,
						addiOwner.addiOwnerOuName,
						case when nvl(sta.inbound_time,sta.create_time)<nvl(sta.outbound_time,sta.create_time) then nvl(sta.outbound_time,sta.create_time) else nvl(sta.inbound_time,sta.create_time) end as finishtime
					from 
						
						T_AU_OPERATION_UNIT main,
						T_AU_OPERATION_UNIT addi,
						t_wh_sta sta 
						left join (
							select info.code,  
							info.name as ownerOuName 
							from
								t_bi_channel info
						) owner on owner.code=sta.owner
						left join (
							select info.code,  
							info.name as addiOwnerOuName 
							from
								t_bi_channel info
						) addiOwner on addiOwner.code=sta.addi_owner
						left join t_au_user u on sta.creator_id=u.id
					where 
						sta.type=:type
						and sta.MAIN_WH_ID=main.id and sta.ADDI_WH_ID=addi.id
						and exists (select 1 from T_AU_OPERATION_UNIT wh, T_AU_OPERATION_UNIT opc where sta.MAIN_WH_ID=wh.id and wh.parent_ou_id=opc.id and opc.parent_ou_id=:comId)
						#if($createTimeFrom)
						    and sta.create_time >=:createTimeFrom
						#end
						#if($createTimeTo)
						    and sta.create_time <=:createTimeTo
						#end
						#if($status)
						    and sta.status =:status
						#end
						#if($code)
						    and sta.code like :code
						#end
						#if($userName)
						    and u.user_name like :userName
						#end
						#if($mainWhId)
						    and sta.MAIN_WH_ID=:mainWhId
						#end
						#if($owner)
							and sta.OWNER=:owner
						#end
						#if($addiOwner)
							and sta.ADDI_OWNER=:addiOwner
						#end
						#if($addiWhId)
						    and sta.ADDI_WH_ID=:addiWhId
						#end
                                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.createTransactionTypeByDistrict"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  INSERT INTO T_WH_LOCATION_TRANSTYPE (
						   LOCATION_ID, TRANSTYPE_ID) 
						   select l.id,t.id from T_WH_LOCATION l,T_WH_TRANSACTION_TYPE t where l.district_id = :districtId
							and t.id in (
							#foreach( $id in $transIds )
		    				$id 
		    				,
							#end
							-1
							) 
							minus
							select lt.LOCATION_ID,lt.TRANSTYPE_ID from T_WH_LOCATION_TRANSTYPE lt, T_WH_LOCATION l where 
							l.id=lt.location_id and l.district_id=:districtId
							and lt.TRANSTYPE_ID in (
							#foreach( $id in $transIds )
		    				$id 
		    				,
							#end
							-1
							)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.deleteTransactionTypeByDistrict"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					delete from T_WH_LOCATION_TRANSTYPE t 
						where t.LOCATION_ID in(
							select id from t_wh_location where district_id = :districtId
						)
						and t.TRANSTYPE_ID in(
								#foreach( $id in $transIds )
			    				$id 
			    				,
								#end
								-1
							)
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="WarehouseLocation.findLocationTranstypeByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select l.id, nvl(l.is_locked,0) as is_locked,l.code,s.transtype_id,nvl(l.capacity*l.capacity_ratio/100,0) as capacity,nvl(inv.qty,0) as qty
					from t_wh_location l
					     left join (
					             select s.location_id as location_id,s.transtype_id
					             from T_WH_LOCATION_TRANSTYPE s,t_wh_stv v
					             where  s.transtype_id = v.transtype_id
					                    and v.id = :stvid) s on s.location_id = l.id
					     left join(select loc.id as loc_id,sum(inv.quantity) as qty
					              from t_wh_sku_inventory inv,t_wh_location loc
					              where inv.location_id = loc.id
					                    and loc.code = :locCode
					                    and loc.ou_id = :ouid
					                    and loc.is_available = 1
					                    and nvl(loc.is_locked,0) = 0
					              group by loc.id) inv on inv.loc_id = l.id
					where 
					       l.is_available = 1
					       and nvl(l.is_locked,0) = 0
					       and l.code = :locCode
					       and l.ou_id = :ouid
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WarehouseLocation.findLocationTranstype" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select count(1) from T_WH_LOCATION_TRANSTYPE s where s.LOCATION_ID =:locationId and s.TRANSTYPE_ID =:transtypeId]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Carton.generateCartonSeqNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select to_char(max(carton.seqNo)) as seqNo from
				(
					( select (count(1) + 1) as seqNo from T_WH_CARTON c where c.sta_id = :staid ) 
					union all
					( select (max(to_number(ct.seqno)) + 1) as seqNo from t_wh_carton ct where ct.sta_id = :staid ) 
				) carton
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findSuggestLocationByStvInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select sl.sku_id, min(loc.id) id, sl.batch_code, sl.inv_status_id
  from t_wh_sku_inventory inv,
       t_wh_location loc,
       t_bi_inv_sku sku,
       (select sku_id, batch_code, inv_status_id, sum(quantity) as quantity
          from t_wh_stv_line
         where stv_id = :stvId
         group by sku_id, batch_code, inv_status_id) sl
 where loc.id = inv.location_id
   and inv.sku_id = sku.id
   and (inv.status_id = sl.inv_status_id or sl.inv_status_id is null)
   and sl.sku_id = sku.id
   and inv.ou_id = :ouId
   and loc.is_available = 1
   and (loc.Is_Locked is null or loc.Is_Locked = 0)
   and exists (select 1
          from t_wh_location_transtype lt
         where lt.location_id = loc.id
           and transtype_id = :transTypeId)
   and (loc.capacity * (loc.capacity_ratio / 100) = 0 or
       loc.capacity * (loc.capacity_ratio / 100) is null or
       loc.capacity * (loc.capacity_ratio / 100) >=
       (select sum(quantity)
           from t_wh_sku_inventory
          where location_id = loc.id) + sl.quantity)
   and (sku.Store_Mode = 11 or
       (sku.Store_Mode = 22 and sl.batch_code is not null and
       sl.batch_code = inv.batch_code))
 group by sl.sku_id, sl.batch_code, inv_status_id
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findSuggestDistrictByStvInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select distinct loc.district_id from
	t_wh_sku_inventory inv,
	t_wh_location loc,
	(select sku_id,batch_code,inv_status_id,sum(quantity) as quantity from t_wh_stv_line where stv_id=:stvId group by sku_id,batch_code,inv_status_id) sl
where
	loc.district_id=inv.district_id
	and inv.sku_id=sl.sku_id
	and loc.ou_id=:ouId
	and loc.is_available=1
	and (loc.Is_Locked is null or loc.Is_Locked = 0)
	and exists(select 1 from t_wh_location_transtype lt where lt.location_id=loc.id and transtype_id=:transTypeId )
	and (not exists(select 1 from t_wh_sku_inventory where location_id=loc.id) or (select sum(quantity) from t_wh_sku_inventory where location_id=loc.id) = 0)
	and (loc.capacity * (loc.capacity_ratio/100) > sl.quantity  or ( loc.capacity * (loc.capacity_ratio/100)) is null or loc.capacity * (loc.capacity_ratio/100) < 1)
	and loc.id!=inv.location_id
					]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseLocation.findSkuAndLocationByDistrict" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
	select distinct sl.sku_id||'_'||sl.inv_status_id||'_'||sl.batch_code as batchCode,-1 as id from
		t_wh_sku_inventory inv,
		(select sku_id,batch_code,inv_status_id,sum(quantity) as quantity from t_wh_stv_line where stv_id=:stvId group by sku_id,batch_code,inv_status_id) sl
	where
		inv.district_id = :districtId
		and inv.sku_id=sl.sku_id
                     
union

	select distinct ''|| (loc.capacity * (loc.capacity_ratio/100)) as batchCode,id from
		t_wh_location loc
	where
		loc.ou_id=:ouId
		and loc.district_id=:districtId
		and loc.is_available=1
		and (loc.Is_Locked is null or loc.Is_Locked = 0)
		and exists(select 1 from t_wh_location_transtype lt where lt.location_id=loc.id and transtype_id=:transTypeId)
		and (not exists(select 1 from t_wh_sku_inventory where location_id=loc.id) or (select sum(quantity) from t_wh_sku_inventory where location_id=loc.id) = 0)

						]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="WarehouseLocation.findLockedAndNoOccupaidLocation"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select loc.id as id from t_wh_sku_inventory inv,t_wh_location loc
						where inv.location_id(+) = loc.id
						      and loc.id = :locId
						      and ((inv.occupation_code is not null) or (loc.is_locked = 1))
						group by loc.id
						]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<!-- 增量数据插入（通知hub） -->
  <bean id="Inventory.salesInventoryGncAdd" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into t_wh_st_log_queue_hub (id,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,customer_sku_code,trans_type_name,sales_avail_qty,status,batch_id,brand)
					select  S_T_WH_ST_LOG_QUEUE_HUB.Nextval,sysdate,q.customer_id,q.customer_code,q.channel_code,q.wh_ou_id,q.wh_ou_code,q.sku_id,q.customer_sku_code,q.trans_type_name,q.sales_avail_qty,q.status,q.batch_id,q.customer_code 
					from T_WH_ST_LOG_QUEUE q ,t_bi_customer c 
					where  q.customer_id=c.id and c.is_oms='1' and q.create_time <=:datetime
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 增量数据插入（通知hubAdidas） -->
   <bean id="Inventory.salesInventoryAdidasAdd" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into t_wh_st_log_queue_hub (id,create_time,customer_id,customer_code,channel_code,wh_ou_id,wh_ou_code,sku_id,customer_sku_code,trans_type_name,sales_avail_qty,status,batch_id,brand)
					select  S_T_WH_ST_LOG_QUEUE_HUB.Nextval,sysdate,q.customer_id,q.customer_code,q.channel_code,q.wh_ou_id,q.wh_ou_code,q.sku_id,q.customer_sku_code,q.trans_type_name,q.sales_avail_qty,'1',q.batch_id,q.customer_code 
					from T_WH_ST_LOG_QUEUE q 
					where  q.customer_code='adidas' 
					      and q.create_time <=:datetime
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	 <bean id="Inventory.checkLocIsInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select case when count(1)>0 then 1 else 0  end as isShowZero  from t_wh_sku_inventory t,t_wh_location l where t.ou_id=:ouId and l.code=:locCode 
                	      and  t.location_id=l.id and l.is_Available=1 and t.quantity>0
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<!-- 增量数据删除（通知hub） -->
  <bean id="Inventory.delSalesInventoryGncAdd" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	delete from T_WH_ST_LOG_QUEUE q where q.customer_id in (select c.id from t_bi_customer c where c.is_oms='1') and q.create_time <=:datetime
				]]>
			</value>
		</constructor-arg>
	</bean>
	
  <!-- 增量数据删除（通知hubAdidas） -->
  <bean id="Inventory.delSalesInventoryAdidasAdd" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	delete from T_WH_ST_LOG_QUEUE q where q.customer_code='adidas' and q.create_time <=:datetime
				]]>
			</value>
		</constructor-arg>
	</bean>
  
  
	
	
	
	<bean id="Inventory.findOwnerByInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select distinct inv_owner as invOwner from t_wh_sku_inventory owner where ou_id = :ouid and inv_owner is not null
					]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findBrandByInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select distinct b.id as brandId,b.name as brandName from t_wh_sku_inventory inv,t_bi_inv_sku sku,t_bi_brand b
							where inv.sku_id = sku.id and b.id = sku.brand_id and ou_id = :ouid
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Inventory.findInvByOwnerAndOuIdIsOccupied" class="loxia.dao.support.DynamicQueryHolder">
	     <constructor-arg>
			<value>
				<![CDATA[
				   select case when count(t.quantity)>0 then 1 else 0  end    
				   from t_wh_sku_inventory t 
				   inner join t_au_operation_unit u on u.id=t.ou_id
                   where t.inv_owner=:owners  
                   and u.code in (
           
              #foreach($ouName in $ouNames)
					'$ouName',
			  #end
           '-1')
                   and t.is_occupied=1 
                   and t.occupation_code is not null
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.findInvByOwnerAndOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
	  select w.skucode as skuCode,
       w.loccode as locationCode,
       'CUS_BAOZUN' as customerCode,  
       w.owner as invOwner,
       sum(w.qty) as initQty,
       w.invname as inventoryStatusName
      
  FROM (
         select sku.code skucode,
               loc.code loccode,
               inv.inv_owner owner,  
               inv.quantity qty,
               status.name  invname
          from t_wh_sku_inventory inv
         inner join t_au_operation_unit au on au.id = inv.ou_id
         inner join t_bi_inv_sku sku on sku.id = inv.sku_id
         inner join t_wh_inventory_status status on inv.status_id = status.id
         inner join t_wh_location loc ON loc.id = inv.location_id
         where inv.quantity > 0
           and inv.inv_owner=:owners
           and au.code in (
           
              #foreach($ouName in $ouNames)
					'$ouName',
			  #end
           '-1')
           
        ) w
 group by w.skucode, w.loccode, w.owner, w.invname
 


				     
				
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.findDetailsInventoryByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select      
							sku.id as id,
							sku.jm_code as jmCode,
							sku.code as skuCode,
							sku.bar_code as barCode,
							sku.KEY_PROPERTIES as keyProperties,
							sku.supplier_code as supplierSkuCode,
							sku.name as skuName,
							sku.ext_code2 as extCode2,
							loc.code as locationCode,
							status.name as invStatusName,
							ch.name as invOwner,
							inv.qty as quantity,
							inv.lock_qty as lockQty,
							inv.qty-inv.lock_qty as availQty,
							brand.name as brandName,
					       	(SELECT (SELECT C.NAME
			                      FROM T_WH_SKU_SIZE_CONFIG C
			                     WHERE C.MAX_SIZE > GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH)
			                       AND C.MIN_SIZE <= GREATEST(s.LENGTH, s.HEIGHT, s.WIDTH))
			              		FROM t_bi_inv_sku s WHERE SKU.id = s.id) AS productSize
						from
							t_bi_inv_sku sku,
							T_bi_BRAND brand,
							(
							select 
								wh_ouId,
								sku_id,
								location_id,
								invStatus_id,
								owner,
								sum(qty) as qty,
								sum(lock_qty) as lock_qty
							from 
								v_wh_inventory_detail 
							group by 
								wh_ouId,
								sku_id,
								location_id,
								invStatus_id,
								owner
							) inv,
							t_wh_location loc,
							t_bi_channel ch,
							t_wh_inventory_status status
						where
							inv.location_id=loc.id
							and ch.code = inv.owner
							and sku.brand_id=brand.id
							and inv.sku_id = sku.id
							and status.id = inv.invStatus_id
							and inv.wh_ouId=:whOuId
							#if ($jmCode)
								and sku.jm_code = :jmCode
							#end
							#if ($extCode2)
								and sku.ext_code2 = :extCode2
							#end
							#if ($skuCode)
								and sku.code like :skuCode
							#end
							#if ($barCode)
								and sku.bar_code like :barCode
							#end
							#if($skuName)
								and sku.name like :skuName
							#end
							#if ($supplierSkuCode)
								and sku.supplier_code like :supplierSkuCode
							#end
							#if ($invOwner)
								and inv.owner like :invOwner
							#end
							#if ($locationCode)
								and loc.code like :locationCode
							#end
							#if ($statusId)
								and inv.invStatus_id = :statusId
							#end
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WarehouseLocation.updateLocationPopByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[UPDATE t_wh_location l SET l.pop_up_id =(SELECT id FROM t_WH_POP_UP_AREA a WHERE a.status !=1 AND a.code= :popCode) WHERE l.ou_id= :ouId AND l.code= :locationCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findUnCancelStaBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select id as ID from t_wh_sta sta where (sta.status != 15 or sta.status !=17) and sta.slip_code = :slipCode]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updateIsSnSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				  update t_wh_sta sta
					   set sta.is_sn =
					       (select max(nvl(sku.is_sn_sku, 0))
					          from t_wh_sta_line l, t_bi_inv_sku sku
					         where l.sku_id = sku.id
					           and l.sta_id = :staId)
					 where sta.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findExecuteTransitInnerSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id as id,
						sta.code as code,
						sta.create_time as createTime,
						cuser.user_name as creater,
						decode(stal.quantity,null,0,stal.quantity) as totalSkuQty,
						sta.status as intStaStatus
					from
						t_wh_sta sta,
						T_AU_USER cuser,
						(select sl.sta_id as staId,sum(sl.quantity) as quantity from t_wh_sta_line sl group by sl.sta_id) stal
					where 
						sta.type=31 
						and sta.status=2
						and sta.creator_id=cuser.id(+)
						and stal.staId=sta.id
						and sta.main_wh_id=:ouId
						#if ($isExpIn)
							and exists(select 'A' from t_wh_stv stv where stv.sta_id=sta.id and stv.direction=1)
						#else
							and not exists(select 'A' from t_wh_stv stv where stv.sta_id=sta.id and stv.direction=1)
						#end
						#if ($code)
							and sta.code like :code
						#end
						#if ($creater)
							and upper(cuser.user_name) like upper(:creater)
						#end
						#if($createTime)
							and sta.create_time >= :createTime
						#end
						#if($finishTime)
							and sta.create_time <= :finishTime
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
                                    
	<bean id="StockTransApplication.findExecuteTransitInnerStaByPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select * from (
				select 
			            sta.id as id,
			            sta.code as code,
			            '' as fileName,
			            '' as fileStatus,
			            sta.create_time as createTime,
			            lg.last_modify_time as exeTime,
			            cuser.user_name as creater,
			            decode(stal.quantity,null,0,stal.quantity) as totalSkuQty,
			            sta.status as intStaStatus,
			            '' as remork
			          from
			            t_wh_import_file_log lg right join  t_wh_sta sta  on sta.code =lg.sta_code
			            left join  T_AU_USER cuser on cuser.id = sta.creator_id
			            left join (select sl.sta_id as staId,sum(sl.quantity) as quantity from t_wh_sta_line sl group by sl.sta_id) stal on stal.staId = sta.id
			            left join t_wh_import_file_log lg on lg.sta_code = sta.code
			          where 
			            sta.type=31 
			            and sta.status=2
			            and sta.main_wh_id=:ouId
			            and lg.file_name is null
						#if ($isExpIn)
							and exists(select 'A' from t_wh_stv stv where stv.sta_id=sta.id and stv.direction=1)
						#else
							and not exists(select 'A' from t_wh_stv stv where stv.sta_id=sta.id and stv.direction=1)
						#end
						#if ($code)
							and sta.code like :code
						#end
						#if ($creater)
							and upper(cuser.user_name) like upper(:creater)
						#end
						#if($createTime)
							and sta.create_time >= :createTime
						#end
						#if($finishTime)
							and sta.create_time <= :finishTime
						#end
						#if("$fileStatus" == "1" || "$fileStatus" == "3")
							and 1 != 1
						#end
			          union all 
			          select  
			          case when sta.id is null then lg.id else sta.id end as id,
			          lg.sta_code as code,
			          lg.file_name as fileName, 
			          decode(lg.status,'1','未执行','已执行') as fileStatus,
			          lg.create_time as createTime,
			          lg.last_modify_time as exeTime,
			           lg.user_name as creater,
			            decode(stal.quantity,null,0,stal.quantity) as totalSkuQty,
			           sta.status as intStaStatus,
			           lg.memo as remork 
			           from t_wh_import_file_log lg
			          left join t_wh_sta sta on sta.code = lg.sta_code
			           left join (select sl.sta_id as staId,sum(sl.quantity) as quantity from t_wh_sta_line sl group by sl.sta_id) stal on stal.staId = sta.id
			           where lg.wh_id =:ouId
			            and lg.status in (1,10)
			          and (sta.status =2 or lg.sta_code is null)
			          #if ($isExpIn)
							and (exists(select 'A' from t_wh_stv stv where stv.sta_id=sta.id and stv.direction=1) or lg.sta_code is null)
						#else
							and not exists(select 'A' from t_wh_stv stv where stv.sta_id=sta.id and stv.direction=1 or lg.sta_code is null)
						#end
						#if ($code)
							and sta.code like :code
						#end
						#if ($creater)
							and upper(lg.user_name) like upper(:creater)
						#end
						#if($createTime)
							and lg.create_time >= :createTime
						#end
						#if($finishTime)
							and lg.create_time <= :finishTime
						#end
						#if("$fileStatus" == "1")
							and lg.status = 1
						#end
						#if("$fileStatus" == "2")
							and lg.status = 10 and lg.sta_code is not null
						#end
						#if("$fileStatus" == "3")
							and lg.status = 10 and lg.sta_code is  null
						#end
						)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findInventoryLockStaByPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id as id,
						sta.code as code,
						sta.memo as memo,
						sta.create_time as createTime,
						cuser.user_name as creater,
						decode(stal.quantity,null,0,stal.quantity) as totalSkuQty,
						sta.status as intStaStatus
					from
						t_wh_sta sta,
						T_AU_USER cuser,
						(select sl.sta_id as staId,sum(sl.quantity) as quantity from t_wh_sta_line sl group by sl.sta_id) stal
					where 
						sta.type=110 
						and sta.status=2
						and sta.is_locked = 1
						and sta.creator_id=cuser.id(+)
						and stal.staId=sta.id
						#if($code)
							and sta.code like :code
						#end
						#if($lockType)
							and sta.lock_type = :lockType
						#end
						#if($ouId)
							and sta.main_wh_id = :ouId
						#end
						#if($creater)
							and upper(cuser.user_name) like upper(:creater)
						#end
						#if($createTime)
							and sta.create_time >= :createTime
						#end
						#if($finishTime)
							and sta.create_time <= :finishTime
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findExecuteInvStatusChangeSta"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id as id,
						sta.code as code,
						sta.create_time as createTime,
						cuser.user_name as creater,
						decode(stal.quantity,null,0,stal.quantity) as totalSkuQty,
						sta.status as intStaStatus
					from
						t_wh_sta sta,
						T_AU_USER cuser,
						(select sl.sta_id as staId,sum(sl.quantity) as quantity from t_wh_sta_line sl group by sl.sta_id) stal
					where 
						sta.type=45
						and sta.status=2
						and sta.creator_id=cuser.id
						and stal.staId=sta.id
						and sta.main_wh_id=:ouId
						and not exists(select 1 from t_wh_stv stv where stv.sta_id = sta.id and stv.DIRECTION = 1)
						#if ($code)
							and sta.code like :code
						#end
						#if ($creater)
							and upper(cuser.user_name) like upper(:creater)
						#end
						#if($createTime)
							and sta.create_time >= :createTime
						#end
						#if($finishTime)
							and sta.create_time <= :finishTime
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findExecutMoveStaWithInStv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select 
						sta.id as id,
						sta.code as code,
						sta.is_locked as isLocked,
						sta.create_time as createTime,
						cuser.user_name as creater,
						decode(stal.quantity,null,0,stal.quantity) as totalSkuQty,
						sta.status as intStaStatus
					from
						t_wh_sta sta,
						T_AU_USER cuser,
						(select sl.sta_id as staId,sum(sl.quantity) as quantity from t_wh_sta_line sl group by sl.sta_id) stal
					where 
						sta.type=:type
						and exists(select 1 from t_wh_stv stv where stv.sta_id = sta.id and stv.DIRECTION = 1)
						and sta.status=2
						and sta.creator_id=cuser.id
						and stal.staId=sta.id
						and sta.main_wh_id=:ouId
						#if ($code)
							and sta.code like :code
						#end
						#if ($creater)
							and upper(cuser.user_name) like upper(:creater)
						#end
						#if($createTime)
							and sta.create_time >= :createTime
						#end
						#if($finishTime)
							and sta.create_time <= :finishTime
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findByLocationCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							sku.id as skuId,sku.code as skuCode,sku.bar_code as barCode,s.qty as quantity
						from 
							T_BI_INV_SKU sku,
							(
							select
								sku.id,sum(decode(inv.quantity,null,0,inv.quantity)) as qty
							from 
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								t_bi_channel shop
							where
								inv.sku_id=sku.id
								and inv.location_id=loc.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and (inv.is_occupied is null or inv.is_occupied=0)
								and shop.code=inv.inv_owner
								#if($shopId)
									and shop.id=:shopId
								#end
								and inv.ou_id=:ouid
								and loc.code =:locationCode
							group by sku.id
							) s
						where 
							sku.id = s.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findBySkuCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							loc.code as locationCode,s.qty as quantity
						from 
							t_wh_location loc,
							(
							select
								loc.id,sum(decode(inv.quantity,null,0,inv.quantity)) as qty
							from 
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								t_bi_channel shop
							where
								inv.sku_id=sku.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and inv.location_id=loc.id
								and (inv.is_occupied is null or inv.is_occupied=0)
								and shop.code=inv.inv_owner
								#if($shopId)
									and shop.id=:shopId
								#end
								and inv.ou_id=:ouid
								and sku.code =:skuCode
							group by loc.id
							) s
						where 
							loc.id = s.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="ESPPoType.findByPo1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[   
				 select max(i.id) as id from t_esprit_po_type i where i.po= :po
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="ESPPoType.findPoTypeList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
			select t.id as id,t.po as po,
			decode(t.type,1,'直送',3,'非直送',5,'进口',7,'特许证产品',9,'大连自提') as typeName,
			t.version as version,t.po_style as poStyle,t.invoice_number as invoiceNumber  from t_esprit_po_type t where 1=1
				#if($startTime)
					and t.version >= :startTime
				#end
				#if($endTime)
					and t.version < :endTime
				#end
				#if($po)
					and t.po like :po
				#end
				#if($typeName)
					and t.type =:typeName
				#end
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findByLocAndSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							ivns.id as inventoryStatusId,ivns.name as inventoryStatusName,s.qty as quantity
						from
							T_WH_INVENTORY_STATUS ivns,
							(
							select
								status.id,sum(decode(inv.quantity,null,0,inv.quantity)) as qty
							from
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								t_bi_channel shop,
								T_WH_INVENTORY_STATUS status
							where
								inv.sku_id=sku.id
								and inv.location_id=loc.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and (inv.is_occupied is null or inv.is_occupied=0)
								and shop.code=inv.inv_owner
								and status.id = inv.status_id
								#if($skuId)
									and sku.id=:skuId
								#end
								#if($skuCode)
									and sku.code=:skuCode
								#end
								#if($shopId)
									and shop.id=:shopId
								#end
								#if($inventoryStatusId)
									and status.id = :inventoryStatusId
								#end
								#if($productionDate)
									and inv.production_date = to_date(:productionDate,'yyyy-MM-dd')
								#end
								#if($expireDate)
									and inv.expire_date = to_date(:expireDate,'yyyy-MM-dd')
								#end
								and inv.ou_id=:ouid
								and loc.code =:locationCode
							group by status.id
							) s
						where
							ivns.id = s.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findByLocationAdnSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
 						select 
							(skuId||'|'||locationCode||'|'||statusId||'|'||shopId) as indexId,
							sku.id as skuId,
							s.locationId as locationId,
							status.id as inventoryStatusId,
							sku.code as skuCode,
							sku.jm_code as jmCode,
							sku.key_properties as keyProperties,
							sku.bar_code as barCode,
							shop.name as shopName,
							shop.code as invOwner,
							status.name as inventoryStatusName,
							s.locationCode,
							s.qty as quantity,
							sku.store_mode as storeMode 
						from
							T_BI_INV_SKU sku,
							t_bi_channel shop,
							T_WH_INVENTORY_STATUS status,
							(
							select
								sku.id as skuId,loc.id as locationId,loc.code as locationCode,status.id as statusId,shop.id shopId,sum(inv.quantity) as qty
							from
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								t_bi_channel shop,
								T_WH_INVENTORY_STATUS status
							where
								inv.sku_id=sku.id
								and inv.location_id=loc.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and (inv.is_occupied is null or inv.is_occupied=0)
								and shop.code=inv.inv_owner
								and status.id = inv.status_id
								and inv.ou_id=:ouid
								and loc.code =:locationCode
								#if($skuId)
									and sku.id=:skuId
								#end
								#if($skuCode)
									and sku.code=:skuCode
								#end
								#if($shopId)
									and shop.id=:shopId
								#end
								#if($statusId)
									and status.id=:statusId
								#end
							group by 
								sku.id,loc.code,loc.id,status.id,shop.id
							) s
						where
							sku.id=s.skuId
							and shop.id = s.shopId
							and status.id=s.statusId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findByLocationAdnSkuWithoutOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select
							(skuId||'|'||locationCode||'|'||statusId) as indexId,
							sku.id as skuId,
							s.locationId as locationId,
							status.id as inventoryStatusId,
							sku.code as skuCode,
							sku.jm_code as jmCode,
							sku.key_properties as keyProperties,
							sku.bar_code as barCode,
							status.name as inventoryStatusName,
							s.locationCode,
							s.qty as quantity
						from
							T_BI_INV_SKU sku,
							T_WH_INVENTORY_STATUS status,
							(
							select
								sku.id as skuId,loc.id as locationId,loc.code as locationCode,status.id as statusId,sum(inv.quantity) as qty
							from
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								T_WH_INVENTORY_STATUS status
							where
								inv.sku_id=sku.id
								and inv.location_id=loc.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and (inv.is_occupied is null or inv.is_occupied=0)
								and status.id = inv.status_id
								and inv.ou_id=:ouid
								and loc.code =:locationCode
								#if($skuId)
									and sku.id=:skuId
								#end
								#if($skuCode)
									and sku.code=:skuCode
								#end
								#if($statusId)
									and status.id=:statusId
								#end
								#if($shopId)
									and shop
								#end
							group by 
								sku.id,loc.code,loc.id,status.id
							) s
						where
							sku.id=s.skuId
							and status.id=s.statusId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findStaByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
						select 
							sta.id,
							sta.create_time as createTime,
							sta.code,
							sta.memo as memo,
							d.lpcode,
							u.user_name as creater,
							sta.type as intStaType,
							sta.memo,
							sl.quantity as totalSkuQty
						from 
							t_Wh_Sta sta
								left join t_wh_sta_delivery_info d on sta.id=d.id
								left join t_au_user u on sta.creator_id=u.id,
							(
								select 
									sum(quantity) as quantity,
									sl.sta_id 
								from 
									t_wh_sta_line sl 
								group by 
									sl.sta_id
							) sl
						where 
							sta.id=sl.sta_id
							and sta.id=:staId
						]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- -->
	<bean id="StockTransApplication.findUndoAndHasExportpackingObjs"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
		select sta.code, nvl(tax.output_count,0) as outCount from t_wh_sta sta left join t_so_invoice_tax tax on sta.slip_code = tax.root_so_code and tax.output_count is not null
            	and tax.output_count != 0,
            	t_wh_sta sta2            
			where sta.picking_list_id = :plid                        
			and sta.type = 21
            and sta.slip_code = sta2.slip_code
			and sta2.status = 15				
						]]>
			</value>
		</constructor-arg>
		
	</bean>
	<bean id="Inventory.findInventoryBatchLockList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select              
				        (sku.id||'|'||loc.code||'|'||status.id||'|'||shop.id) as indexId,
                        sku.id as skuId,
                        loc.id as locationId,
                        status.id as statusId,
                        shop.id as shopId,
                        sku.name as skuName,
                        sku.code as skuCode,
                        sku.jm_code as jmCode,
                        sku.key_properties as keyProperties,
                        sku.supplier_code as supplierCode,
                        shop.name as invOwner,
                        loc.code as locationCode,
                        status.name as invStatusName,
                        inv.qty as quantity,
                        inv.qty as lockQty 
                        from (
							select
				              sku.id as skuId,
				              loc.id as locId,
				              status.id as statusId,
				              shop.id as shopId,
				              sum(inv.quantity) as qty
							from
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								t_bi_channel shop,
								T_WH_INVENTORY_STATUS status
							where
								inv.sku_id=sku.id
								and inv.location_id=loc.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and (inv.is_occupied is null or inv.is_occupied=0)
								and inv.occupation_code is null
               					and inv.quantity > 0
								and shop.code=inv.inv_owner
								and status.id = inv.status_id
								and shop.id=:shopId
								#if($locationCode)
									and loc.code =:locationCode
								#end
								#if($skuCode)
									and sku.code=:skuCode
								#end
								#if($inventoryStatusId)
									and status.id = :inventoryStatusId
								#end
								#if($productionDate)
									and inv.production_date = to_date(:productionDate,'yyyy-MM-dd')
								#end
								#if($expireDate)
									and inv.expire_date = to_date(:expireDate,'yyyy-MM-dd')
								#end
								and inv.ou_id=:ouid
                			group by sku.id,loc.id,shop.id,status.id) inv,
                			T_BI_INV_SKU sku,
			                t_wh_location loc,
			                t_bi_channel shop,
			                T_WH_INVENTORY_STATUS status
			                where 
			                inv.skuId = sku.id 
			                and loc.id = inv.locId
			                and inv.shopId = shop.id
			                and inv.statusId = status.id 
			                order by loc.id,sku.id,status.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
		<bean id="Inventory.reStoreSkuInventory" class="loxia.dao.support.DynamicQueryHolder">
			<constructor-arg>
				<value>
					<![CDATA[
										insert into t_wh_sku_inventory
					  (id,
					   batch_code,
					   inbound_time,
					   is_occupied,
					   occupation_code,
					   inv_owner,
					   quantity,
					   sku_cost,
					   district_id,
					   location_id,
					   ou_id,
					   sku_id,
					   status_id,
					   version,
					   production_date,
					   valid_date,
					   expire_date,
					   ocp_code)
					  select inv.id,
					         inv.batch_code,
					         inv.inbound_time,
					         inv.is_occupied,
					         inv.occupation_code,
					         inv.inv_owner,
					         inv.quantity,
					         inv.sku_cost,
					         inv.district_id,
					         inv.location_id,
					         inv.ou_id,
					         inv.sku_id,
					         inv.status_id,
					         inv.version,
					         inv.production_date,
					         inv.valid_date,
					         inv.expire_date,
					         inv.ocp_code
					    from t_arc_sku_inventory inv
					   where  inv.backup_batch_code=:plCode
					]]>
				</value>
			</constructor-arg>
		</bean>
	
	
		<bean id="Inventory.findInventoryBatchLockListByInvIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
 						select 
							(skuId||'|'||locationCode||'|'||statusId||'|'||shopId) as indexId,
							sku.id as skuId,
							s.locationId as locationId,
							status.id as inventoryStatusId,
							sku.code as skuCode,
							sku.jm_code as jmCode,
							sku.key_properties as keyProperties,
							sku.bar_code as barCode,
							shop.name as shopName,
							shop.code as invOwner,
							status.name as inventoryStatusName,
							s.locationCode,
							s.qty as quantity,
							sku.store_mode as storeMode,
							s.invId as invIds 
						from
							T_BI_INV_SKU sku,
							t_bi_channel shop,
							T_WH_INVENTORY_STATUS status,
							(
							select
								sku.id as skuId,loc.id as locationId,loc.code as locationCode,status.id as statusId,shop.id shopId,sum(inv.quantity) as qty,listagg(inv.id,',') within GROUP(ORDER BY inv.id) as invId
							from
								t_wh_sku_inventory inv,
								T_BI_INV_SKU sku,
								t_wh_location loc,
								t_bi_channel shop,
								T_WH_INVENTORY_STATUS status
							where
								inv.id in (
			                        #foreach($id in $ids)
			                                $id,
			                        #end
			                        -1)
								and inv.sku_id=sku.id
								and inv.location_id=loc.id
								and loc.IS_AVAILABLE = 1
								and nvl(loc.is_locked,0) = 0
								and (inv.is_occupied is null or inv.is_occupied=0)
								and shop.code=inv.inv_owner
								and status.id = inv.status_id
								and inv.ou_id=:ouid
							group by 
								sku.id,loc.code,loc.id,status.id,shop.id
							) s
						where
							sku.id=s.skuId
							and shop.id = s.shopId
							and status.id=s.statusId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Carton.findCartonQtyById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
 				select sum(qty) from t_wh_carton_line  where carton_id=:Id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findPoStaList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	
					select * from (
					select             
						sta.id,
	                    sta.code,
	                    sta.owner,
	                    sta.slip_code as refSlipCode,
	                    sta.slip_code1 as slipCode1,
	                    sta.slip_code2 as slipCode2,
	                    sta.type as intType,
	                    sta.status as intStatus,
	                    sta.create_time,
	                    op.name as mainName
                     from wms.t_wh_sta sta ,wms.t_au_operation_unit op  where sta.main_wh_id=op.id
						and sta.type in(11,81)
						and sta.main_wh_id = :ouId
						#if($owner)
							and sta.owner like :owner
						#end	
						#if($code)
							and sta.code like :code
						#end	
						#if($slipCode)
							and sta.slip_code like :slipCode
						#end
						#if($slipCode1)
							and sta.slip_code1 like :slipCode1
						#end
					)  data
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="StockTransApplication.findInBoundCartonSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[	
							select 
								sta.id,
								sta.code,
								sta.slip_code as refSlipCode,
								sta.SLIP_CODE1 as slipCode1,
								sta.type as intStaType,
								sta.status as intStaStatus,
								sta.memo,
								cnl.name channelName,
								sta.owner,
								sta.create_time,
				                sta.type,
				                sta.carton_num cartonNum,
				                sta.status
							from t_wh_sta sta 
			               left join t_bi_channel cnl on sta.owner = cnl.code
			               left join t_bi_warehouse wh on wh.ou_id=sta.main_wh_id
			               where  wh.is_carton_manager=1 and
			                (sta.main_wh_id = :ouId or (sta.type in (32,90,91) and sta.addi_wh_id = :ouId))
			               and sta.type in (11,12,14,15,16,17,32,81,90,91) and sta.status in (1,2,3,4,5,8,10)
								#if($code)
									and sta.code like :code
								#end
								#if($slipCode)
									and sta.slip_code like :slipCode
								#end
								#if($slipCode1)
									and sta.SLIP_CODE1 like :slipCode1
								#end
								#if($createTime)
									and sta.create_time >= :createTime
								#end
								#if($endCreateTime)
									and sta.create_time <= :endCreateTime
								#end
								#if($owner)
									and sta.owner like  :owner
								#end
								#if($type)
									and sta.type= :type
								#end
								#if($intStatus)
									and sta.status= :intStatus
								#end
				
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="WmsCancelOrder.findDeliveryFailureSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	
					select * from (
					select             
						sta.id,
	                    sta.code as staCode,
	                    sta.owner as owner,
	                    sta.slip_code as slipCode,
	                    sta.status as staStatus,
	                    sta.create_time as createTime,
	                    sta.sku_qty  as planQty
                     from wms.t_wh_sta sta ,wms.t_au_operation_unit op  where sta.main_wh_id=op.id
						and sta.type =21
						and sta.main_wh_id = :ouId
						#if($owner)
							and sta.owner like :owner
						#end	
						#if($code)
							and sta.code like :code
						#end	
						#if($slipCode)
							and sta.slip_code like :slipCode
						#end
						#if($status)
							and sta.status= :status
						#end
						#if($startTime)
							and sta.create_time>= :startTime
						#end
						#if($endTime)
							and sta.create_Time< :endTime
						#end
					)  data
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsCancelOrderLine.findCancelLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	
					select 
					inv.id as id, 
					sku.code as skuCode,
					sku.bar_code as barCode,
					sku.name as skuName,
					inv.planQty,
					inv.usableQty ,
					inv.planQty-inv.usableQty as lackQty
					from t_bi_inv_sku sku ,(
		 			select 
		 			line.id,
		 			inv.owner,
		 			inv.sku_id,
		 			line.quantity as planQty ,
		 			sum(inv.qty)-sum(inv.lock_qty) as usableQty 
		 			from t_wh_sta_line line,v_wh_inventory_detail  inv,t_wh_inventory_status status
		 			where
		  			inv.sku_id=line.sku_id 
		  			and line.owner=inv.owner 
		  			and status.id=inv.invStatus_id   
		  			and line.sta_id= :staId 
		  			and status.name='良品'
		  			group by inv.owner,inv.sku_id,line.quantity,line.id
		  			)  inv where inv.sku_id=sku.id
					]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="WmsCancelOrderLine.findCancelLine1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[	
			 select  line.*  from  t_wh_sta sta, 
			 t_wh_wms_cancel_order can left join t_wh_wms_cancel_order_line line on 
			 can.id=line.CANCEL_ORDER_ID  where
			 can.sta_code=sta.code and sta.id= :staId
					]]>
			</value>
		</constructor-arg>
	</bean>
</beans>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
