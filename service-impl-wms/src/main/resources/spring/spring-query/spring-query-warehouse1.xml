<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
		<bean id="QueueSta.findIdsByStaBatchcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select s.id,s.order_code ordercode,s.channel_list,s.addowner  from t_wh_q_sta s where s.main_wh_ou_id = :ouid and batch_code = :batchcode
					and owner not in(select code from t_bi_channel where id in(select channel_id from t_bi_channel_special_action where type=60))
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findOcpStaIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                  select id from t_wh_sta sta 
                  where sta.status = 2 and sta.type = 21 
                    and sta.create_time >= sysdate - 10 
                		and sta.group_sta_id is null
                    and not exists( select 1 from t_wh_sta s1 where s1.group_sta_id = sta.id and sta.create_time >= sysdate - 10 and sta.status not in (15,17))
                    and exists(select 1 from t_wh_stv stv where stv.sta_id = sta.id)
                    and exists (select 1 from t_wh_sku_inventory inv where inv.occupation_code = sta.code)
                    and sta.main_wh_id = 6283
                    and sta.slip_code not like '%,%'
                		and rownum <= 80000
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="QueueSta.findIdsByStaBatchcode1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select s.id,s.order_code ordercode,s.channel_list,s.addowner,s.owner from t_wh_q_sta s where s.main_wh_ou_id = :ouid and batch_code = :batchcode
					and owner in(select code from t_bi_channel where id in(select channel_id from t_bi_channel_special_action where type=60))
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverList.findEdwTwhStaHoListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select 
								t.id as id,
								t.bill_count as billCount,
								t.code as code,
								t.create_time as createTime,
								t.hand_over_time as handOverTime,
								t.lpcode as lpcode,
								t.package_count as packageCount,
								t.party_a_operator as partyAOperator,
								t.party_b_operator as partyBOperator,
								t.party_a_mobile as paytyAMobile,
								t.party_b_mobile as paytyBMobile,
								t.party_b_passport as paytyBPassPort,
								t.status as hoIntStatus,
								t.total_weight as totalWeight,
								t.modifer_id as modifierId,
								t.operator_id as operatorId,
								t.ou_id as ouId
								from t_wh_sta_ho_list t where 
								id=:id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据交接清单头id删除交接清单仓库 -->
	<bean id="HandOverList.deleteByHoIdWareList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					DELETE  FROM T_WH_HO_WH_LIST  WHERE HO_LIST_ID=:hoId AND OU_ID=:wId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverListLine.findEdwTwhStaHoListLine1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select 
								t.id as id,
								t.status as lineIntStatus,
								t.tracking_no as trackingNo,
								t.weight as weight,
								t.ho_list_id as hoListId,
								t.sta_id as staId 
								from t_wh_sta_ho_list_line t
								where t.ho_list_id = :hoid
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 根据code查询出交接明细 findByTrackingNo2 -->
	<bean id="HandOverListLine.findByTrackingNo2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select 
								t.id as id,
								t.status as lineIntStatus,
								t.tracking_no as trackingNo,
								t.weight as weight,
								t.ho_list_id as hoListId,
								t.sta_id as staId 
								from t_wh_sta_ho_list_line t
								where t.tracking_no = :trackingNo
								and t.STATUS =1
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 查询作业单根据库位的拣货顺序排序 -->
	<bean id="StockTransApplication.findStaByStaListAndLocationSort"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select sta.id id
					 from t_wh_sta sta
						 where 1=1  and (1!= 1 
									  #foreach($staid in $staListId)
									      or sta.id = $staid 
									  #end
								  )
						order by sta.local_sort,sta.local_code asc
	                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findTransTimeTypebyDeliveryId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[     
					select sta.*
					  from t_wh_sta sta
					  left join t_wh_stv stv
					    on sta.id = stv.sta_id
					  left join t_wh_stv_line vl
					    on stv.id = vl.stv_id
					  left join t_wh_location lo
					    on lo.id = vl.location_id
					 where  sta.picking_list_id=:pickingListId order by lo.sort desc
	                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransVoucher.updateStvVersion" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_stv stv set stv.version = stv.version+1 where stv.status=:status and stv.id=:stvId
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="MsgOutboundOrder.findMsgOutboundOrderByMsgId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
select 
o.ID  ,
o.ADDRESS  ,
o.CITY ,
o.COUNTRY,
o.DISTRICT ,
o.LPCODE  ,
o.MOBILE,
o.PROVINCE ,
o.RECEIVER ,
o.REMARK,
o.SOURCE ,
o.SOURCEWH ,
o.STA_CODE ,
o.STATUS,  
o.TELEPHONE, 
o.TOTALACTUAL, 
o.TRANSFER_FEE ,
o.ZIPCODE ,
o.TYPE  ,
o.VERSION,  
o.BATCH_ID  ,
o.STA_TYPE  ,
o.CREATE_TIME,  
o.UPDATE_TIME  ,
o.WLB_CODE,
decode(o.is_need_invoice,'1','需要开票','无需开票') as isCashsale,
s.owner as staOwner,
s.slip_code as staRefSlipCode,
s.create_time as staCreateTime,
s.total_actual as staTotalActual
from t_wh_msg_outbound_order o,
t_wh_sta s
where o.sta_code = s.code
and o.id = :msgId ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WhStaPickingListLog.updatePickingListLog" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_STA_PICKING_LIST_LOG l set l.memo = l.memo || to_char(sysdate,'yyyy-MM-dd hh24miss') || ';Memo='|| :memo ||';' where l.pick_list_id=:plId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findExpireDateByPickingList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select l.sku_id as skuId,
l.production_date as productionDate,
l.valid_date as validDate,
to_char(l.expire_date,'yyyyMMdd') as strExpireDate,
l.expire_date as expireDate,
sum(l.quantity) as quantity 
from t_wh_sta sta,
t_wh_sta s,
t_wh_stv stv,
t_wh_stv_line l,
t_bi_inv_sku sku
where l.sku_id=sku.id
and s.id=stv.sta_id
and sku.store_mode='33'
and stv.direction=2
and stv.status=10
and s.status=10
and l.stv_id = stv.id
#if($groupStaCode)
and (
	(sta.slip_code1=:slipCode and sta.picking_list_id is not null and sta.picking_list_id=s.picking_list_id)
	or 
	(sta.code=:groupStaCode and (s.picking_list_id=sta.picking_list_id or sta.id=s.group_sta_id))
	)
#else
	and s.picking_list_id=sta.picking_list_id
    and (sta.slip_code1=:slipCode or sta.slip_code2=:slipCode)
#end
group by l.sku_id,l.production_date,l.valid_date,l.expire_date
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.id as skuId,sku.code as skuCode,l.owner,l.inv_status_id as intInvstatus,sum(l.quantity) as quantity
from t_wh_stv stv,
t_wh_stv_line l,
t_bi_inv_sku sku 
where stv.id=l.stv_id 
and l.sku_id=sku.id
and stv.status = 10
and stv.sta_id=:staId
group by sku.code,l.owner,l.inv_status_id,sku.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="QueueStaLine.findSkuQtyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		  SELECT l.id,nvl(qsta.addowner,l.owner) owner,l.sku_code,l.line_type,sum(l.qty) qty,l.order_total_actual,l.total_actual
          from t_wh_q_sta_line l,t_wh_q_sta qsta
          where qsta.id = l.q_sta_id
                and l.q_sta_id = :qstaId
                and l.direction= 2
					      group by nvl(qsta.addowner,l.owner),l.sku_code,l.line_type,l.id,l.order_total_actual,l.total_actual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="QueueStaLine.findQueueLineDetial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		     SELECT l.id,l.owner,l.sku_code,l.line_type,sum(l.qty) qty
          from t_wh_q_sta_line l,t_wh_q_sta qsta
          where qsta.id = l.q_sta_id
                and l.q_sta_id = :qstaId
                and l.direction= 2
					      group by l.owner,l.sku_code,l.line_type,l.id,l.order_total_actual,l.total_actual
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="QueueStaLine.cleanDataByLineId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		   delete t_wh_q_sta_line where id=:id
				]]>
			</value>
		</constructor-arg>
	</bean>
	

	<bean id="QueueStaLine.findSkuQtyByStaId1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					SELECT l.id,nvl(qsta.addowner,qsta.owner) owner,l.sku_code,l.line_type,sum(l.qty) qty,l.order_total_actual,l.total_actual,sku.ext_code3,l.direction,l.skuName
          from t_wh_q_sta_line l,t_wh_q_sta qsta,t_bi_inv_sku sku
          where qsta.id = l.q_sta_id
                and l.sku_code=sku.code
                and l.q_sta_id = :qstaId
                and l.direction= 2
					      group by nvl(qsta.addowner,qsta.owner),l.sku_code,l.line_type,l.id,l.order_total_actual,l.total_actual,sku.ext_code3,l.direction,l.skuName
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findSalesAvailQtyByBatchNoShare" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
							select sku.code CODE,inv.sales_avail_qty ID,inv.OWNER owner
          from v_wh_inventory_summary inv,t_bi_inv_sku sku,(
               select s.id,nvl(qsta.addowner,qsta.channel_list) owner
                from t_wh_q_sta qsta,t_wh_q_sta_line l,t_bi_inv_sku s
                where qsta.id = l.q_sta_id
                    and l.direction = 2
                      and qsta.main_wh_ou_id = :whouid
                      and qsta.batch_code = :batchcode
                      and l.sku_code=s.code
                      group by s.id,nvl(qsta.addowner,qsta.channel_list)
                )l
          where inv.WH_OUID = :whouid
                and sku.id = inv.SKU_ID
                and sku.id =l.id
                and inv.owner = l.owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSalesAvailQtyByBatchNoShareDetial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
							 select sku.code as code,
      			 			v.OWNER as owner,
					       nvl(v.sales_qty - nvl(vo.qty,0) - v.sales_lock_qty,0) as id
					from
					  (select wh_ouId,
					          sku_id,
					          owner,
					          sum(qty) as qty,
					          sum(lock_qty) as lock_qty,
					          sum(sales_qty) as sales_qty,
					          sum(sales_lock_qty) as sales_lock_qty
					   from (
					        select inv.ou_id as wh_ouId,
					                inv.sku_id,
					                case when wh.is_share = 1 then null else inv.inv_owner end as owner,
					                sum(inv.quantity) as qty,
					                sum(case when inv.occupation_code is not null then inv.quantity else 0 end) as lock_qty,
					                case when st.is_forsale = 1 then sum(inv.quantity) else 0 end as sales_qty,
					                case when st.is_forsale = 1 then sum(case when inv.occupation_code is not null then inv.quantity else 0 end) else 0 end as sales_lock_qty
					        from t_wh_sku_inventory inv,
					             T_BI_WAREHOUSE wh,
					             t_wh_inventory_status st,
					             t_bi_inv_sku sku
					        where wh.ou_id(+) = inv.ou_id
					              and st.id(+) = inv.status_id
					              and inv.sku_id = sku.id
					              and (sku.store_mode != 33 or  inv.expire_date - sku.warning_date > sysdate)
					        group by inv.ou_id, inv.sku_id, inv.inv_owner,wh.is_share,st.is_forsale) tp
					   group by wh_ouId,sku_id,owner
					  ) v, 
					  (select wh_ouId,sku_id,owner,sum(qty) as qty
					from(
					  select sta.main_wh_id as wh_ouId, stal.sku_id,nvl(sta.addowner,sta.channel_list) as owner,sum(stal.quantity) as qty
					  from t_wh_sta sta, t_wh_sta_line stal,T_BI_WAREHOUSE wh,t_wh_inventory_status sts,(
					               select s.id
					                from t_wh_q_sta qsta,t_wh_q_sta_line l,t_bi_inv_sku s
					                where qsta.id = l.q_sta_id
					                    and l.direction = 2
					                      and qsta.main_wh_ou_id = :whouid
					                      and qsta.batch_code = :batchcode
					                      and l.sku_code=s.code
					                      group by s.id
					                )l                
					  where sta.id = stal.sta_id
					    and  stal.inv_status_id = sts.id(+)
					    and (sts.is_forsale = 1 or sts.is_forsale is null)
					    and wh.ou_id = sta.main_wh_id
					    and (sta.status = 1 or sta.status = 20 or sta.status = 25)
					    and sta.is_need_occupied = 1
					    and sta.create_time >= sysdate - 90
					    and sta.main_wh_id=:whouid
					    and nvl(stal.owner,sta.owner) = l.owner
					    and stal.sku_id=l.id
					  group by stal.sku_id, sta.main_wh_id, nvl(stal.owner,sta.owner),wh.is_share) tp
					group by wh_ouId,sku_id,owner) vo,
					  t_bi_inv_sku sku,(
					          				select sku.code CODE,inv.sales_avail_qty ID,inv.OWNER owner
	          		  from v_wh_inventory_summary inv,t_bi_inv_sku sku,(
	              	  select s.id,nvl(qsta.addowner,qsta.channel_list) owner
	                  from t_wh_q_sta qsta,t_wh_q_sta_line l,t_bi_inv_sku s
	                  where qsta.id = l.q_sta_id
                      and l.direction = 2
                      and qsta.main_wh_ou_id = :whouid
                      and qsta.batch_code = :batchcode
                      and l.sku_code=s.code
                      group by s.id,nvl(qsta.addowner,qsta.channel_list)
					                )l
					where v.wh_ouId = vo.wh_ouId(+)
					      and v.sku_id = vo.sku_id(+)
					      and v.owner = vo.owner(+)
					      and v.WH_OUID = :whouid
					      and sku.id = v.SKU_ID
					      and sku.id =l.id
					      and v.owner = l.owner
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSalesAvailQtyByBatchShareDetial" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                     select sku.code as code,
       v.OWNER as owner,
       nvl(v.sales_qty - nvl(vo.qty, 0) - v.sales_lock_qty, 0) as id
  from (select wh_ouId,
               sku_id,
               owner,
               sum(qty) as qty,
               sum(lock_qty) as lock_qty,
               sum(sales_qty) as sales_qty,
               sum(sales_lock_qty) as sales_lock_qty
          from (select inv.ou_id as wh_ouId,
                       inv.sku_id,
                       case
                         when wh.is_share = 1 then
                          null
                         else
                          inv.inv_owner
                       end as owner,
                       sum(inv.quantity) as qty,
                       sum(case
                             when inv.occupation_code is not null then
                              inv.quantity
                             else
                              0
                           end) as lock_qty,
                       case
                         when st.is_forsale = 1 then
                          sum(inv.quantity)
                         else
                          0
                       end as sales_qty,
                       case
                         when st.is_forsale = 1 then
                          sum(case
                                when inv.occupation_code is not null then
                                 inv.quantity
                                else
                                 0
                              end)
                         else
                          0
                       end as sales_lock_qty
                  from t_wh_sku_inventory    inv,
                       T_BI_WAREHOUSE        wh,
                       t_wh_inventory_status st,
                       t_bi_inv_sku          sku
                 where wh.ou_id(+) = inv.ou_id
                   and st.id(+) = inv.status_id
                   and inv.sku_id = sku.id
                   and (sku.store_mode != 33 or
                        inv.expire_date - sku.warning_date > sysdate)
                 group by inv.ou_id,
                          inv.sku_id,
                          inv.inv_owner,
                          wh.is_share,
                          st.is_forsale) tp
         group by wh_ouId, sku_id, owner) v,
       (select wh_ouId, sku_id, owner, sum(qty) as qty
          from (select sta.main_wh_id as wh_ouId,
                       stal.sku_id,
                       nvl(stal.owner, sta.owner) as owner,
                       sum(stal.quantity) as qty
                  from t_wh_sta sta,
                       t_wh_sta_line stal,
                       t_wh_inventory_status sts
                 where sta.id = stal.sta_id
                   and stal.inv_status_id = sts.id(+)
                   and (sts.is_forsale = 1 or sts.is_forsale is null)
                   and sta.status in (1,20,35 )
                   and sta.is_need_occupied = 1
                   and sta.create_time >= sysdate - 90
                   and sta.main_wh_id = :whouid
                   and nvl(stal.owner, sta.owner) in (${channel})
                   and exists(select 1 from
                          t_wh_q_sta qsta,
                          t_wh_q_sta_line ql,
                          t_bi_inv_sku s
                          where qsta.id = ql.q_sta_id
                          and qsta.batch_code = :batchcode
                          and ql.direction =2
                          and ql.sku_code = s.code
                          and s.id = stal.sku_id
                         )
                 group by stal.sku_id,
                          sta.main_wh_id,
                          nvl(stal.owner, sta.owner)) tp
         group by wh_ouId, sku_id, owner) vo,
       t_bi_inv_sku sku,
       (select s.id
          from t_wh_q_sta qsta, t_wh_q_sta_line l, t_bi_inv_sku s
         where qsta.id = l.q_sta_id
           and l.direction = 2
           and qsta.main_wh_ou_id = :whouid
           and qsta.batch_code = :batchcode
           and l.sku_code = s.code
         group by s.id) l
 where v.wh_ouId = vo.wh_ouId(+)
   and v.sku_id = vo.sku_id(+)
   and v.owner = vo.owner(+)
   and v.WH_OUID = :whouid
   and sku.id = v.SKU_ID
   and sku.id = l.id
   and v.owner in (${channel})
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findSalesAvailQtyByBatchShare" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                     select sku.code CODE,inv.sales_avail_qty ID,inv.OWNER owner
					from v_wh_inventory_summary inv,t_bi_inv_sku sku,(
					     select s.id
					      from t_wh_q_sta qsta,t_wh_q_sta_line l,t_bi_inv_sku s
					      where qsta.id = l.q_sta_id
					      		and l.direction = 2
					            and qsta.main_wh_ou_id = :whouid
					            and qsta.batch_code = :batchcode
					            and l.sku_code=s.code
					            group by s.id
					      )l
					where inv.WH_OUID = :whouid
					      and sku.id = inv.SKU_ID
					      and sku.id =l.id
					      and inv.owner in( ${channel})
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSalesAvailQtyByBatchShare2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sku.code CODE,inv.sales_avail_qty ID,inv.OWNER owner
					from v_wh_inventory_summary inv,t_bi_inv_sku sku,(
					     select s.id,l.owner
					      from t_wh_q_sta qsta,t_wh_q_sta_line l,t_bi_inv_sku s
					      where qsta.id = l.q_sta_id
					      		and l.direction = 2
					            and qsta.main_wh_ou_id = :whouid
					            and qsta.batch_code = :batchcode
					             and l.sku_code=s.code
					            group by s.id,l.owner
					      )l
					where inv.WH_OUID = :whouid
					      and sku.id = inv.SKU_ID
					      and sku.id =l.id
					      and inv.owner in(l.owner)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findSalesAvailQtyByBatchShare1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select nvl(sku.ext_code3,0) as code,inv.sales_avail_qty ID,sku.code owner
          from v_wh_inventory_summary inv,t_bi_inv_sku sku
          where inv.WH_OUID = :whouid
                and sku.id = inv.SKU_ID
                and inv.owner = :owner
				]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- 确定该订单是否属于团购 -->
	<bean id="GroupBuyingSku.isGroupBuyingSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select count(1)
				  from T_WH_GROUP_BUYING_SKU twgbs
				 where twgbs.ou_id = :whou
				   and twgbs.sku_id = :sku
				   and twgbs.singel_type = :type
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageSku.findSkus1ByPackingListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select psku.skus1
				from t_wh_sta_picking_list p,
				     t_wh_sta sta,
				     t_wh_package_sku psku
				where p.id = sta.picking_list_id
				      and sta.package_sku_id = psku.id
				      and p.id = :pid
				      and rownum = 1
				union
				select psku.skus1
				from t_wh_sta_picking_list p,
				     t_wh_sta sta,
				     t_wh_package_sku_log psku
				where p.id = sta.picking_list_id
				      and sta.package_sku_id = psku.id
				      and p.id = :pid
				      and rownum = 1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 插入团购计数器表 -->
	<bean id="GroupBuyingSkuCounter.insertGroupBuyingSkuCounter"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				insert into T_WH_GRPBUY_SKU_COUNTER
				  (id, SINGEL_GOODS_QTY, SINGEL_ORDER_QTY, OU_ID, SKU_ID, sta_id) 
				 values (
				 S_T_WH_GRPBUY_SKU_COUNTER.Nextval, 
				 :singelGoodsQty,
				 :singelOrderQty,
				 :whou,
				 :sku,
				 :staId
				 )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 检查是否达到团购下线 -->
	<bean id="GroupBuyingSkuCounter.checkToGroupBuying" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select sum(twgsc.singel_goods_qty) singelGoodsQty, sum(twgsc.singel_order_qty) singelOrderQty
				  from T_WH_GRPBUY_SKU_COUNTER twgsc
				 where twgsc.ou_id = :whou
				   and twgsc.sku_id = :sku
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新STA状态为团购单 -->
	<bean id="GroupBuyingSkuCounter.updateSta" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				update t_wh_sta sta
				   set sta.is_group_buying = 1
				 where sta.id in (select twgsc.sta_id
				                    from T_WH_GRPBUY_SKU_COUNTER twgsc
				                   where twgsc.ou_id = :whou
				                     and twgsc.sku_id = :sku
				                     and twgsc.singel_goods_qty = :singelGoodsQty
				                     and twgsc.singel_order_qty = :singelOrderQty)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 删除团购计数器记录 -->
	<bean id="GroupBuyingSkuCounter.deleteGrpCnt" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				delete from T_WH_GRPBUY_SKU_COUNTER twgsc
				 where twgsc.ou_id = :whou
				   and twgsc.sku_id = :sku
				   and twgsc.singel_goods_qty = :singelGoodsQty
				   and twgsc.singel_order_qty = :singelOrderQty
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 插入团购表 -->
	<bean id="GroupBuyingSku.insertGroupBuyingSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			   insert into T_WH_GROUP_BUYING_SKU
			     (id, SINGEL_TYPE, Ou_Id, SKU_ID) 
			     values(
			     S_T_WH_GROUP_BUYING_SKU.Nextval, 
			     :type,
			     :whou,
			     :sku
			     )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 查询配货失败作业单的数据 -->
	<bean id="StaErrorLine.findReplenishSummaryForPickingFailed"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select isku.id as skuId,
       isku.code as skuCode,
       isku.bar_code as barCode,
       isku.supplier_code as supplierCode,
       isku.jm_code as jmCode,
       tab_plan.code as staCode,
       nvl(tab_plan.plan_qty, 0) replenishmentQty,
       nvl(tab_have.have_qty, 0) maxReplenishmentQty,
       wdis.code districtCode,
       loc.code locationCode,
       tab_exs.code recommenDistrictCode,
       greatest(isku.height, isku.length, isku.width) as maxnumber 
       #if($terms),
       tab_plan.owner as owner, 
       tab_plan.name as name 
       #end
  from (select sel.sku_id,max(sta.code)  code,sta.owner owner,l.name as name, sum(sel.quantity) plan_qty
          from T_WH_STA_ERROR_LINE sel,t_wh_sta sta
           left join t_bi_channel l on l.code=sta.owner 
         where sta.id = sel.sta_id
           and sta.status = 20
           and sta.main_wh_id = :ouId 
           #if($staCode)
           and sta.code = :staCode 
           #end
         #if($staSlipCode)
           and sta.slip_code = :staSlipCode 
           #end
         group by sel.sku_id, sta.owner,l.name) tab_plan,
       (select inv.sku_id, inv.location_id, sum(inv.quantity) have_qty
          FROM t_wh_sku_inventory inv, T_WH_DISTRICT dis
         where (inv.occupation_code is null or inv.occupation_code = '')
           and inv.ou_id = :ouId
           and inv.quantity > 0
           and inv.district_id = dis.id
           and dis.type = 10
         group by inv.sku_id, inv.location_id) tab_have,
       (select inv.sku_id, dis.code
          FROM t_wh_sku_inventory inv, T_WH_DISTRICT dis
         where dis.type = 1
           and inv.ou_id = :ouId
           and inv.district_id = dis.id
         group by inv.sku_id, dis.code) tab_exs,
       T_BI_INV_SKU isku,
       t_wh_location loc,
       T_WH_DISTRICT wdis
 where tab_plan.sku_id = tab_have.sku_id(+)
   and tab_plan.sku_id = isku.id
   and tab_plan.sku_id = tab_exs.sku_id(+)
   and tab_have.location_id = loc.id(+)
   and loc.district_id = wdis.id(+)
 order by isku.code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 查询配货失败作业单的数据的库存 -->
	<bean id="StaErrorLine.findstockBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select max(y.sku_id),max(y.location_id),sum(y.quantity) as stock from t_wh_sku_inventory y inner join T_WH_LOCATION n on
	 				y.location_id = n.id  where y.sku_id = :skuId and n.code = :locationCode group by y.location_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaErrorLine.findCodeBySkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select
						 g.sku_id as skuId,n.code as groomCode
					from 
						 t_wh_st_log g 
					inner join
						 t_wh_location n on g.location_id = n.id 
					where
						 g.sku_id = :skuId  and (n.is_available=1 or n.is_available is null) 
						 and (n.is_locked = 0 or n.is_locked is null) and g.tran_time > add_months(sysdate,-3 ) order by g.tran_time desc
				]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- 删除明细配货失败信息 fanht -->
	<bean id="StaErrorLine.deleteByStaErrorLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				delete from T_WH_STA_ERROR_LINE sel
				where sel.sta_id = :staId
				and sel.sku_id = :skuId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.removeMergeStaRef" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				update t_wh_sta sta set sta.group_sta_id = null where sta.group_sta_id = :groupId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 更新STA最大长度 fanht -->
	<bean id="StockTransApplication.updateSkuMaxLength" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			        update t_wh_sta sta
			           set sta.sku_max_length =
			               (select greatest(max(nvl(sku.width, 0)),
			                                max(nvl(sku.length, 0)),
			                                max(nvl(sku.height, 0)))
			                  from t_wh_sta_line stal, T_BI_INV_SKU sku
			                 where stal.sta_id = :id
			                   and stal.sku_id = sku.id)
			         where sta.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 更新STA信息 fanht -->
	<bean id="StockTransApplication.updateOrderInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		        update t_wh_sta sta
				   set (sta.sku_max_length,
				        sta.is_rail_way,
				        sta.is_locked,
				        sta.parcel_sorting_mode,
				        sta.is_group_buying) =
				       (select greatest(max(nvl(sku.width, 0)),
				                        max(nvl(sku.length, 0)),
				                        max(nvl(sku.height, 0))),
				               max(nvl(sku.is_railway, 0)),
				               case
				                 when sta.type = 42 then
				                  1
				                 else
				                  0
				               end case,
				               :parcelSortingMode,
				               :isGroupBuying
				          from t_wh_sta_line stal, T_BI_INV_SKU sku
				         where stal.sta_id = :id
				           and stal.sku_id = sku.id)
				 where sta.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- staId查询商品分类信息 fanht -->
	<bean id="SkuCategories.findSkuCategoriesByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select tmsc.*
				  from T_MA_SKU_CATEGORIES tmsc
				 start with (tmsc.id in
				            (select skuc.id
				                from T_MA_SKU_CATEGORIES skuc
				               where skuc.id in (select sku.sku_categories_id
				                                   from t_wh_sta      sta,
				                                        t_wh_sta_line stad,
				                                        T_BI_INV_SKU  sku
				                                  where sta.id = :staId
				                                    and sta.id = stad.sta_id
				                                    and stad.sku_id = sku.id
				                                  group by sku.sku_categories_id)))
				connect by prior tmsc.parent_sku_categories_id = tmsc.id
				       and tmsc.is_picking_categories = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 出库&交接合并后，对于已出库未交接表的操作 fanht S -->
	<!-- 出库成功后，插入中间表 -->
	<bean id="OutBoundPack.insertOutBoundPack" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			  insert into T_WH_OUTBOUND_PACK
			       (ID, CREATOR_ID, LPCODE, OU_ID, PACKAGE_ID,TRACKING_NO,IS_HO,is_Pre_Sale)
			  values 
			       (
			       S_T_WH_OUTBOUND_PACK.Nextval, 
			       :creatorId, 
			       :lpcode,
			       :ouId, 
			       :packageId,
			       :trackingNo,
			       0,:isPreSale
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 生成交接批成功后，设置中间表 已交接 -->
	<bean id="OutBoundPack.deleteOutBoundPack" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
              UPDATE T_WH_OUTBOUND_PACK SET IS_HO=1 
				 WHERE package_id in(
               	#foreach($id in $packageIdList)
               		$id,
               	#end
               -1)
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 自动化仓生成交接批成功后，设置中间表 已交接 -->
	<bean id="OutBoundPack.deleteAutoWhOutBoundPack" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
              UPDATE T_WH_OUTBOUND_PACK p SET p.IS_HO=1 
				WHERE  p.tracking_no IN (SELECT l.tracking_no FROM T_WH_STA_HO_LIST_LINE l WHERE l.ho_list_id = :hoId)
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 作废交接清单明细行，删除中间表 -->
	<bean id="OutBoundPack.deleteOneOutBoundPack" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
             DELETE FROM T_WH_OUTBOUND_PACK WHERE PACKAGE_ID=:pId
			]]>
			</value>
		</constructor-arg>
	</bean>
	<!--用户下未交接清单  -->
	<bean id="OutBoundPack.initOutBoundPack" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
        		 select op.*
          from T_WH_OUTBOUND_PACK op,t_wh_package_info p,t_wh_sta sta ,T_WH_STA_HO_LIST_LINE hl
         	where
            op.package_id=p.id(+)
            and  p.sta_delivery_info_id=sta.id(+)
            and (sta.is_pre_sale is null or sta.is_pre_sale='0')   
            and  op.creator_id = :creatorId
            and op.ou_id = :ouId
            and op.tracking_no = hl.tracking_no(+)
            and nvl(hl.tracking_no,'1') = '1'
            and (op.IS_HO <> 1 OR op.IS_HO IS NULL)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 出库&交接，初始化未交接单 -->
	<bean id="OutBoundPack.oneOutBoundPack" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
        		 SELECT o.*  FROM T_WH_OUTBOUND_PACK o,t_wh_package_info p ,t_wh_sta sta  
 				 WHERE   o.package_id=p.id(+) and p.sta_delivery_info_id=sta.id(+)  
 				 and (sta.is_pre_sale is null or sta.is_pre_sale='0') and  o.CREATOR_ID=:creatorId  AND (o.IS_HO <> 1 OR o.IS_HO IS NULL)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 出库&交接，自动化仓下需要交接的包裹-->
	<bean id="OutBoundPack.insertAutoWhHandOverList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	        		INSERT INTO T_WH_STA_HO_LIST_LINE  VALUE(ID,STATUS,TRACKING_NO,VERSION,WEIGHT,HO_LIST_ID)
					SELECT S_T_WH_STA_HO_LIST_LINE.NEXTVAL,1,pi.tracking_no,0,pi.weight, :hoId
					FROM    T_WH_OUTBOUND_PACK p
					              LEFT JOIN t_wh_package_info pi ON p.TRACKING_NO = pi.TRACKING_NO
					              LEFT JOIN t_bi_warehouse w ON pi.ou_id=w.ou_id 
					              LEFT JOIN T_WH_STA_HO_LIST_LINE ll ON p.tracking_no=ll.tracking_no AND ll.status=0
					              INNER JOIN t_wh_sta sta ON pi.sta_delivery_info_id=sta.id 
		            WHERE  pi.STATUS = 5
					              AND sta.status NOT IN (10,15,17)
					              AND w.is_auto_wh =1 
					              and ( sta.IS_PRE_SALE is null or sta.IS_PRE_SALE ='0' )
					              AND (p.IS_HO <> 1 OR p.IS_HO IS NULL)
					              AND (pi.IS_HANDOVER <> 0 OR pi.IS_HANDOVER IS NULL)   
					              AND p.lpcode= :lpCode
					              AND ROWNUM <= :maxlimit
					              and not exists (select 1 from t_wh_sta_delivery_change_log l where l.newtracking_no=pi.tracking_no)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 出库&交接，保存交接清单仓库-->
	<bean id="OutBoundPack.insertAutoWareHandOverList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	        		INSERT INTO T_WH_HO_WH_LIST VALUE(ID,HO_LIST_ID,OU_ID)
					SELECT s_T_WH_HO_WH_LIST.nextval,a.hli,a.ouId
					FROM (
					SELECT l.ho_list_id hli ,NVL(pa.OU_ID,p.OU_ID) ouId
					FROM T_WH_STA_HO_LIST_LINE l,T_WH_OUTBOUND_PACK pa,t_wh_package_info p
					WHERE  l.tracking_no=p.tracking_no
						       AND l.tracking_no=pa.tracking_no
						       AND l.ho_list_id= :hoId
					GROUP BY l.ho_list_id,NVL(pa.OU_ID,p.OU_ID)
					) a
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 出库&交接，自动化仓更新明细信息到交接清单中-->
	<bean id="OutBoundPack.updateHandOverListByLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	        		UPDATE T_WH_STA_HO_LIST hl SET 
					       hl.bill_count=(SELECT COUNT(l.id) FROM T_WH_STA_HO_LIST_LINE l WHERE l.ho_list_id= :hoId),
					       hl.package_count=(SELECT COUNT(l.id) FROM T_WH_STA_HO_LIST_LINE l WHERE l.ho_list_id= :hoId),
					       hl.total_weight=(SELECT SUM(l.weight) FROM T_WH_STA_HO_LIST_LINE l WHERE l.ho_list_id= :hoId)
					WHERE hl.id= :hoId
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 出库&交接，自动化仓更新包裹的交接清单明细-->
	<bean id="OutBoundPack.updatePackageInfoByHoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	        		UPDATE t_wh_package_info p SET p.ho_list_line_id = (SELECT ID FROM T_WH_STA_HO_LIST_LINE ll WHERE ll.tracking_no=p.tracking_no AND ll.status=1) ,p.version=p.version+1
					WHERE p.tracking_no IN (SELECT  l.tracking_no FROM T_WH_STA_HO_LIST_LINE l WHERE l.ho_list_id= :hoId    AND l.status=1)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 出库&交接，初始化未交接单 -->
	<bean id="OutBoundPack.initOutBoundPackCheck" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
        		select op.*
				  from T_WH_OUTBOUND_PACK op,T_WH_STA_HO_LIST_LINE hl
				 where op.creator_id = :creatorId
				   and op.ou_id != :ouId
           		   and op.tracking_no = hl.tracking_no(+)
                   and nvl(hl.tracking_no,'1') = '1'
                   and (op.IS_HO <> 1 OR op.IS_HO IS NULL)
                   and (hl.is_Pre_Sale is null OR hl.is_Pre_Sale=0)
                   and (op.is_Pre_Sale is null OR op.is_Pre_Sale=0)
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 作业单id，查询其拣货逻辑 -->
	<bean id="PickingList.findPickingListByStaid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select pl.*
				  from t_wh_sta sta, t_wh_sta_picking_list pl
				 where sta.picking_list_id = pl.id
				   and sta.id = :staId
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 作业单id，查询其作业单 -->
	<bean id="PickingList.findPickingListByPickId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select pl.check_mode
				  from t_wh_sta_picking_list pl
				 where 
				    pl.id = :pid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 作业单id，查询是否特定 -->
	<bean id="PickingList.findPickingListByPickIdS" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select pl.is_special_packaging
				  from t_wh_sta_picking_list pl
				 where 
				    pl.id = :pid
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaDeliveryInfo.findPrintExpressBillData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select d.id as id,
       w.departure as departure,
       cmpou.name as cmpname,
       p.plan_bill_count as totalBillQty,
       p.to_location as toLocation,
       d.trans_big_word as transBigWord,
       d.package_center_name as packageCenterName,
       d.package_center_code as packageCenterCode,
       d.tracking_no as trackingNo,
       d.tracking_no as sfTrackingNo,
       to_char(sysdate, 'yyyy-MM-dd') as printTime,
       p.code as pickingListCode,
       d.lpcode as lpcode,
       m.name as expName,
       d.address as address,
       d.country as country,
       d.province as province,
       d.city as city,
       d.district as district,
       d.zipcode as zipcode,
       d.lpcode as lpcode,
       d.telephone as telephone,
       d.remark as remark,
       d.mobile as mobile,
       case
         when d.mobile is null then
          d.telephone
         when d.telephone is null then
          d.mobile
         else
          d.mobile || ',' || d.telephone
       end as receverTel,
       d.receiver as receiver,
       d.transfer_fee as transferFee,
       sta.slip_code as refSlipCode,
       sta.code code,
       sta.is_nike_pick as isNikePick,
       shop.SKU_CATEGORIES as skuCategories,
       sta.owner owner,
       shop.id as channelId,
       nvl(sa.shop_name, shop.name) as owner,
       whou.name as warehouseName,
       nvl(sa.shop_name, shop.name) as sender,
       nvl(w.oth_contact1,w.address) as senderAddress,
       nvl(sa.contacts_phone,shop.telephone) as senderTel,
       '' as senderMobile,
       shop.zipcode as sendZipCode,
       transSF.jcustid as jcustid,
       w.CITY_CODE as sfWhCode,
       decode(d.is_cod, '1', '是', '否') as isSupportCod,
       sta.pg_index as pgindex,
       sta.sku_qty as quantity,
       sta.slip_code2 as slipCode2,
       d.trans_city_code as transCityCode,
       decode(d.is_cod, '1', nvl((nvl(sta.total_actual, 0) + nvl(d.transfer_fee, 0)), 0), null) as amount,
       sta.total_actual as totalactual,
       sta.order_total_actual as ordertotalactual,
       nvl(sta.order_transfer_free,0) orderTransferFree,
       fn_getregion_forwritebig(d.address, d.province, d.city, d.district) as bigAddress,
       decode(sta.is_rail_way,5,1,1,1,0) as isRailway,
       d.trans_type as transTypeB,
       d.trans_time_type as transTimeTypeB,
       sa.trans_add_memo as transmemo,
       sa.contacts as contacts,
       sa.ext1 as ext1,
       shop.code as channelCode,
       d.insurance_amount as insuranceAmount,
       '' as barCode,
       '' as staQuantity,
       decode(d.is_trans_cod_pos, '1', '是', '否') as isTransCodPos,
       '1' as sfOrder,
       SF.sfcount as sfSum,
       DECODE(nvl(sta.shipment_code,'0'),'0',NULL,'#'||sta.shipment_code||'#'||d.tracking_no) shipmentCode
  from t_wh_sta               sta
  		left join (select count(1) as sfcount,sta_delivery_info_id staId from t_wh_package_info group by sta_delivery_info_id) SF
        on SF.staId = sta.id,
       t_wh_sta_delivery_info d,
       t_wh_sta_picking_list  p,
       t_ma_transportator     m,
       
       t_bi_channel           shop
  left join t_bi_channel_special_action sa on sa.channel_id = shop.id  and sa.type = 30, 
  t_bi_warehouse w, 
   t_au_operation_unit whou,
   t_au_operation_unit yun, 
   t_au_operation_unit cmpou
      left join t_wh_trans_sf transSF
        on transSF.ou_id = cmpou.id
 where sta.id = d.id
   and sta.picking_list_id = p.id
   and m.exp_code = d.lpcode
   and w.ou_id = sta.main_wh_id
   and shop.code = sta.owner
   and whou.id = w.ou_id
   and yun.id = whou.parent_ou_id
   and cmpou.id = yun.parent_ou_id
   and sta.create_time >= sysdate - 180
   and sta.status != 15
   and sta.status != 17 
   
   #if($plid)
    and p.id = :plid 
   #elseif($staid)
    and sta.id = :staid 
   #else
    and sta.id = -1
   #end
   #if("$!isOnlyParent"=="false")
   union all
   select d.id as id,
       w.departure as departure,
       cmpou.name as cmpname,
       p.plan_bill_count as totalBillQty,
       p.to_location as toLocation,
       d.trans_big_word as transBigWord,
       d.package_center_name as packageCenterName,
       d.package_center_code as packageCenterCode,
       pi.tracking_no as trackingNo,
       d.tracking_no as sfTrackingNo,
       to_char(sysdate, 'yyyy-MM-dd') as printTime,
       p.code as pickingListCode,
       d.lpcode as lpcode,
       m.name as expName,
       d.address as address,
       d.country as country,
       d.province as province,
       d.city as city,
       d.district as district,
       d.zipcode as zipcode,
       d.lpcode as lpcode,
       d.telephone as telephone,
       d.remark as remark,
       d.mobile as mobile,
       case
         when d.mobile is null then
          d.telephone
         when d.telephone is null then
          d.mobile
         else
          d.mobile || ',' || d.telephone
       end as receverTel,
       d.receiver as receiver,
       d.transfer_fee as transferFee,
       sta.slip_code as refSlipCode,
       sta.code code,
       sta.is_nike_pick as isNikePick,
       shop.SKU_CATEGORIES as skuCategories,
       sta.owner owner,
       shop.id as channelId,
       nvl(sa.shop_name, shop.name) as owner,
       whou.name as warehouseName,
       nvl(sa.shop_name, shop.name) as sender,
       nvl(w.oth_contact1,w.address) as senderAddress,
       nvl(sa.contacts_phone,shop.telephone) as senderTel,
       '' as senderMobile,
       shop.zipcode as sendZipCode,
       transSF.jcustid as jcustid,
       w.CITY_CODE as sfWhCode,
       decode(d.is_cod, '1', '是', '否') as isSupportCod,
       sta.pg_index as pgindex,
       sta.sku_qty as quantity,
       sta.slip_code2 as slipCode2,
       d.trans_city_code as transCityCode,
       decode(d.is_cod, '1', nvl((nvl(sta.total_actual, 0) + nvl(d.transfer_fee, 0)), 0), null) as amount,
       sta.total_actual as totalactual,
       sta.order_total_actual as ordertotalactual,
       nvl(sta.order_transfer_free,0) orderTransferFree,
       fn_getregion_forwritebig(d.address, d.province, d.city, d.district) as bigAddress,
       decode(sta.is_rail_way,5,1,1,1,0) as isRailway,
       d.trans_type as transTypeB,
       d.trans_time_type as transTimeTypeB,
       sa.trans_add_memo as transmemo,
       sa.contacts as contacts,
       sa.ext1 as ext1,
       shop.code as channelCode,
       d.insurance_amount as insuranceAmount,
       '' as barCode,
       '' as staQuantity,
       decode(d.is_trans_cod_pos, '1', '是', '否') as isTransCodPos,
       '2' as sfOrder,
       SF.sfcount as sfSum,
       DECODE(nvl(sta.shipment_code,'0'),'0',NULL,'#'||sta.shipment_code||'#'||pi.tracking_no) shipmentCode
  from t_wh_sta               sta
  		left join (select count(1) as sfcount,sta_delivery_info_id staId from t_wh_package_info group by sta_delivery_info_id) SF
        on SF.staId = sta.id,
       t_wh_sta_delivery_info d,
       t_wh_sta_picking_list  p,
       t_wh_package_info pi,
       t_ma_transportator     m,
      
       t_bi_channel           shop
  left join t_bi_channel_special_action sa on sa.channel_id = shop.id  and sa.type = 30, 
  t_bi_warehouse w, 
   t_au_operation_unit whou,
   t_au_operation_unit yun, 
   t_au_operation_unit cmpou
      left join t_wh_trans_sf transSF
        on transSF.ou_id = cmpou.id
 where sta.id = d.id
 	and d.lpcode='SF'
 	and (d.is_cod is null or d.is_cod = 0)
 	and pi.sta_delivery_info_id = d.id
 	and pi.tracking_no<>d.tracking_no
   and sta.picking_list_id = p.id
   and m.exp_code = d.lpcode
   and w.ou_id = sta.main_wh_id
   and shop.code = sta.owner
   and whou.id = w.ou_id
   and yun.id = whou.parent_ou_id
   and cmpou.id = yun.parent_ou_id
   and sta.create_time >= sysdate - 180
   and sta.status != 15
   and sta.status != 17 
   
   #if($plid)
    and p.id = :plid 
   #elseif($staid)
    and sta.id = :staid 
   #else
    and sta.id = -1
   #end
  #end
 order by pgindex,SFORDER
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findPrintExpressBillData2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select d.id as id,
       w.departure as departure,
       cmpou.name as cmpname,
       p.plan_bill_count as totalBillQty,
       fo.tracking_no as trackingNo,
       d.tracking_no as sfTrackingNo,
       to_char(sysdate, 'yyyy-MM-dd') as printTime,
       p.code as pickingListCode,
       d.trans_big_word as transBigWord,
       d.lpcode as lpcode,
       m.name as expName,
       d.address as address,
       d.country as country,
       d.province as province,
       d.city as city,
       d.district as district,
       d.zipcode as zipcode,
       d.lpcode as lpcode,
       d.telephone as telephone,
       d.remark as remark,
       d.mobile as mobile,
       case
         when d.mobile is null then
          d.telephone
         when d.telephone is null then
          d.mobile
         else
          d.mobile || ',' || d.telephone
       end as receverTel,
       d.receiver as receiver,
       d.transfer_fee as transferFee,
       sta.slip_code as refSlipCode,
       shop.id as channelId,
       nvl(sa.shop_name, shop.name) as owner,
       whou.name as warehouseName,
       nvl(sa.shop_name, shop.name) as sender,
       nvl(w.oth_contact1,w.address) as senderAddress,
       nvl(sa.contacts_phone,shop.telephone) as senderTel,
       '' as senderMobile,
       shop.zipcode as sendZipCode,
       transSF.jcustid as jcustid,
       w.CITY_CODE as sfWhCode,
       decode(d.is_cod, '1', '是', '否') as isSupportCod,
       sta.pg_index as pgindex,
       sta.sku_qty as quantity,
       d.trans_city_code as transCityCode,
       decode(d.is_cod, '1', nvl((nvl(sta.total_actual, 0) + nvl(d.transfer_fee, 0)), 0), null) as amount,
       sta.total_actual as totalactual,
       sta.order_total_actual as ordertotalactual,
       fn_getregion_forwritebig(d.address, d.province, d.city, d.district) as bigAddress,
       decode(sta.is_rail_way,5,1,1,1,0) as isRailway,
       d.trans_type as transTypeB,
       d.trans_time_type as transTimeTypeB,
       d.trans_memo as transmemo,
       sa.contacts as contacts,
       sta.pg_index as pgIndex,
       shop.code as channelCode,
       d.insurance_amount as insuranceAmount,
       '' as barCode,
       '' as staQuantity,
       decode(d.is_trans_cod_pos, '1', '是', '否') as isTransCodPos,
       '2' as sfOrder,
       SF.sfcount as sfSum,
       DECODE(nvl(sta.shipment_code,'0'),'0',NULL,'#'||sta.shipment_code||'#'||fo.tracking_no) shipmentCode
  from t_wh_sta               sta
  		left join (select count(1) as sfcount,sta_delivery_info_id staId from t_wh_package_info group by sta_delivery_info_id) SF
        on SF.staId = sta.id,
       t_wh_sta_delivery_info d left join t_wh_package_info fo on d.id = fo.STA_DELIVERY_INFO_ID,
       t_wh_sta_picking_list  p,
       t_ma_transportator     m,
       
       t_bi_channel           shop
  left join t_bi_channel_special_action sa on sa.channel_id = shop.id  and sa.type = 30, 
  t_bi_warehouse w, 
   t_au_operation_unit whou,
   t_au_operation_unit yun, 
   t_au_operation_unit cmpou
      left join t_wh_trans_sf transSF
        on transSF.ou_id = cmpou.id
 where sta.id = d.id
   and sta.picking_list_id = p.id
   and m.exp_code = d.lpcode
   and w.ou_id = sta.main_wh_id
   and shop.code = sta.owner
   and whou.id = w.ou_id
   and yun.id = whou.parent_ou_id
   and cmpou.id = yun.parent_ou_id
   and sta.create_time >= sysdate - 180
   and sta.status != 15
   and sta.status != 17 
    
   and sta.id = :staid 
   and fo.id = :packId
 order by sta.pg_index
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInvoice.findBySource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select i from MsgInvoice i 
                	where i.source = :source
                		and i.status = 1
                	#if($sourceWh)
						and i.sourceWh = :sourceWh
					#end
					order by id 
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsSnReportCommand.findYesterdayData" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select nvl(d.mobile, d.telephone) mobile,
       sn.sn sn,
       sku.name skuName,
       sta.outbound_time purchaseDate,
       case
         when sta.owner = '1Microsoft Store' then
          '官方商城'
         else
          '天猫旗舰店'
       end purchaseSource
  from t_wh_sta               sta,
       t_wh_sta_delivery_info d,
       t_wh_sku_sn_log        sn,
       t_bi_inv_sku           sku,
       --t_ma_sku               pro,
       t_wh_stv               stv
 where sta.id = stv.sta_id
   and --((sta.owner = '1Microsoft Store' and pro.is_sn_sku = 1) or
   		((sta.owner = '1Microsoft Store' and sku.is_sn_sku = 1) or
       (sta.owner = '1微软中国官方旗舰店' and
       --pro.code in ('MIC0004',
       sku.jm_code in ('MIC0004',
                      'MIC0108',
                      'MIC0002',
                      'MIC0190',
                      'MIC0191',
                      'MIC0192',
                      'MIC0394',
                      'MIC0395',
                      'MIC0387',
                      'MIC0409',
                      'MIC0389',
                      'MIC0388',
                      'MIC0391',
                      'MIC0390',
                      'MIC0393',
                      'MIC0392',
                      'MIC0660',
                      'MIC0661',
                      'MIC0662',
                      'MIC0663',
                      'MIC0664',
                      'MIC0665',
                      'MIC0666',
                      'MIC0667',
                      'MIC0668',
                      'MIC0669')))
   and sta.status in (4, 10)
   and stv.direction = 2
   and stv.status = 10
   and sta.type in (21, 42, 25)
   and d.id = sta.id
   --and pro.id = sku.product_id
   and sn.stv_id = stv.id
   and sn.sku_id = sku.id
   and sta.outbound_time >=
       to_date(to_char(sysdate - 1, 'yyyy-MM-dd'), 'yyyy-MM-dd')
   and sta.outbound_time <
       to_date(to_char(sysdate, 'yyyy-MM-dd'), 'yyyy-MM-dd')
 order by sta.outbound_time
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findSalesTotalInvForChangeOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select inv.SKU_ID as ID,sum(inv.sales_avail_qty) as QTY
					from v_wh_inventory_summary inv
					where inv.OWNER in(select shop.code from t_bi_channel shop,t_ma_shop_share ss where ss.shop_id = shop.id and ss.group_code = :groupCode)
					      and inv.sales_avail_qty > 0
					      and inv.WH_OUID = :whid
					group by inv.SKU_ID
					order by inv.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findSalesCurrentInvForChangeOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select inv.SKU_ID AS ID,sum(inv.sales_avail_qty) as QTY
					from v_wh_inventory_summary inv
					where inv.OWNER in(select shop.code from t_bi_channel shop,t_ma_shop_share ss where ss.shop_id = shop.id and ss.group_code =  :groupCode)
					      and inv.sales_avail_qty > 0
					      and inv.WH_OUID = :whid
					      and inv.OWNER = :owner
					group by inv.OWNER,inv.sku_id
					order by inv.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaCreateQueue.deleteFinish" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					delete t_wh_sta_create_queue q where q.status = 10
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaCreateQueue.deleteFinishLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					delete t_wh_sta_cq_line l where l.scq_id in (select id from t_wh_sta_create_queue q where q.status = 10)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.createByGILocId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into t_wh_sta_line (id,complete_quantity,owner,quantity,sku_cost,total_actual,version,inv_status_id,sku_id,sta_id,unit_price,activity_source)
select s_t_wh_sta_line.nextval,0,inv.inv_owner,inv.quantity,inv.sku_cost,null,1,inv.status_id,inv.sku_id, :staId ,null,null from 
t_wh_sku_inventory inv
where 
inv.quantity > 0
and inv.location_id=:locId

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findSalesReportForm" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
nvl(toWHOrder.name,outBoundOrder.name) as warehouse,
nvl(toWHOrder.shop_id,outBoundOrder.shop_id) as shop,
nvl(toWHOrder.qty,0) as toWHOrderQty,
nvl(outBoundOrder.qty,0) outboundQty
from
(
select au.name,s.name shop_id,count(1) qty
from t_wh_sta sta ,t_bi_channel s,t_au_operation_unit au
where (sta.type=21 or sta.type=42) 
and sta.status not in (15,17)
and s.code = sta.owner
and au.id = sta.main_wh_id
#if($outboundTime)
	and sta.create_time >= :outboundTime
#end
#if($endOutboundTime)
	and sta.create_time <= :endOutboundTime
#end
group by s.name,au.name
order by au.name,count(1) desc,s.name
) toWHOrder
full join
(
select au.name,s.name shop_id,count(1) qty
from t_wh_sta sta ,t_bi_channel s,t_au_operation_unit au
where sta.type = 21 and (sta.status = 4 or sta.status = 10)
and s.code = sta.owner
and au.id = sta.main_wh_id
#if($outboundTime)
	and sta.outbound_time >= :outboundTime
#end
#if($endOutboundTime)
	and sta.outbound_time <= :endOutboundTime
#end
group by s.name,au.name
order by au.name,count(1) desc,s.name
)outBoundOrder
on toWHOrder.name = outBoundOrder.name and toWHOrder.shop_id = outBoundOrder.shop_id
order by toWHOrder.name,toWHOrder.qty desc,toWHOrder.shop_id 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findGroupStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select t1.code from t_wh_sta t1,t_wh_sta t2 where 
t1.id=t2.group_sta_id 
and t1.create_time > date '2014-08-01'
and t2.create_time > date '2014-08-01' -- 合并订单功能 14.8才上线
and t2.slip_code1=:slipCode1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updateSkuQtyById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_sta sta set sta.sku_qty = (select sum(l.quantity) from t_wh_sta_line l where l.sta_id = sta.id) where sta.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 库存占用查询，用存储过程里面的逻辑 -->
	<bean id="Inventory.findSalesOutboundToOccupyInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select inv.*,stal.quantity as planOccupyQty,stal.owner as orderOwner, inv.sku_id || '_' || stal.owner as lineKey
from t_wh_sku_inventory inv,
     t_wh_location l,
     t_wh_district dis,
     t_wh_inventory_status invs,
     t_bi_warehouse w,
     t_wh_district d,
     t_wh_sta sta,
     (select l.sku_id,l.sta_id,l.owner,sum(l.quantity) as quantity 
      from t_wh_sta_line l 
             where l.sta_id = :staid 
             group by l.sku_id,l.owner,l.sta_id) stal
where inv.location_id = l.id 
      and inv.status_id = invs.id 
      and w.ou_id = sta.main_wh_id
      and l.ou_id = sta.main_wh_id 
      and sta.id = stal.sta_id 
      and w.ou_id = inv.ou_id
      and stal.sku_id = inv.sku_id
      and inv.inv_owner = stal.owner
      and invs.is_forsale = 1 
      and l.is_available = 1
      and nvl(l.is_locked,0)=0 
      and inv.quantity > 0 
      #if($wooCode)
      	and inv.occupation_code =:wooCode
      #else
      	and (inv.occupation_code is null or inv.occupation_code = '')
      #end
      and dis.id=l.DISTRICT_ID
      and dis.type!=5
      and exists(
          select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
          where lt.location_id = l.id and lt.transtype_id = tt.id
                and tt.code = 'SALES_OUTBOUND')
      and d.id = l.DISTRICT_ID
      and sta.id = :staid
  #if("$!saleOcpType"=="2")
    order by inv.sku_id,stal.owner,inv.expire_date asc,d.code,l.sort asc,l.code,inv.batch_code
  #else
    order by inv.sku_id,stal.owner,inv.expire_date asc,inv.batch_code,d.code,l.sort asc,l.code
  #end
   for update of inv.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 新库存占用查询，用存储过程里面的逻辑 -->
	<bean id="Inventory.findSalesOutboundToOccupyInventoryNew" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select inv.*,stal.quantity as planOccupyQty,stal.owner as orderOwner, inv.sku_id || '_' || stal.owner || '_' || stal.ocpCode as lineKey
from t_wh_sku_inventory inv,
     t_wh_location l,
     t_wh_district dis,
     t_wh_inventory_status invs,
     t_bi_warehouse w,
     t_wh_district d,
     t_wh_sta sta,
     (select l.sku_id,l.sta_id,l.owner,sum(l.quantity) as quantity,l.ocp_code as ocpCode 
      from T_WH_STA_OCP_LINE l 
             where l.sta_id = :staid 
             group by l.sku_id,l.owner,l.sta_id,l.ocp_code) stal
where inv.location_id = l.id 
      and inv.status_id = invs.id 
      and w.ou_id = sta.main_wh_id
      and l.ou_id = sta.main_wh_id 
      and sta.id = stal.sta_id 
      and w.ou_id = inv.ou_id
      and stal.sku_id = inv.sku_id
      and inv.inv_owner = stal.owner
      and invs.is_forsale = 1 
      and l.is_available = 1
      and l.id in (
         select id from t_wh_location t where t.zoon_id in(
           select id from T_WH_PICK_ZOON where wh_zoon_id in 
               (
                  select id from t_wh_zoon where 
                  code in(stal.ocpCode) 
               )
        ))
      and nvl(l.is_locked,0)=0 
      and inv.quantity > 0 
      #if($wooCode)
      	and inv.occupation_code =:wooCode
      #else
      	and (inv.occupation_code is null or inv.occupation_code = '')
      #end
      and dis.id=l.DISTRICT_ID
      and dis.type!=5
      and exists(
          select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
          where lt.location_id = l.id and lt.transtype_id = tt.id
                and tt.code = 'SALES_OUTBOUND')
      and d.id = l.DISTRICT_ID
      and sta.id = :staid
  #if("$!saleOcpType"=="2")
    order by inv.sku_id,stal.owner,inv.expire_date asc,d.code,l.sort asc,l.code,inv.batch_code
  #else
    order by inv.sku_id,stal.owner,inv.expire_date asc,inv.batch_code,d.code,l.sort asc,l.code
  #end
   for update of inv.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 新的库存占用 -->
	<bean id="Inventory.findInventoryOccupyBySku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select inv.id,inv.batch_code batchCode,inv.inbound_time inboundTime,inv.is_occupied isOccupied,
					       inv.occupation_code occupationCode,inv.inv_owner owner,inv.quantity,
					       inv.sku_cost skuCost,inv.district_id districtId,inv.location_id locationId,inv.ou_id whOuId,
					       inv.sku_id skuId,inv.status_id statusId,inv.version,inv.production_date productionDate,
					       inv.valid_date validDate,inv.expire_date expireDate,inv.ocp_code ocpCode
					from t_wh_sku_inventory inv,
					     t_wh_location l,
					     t_wh_district dis,
					     t_wh_inventory_status invs,
					     t_bi_warehouse w
					where inv.location_id = l.id 
					      and inv.status_id = invs.id 
					      and w.ou_id = inv.ou_id
					      and inv.sku_id= :skuId
					      and w.id= :whId
				      #if ($owner)
				      	  and inv.inv_owner = :owner
					  #end
					  #if ($invStatusId)
					      and invs.id= :invStatusId
					  #elseif($isForSales)
					      and invs.is_forsale= :isForSales
					  #else
					  	  and invs.is_forsale=1	
					  #end
					  #if ($locationId)
					      and l.id= :locationId
					  #else
					      and l.is_available = 1
					  #end
					  #if ($fromExpDate)
					      and inv.expire_date >= :fromExpDate
					  #end
					  #if ($endExpDate)
					      and inv.expire_date <= :endExpDate
					  #end
					      and nvl(l.is_locked,0)=0 
					      and inv.quantity > 0 
					  #if ($sourceOcpCode)
					      and inv.occupation_code  = :sourceOcpCode
					  #else    
					      and (inv.occupation_code is null or inv.occupation_code = '')
					  #end
					      and dis.id=l.DISTRICT_ID
					  #if ($disType)
					      and dis.type in (
					      	#foreach( $wdt in $disType )
 								$wdt ,
							#end
							-1
					      )
					  #end
					      and exists(
					          select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
					          where lt.location_id = l.id and lt.transtype_id = tt.id
					          	#if($transactionTypes)
					          		and tt.id in (
					          			#foreach( $tran in $transactionTypes )
			 								$tran ,
										#end
										-1
					          		)
					          	#end
					                and tt.code = 'SALES_OUTBOUND')
					order by inv.sku_id,inv.inv_owner,inv.expire_date,dis.code,l.code,inv.batch_code,inv.id asc
					for update of inv.id

				]]>
			</value>
		</constructor-arg>
	</bean>

<!-- 区域优先库存占用 -->
	<bean id="Inventory.findInventoryOccupyByOcpArea" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select inv.id,inv.batch_code batchCode,inv.inbound_time inboundTime,inv.is_occupied isOccupied,
					       inv.occupation_code occupationCode,inv.inv_owner owner,inv.quantity,
					       inv.sku_cost skuCost,inv.district_id districtId,inv.location_id locationId,inv.ou_id whOuId,
					       inv.sku_id skuId,inv.status_id statusId,inv.version,inv.production_date productionDate,
					       inv.valid_date validDate,inv.expire_date expireDate,inv.ocp_code ocpCode
					from t_wh_sku_inventory inv,
					     t_wh_location l,
					     t_wh_district dis,
					     t_wh_inventory_status invs,
					     t_bi_warehouse w,
					     t_wh_pick_zoon n,
               			 t_wh_zoon zoon
					where inv.location_id = l.id 
					      and inv.status_id = invs.id 
					      and w.ou_id = inv.ou_id
					      and l.zoon_id = n.id
            			  and n.wh_zoon_id = zoon.id
					      and inv.sku_id= :skuId
					      and w.id= :whId
					  #if ($ocpAreaCode)
				      	  and zoon.code = :ocpAreaCode
					  #end
				      #if ($owner)
				      	  and inv.inv_owner = :owner
					  #end
					  #if ($invStatusId)
					      and invs.id= :invStatusId
					  #elseif($isForSales)
					      and invs.is_forsale= :isForSales
					  #else
					  	  and invs.is_forsale=1	
					  #end
					  #if ($locationId)
					      and l.id= :locationId
					  #else
					      and l.is_available = 1
					  #end
					  #if ($fromExpDate)
					      and inv.expire_date >= :fromExpDate
					  #end
					  #if ($endExpDate)
					      and inv.expire_date <= :endExpDate
					  #end
					      and nvl(l.is_locked,0)=0 
					      and inv.quantity > 0 
					  #if ($sourceOcpCode)
					      and inv.occupation_code  = :sourceOcpCode
					  #else    
					      and (inv.occupation_code is null or inv.occupation_code = '')
					  #end
					      and dis.id=l.DISTRICT_ID
					  #if ($disType)
					      and dis.type in (
					      	#foreach( $wdt in $disType )
 								$wdt ,
							#end
							-1
					      )
					  #end
					      and exists(
					          select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
					          where lt.location_id = l.id and lt.transtype_id = tt.id
					          	#if($transactionTypes)
					          		and tt.id in (
					          			#foreach( $tran in $transactionTypes )
			 								$tran ,
										#end
										-1
					          		)
					          	#end
					                and tt.code = 'SALES_OUTBOUND')
					order by inv.sku_id,inv.inv_owner,inv.expire_date,dis.code,l.code,inv.batch_code,inv.id asc
					for update of inv.id

				]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- 根据参数 获取被占用的库存 -->
	<bean id="Inventory.findInventoryOccupyBySourceOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select inv.id,inv.batch_code batchCode,inv.inbound_time inboundTime,inv.is_occupied isOccupied,
					       inv.occupation_code occupationCode,inv.inv_owner owner,inv.quantity,
					       inv.sku_cost skuCost,inv.district_id districtId,inv.location_id locationId,inv.ou_id whOuId,
					       inv.sku_id skuId,inv.status_id statusId,inv.version,inv.production_date productionDate,
					       inv.valid_date validDate,inv.expire_date expireDate,inv.ocp_code ocpCode
					from t_wh_sku_inventory inv,
					     t_bi_warehouse w
					where w.ou_id = inv.ou_id
					      and inv.sku_id= :skuId
					  #if($whId)
					      and w.id= :whId
					  #end
				      #if ($owner)
				      	  and inv.inv_owner = :owner
					  #end
					  #if ($sourceOcpCode)
					      and inv.occupation_code  = :sourceOcpCode
					  #end
					order by inv.expire_date,inv.batch_code,inv.id asc
					for update of inv.id

				]]>
			</value>
		</constructor-arg>
	</bean>


    <bean id="Inventory.modifyInventoryByOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_SKU_INVENTORY set location_id=:locId,District_Id=:disId where id= :invId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	 <bean id="Inventory.modifyInventoryByOwnerQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_SKU_INVENTORY set location_id=:locId,District_Id=:disId,quantity=:qty where id= :invId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="Inventory.updateInventoryByOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_SKU_INVENTORY set location_id=:locId,District_Id=:disId where id= :invId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 修改库存份 -->
	<bean id="Inventory.modifyInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_SKU_INVENTORY set occupation_code = :occupyCode
						   ,is_occupied = 1
					#if($qty)
						,quantity = :qty
					#end
					#if($ocpCode)
						,ocp_code = :ocpCode
					#end
					where id= :invId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 增加新的存份 -->
	<bean id="Inventory.addNewInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					insert into T_WH_SKU_INVENTORY
			         (id,
			          BATCH_CODE,
			          INBOUND_TIME,
			          IS_OCCUPIED,
			          OCCUPATION_CODE,
			          INV_OWNER,
			          QUANTITY,
			          SKU_COST,
			          DISTRICT_ID,
			          LOCATION_ID,
			          OU_ID,
			          SKU_ID,
			          STATUS_ID,
			          VERSION,
			          PRODUCTION_DATE,
			          VALID_DATE,
			          EXPIRE_DATE,
			          OCP_CODE
			          )
			       select
					  S_T_Wh_Inventory.Nextval,
					  BATCH_CODE,
			          INBOUND_TIME,
			          IS_OCCUPIED,
			       #if($occupationCode)
					  :occupationCode			       
			       #else
			          OCCUPATION_CODE
			       #end
			          ,INV_OWNER,
			          :qty,
			          SKU_COST,
			          DISTRICT_ID,
			          LOCATION_ID,
			          OU_ID,
			          SKU_ID,
			          STATUS_ID,
			          VERSION,
			          PRODUCTION_DATE,
			          VALID_DATE,
			          EXPIRE_DATE,
			       #if($occupationCode)
					  OCCUPATION_CODE		       
			       #else
			          OCP_CODE
			       #end
			       from 
			       	t_wh_sku_inventory i_rec
			       where 
			        i_rec.id = :invId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用码删除库存 -->
	<bean id="Inventory.deleteInvByOccupationCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					delete from t_wh_sta sta where sta.OCCUPATION_CODE= :occupationCode 
						and sta.create_time>systimestamp-90
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 查询订单 用于创建占用批 -->
	<bean id="StockTransApplication.findStasByOcpOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sta.id,sta.code,sta.status intStaStatus,sta.owner,sta.main_wh_id mainWhId
					from t_wh_sta sta
					where sta.ocp_batch_code = :ocpBatchCode
					   #if($whId)
						  and sta.main_wh_id  = :mainWhId
					   #end
					      and sta.ocp_id is null
					   #if($autoOcp)
					      and sta.ocp_sort is not null
					   #end
					      and sta.create_time>systimestamp-90
					order by  sta.payment_time asc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 将订单设置为占用批占用中 -->
	<bean id="StockTransApplication.updateStaOcpBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.ocp_batch_code= :batchCode  
					where s.id in (
					       select id from(
					          select sta.id
					          from t_wh_sta sta
					          		join t_wh_sta_delivery_info sdi on sta.id=sdi.id
					          		join t_bi_warehouse wh on wh.ou_id=sta.main_wh_id
					          where (sta.is_locked =0 or sta.is_locked is null)
					          		AND (sta.ocp_sort is not NULL OR wh.is_auto_ocp =1)
					          		and wh.vmi_source is null
					          		and sdi.lpcode is not null
					                and sta.status in (1,20)
					                and sta.type in (21,42)
					                and sta.ocp_id is null
					                and sta.ocp_code is null
					                and (sta.ocp_error_qty <=nvl(wh.ocp_error_limit,5) or sta.ocp_error_qty is null )
					                and sta.create_time>systimestamp-90
					          order by sta.ocp_sort asc,sta.order_create_time asc,sta.id asc
					       )where rownum<= :staBatchLimit
					     ) and s.create_time > sysdate- 90 and s.type in (21,42)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用批编码获取订单明细 -->
	<bean id="StaLine.findStaLineByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select sl.id ,sta.id staId,sl.sku_id skuId,sl.owner,sl.quantity,sta.ocp_error_create ocpErrorCreate,sta.code staCode,sl.ocp_area_memo
					from t_wh_sta sta,t_wh_sta_line sl
					where sta.id=sl.sta_id and sta.create_time > sysdate- 90 and sta.type in (21,42)
						#if($ocpCode)
					      and sta.ocp_code = :ocpCode
					    #end
					    #if($status)
					      and sta.status in (
								#foreach( $s in $status )
	 								$s ,
								#end
								-1
								)
					    #end 
					    #if($wooId)
					      and sta.ocp_id= :wooId
					    #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据订单明细创建占用批明细 -->
	<bean id="StaLine.createOcpLineByStaLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into t_wh_ocp_order_line(id,ocp_id,sku_id,owner,qty,conform_qty) 
					select s_t_wh_ocp_order_line.nextval,:ocpId,s.sku_id,s.owner,s.qty,null
					from (
						select sl.sku_id ,sl.owner,sum(sl.quantity) qty
						from t_wh_sta sta,t_wh_sta_line sl
						where sta.id=sl.sta_id
						      and sta.ocp_code = :ocpCode
						group by sl.sku_id ,sl.owner
						) s
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用批编码修改訂單 -->
	<bean id="StockTransApplication.updateStaByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.ocp_code = null,s.ocp_id=null,s.ocp_error_qty = (nvl(ocp_error_qty,0)+1)
                	where s.ocp_code = :ocpCode
                		#if($staId)
                			and s.id= :staId
                		#end 
                		and s.create_time>systimestamp-90
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用批编码修改訂單 -->
	<bean id="StockTransApplication.updateStaStatusByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.status=20,s.version=s.version+1
                	where s.ocp_code = :ocpCode
                		and s.ocp_error_qty >= 2
                		and s.status=1
                		and s.create_time > sysdate- 90 
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用批编码修改訂單 -->
	<bean id="StockTransApplication.updateStaStatusByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.status=20,s.version=s.version+1
                	where s.id= :staId 
                		and s.ocp_error_qty >= 3
                		and s.status=1
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用批编码修改訂單占用批ID -->
	<bean id="StockTransApplication.updateStaOcpIdByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.ocp_id= :ocpId
                	where s.ocp_code = :ocpCode and s.create_time > sysdate- 90 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.updateStaIsNeedOcpByOcpId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.IS_NEED_OCCUPIED= :isNeed
                	where s.ocp_id= :ocpId and s.create_time > sysdate- 90 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.updateStaIsNeedOcpByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.IS_NEED_OCCUPIED= :isNeed
                	where s.ocp_code= :ocpCode and s.create_time > sysdate- 90 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.updateStaOcpCodeById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.ocp_code = :ocpCode,s.ocp_batch_code= :ocpCode
                	where s.id in( 
                	 #foreach($id in $idList )
 								$id ,
							#end
					-1 )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据订单ID删除訂單占用批ID -->
	<bean id="StockTransApplication.updateStaOcpIdByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	update t_wh_sta s set s.ocp_id= null
                		#if($createErrorNumber)	
                			,s.ocp_error_create= :createErrorNumber
                		#end
                	where s.id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据参数将一定数量的订单按占用批编码设为一个批次 -->
	<bean id="StockTransApplication.ocpStaByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					       select id from(
					          select sta.id
					          from t_wh_sta sta
					            left join t_wh_sta_delivery_info sdi on sta.id=sdi.id
					          where 
					          	    (sta.is_locked =0 or sta.is_locked is null)
					          		and sta.status in (1,20)
					          		and sdi.lpcode is not null
					          		and sta.type in (21,42)
					          	#if($ocpErrorQty)
					          		and (sta.ocp_error_qty <= :ocpErrorQty or sta.ocp_error_qty is null) 
					          	#end
					             #if($mainWhId)
					              and sta.main_wh_id  = :mainWhId
					             #end
					                and sta.ocp_code is null 
					             #if($autoOcp)
					                and sta.ocp_sort is not null
							     #end
							     #if("$isYs"=="预售")
					               and (sta.area_ocp_status = 0 or sta.area_ocp_status is null ) and sta.IS_PRE_SALE = 1 and  (sta.next_ocp_time is null or sta.next_ocp_time < sysdate)
							     #end
							      #if($saleModle && "$saleModle"!="预售")
							     	and (sta.IS_PRE_SALE is null or sta.IS_PRE_SALE = 0) and (sta.area_ocp_status = 0 or sta.area_ocp_status is null ) and sta.PICKING_TYPE =:saleModle and  (sta.next_ocp_time is null or sta.next_ocp_time < sysdate)
							      #end 
							      #if($areaCode && "$areaCode"!="跨区域")
					                and sta.area_ocp_status = 3  and sta.area_ocp_memo =:areaCode
							      #end 
							      #if($areaCode && "$areaCode"=="跨区域")
					                and sta.area_ocp_status = 3  and sta.area_ocp_memo ='跨区域'
							      #end 
							        and sta.create_time>systimestamp- 90
							order by  sta.ocp_sort asc,sta.payment_time asc
					       ) where rownum <= :ocpStaLimit
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 查询符合占用批占用的订单 -->
	<bean id="StockTransApplication.findStaIdListByOcpOrder" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select count(sta.id)
					from t_wh_sta sta
					where (sta.is_locked =0 or sta.is_locked is null)
					      and sta.status in (1,20)
					      and sta.ocp_id is null
					      and sta.ocp_batch_code is null
					      and (sta.ocp_error_create <= 5 or sta.ocp_error_create is null)
					      and sta.create_time>systimestamp-90
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 更新订单占用库存失败次数 -->
	<bean id="StockTransApplication.updateStaOcpErrorQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_STA set ocp_error_qty=(nvl(ocp_error_qty,0)+1) where ocp_id = :ocpId and create_time>systimestamp-90
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 统计此批次订单中有多少仓库 -->
	<bean id="StockTransApplication.findOuIdByOcpBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select distinct sta.main_wh_id
					from t_wh_sta sta
					where sta.ocp_batch_code = :batchCode
					      and sta.main_wh_id is not null
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据占用批ID查询订单 -->
	<bean id="StockTransApplication.findStasByOcpOrderId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sta.id,sta.code,sta.status intStaStatus,sta.owner,sta.main_wh_id mainWhId
					from t_wh_sta sta,t_bi_warehouse wh
					where sta.main_wh_id=wh.ou_id
					      and sta.ocp_id = :ocpId
					      and sta.create_time>systimestamp-90
					order by  sta.payment_time asc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 根据批次释放库存 -->
	<bean id="Inventory.releaseInventoryByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_sku_inventory inv set inv.occupation_code = null ,inv.is_occupied = null,inv.ocp_code=null
					where (inv.occupation_code = :ocpCode or inv.ocp_code= :ocpCode)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 剔除作业单占用异常单据 -->
	<bean id="Inventory.releaseStaByOcpCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_sta set ocp_id = null ,ocp_code = null,is_need_occupied = 1
					where ocp_code is not null  and create_time > sysdate - 7 and status = 1 and type in (21,42)
          			and ocp_id  in  (select id from T_WH_OCP_ORDER where status = 10 and create_time > sysdate -7)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<!-- 剔除作业单占用异常单据 -->
	<bean id="Inventory.releaseStaByOcpCode2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_sta set is_need_occupied = 1
					where ocp_code is  null  and create_time > sysdate - 7 and status in(1,20) and type = 21 
					and (is_need_occupied = 0 or is_need_occupied is null)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 库间移动 - 库存占用 -->
	<bean id="Inventory.findForTransitCrossToOccupyInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select inv.*, stal.quantity as planOccupyQty, inv.inv_owner as owner
			            from t_wh_sku_inventory inv, t_wh_location l,t_wh_sta sta,
			            (
			              select l.sku_id,l.inv_status_id,l.owner,l.sta_id,sum(l.quantity) as quantity 
			              from t_wh_sta_line l where l.sta_id = :staid group by l.sku_id,l.inv_status_id,l.owner,l.sta_id
			            ) stal
			            where inv.location_id = l.id
			                and inv.quantity > 0
			                and l.ou_id = sta.main_wh_id
			                and sta.id = stal.sta_id
			                and sta.id = :staid
			                and stal.sku_id = inv.sku_id
			                and (sta.owner is null or inv.inv_owner = sta.owner)
			                and l.is_available = 1
			                and nvl(l.is_locked,0)=0
			                and (inv.occupation_code is null or inv.occupation_code = '')
			                and exists(select 1 from t_wh_location_transtype lt, t_wh_transaction_type tt
			                      where lt.location_id = l.id and lt.transtype_id = tt.id
			                      and tt.code = 'TRANSIT_CROSS_OUT')
			          order by inv.sku_id
			         for update of inv.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.queryGILocSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
	sku.id as skuId,
	sku.name as skuName,
	sku.code as skuCode,
	sku.key_properties as keyProperties,
	sku.bar_code as barCode,
	sku.jm_code as jmCode,
	sku.supplier_Code as supplierSkuCode,
	sku.ext_code1 as extCode1,
	inv.inv_owner as invOwner,
	inv.quantity as quantity,
	inv.occupation_code as occupationCode,
	brand.name as brandName
from
	t_wh_sku_inventory inv,
	T_BI_BRAND brand,
	t_bi_inv_sku sku
where inv.sku_id = sku.id
	and sku.brand_id=brand.id    
	and inv.quantity !=0
	and inv.location_id=:locId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findStatisticsInv" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
'O'                as info1,
sku.supplier_code        as info2,
sku.en_name            as info3,
'Baozun Kowloon Warehouse'    as info4,
'Castle Peak Road Cheung Sha Wa' as info5,
'Kowloon'            as info6,
'Kowloon'            as info7,
''            as info8,
'HKG'              as info9,
sum(inv.quantity)        as info10,
to_char(sysdate-1,'yyyyMMdd')  as info11
from t_wh_sku_inventory inv,
   t_wh_inventory_status sts,
     --t_ma_tb_shop_info shop,
     t_bi_channel shop,
     --t_ma_sku pro,
     t_bi_inv_sku sku
where inv.inv_owner = shop.code
  and sku.id = inv.sku_id
  and sts.id = inv.status_id
  and inv.quantity > 0
  --and (pro.is_gift is null or pro.is_gift = 0)
  --and pro.id = sku.product_id
  --and pro.supplier_id = 10000064
  and (sku.is_gift is null or sku.is_gift = 0)
  and shop.id = 1
group by sku.supplier_code,sku.en_name
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.findStatisticsInv1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
'O'                as info1,
sku.supplier_code        as info2,
sku.en_name            as info3,
'Baozun Fenhu Warehouse'    as info4,
'Cross of Linhudadao and Laixiulu, Fenhu Economic Development Zone' as info5,
'Suzhou'            as info6,
'Jiangsu'            as info7,
'215200'            as info8,
'CHN'              as info9,
sum(inv.quantity)        as info10,
to_char(sysdate-1,'yyyyMMdd')  as info11
from t_wh_sku_inventory inv,
   t_wh_inventory_status sts,
     t_bi_channel shop,
     --t_ma_sku pro,
     t_bi_inv_sku sku
where inv.inv_owner = shop.code
  and sku.id = inv.sku_id
  and sts.id = inv.status_id
  and inv.quantity > 0
  --and (pro.is_gift is null or pro.is_gift = 0)
  --and pro.id = sku.product_id
  --and pro.supplier_id = 13530
  and (sku.is_gift is null or sku.is_gift = 0)
  and shop.id in( 2522,2842)
group by sku.supplier_code,sku.en_name
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findStatisticsInv2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select 
  'O'                as info1,
  sku.supplier_code        as info2,
  sku.en_name            as info3,
  shop.code,
  decode(shop.code,'1微软中国官方旗舰店','Tmall','China Official Store')   as info4,
  decode(shop.code,'1微软中国官方旗舰店','Tmall flagship store-Cross of Linhudadao and Laixiulu, Fenhu Economic Development Zone','China official store-Cross of Linhudadao and Laixiulu, Fenhu Economic Development Zone') as info5,
  'Suzhou'            as info6,
  'Jiangsu'            as info7,
  '215200'            as info8,
  'CHN'              as info9,
sum(inv.quantity)        as info10,
  to_char(sysdate-1,'yyyyMMdd')  as info11
  from t_wh_sku_inventory inv,
  t_wh_inventory_status sts,
  t_bi_channel shop,
  --t_ma_sku pro,
  t_bi_inv_sku sku
where 
  inv.inv_owner = shop.code
  and sku.id = inv.sku_id
  and sts.id = inv.status_id
  and inv.quantity > 0
  --and (pro.is_gift is null or pro.is_gift = 0)
  and (sku.is_gift is null or sku.is_gift = 0)
  --and pro.id = sku.product_id
  --and pro.supplier_id = 13530
  and shop.id in( 2522,2842)
group by sku.supplier_code,sku.en_name,shop.code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheck.findSequence" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select S_T_WH_INV_CHECK.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.findCountByStaCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select count(1) from t_wh_msg_inbound_order where sta_code = :staCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgInboundOrder.createLineForBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						insert into t_wh_msg_inbound_order_line(id,qty,msg_inorder_id,sku_id,inv_status_id)
						select s_t_wh_msg_inbound_order_line.nextval,qty,:msgId,sku_id,inv_status_id
						from(
						  select sal.sku_id,sal.qty - nvl(svl.qty,0) as qty,sal.inv_status_id
						  from (
						  select l.sku_id,sum(l.quantity) qty,l.inv_status_id
						  from t_wh_sta sta,t_wh_sta_line l
						  where l.sta_id = sta.id
						        and sta.code = :staCode
						  group by l.sku_id,l.inv_status_id) sal
						  left join 
						  (select l.sku_id,sum(l.quantity) qty
						  from t_wh_sta sta,t_wh_stv stv,t_wh_stv_line l
						  where sta.id = stv.sta_id
						        and stv.id = l.stv_id
						        and sta.code = :staCode
						        and stv.status = 10
						  group by l.sku_id) svl on sal.sku_id = svl.sku_id
						  where sal.qty - nvl(svl.qty,0) > 0
						)tmp
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findOutBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku_id,batch_code,production_date,valid_date,expire_date,owner,inv_status_id as intInvstatus,inbound_time,sum(quantity) as quantity from
(
select l.sku_id,l.batch_code,l.production_date,l.valid_date,l.expire_date,l.owner,l.inbound_time,l.inv_status_id,decode(l.direction,2,sum(l.quantity),sum(l.quantity)*-1) as quantity
from t_wh_sta sta,
    #if($groupStaCode)
        t_wh_sta groupSta,
    #end
    t_wh_stv stv,
    t_wh_stv_line l
where sta.id=stv.sta_id
    and stv.id=l.stv_id
    and stv.status=10
    and (stv.type=13 or stv.type=11 or stv.type is null )
    #if($groupStaCode)
    	and sta.group_sta_id = groupSta.id(+)
    	and (groupSta.Code=:groupStaCode or sta.slip_code1=:slipCode1 or sta.slip_code=:slipCode1)
    #elseif($staCode)
        and sta.code =:staCode
    #elseif($slipCode)
        and sta.slip_code =:slipCode
    #elseif($slipCode1)
        and (sta.slip_code1=:slipCode1 or sta.slip_code=:slipCode1)
    #end
group by l.sku_id,l.batch_code,l.production_date,l.valid_date,l.expire_date,l.owner,l.inbound_time,l.inv_status_id,l.direction
)
group by sku_id,batch_code,production_date,valid_date,expire_date,owner,inbound_time,inv_status_id
having sum(quantity) > 0
order by batch_code desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findInboundTimeByBatchCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
       select l.inbound_time from t_wh_st_log l where l.direction=1 and rownum=1 and l.batch_code=:batchCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvSkuNumByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
       select nvl(sum(l.quantity),0) from t_wh_stv_line l where l.stv_id=:stvId
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findTRansitCrossOutList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select l.sku_id,l.owner,l.batch_code,sum(l.quantity) as quantity from t_wh_sta sta,t_wh_stv stv,t_wh_stv_line l where 
sta.id=stv.sta_id
and stv.id=l.stv_id
and sta.type=32
and stv.direction=2
and sta.id=:staId
group by l.sku_id,l.owner,l.batch_code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findInboundError" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select * from 
t_wh_stv_line l
where 
l.stv_id=:stvId
and
(
l.receipt_qty is null
or l.receipt_qty < 1
or l.difference_qty is null
or l.quantity is null
)
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findStvLineDifferenceWithPlanInbound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select staLine.sku_id skuId , (staLine.quantity - nvl(stvLine.quantity,0)) differenceQty 
				from 
				(
				select stal.sku_id sku_id, sum(nvl(stal.quantity,0)) quantity from t_wh_sta_line stal,t_wh_sta sta, t_wh_stv stv where stal.sta_id=sta.id
				and stv.sta_id=sta.id and stv.id = :stvId
				group by stal.sku_id
				) staLine 
				,
				(
				select stvl.sku_id sku_id, sum(nvl(stvl.quantity,0)) quantity from t_wh_stv_line stvl,t_wh_stv stv where stvl.stv_id=stv.id 
				and stv.id = :stvId
				group by stvl.sku_id
				) stvLine
				where staLine.sku_id = stvLine.sku_id(+)
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findOutQtyIsInQty" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select outstv.*,outstv.qty - nvl(instv.qty,0) as quantity from 
(select sku_id,owner,sum(quantity) as qty from t_wh_stv_line where stv_id=:outStvId group by sku_id,owner) outstv
left join 
(select sku_id,owner,sum(quantity) as qty from t_wh_stv_line where stv_id=:inStvId group by sku_id,owner) instv on outstv.sku_id=instv.sku_id  and outstv.owner = instv.owner
where 
instv.qty is null
or outstv.qty != instv.qty
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StvLine.createByGILocId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into t_wh_stv_line (id,batch_code,direction,owner,quantity,sku_cost,version,district_id,inv_status_id,location_id,sku_id,staline_id,stv_id,transtype_id,wh_id,inbound_time,Expire_Date,Valid_Date,Production_Date)
select s_t_wh_stv_line.nextval,inv.batch_code,stv.direction,inv.inv_owner,inv.quantity,inv.sku_cost,0,inv.district_id,inv.status_id,inv.location_id,inv.sku_id,sl.id,stv.id,stv.transtype_id,stv.wh_id,inv.inbound_time,inv.expire_date,inv.valid_date,inv.production_date
from 
t_wh_sku_inventory inv,
t_wh_stv stv,
t_wh_sta_line sl
where
sl.sku_id=inv.sku_id
and sl.inv_status_id=inv.status_id
and sl.owner=inv.inv_owner 
and sl.sta_id=stv.sta_id
and inv.quantity > 0
and inv.location_id=:locId
and stv.id=:stvId
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByStaIdAndSkuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select l.* from t_wh_stv_line l, t_wh_stv stv,
			       T_WH_SKU_INVENTORY inv
			       where stv.sta_id = :staid
			       and l.stv_id = stv.id
			       and l.sku_id = :skuid
			       and l.location_id = inv.location_id
			       and l.inv_status_id = inv.status_id
			       and inv.id = :invid
			       and nvl(l.quantity,0) !=0
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean
		id="InventoryCheckDifferenceLine.generateInventoryCheckDifferenceLine"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			  insert into T_WH_INV_CHECK_DIF_LINE t 
			       (id, quantity, version, inv_check_id, district_id,
			       location_id, sku_id,  status_id, owner, sku_cost)
			  values 
			       (
			       S_T_WH_INV_CHECK_DIF_LINE.Nextval, -:qty, 0,
			       :inventoryCheckId, :districtId,
			       :locationId, :skuId,
			       :invStatusId, :owner, :skuCost 
			       )
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="InventoryCheckDifTotalLine.generateInventoryCheckDifTotalLine"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 insert into T_WH_INV_CK_DIF_TOTAL_LINE  
				      (id, quantity,version ,inv_check_id ,sku_id, status_id,sku_cost)
				values 
				      (S_T_WH_INV_CK_DIF_TOTAL_LINE.Nextval, -:quantity, 0, :invCheckId, 
				      :skuId,  :invStatusId, :skuCost
				      )
				      
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.generateByStvId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
insert into t_wh_stv_line (
    id, batch_code, direction, owner, quantity,
    sku_cost, version, district_id, inv_status_id, 
    location_id, sku_id, staline_id, stv_id, 
    transtype_id, wh_id, inbound_time ,Expire_Date,Valid_Date,Production_Date
    )
select 
    s_t_wh_stv_line.NEXTVAL, t.batch_code, :direction, t.owner, t.quantity,
    t.sku_cost, 1, t.district_id, t.inv_status_id,
    t.location_id, t.sku_id, t.staline_id, :inStvId,
    :transctionId, :addOuId,       
    decode(t.inbound_time,null,sysdate,t.inbound_time),
    t.Expire_Date,t.Valid_Date,t.Production_Date
from T_WH_STV_LINE t
where t.stv_id = :outStvId
and nvl(t.quantity,0) != 0
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransTxLog.generateLogForTransCrossThreePl" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	             insert into T_WH_ST_LOG(id,Direction,District_Id,
		                INVS_TATUS_ID,Location_Id,OWNER,QUANTITY,
		                SKU_ID,TRAN_TIME,WH_ID,TRANSTYPE_ID,production_date,valid_date,expire_date,STV_ID)
		          select S_T_WH_ST_LOG.NEXTVAL, 1 ,stvl.district_id,
		                 stvl.inv_status_id,stvl.location_id,stvl.owner,stvl.quantity,
		                 stvl.sku_id,sysdate, 
		                 :addOuId,  
		                 :transctionId,
		                 stvl.production_date,
		                 stvl.valid_date,
		                 stvl.expire_date,
		                 :inStvId 
		          from t_wh_stv_line stvl
		          where stvl.stv_id = :outStvId
		          and nvl(stvl.quantity,0) != 0
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransTxLog.generateOMSInvLogForTransCrossThreePl"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				insert into t_ma_oms_inv_log(id,channel_id,sku_id,qty,direction,create_time,wh_id,is_share,type)
				  select s_t_ma_oms_inv_log.nextval,shop.id,l.sku_id,l.quantity,l.direction,sysdate,l.wh_id,wh.is_share,1
				  from t_wh_stv_line l,
				       t_wh_stv stv,
				       t_bi_channel shop,
				       t_wh_transaction_type t,
				       t_au_operation_unit au,
				       t_bi_warehouse wh,
				       t_wh_inventory_status sts
				  where l.stv_id = stv.id
				        and nvl(l.quantity,0) != 0
				        and stv.id = :stvId
				        and stv.direction = 1
				        and stv.wh_id = au.id
				        and wh.ou_id = au.id
				        and wh.op_mode = 1 
				        and shop.code = l.owner
				        and l.transtype_id = t.id
				        and sts.id = l.inv_status_id
				        and sts.is_forsale = 1
				        and t.is_synch_taobao = 1
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Inventory.generateNewInventoryForTransCrossThreePl"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
              insert into T_WH_SKU_INVENTORY (id,Inbound_Time,location_id,QUANTITY,BATCH_CODE,District_Id,Sku_Id,
				  Inv_Owner,Sku_Cost,Ou_Id,STATUS_ID)
				  select S_T_WH_INVENTORY.NEXTVAL,decode(t.inbound_time,null,sysdate,t.inbound_time) ,t.location_id,
				  t.quantity,t.batch_code,t.district_id,t.sku_id,
				  t.owner,t.sku_cost,t.wh_id,t.inv_status_id
				  from T_WH_STV_LINE t  
				  where t.stv_id = :stvId
				  and nvl(t.quantity,0) != 0
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findByStaIdAndSkuIdInvStatusId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
            select l.*, l.district_id as typeId,
				    l.location_id as locationId,
				    l.inv_status_id as intInvstatus,
				    l.sku_id as skuId, 
				    l.sku_cost as skuCost,
				    l.owner as owner,
				    l.quantity as quantity    
			from t_wh_stv_line l 
			       where l.stv_id = :stvId
			       and l.sku_id = :skuId
			       and l.inv_status_id = :invStatusId
		         order by l.quantity desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findForPartOutBoundInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select t.*, t.sku_id as skuId, t.district_id as districtId, t.location_id as locationId, t.status_id as statusId, t.ou_id as ouId,
				       t.location_id as locationId,
				       t.ou_id as ouId ,
				       t.status_id as statusId  
				       from t_wh_sku_inventory t
				       where t.occupation_code = :staCode and t.sku_id = :skuId
				       order by t.sku_id
				 	   for update of t.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.occupyInvById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_sku_inventory inv set inv.occupation_code = :occupyCode, inv.is_occupied = 1,inv.quantity = :qty where inv.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.releaseInventoryById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update t_wh_sku_inventory inv set inv.occupation_code = null ,inv.is_occupied = null
					#if ($qty)
						,
						inv.quantity = :qty
				    #end
					where inv.id = :id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.generateNewInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 insert into T_WH_SKU_INVENTORY(
						  id,batch_code,sku_id,quantity,district_Id,
						  location_id,Ou_Id,Status_Id,Inv_Owner,Inbound_Time,
						  Sku_Cost,Occupation_Code,Is_Occupied) 										  
					values(
						  S_T_Wh_Inventory.Nextval, :batchCode, :skuId, :qty, :districtId,
						  :locationId, :ouId, :statusId, :owner, :inboundTime,
						  :skuCost, :occupationCode, 1
						  )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findIsSufficientInventory" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select sku.bar_code as barCode,  sku.jm_code as jmcode,sku.key_properties as keyProperties,
				 t.quantity  as quantity,inv.invQty as invInvstatusId from 
				                  (
				                   select stal.sku_id,sum(nvl(stal.quantity,0)) as quantity
				                        from t_wh_sta_line stal
				                        where stal.sta_id = :staId
				                        group by stal.sku_id  
				                  ) t ,
				                  (
				                     select i.sku_id, sum(nvl(i.quantity,0)) as invQty from 
				                       t_wh_sku_inventory i,t_wh_sta_line stal
				                       where i.sku_id = stal.sku_id 
				                      and i.occupation_code is null
				                      and nvl(i.is_occupied,0) = 0 
				                      and stal.sta_id = :staId
				                      and i.ou_id = :startOuid
				                       group by i.sku_id  
				                  )inv,
				                  t_bi_inv_sku sku
				                  where t.sku_id = inv.sku_id
				                  and t.sku_id = sku.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findLocationSkuByLocId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku.bar_code as barCode,
       sku.key_properties as keyProperties,
       sku.name as skuName,
       sku.supplier_code as supplierSkuCode,
       sum(inv.quantity) as quantity
  from t_wh_sku_inventory inv, t_bi_inv_sku sku
 where inv.sku_id = sku.id
   and inv.quantity > 0
   and (sku.is_sn_sku = 0 or sku.is_sn_sku is null)
   and inv.occupation_code is null
   and inv.location_id = :locId
 group by sku.bar_code, sku.key_properties, sku.name, sku.supplier_code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Inventory.findLocationSNSkuByLocId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select
	sku.bar_code as barCode,
	sku.key_properties as keyProperties,
	sku.name as skuName,
	sku.supplier_code as supplierSkuCode,
	sum(inv.quantity) as quantity
from 
	t_wh_sku_inventory inv,
	t_bi_inv_sku sku
where
	inv.sku_id=sku.id
	and inv.quantity > 0
	and sku.is_sn_sku = 1
	and inv.occupation_code is null
	and inv.location_id=:locId
group by sku.bar_code,sku.key_properties,sku.name,sku.supplier_code 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 库存占用结果，检查逻辑 -->
	<bean id="Inventory.validateOccupyByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		          select sku.id as skuId,sku.code as skuCode,sku.bar_code as barCode,sku.name as skuName,sku.supplier_code as supplierSkuCode,quantity-nvl(sum(qty),0) as quantity 
		          from (
		                 select l.sku_id,l.quantity,inv.quantity as qty 
		                 from(
		                    select stal.sku_id,sum(nvl(stal.quantity,0)) as quantity,sta.code
		                    from t_wh_sta_line stal,t_wh_sta sta
		                    where stal.sta_id = sta.id
		                          and sta.id= :staId
		                    group by stal.sku_id,sta.code
		                  )l 
		                  left join t_wh_sku_inventory inv on l.sku_Id = inv.sku_Id and l.code = inv.occupation_code
		           )oc,t_bi_inv_sku sku
		          where oc.sku_id = sku.id
		          group by sku.id,sku.code,sku.bar_code,sku.supplier_code,quantity,sku.name
		          having quantity != nvl(sum(qty),0)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSkuCostByCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select sku.id,c.sku_cost 
					from t_bi_inv_sku sku,t_wh_sku_inventory_cost c
					where c.sku_id = sku.id(+)
						and sku.code = :code
						and c.comp_ou_id = :cmpid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findSkuProvideInfoPickingDistrict" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[ 
			select * from  
			(
			 select sku.code, sku.bar_code,sku.supplier_code, d.code as districtCode,#if("$!isShare"=="false") t.shopOwner, #end cfg.max_qty as quantity, cfg.warning_pre as warningPre
			 from 
			  t_bi_inv_sku sku,
			  (
			  select distinct sku_id #if("$!isShare"=="false"),shopOwner #end from 
			        (
			            select distinct inv.sku_id #if("$!isShare"=="false"),inv.inv_owner shopOwner #end from T_WH_SKU_INVENTORY inv, t_wh_district d 
			              where inv.ou_id = :ouid
			              and d.ou_id = :ouid
			              and d.type = 1
			            union all 
			            select c.sku_id #if("$!isShare"=="false"),c.shop_owner shopOwner #end from T_WH_PICKING_REPLENISH_CFG c where  c.ou_id = :ouid #if("$!isShare"=="false") and c.shop_owner is not null #end
			       ) 
			  ) t
			  left join t_WH_PICKING_REPLENISH_CFG cfg on cfg.sku_id = t.sku_id and cfg.ou_id = :ouid #if("$!isShare"=="false") and cfg.shop_owner = t.shopOwner #end
			  left join t_wh_district d on d.id = cfg.district_id and d.ou_id = :ouid
			  where t.sku_id = sku.id
			) sku 
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="Sku.findSkuProvideInfoUnMaintain" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			select sku.code, sku.bar_code,sku.supplier_code, #if("$!isShare"=="false")t.inv_owner shopOwner, #end
			       null as quantity, null as warningPre from 
			       (
			            select distinct inv.sku_id #if("$!isShare"=="false"),inv.inv_owner #end from T_WH_SKU_INVENTORY inv 
			                 where inv.ou_id = :ouid
			                 and not exists (select 1 from T_WH_PICKING_REPLENISH_CFG cfg where cfg.sku_id = inv.sku_id and cfg.ou_id = :ouid #if("$!isShare"=="false") and cfg.shop_owner = inv.inv_owner #end)
			       ) t , t_bi_inv_sku sku 
			       where t.sku_id = sku.id

				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaCreateQueue.findToCreateCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select slip_code from T_WH_STA_CREATE_QUEUE q where q.source = :source and (q.status = 1 or q.status=0) and q.type = :type
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StaCreateQueue.findPageBySource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
					select q.id,q.slip_code,q.status as intStatus,q.type as intType,q.receiver,q.mobile,q.address,q.remark,q.FAILURE_INFO as failureInfo
					from T_WH_STA_CREATE_QUEUE q 
					where 
						q.source = :source 
						#if($slipCode)
							and q.slip_code = :slipCode
						#end
						#if($status)
							and q.status = :status
						#else
							and q.status in ( 
							#foreach( $st in $statusList )
 								$st ,
							#end
							-1 )
						#end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaCreateQueue.updateStatusByIds" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
					update T_WH_STA_CREATE_QUEUE q set q.status=:status,q.slip_code=q.slip_code||'_'||to_char(sysdate,'yyyymmddhh24miss')||'_D'
					where id in (
						#foreach( $id in $ids )
								$id ,
						#end
						-1)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaCreateQueue.updateStatusBySlipCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					update T_WH_STA_CREATE_QUEUE q set 
						q.status=:status ,
						q.FAILURE_INFO=:error
					where q.slip_code=:slipCode and q.type = :type
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.unfinishedStaUnMaintainProductExport" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				  select sku.code, sku.bar_code,sku.supplier_code, #if("$!isShare"=="false")t.inv_owner shopOwner, #end
				       null as quantity, null as warningPre from 
				       (   
				     select distinct inv.sku_id #if("$!isShare"=="false"),inv.inv_owner #end from T_WH_SKU_INVENTORY inv ,t_wh_sta sta , t_wh_sta_line line 
				             where inv.ou_id = :ouid
				             and inv.sku_id = line.sku_id
				             and line.sta_id = sta.id
				             and sta.main_wh_id = :ouid
				            #if ($staTypes)
					      	  and (1!= 1 
								  #foreach($statype in $staTypes)
								      or sta.type = $statype 
								  #end
							  )
						    #end
						    #if ($staStatuses)
					      	  and (1!= 1 
								  #foreach($staSts in $staStatuses)
								      or sta.status = $staSts 
								  #end
							  )
						    #end				             
				             and not exists (select 1 from T_WH_PICKING_REPLENISH_CFG cfg where cfg.sku_id = inv.sku_id and cfg.ou_id = :ouid #if("$!isShare"=="false") and cfg.shop_owner = inv.inv_owner #end)
				       ) t , t_bi_inv_sku sku 
				       where t.sku_id = sku.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CartonLine.findErrorSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select sku_id ,sum(qty) as qty
						from (
						  select al.sku_id,sum(quantity) qty
						  from t_wh_sta sta,
						       t_wh_sta_line al
						  where sta.id = al.sta_id
						        and sta.id = :staId
						  group by al.sku_id
						  union all
						  select l.sku_id,-sum(l.qty)
						  from t_wh_carton c,
						       t_wh_carton_line l
						  where c.id = l.carton_id
						        and c.status = 10
						        and c.sta_id = :staId
						        group by l.sku_id
						) t
						group by sku_id
						having sum(qty) < 0
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CartonLine.findDiffSku" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select sku_id ,sum(qty) qty
						from (
						  select al.sku_id,sum(quantity) qty
						  from t_wh_sta sta,
						       t_wh_sta_line al
						  where sta.id = al.sta_id
						        and sta.id = :staId
						  group by al.sku_id
						  union all
						  select l.sku_id,-sum(l.qty)
						  from t_wh_carton c,
						       t_wh_carton_line l
						  where c.id = l.carton_id
						        and c.status = 10
						        and c.sta_id = :staId
						        group by l.sku_id
						) t
						group by sku_id
						having sum(qty) != 0
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CartonLine.findCompleteCartonLineCountByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					
						  select count(l.id)
						  from t_wh_carton c,
						       t_wh_carton_line l
						  where c.id = l.carton_id
						        and c.status = 10
						        and c.sta_id = :staId
						  
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Carton.findRtnStaCartonList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select car.id,car.code,car.seqNo,car.status as intStatus,
						   sta.code as staCode,sta.slip_code as staSlipCode,car.create_time,
						   d.receiver,d.mobile,d.address,sta.type as staType ,sta.slip_code2 as slipCode2
					from t_wh_sta sta,t_wh_carton car,t_wh_sta_delivery_info d
					where sta.id = car.sta_id
						  and sta.id = d.id(+)
					      and sta.main_wh_id = :ouid
					      and sta.status <> 10
					      #if ($staStatuses)
					      	  and (1!= 1 
								  #foreach($staSts in $staStatuses)
								      or sta.status = $staSts 
								  #end
							  )
						  #end
					      #if ($statusList)
					      	  and (1!= 1 
								  #foreach($status in $statusList)
								      or car.status = $status 
								  #end
							  )
						  #end
					      #if($staCode)
					      	and sta.code like :staCode
					      #end
					      #if($staSlipCode)
					      	and sta.slip_code like :staSlipCode
					      #end
					       #if($slipCode2)
					      	and sta.slip_code2 like :slipCode2
					      #end
					      #if($code)
					      	and car.code like :code
					      #end
					      #if($seqNo)
					      	and car.seqno like :seqNo
					      #end
					      #if($startCreateTime)
					      	and car.create_time >= :startCreateTime
					      #end
					      #if($endCreateTime)
					      	and car.create_time <= :endCreateTime
					      #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="CartonLine.deleteByCartonId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[  
					delete  from t_wh_carton_line l where l.carton_id = :cartonId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeVmiStockInCommand.deleteTodoStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
               DELETE FROM T_NIKE_VMI_STOCKIN WHERE STATUS = :status and brand is null
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeVmiStockInCommand.deleteTodoStatusBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
               DELETE FROM T_NIKE_VMI_STOCKIN WHERE STATUS = :status and brand='1'
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="NikeVmiStockInCommand.updateNikeVmiStockInCommandStatus"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
               UPDATE T_NIKE_VMI_STOCKIN SET STATUS =:status WHERE STATUS = :rawStatus and brand is null
			]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="NikeVmiStockInCommand.updateNikeVmiStockInCommandStatusBrand"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
               UPDATE T_NIKE_VMI_STOCKIN SET STATUS =:status WHERE STATUS = :rawStatus and brand='1'
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="MsgRtnInboundOrder.updateIlcshErrorInbound" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
               update t_wh_msg_rtn_inbound_line ml set ml.inv_status_id = 
				(select l.inv_status_id from t_wh_sta_line l,t_wh_sta sta,t_wh_msg_rtn_inbound ob where sta.id = l.sta_Id and sta.code = ob.sta_code and ml.msg_rtn_inorder_id = ob.id and l.sku_id = ml.sku_id)
				where ml.inv_status_id is null and ml.out_status is null and 
				exists(select * from t_wh_msg_rtn_inbound b where b.id = ml.msg_rtn_inorder_id and b.status=0 and b.source = 'ILC-SH')
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeVmiStockInCommand.findSequencesIsExist" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
               <![CDATA[
			 select t.reference_no from T_NIKE_VMI_STOCKIN t where t.reference_no = :sequene
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeReturnReceive.findIsExistsSequence" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 select t.reference_no from t_wh_receive_confirmation t where t.reference_no=:seq
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="StaAdditionalLine.getOneAddLineByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select s.sku_id as skuId from T_WH_STA_ADD_LINE s where s.tracking_no = :trackingNo and s.sta_id = :staid
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaAdditionalLine.findAddLineByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 
select
       i.weight   as weight,
       sku.width  as addLinewidth,
       sku.height as height,
       sku.length as length
  from t_bi_inv_sku sku, t_wh_package_info i
 where 
    i.lpcode =:lpCode
   and i.tracking_no=:trackingNo
   and sku.id=i.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>
	
   <bean id="StaAdditionalLine.deleteAddLineByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	delete from T_WH_STA_ADD_LINE s where s.tracking_no = :trackingNo and s.sta_id = :staid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="WarehouseDistrict.findDistrictByLocationOuId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select d.* from t_wh_district d,t_wh_location l 
			       where l.district_id = d.id
			       and l.code = :location
			       and l.ou_id = d.ou_id
			       and l.ou_id = :ouid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findOutboundPackageStaListPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select
                    sta.id,sta.code, sta.slip_code, sta.type,sta.slip_Code2 as slipCode2,
		            sta.status, sta.owner, sta.create_time,
		            nvl(sta.sku_qty,0) as totalQty,
		            nvl(c.completeQty,0) as skuQty,
		            d.receiver, d.address,
		            case when d.mobile is null then d.telephone
		            when d.telephone is null then d.mobile
		            else d.telephone || ',' || d.mobile end as telephone
		         from t_wh_sta sta left join t_wh_sta_delivery_info d on d.id = sta.id
		         left join 
		         (select sum(nvl(cl.qty,0)) as completeQty, sta.id as id from T_WH_CARTON_LINE cl,T_WH_CARTON c ,t_wh_sta sta
		              where c.id = cl.carton_id
		              and c.sta_id = sta.id
		              group by sta.id
		         ) c on sta.id = c.id
						where
						sta.main_wh_id = :ouid
						and (sta.status = 8 or sta.status = 10)
						and (1 !=1
				       #foreach($statype in $staTypeList)
				      		or sta.type = $statype
				       #end)
					   #if($startCreateTime)
						  and sta.create_time >= :startCreateTime
					   #end
					   #if($endCreateTime)
						  and sta.create_time <= :endCreateTime
					   #end
					   #if($intStatus)
						  and sta.status = :intStatus
					   #end
					   #if($code)
							and sta.code like :code			 
					   #end
					   #if($refSlipCode)
							and sta.slip_code like :refSlipCode			 
					   #end
					    #if($slipCode2)
							and sta.slip_code2 like :slipCode2			 
					   #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findOutboundPackageByStaListPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select
                    sta.id,sta.code, sta.type, sta.status,
		            channel.name owner,sta.plan_outbound_time ,
		           
		            sta.slip_code as refSlipCode,
		            sta.slip_code1,sta.slip_code2
		           
		         from t_wh_sta sta 
		         left join t_bi_channel channel on channel.code=sta.owner
		         
						where
						sta.main_wh_id = :ouid
						and sta.status = 10
						and (1 !=1
				       #foreach($statype in $staTypeList)
				      		or sta.type = $statype
				       #end)
					   #if($startCreateTime)
						  and sta.plan_outbound_time >= :startCreateTime
					   #end
					   #if($endCreateTime)
						  and sta.plan_outbound_time <= :endCreateTime
					   #end
					   
					   #if($refSlipCode)
							and sta.slip_code =:refSlipCode			 
					   #end
					   #if($slipCode1)
							and sta.slip_code1 =:slipCode1			 
					   #end
					   #if($slipCode2)
							and sta.slip_Code2 =:slipCode2			 
					   #end
					   #if($owner)
							and sta.owner =:owner	 
					   #end
					   
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	  
	  
	  
	  <bean id="StockTransApplication.findNikeCRWCartonLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select to_char(sta.plan_outbound_time, 'yyyy/MM/dd hh24/mi/ss') as planLastOutboundTime1,
       carton.seqno as seqno,
       sta.slip_code2 as slipCode2,
       lf.pack_slip_no as packSlipNo,
       sta.slip_code1 as slipCode1,
       sta.slip_code refSlipCode,
       carton.code cartonCode,
       replace(sku.ext_code1,'-','') as extCode2,
       nvl(line.qty, 0) as quantity,
       lf.nfs_store_code as nfsStoreCode,
       lf.division_code as divisionCode,
       nvl(staline.quantity, 0) as nikeQty,
       nvl(staline.quantity, 0) - nvl(line.qty, 0) as varianceQty
       from t_wh_sta sta left join t_wh_sta_lf lf on lf.sta_id=sta.id, t_wh_carton carton,t_wh_carton_line line 
             left join t_bi_inv_sku sku on sku.id=line.sku_id,t_wh_sta_line staline
             where sta.id=staline.sta_id and staline.sku_id=line.sku_id and
             line.carton_id=carton.id and sta.id=carton.sta_id and sta.type=101 and sta.status=10 
						and
						sta.main_wh_id = :ouid
						
					   #if($startCreateTime)
						  and sta.plan_outbound_time >= :startCreateTime
					   #end
					   #if($endCreateTime)
						  and sta.plan_outbound_time <= :endCreateTime
					   #end
					   
					   #if($refSlipCode)
							and sta.slip_code =:refSlipCode			 
					   #end
					   #if($slipCode1)
							and sta.slip_code1 =:slipCode1			 
					   #end
					   #if($slipCode2)
							and sta.slip_Code2 =:slipCode2			 
					   #end
					   #if($owner)
							and sta.owner =:owner	 
					   #end
					   order by carton.seqno,carton.code
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StockTransApplication.findNikeCRWCartonLine1" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                

select to_char(sta.plan_outbound_time, 'yyyy/MM/dd hh24/mi/ss') as planLastOutboundTime1,
     
       sta.slip_code2 as slipCode2,
       lf.pack_slip_no as packSlipNo,
       sta.slip_code1 as slipCode1,
       sta.slip_code refSlipCode,
       replace(sku.ext_code1,'-','') as extCode2,
       nvl(a.qty, 0) as quantity,
       lf.nfs_store_code as nfsStoreCode,
       lf.division_code as divisionCode,
       nvl(staline.quantity, 0) as nikeQty,
       nvl(staline.quantity, 0) - nvl(a.qty, 0) as varianceQty
       from t_wh_sta_line staline 
             left join t_bi_inv_sku sku on sku.id=staline.sku_id,
             t_wh_sta sta 
             left join t_wh_sta_lf lf on lf.sta_id=sta.id,
            
             (select sum(line.qty) as qty,line.sku_id as skuid,carton.sta_id staid from t_wh_carton carton,t_wh_carton_line line
             
             where  carton.id=line.carton_id 
             group by line.sku_id,carton.sta_id) a
             where a.staid=sta.id and staline.sku_id=a.skuid
             and  sta.id=staline.sta_id and
              sta.type=101 and sta.status=10 
						and
						sta.main_wh_id = :ouid
					   #if($startCreateTime)
						  and sta.plan_outbound_time >= :startCreateTime
					   #end
					   #if($endCreateTime)
						  and sta.plan_outbound_time <= :endCreateTime
					   #end
					   
					   #if($refSlipCode)
							and sta.slip_code =:refSlipCode			 
					   #end
					   #if($slipCode1)
							and sta.slip_code1 =:slipCode1			 
					   #end
					   #if($slipCode2)
							and sta.slip_Code2 =:slipCode2			 
					   #end
					   #if($owner)
							and sta.owner =:owner	 
					   #end
					  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
<bean id="RtwDieking.getRtwDiekingList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                 select
	                    d.id,		
						d.batch_code as batchCode,				
						d.sta_code   as staCode,	
						d.sta_type   as staType,			
						d.sta_ref_slip_code  as staRefSlipCode,			
						d.owner,
						d.status,
            			sta.create_time   as  createTime,
						d.main_wh_id	  as	mainWhId,
						d.begin_dieking_time  as	beginDiekingTime,		
						d.end_dieking_time  as		endDiekingTime,
						d.create_id		  as	createId,
						d.create_user	  as	createUser	,
						l.sku_code as skuCode,           
			            l.sku_bar_code as skuBarCode, 
			            l.sku_name as skuName,
			            l.sku_supplier_code as skuSupplierCode,
			            l.sku_key_properties as skuKeyProperties,
			            l.sku_inv_status as skuInvStatus,
			            l.location_code as locationCode,
			            l.dieking_area_code as diekingAreaCode,
			            l.wh_area_code as whAreaCode,
			            l.plan_quantity as planQuantity,
			            l.reality_quantity as realityQuantity,
			            case when d.status = 3 then l.plan_quantity-l.reality_quantity else 0 end as shortPickQty,
			            case when d.status = 3 and l.plan_quantity-l.reality_quantity>0 then '短拣'  else 
			            	case when l.reality_quantity>0 then '非短拣'  else '未拣货' end
			            end as shortPickStatus
             	from t_wh_rtw_dieking_line l
             			left join t_wh_rtw_dieking d on l.rtw_dieking_id = d.id,
             			t_wh_sta sta
						where
						l.main_wh_id = :ouid
						and d.sta_code = sta.code
						#if($shortPickStatus && "$shortPickStatus"=="1")
    					  and d.status = 3 and l.plan_quantity > l.reality_quantity
  					   #end 
						#if($shortPickStatus && "$shortPickStatus"=="2")
            			  and d.status in(3,10) and l.plan_quantity = l.reality_quantity
  					   #end
						#if($shortPickStatus && "$shortPickStatus"=="3")
    					  and d.status <> 3 and l.reality_quantity = 0
  					   #end
					   #if($startCreateTime)
						  and sta.create_time >= :startCreateTime
					   #end
					   #if($endCreateTime)
						  and sta.create_time <= :endCreateTime
					   #end
					   #if($batchCode)
						  and d.batch_code = :batchCode
					   #end
					   #if($staType)
							and d.sta_type = :staType			 
					   #end
					   #if($shopInnerCodes)
				      			and d.owner in (
				                    #foreach($shop in $shopInnerCodes)
				                       '$shop'
				                        ,
				                    #end
				                    '-1'
				                    ) 
				       #end
					   #if($staCode)
							and d.sta_code = :staCode			 
					   #end
					   #if($staRefSlipCode)
							and d.sta_ref_slip_code = :staRefSlipCode			 
					   #end
					   #if($skuCode)
           					and l.sku_code = :skuCode
					   #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- tab1 -->
	<bean id="Carton.findTrunkDetailInfoNoPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					    select 
            c.id,
            c.seqno as seqNo,
            c.code,
            c.status,
            c.create_time as createTime,
            nvl(t.completeQty,0) as completeQty,
            i.lpcode as lpCode,
            c.tracking_no as trackno,
            c.weight,
            wm_concat(s.bar_code)  as skus
          from 
            T_WH_CARTON c ,
            (select sum(nvl(l.qty,0)) as completeQty, c.id from T_WH_CARTON_LINE l,T_WH_CARTON c where l.carton_id = c.id and c.sta_id =:staid group by c.id
            ) t , 
            (select i.lpcode as lpcode,i.tracking_no as trackno from t_wh_sta_delivery_info i where i.id =:staid) i ,  
          T_WH_STA_ADD_LINE l2 ,t_bi_inv_sku s  
          where 
          l2.sku_id=s.id(+)
          and c.id=l2.c_id(+)
          and c.id = t.id(+)
          and c.sta_id =:staid 
          group by c.id,
          c.seqno ,
          c.code,
          c.status,
          c.create_time ,
          nvl(t.completeQty,0),
          i.lpcode,
          c.tracking_no,
          c.weight
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Sku.findPlanExecuteDetailInfoPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select 
                	dd.id,dd.code,dd.barCode,dd.name,dd.supplierCode,dd.quantity,sum(nvl(ctt.qty,0)),case when dd.status = 10 then 0 else dd.quantity-sum(nvl(ctt.qty,0)) end salesQty
				from(
					select 
						sta.status status,l.sta_id staId,sku.id id, sku.code code,sku.bar_code as barCode, sku.name name,sku.supplier_code as supplierCode,sum(nvl(l.quantity,0)) as quantity
			        from 
			        	t_wh_sta_line l, T_BI_INV_SKU sku,t_wh_sta sta
			        where
			        	sta.id = :staid
			        	and l.sta_id = sta.id
			         	and sku.id = l.sku_id
			       	group by sta.status,l.sta_id,sku.id, sku.code,sku.bar_code,sku.name,sku.supplier_code
			    	)dd left join
					T_WH_CARTON ct on dd.staId = ct.sta_id
					left join
					T_WH_CARTON_LINE ctt on ctt.carton_id = ct.id and ctt.sku_id = dd.id
					group by(dd.id,dd.code,dd.barcode,dd.name,dd.supplierCode,dd.quantity,dd.status)
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- tab3 -->
	<bean id="Sku.findCompleteDetailInfoPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		  select c.id, c.seqno as color, c.code as cartonCode, sku.code,sku.bar_code as barCode ,sku.name,sku.supplier_code as supplierCode, 
		           t.completeQty as quantity
		           from T_WH_CARTON c ,
		           T_BI_INV_SKU sku,    
		           (select sum(nvl(cl.qty,0)) as completeQty, c.id as cid, cl.sku_id from T_WH_CARTON_LINE cl,T_WH_CARTON c 
		                where c.id = cl.carton_id
		                and c.sta_id = :staid
		                group by c.id,cl.sku_id
		               ) t
		           where c.sta_id = :staid
		           and c.id = t.cid
		           and t.sku_id = sku.id
		            #if($cartonCode)
						and c.code like :cartonCode			 
				    #end
				    #if($code)
						and sku.code like :code	 
				    #end
				    #if($barCode)
						and sku.bar_code like :barCode			 
				    #end
				    #if($supplyCode)
						and sku.supplier_code like :supplyCode		 
				    #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- tab4 -->
	<bean id="StvLine.findCancelDetailInfoPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			select sku.id, sku.code as skuCode,sku.bar_code as barCode,sku.name as skuName,sku.supplier_code as supplierCode,
                	loc.code as locationCode, sum(nvl(vl.quantity,0)) as quantity
					from t_wh_stv_line vl,
					       t_wh_stv stv,
					       t_bi_inv_sku sku,
					       t_wh_location loc
					       where stv.id = vl.stv_id       
					       and stv.sta_id = :staid
					       and vl.sku_id = sku.id   
					       and vl.location_id = loc.id
					       and stv.status = 0
					       group by sku.id, sku.code,sku.bar_code,
					       sku.name,sku.supplier_code,loc.code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheck.findSkuGroupICheckListPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	select t.*, p.code as owner, u.user_name as creatorName 
                    from T_WH_INV_CHECK t 
                    left join t_bi_channel p on p.ou_id = t.shop_id 
                    left join T_AU_USER u on t.creator_id = u.id 
                  where t.ou_id = :ouid
			      and (1 !=1
			      #foreach($itype in $icheckTypeList)
			          or t.type = $itype
			      #end) 
			      #if($startCreateTime)
			        and t.create_time >= :startCreateTime
			      #end
			      #if($endCreateTime)
			        and t.create_time <= :endCreateTime
			      #end
			      #if($startFinishTime)
			        and t.finish_time >= :startFinishTime
			      #end
			      #if($endFinishTime)
			        and t.finish_time <= :endFinishTime          
			      #end
			      #if($owner)           
			           and p.code = :owner
			      #end
			      #if($code)
			        and t.code like :code
			      #end
			      #if($intStatus)
			        and t.status = :intStatus
			      #end
			      #if($user)	
			           and u.user_name like :user         
			      #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryCheckDifferenceLine.findInvStatusIdByInvCheckId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select min(t.status_id) from T_WH_INV_CHECK_DIF_LINE t where t.inv_check_id = :invCkId
				]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="Inventory.updateOccupyIsNull" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		   		 	update T_WH_SKU_INVENTORY t set t.occupation_code = null ,t.is_occupied = null 
       where t.occupation_code = :occupyCode
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StvLine.findSkuCollectInfoPage" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		   		 select sku.id, sku.code as skuCode, sku.bar_code as barCode, sku.supplier_code as supplierCode,
				       invs.name as intInvstatusName ,nvl(t.sku_cost,0) as skuCost ,t.quantity 
				 from T_WH_INV_CK_DIF_TOTAL_LINE t,t_bi_inv_sku sku ,T_WH_INVENTORY_STATUS invs     
				       where t.inv_check_id = :invcheckid
				       and t.sku_id = sku.id
				       and t.status_id = invs.id
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StvLine.findSkuAdjustDetailInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select sku.id, sku.code skuCode, sku.bar_code as barCode, sku.supplier_code as supplierCode,
				       loc.code as locationCode, invs.name as intInvstatusName, nvl(t.sku_cost,0) as skuCost, t.quantity
				       from T_WH_INV_CHECK_DIF_LINE t ,t_bi_inv_sku sku ,T_WH_INVENTORY_STATUS invs, t_wh_location loc
				       where t.inv_check_id = :invcheckid
				       and t.sku_id = sku.id
				       and t.status_id = invs.id
				       and t.location_id = loc.id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Carton.generateCartonCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		   		select S_T_WH_CARTON_SEQ_NO.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	
	<bean id="CartonLine.findCartonLineGroupByCarId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		   		SELECT sku.ext_code2 AS skuBarcode,qty,sku.id as skuId  FROM (
SELECT l.sku_id,SUM(l.qty) qty FROM t_wh_carton c,t_wh_carton_line l  WHERE c.id=l.carton_id  AND c.sta_id=:id GROUP BY l.sku_id)
a LEFT JOIN t_bi_inv_sku sku ON sku.id=a.sku_id
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Carton.findPrintCartonDetailInfo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			select c.id, sta.code as staCode, c.code as code, c.finish_time as finishTime, t.completeQty as completeQty,c.SEQNO as seqNo,
			               d.receiver, d.telephone as telephone, d.mobile as mobile, d.address
			            from 
			            T_WH_sta sta left join t_wh_sta_delivery_info d on sta.id = d.id,
			            T_WH_CARTON c left join 
			           (
			              select sum(nvl(l.qty,0)) as completeQty, c.id from T_WH_CARTON_LINE l,T_WH_CARTON c 
			              where l.carton_id = c.id 
			              and c.id = :cid group by c.id
			           ) t on c.id = t.id 
			           where c.sta_id = sta.id
			           and c.id = :cid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!--new退仓清单打印 -->
	<bean id="Carton.findPrintCartonDetailInfo2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
      select c.id, sta.code as staCode, c.code as code, c.finish_time as finishTime,sta.owner as owner,
                   t.completeQty as completeQty,c.SEQNO as seqNo,sta.slip_code as slipCode,
                     d.receiver, d.telephone as telephone, d.mobile as mobile, d.address,
                     sku.barCode as barCode,sku.supplierCode as supplierCode,sku.qty as qty,
                     c.weight as weight,skuSize
                  from 
                  T_WH_sta sta left join t_wh_sta_delivery_info d on sta.id = d.id,
                  T_WH_CARTON c left join 
                 (
                    select sum(nvl(l.qty,0)) as completeQty, c.id from T_WH_CARTON_LINE l,T_WH_CARTON c 
                    where l.carton_id = c.id 
                    and c.id = :cid group by c.id
                 ) t on c.id = t.id,
                 (
                 select sku.bar_code as barCode,sku.supplier_code as supplierCode,tl.qty as qty,sku.sku_size as skuSize from T_BI_INV_SKU sku,t_wh_carton_line tl
                  where sku.id in(select tl.sku_id from T_WH_CARTON_LINE tl,T_WH_CARTON c where c.id = tl.carton_id 
                  and tl.carton_id = :cid) and tl.carton_id = :cid and sku.id = tl.sku_id
                  ) sku 
                 where c.sta_id = sta.id
                 and c.id = :cid
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findOutBoundPackageByStaid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			   select 
					  sta.code as code,
					  sta.slip_code as slipCode,
					  c.cartonNumber as cartonNumber,
					  t.productNumber as productNumber,
					  d.receiver as receiver,
					  case when d.mobile is null then d.telephone
					  when d.telephone is null then d.mobile
					  else d.telephone || ',' || d.mobile end as telphone,
					  d.address as address
					from t_wh_sta sta left join t_wh_sta_delivery_info d on sta.id=d.id,
					  (
					   select stv.sta_id as staid,sum(nvl(stvline.quantity,0)) as productNumber
					      from 
					        t_wh_stv stv,
					        t_wh_stv_line stvline
					      where 
					      stv.sta_id = :staid
					      and stvline.stv_id = stv.id
					      and stv.status != 0
					      group by stv.sta_id
					  ) t,
					  (
					    select count(c.id) as cartonNumber,c.sta_id as staid from T_WH_CARTON c where c.sta_id = :staid group by c.sta_id
					  ) c
					where sta.id = c.staid
					and sta.id = t.staid
					and sta.id = :staid 
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="Carton.findPrintCartonDetailInfo3" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			  select c.id, sta.code as staCode, c.code as code, c.finish_time as finishTime,sta.owner as owner,
                   t.completeQty as completeQty,c.SEQNO as seqNo,sta.slip_code1 as slipCode,
                     d.receiver, d.telephone as telephone, d.mobile as mobile, d.address,
                     sku.barCode as barCode,sku.supplierCode as supplierCode,sku.qty as qty,
                     c.weight as weight,skuSize
                  from 
                  T_WH_sta sta left join t_wh_sta_delivery_info d on sta.id = d.id,
                  T_WH_CARTON c left join 
                 (
                    select sum(nvl(l.qty,0)) as completeQty, c.id from T_WH_CARTON_LINE l,T_WH_CARTON c 
                    where l.carton_id = c.id 
                    and c.id = :cid group by c.id
                 ) t on c.id = t.id,
                 (
                 select sku.bar_code as barCode,sku.supplier_code as supplierCode,tl.qty as qty,sku.sku_size as skuSize from T_BI_INV_SKU sku,t_wh_carton_line tl
                  where sku.id in(select tl.sku_id from T_WH_CARTON_LINE tl,T_WH_CARTON c where c.id = tl.carton_id 
                  and tl.carton_id = :cid) and tl.carton_id = :cid and sku.id = tl.sku_id
                  ) sku 
                 where c.sta_id = sta.id
                 and c.id = :cid
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StvLine.findOutBoundPackageLineByStaid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select rownum as skuId, sku.code as skuCode, sku.supplier_code supplierCode,
						sku.ext_code2 as brand, invstat.name as intInvstatusName, sum(nvl(stvline.quantity,0)) as quantity
           		    from 
						  t_wh_stv stv,
						  t_wh_stv_line stvline,
						  t_bi_inv_sku sku,
						  T_WH_INVENTORY_STATUS invstat
						where
						stv.sta_id = :staid
						and stv.status != 0
						and stvline.stv_id = stv.id
						and stvline.sku_id = sku.id
						and stvline.inv_status_id = invstat.id
						group by  sku.code, sku.supplier_code,
						sku.ext_code2, invstat.name,rownum
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findNikeSEQ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select S_T_WH_NIKE_SEQ_NO.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findLevisSEQ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select S_t_levis_dr_seq_no.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findConverseSEQ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select S_T_WH_CONVERSE_SEQ_NO.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findEspritRDSEQ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select S_T_WH_ESPRIT_RD_SEQ_NO.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findEspritIF2RDSEQ" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select S_T_WH_ESPRIT_RD_IF2_SEQ_NO.Nextval from dual
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="NikeVmiStockInCommand.saveNikeVMIStockInBoundSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into T_NIKE_VMI_STOCKIN
					(
			           transfer_prefix,    reference_no,
                 receive_date,       from_location,
                 to_location,        cs2000_item_code,
                 color_code,         size_code,
                 item_ean_upc_code,  quantity,
                 line_sequence_no,   total_line_sequence_no,
                 sap_carton,         status,sap_d_n_no,
                 id
			        )
					values
					(
					  	:transferPrefix,
					  	:referenceNo,
			            :receiveDate,
			            :fromLocation,
			            :toLocation,
			            :cs2000ItemCode,
			            :colorCode,
			            :sizeCode,
			            :itemEanUpcCode,
			            :quantity,            
			            :lineSequenceNo,
			            :totalLineSequenceNo,
			            :sapCarton,
			            :status,
			            :sapDnNo,
			            S_T_NIKE_VMI_STOCKIN.Nextval
					)
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="NikeVmiStockInCommand.saveNikeVMIStockInBoundSqlBrand" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                	insert into T_NIKE_VMI_STOCKIN
					(
			           transfer_prefix,    reference_no,
                 receive_date,       from_location,
                 to_location,        cs2000_item_code,
                 color_code,         size_code,
                 item_ean_upc_code,  quantity,
                 line_sequence_no,   total_line_sequence_no,
                 sap_carton,         status,sap_d_n_no,
                 id,
                 brand,
                 qualifier,
                 lotnumber,
                 create_time
			        )
					values
					(
					  	:transferPrefix,
					  	:referenceNo,
			            :receiveDate,
			            :fromLocation,
			            :toLocation,
			            :cs2000ItemCode,
			            :colorCode,
			            :sizeCode,
			            :itemEanUpcCode,
			            :quantity,            
			            :lineSequenceNo,
			            :totalLineSequenceNo,
			            :sapCarton,
			            :status,
			            :sapDnNo,
			            S_T_NIKE_VMI_STOCKIN.Nextval,
			            :brand,
			            :qualifier,
			            :lotnumber,
			            :createTime
					)
				]]>
			</value>
		</constructor-arg>
	</bean>


	<!-- vmi 转店出库 反馈 -->
	<bean id="StockTransApplication.createTransferOutFeedbackForNike"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			insert into t_wh_receive_confirmation
                (
                 from_resource,
                 reference_no,
                 receive_date,
                 from_location,           
                 to_location,
                 transfer_prefix,
                 upc_code,
                 quantity,
                 status,
                 create_time,
                 type,
                 id
                )
                select :nike,:referenceNo,:receiveDate,:fromLocation, :toLocation,:fromLocation,
                        t.extCode,t.qty,
                        :status,sysdate, 
                        :type,S_T_WH_RECEIVE_CONFIRMATION.Nextval
                from 
                  (       
                  select sku.ext_code2 as extCode,sum(stal.complete_quantity) as qty                         
                         from t_wh_sta_line stal,                    
                              T_BI_INV_SKU sku
                        where 
                        stal.sku_id = sku.id
                        and (sku.is_gift is null or sku.is_gift = 0)
                        and stal.complete_quantity>0
                        and stal.sta_id = :staid
                        group by sku.ext_code2
                  ) t
 				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- vmi-PAC 转店出库 反馈 -->
	<bean id="NikeReturnReceive.createTransferOutFeedbackForNikePac"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			insert into t_wh_receive_confirmation
                (
                 from_resource,
                 reference_no,
                 receive_date,
                 from_location,           
                 to_location,
                 transfer_prefix,
                 upc_code,
                 quantity,
                 status,
                 create_time,
                 type,
                 id
                )values(
                 :nike,:referenceNo,:receiveDate,:fromLocation, :toLocation,:fromLocation,
                        :upc,:quantity,
                        :status,sysdate, 
                        :type,S_T_WH_RECEIVE_CONFIRMATION.Nextval)
                
 				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.updatePLExputCountByPlId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
update t_wh_sta up set pl_output_count=decode(pl_output_count,null,0,pl_output_count)+1 where exists(
select 
 1
from 
  t_wh_sta_picking_list pl,
  t_wh_sta sta
where 
  sta.picking_list_id=pl.id
  and (sta.status =1 or sta.status=2)
  and pl.id=:plId
  and up.id=sta.id
)
 				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- vmi 退仓 反馈 old -->
	<bean id="StockTransApplication.createRtnFeedbackForNike" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
	insert into t_wh_receive_confirmation
        (
         from_resource,
         reference_no,
         receive_date,
         from_location, 
         upc_code,
         quantity,
         status,
         create_time,
         type,
         reason_code,
         id
        )
        select :nike,:referenceNo,:receiveDate, :fromLocation,  
                t.extCode, t.qty,
                :status, sysdate, 
                :type, t.resonCode,
                S_T_WH_RECEIVE_CONFIRMATION.Nextval
        from 
          (       
          select sku.ext_code2 as extCode,sum(stal.complete_quantity) as qty,           
                 case 
                  when  invs.name ='良品' then '125'
                  when  invs.name ='待处理品' then '125'              
                  when  invs.name ='残次品' then sta.imperfect_type
                  else '125' end as resonCode
                 from t_wh_sta_line stal,
                      t_wh_sta sta,                    
                      T_BI_INV_SKU sku, 
                      T_WH_INVENTORY_STATUS invs
                where 
                stal.sku_id = sku.id
                and sta.id=stal.sta_id
                and stal.complete_quantity>0
                and stal.sta_id = :staid
                and stal.inv_status_id = invs.id
                group by sku.ext_code2,invs.name,sta.imperfect_type         
          ) t
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="SkuBarcode.createConverseBarCodes" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					insert into T_BI_INV_SKU_BARCODE
			  (ID, SKU_ID, BARCODE, VERSION)
			  select S_T_BI_INV_SKU_BARCODE.Nextval, sku.id, eg.upc, 0
			    from t_bi_inv_sku sku, t_converse_ever_green eg
			   where sku.supplier_code ||
			         substr(sku.key_properties, instr(sku.key_properties, ',') + 1) = eg.sku
			     and not exists
			   (select * from t_bi_inv_sku t where t.bar_code = eg.upc)
			     and not exists
			   (select * from T_BI_INV_SKU_BARCODE b where b.barcode = eg.upc)
		
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- -->
	<bean id="ConverseVmiReceive.createToshopForPos" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
    		insert into t_converse_vmi_receive
          (
           id,
           TRANSFER_PREFIX,
           CARTON_NUMBER,
           RECEIVE_DATE,
           FROM_LOCATION,
           TO_LOCATION,
           CS2000_ITEM_CODE,
           COLOR_CODE,
           SIZE_CODE,
           INSEAM_CODE,
           ITEM_EAN_UPC_CODE,
           QUANTITY,
           LINE_SEQUENCE_NO,
           TOTAL_LINE_SEQUENCE_NO,
           TRANSFER_NO,
           SAP_CARTON,
           STATUS,
           TYPE,
		   BIN
          )
          select s_t_converse_vmi_receive.nextval,fromLocation,S_T_WH_CONVERSE_SEQ_NO.Nextval,to_date(receiveDate,'yyyyMMdd'), fromLocation, toLocation,
                  t.barCode,t.color,t.sizeCode, '', t.barCode, t.qty,t.sequenceNo,'',S_T_WH_CONVERSE_SEQ_NO.currval,
                  carton,status,receiveType,bin
          from 
            (    
            
            
     select   sku.ext_code2 as barCode , stvl.quantity as qty,
                   SUBSTR(sku.key_properties,0,instr(sku.key_properties,',',1)-1) as color,
                   SUBSTR(sku.key_properties,instr(sku.key_properties,',',1)+1) as sizeCode,
                   rownum as sequenceNo,
                  
                   a.slip_code as carton,
                   to_char(a.finish_time,'yyyyMMdd')as receiveDate ,froml.vmi_code as fromLocation, tol.vmi_code as toLocation,
                   5 as receiveType,0 as status, 
                  decode(inv.name,'良品','A','可销售','A','残次品','C','不可销售','C','待处理品','B','A') as bin 
                   from T_WH_STA a
                   join t_wh_stv v on (v.sta_id=a.id)
join T_WH_STV_line stvl on (v.id=stvl.stv_id)
join t_bi_inv_sku sku on (stvl.sku_id=sku.id)
join T_BI_CHANNEL froml on (froml.code=stvl.owner and froml.vmi_code!='converseyx')
join T_BI_CHANNEL tol on (tol.code=v.owner and froml.vmi_code!='converseyx')
join  T_WH_INVENTORY_STATUS inv on (inv.id=stvl.inv_status_id)
 where a.main_wh_id in (1642,6327) and a.type=21 and v.owner!=stvl.owner and a.status=10  and a.finish_time >=:startDate and a.finish_time<:endDate ) t

        ]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- Converse 退仓反馈 -->
	<bean id="StockTransApplication.createRtnFeedbackForConverse"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		insert into t_converse_vmi_receive
          (
           id,
           TRANSFER_PREFIX,
           CARTON_NUMBER,
           RECEIVE_DATE,
           FROM_LOCATION,
           TO_LOCATION,
           CS2000_ITEM_CODE,
           COLOR_CODE,
           SIZE_CODE,
           INSEAM_CODE,
           ITEM_EAN_UPC_CODE,
           QUANTITY,
           LINE_SEQUENCE_NO,
           TOTAL_LINE_SEQUENCE_NO,
           TRANSFER_NO,
           SAP_CARTON,
           STATUS,
           TYPE,
		   BIN
          )
          select s_t_converse_vmi_receive.nextval,fromLocation,cartonNumber,to_date(receiveDate,'yyyyMMdd'), fromLocation, toLocation,
                  t.barCode,t.color,t.sizeCode, '', t.barCode, t.qty,t.sequenceNo,'',cartonNumber,
                  carton,status,receiveType,bin
          from 
            (
            select 
                   sku.ext_code2 as barCode , stal.complete_quantity as qty,
                   SUBSTR(sku.key_properties,0,instr(sku.key_properties,',',1)-1) as color,
                   SUBSTR(sku.key_properties,instr(sku.key_properties,',',1)+1) as sizeCode,
                   rownum as sequenceNo,:cartonNumber as cartonNumber,:carton as carton,
                   :receiveDate as receiveDate ,:fromLocation as fromLocation, :toLocation as toLocation,
                   :ReceiveType as receiveType,:status as status, 
                   decode(inv.name,'良品','A','可销售','A','残次品','C','不可销售','C','待处理品','B','A') as bin
                   from t_wh_sta_line stal,                    
                        T_BI_INV_SKU sku,
                        T_WH_INVENTORY_STATUS inv
                  where 
                  stal.sku_id = sku.id
                  and stal.complete_quantity>0
                  and inv.id=stal.inv_status_id
                  and stal.sta_id = :staid 
            ) t
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EtamRtnData.createEtamDataRtnSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 insert into T_WH_ETAM_RTN
					(
					  id, bill_code, wh_code, shop_code,
						box_no, out_bound_time,  inv_status,
 						status, version,CREATETIME
					)
					values
					(
					  S_T_WH_ETAM_RTN.Nextval, :billCode, :whCode, :shopCode,
					  :boxNo, :outBoundTime,:invStatus, :todoStatus, 1,sysdate
					)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EtamRtnDataLine.createEtamDataRtnLineSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 insert into T_WH_ETAM_RTN_LINE
					(
					  id, bill_code, sku_code,
 						quantity, inv_status, user_def1,  user_def2, 
 						user_def3, status, version
					)
					values
					(
					  S_T_WH_ETAM_RTN_LINE.Nextval, :billCode,:skuCode,
					  :quantity, :invStatus, :userDef1, :userDef2,
					  :userDef3, :todoStatus, 1
					)
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryStatus.findByVmiSourceAndStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select invs.* from T_WH_INVENTORY_STATUS invs, T_WH_MSG_INVENTORY_STATUS refinvs
					       where refinvs.source = :vmiSource and refinvs.vmi_status = :invStatus and invs.id = refinvs.whstatus
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EtamRtnDataLine.updateEtamRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				 update T_WH_ETAM_RTN_LINE set etam_rtn_id = :id, status = :createStatus where bill_code = :billCode 
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EtamRtnDataLine.findByEtamRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
                 select t.sku_id as skuId,
                           sum(t.quantity) as quantity,
					       t.sku_code as skuCode,
					       t.inv_status as invStatus
					  from T_WH_ETAM_RTN_LINE t
					 where t.etam_rtn_id = :etamRtnId
					   and t.status = :createStatus
					 group by INV_STATUS, sku_code, etam_rtn_id,t.sku_id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="EtamRtnDataLine.updateSkuIdByEtamRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
					<![CDATA[
		                 update t_wh_etam_rtn_line l
							   set l.sku_id = (select k.id
							                     from t_bi_inv_sku k
							                    where k.bar_code = l.sku_code)
							 where etam_rtn_id = :etamRtnId
							   and sku_id is null
	                 ]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="EtamRtnData.updateEtamRtnByTodoStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update T_WH_ETAM_RTN set status =:createStatus  where status =:todoStatus
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EtamRtnData.deleteEtamRtnByTodoStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				delete from T_WH_ETAM_RTN t where t.status = :todoStatus
                 ]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="EtamRtnData.findEtamRtnByCreateStatus" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select t.* from T_WH_ETAM_RTN t where t.status =:createStatus
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="EtamRtnData.updateFinishById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update T_WH_ETAM_RTN set status =10  where id = :id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="EtamRtnDataLine.updateFinishByEtamRtnId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				update T_WH_ETAM_RTN_LINE t set status =10  where etam_rtn_id = :id
                 ]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- ========================== -->
	<bean id="InventoryStatus.findInvStatusForSaleByWarehouseOuId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    select invs.* from  
				       T_WH_INVENTORY_STATUS invs ,
				       T_AU_OPERATION_UNIT o,
				       T_AU_OPERATION_UNIT w       
			       where w.parent_ou_id = o.id
			       and invs.ou_id = o.parent_ou_id
			       and w.id = :warehouseOuId
			       and invs.is_available = 1
			       and invs.is_forsale = 1
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="InventoryStatus.findIsForSaleByCompanyId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				    select * from  T_WH_INVENTORY_STATUS i where i.ou_id = :cmpId 
				    and i.is_available = 1
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StockTransApplication.findWHAndRefCodeStaType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
			select sta.* from t_wh_sta sta 
		          where 
		          sta.slip_code = :refCode
		          and sta.type = :staType
		          and sta.status != 17
		          and sta.status != 15
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="StockTransApplication.findBySlipCodeAndType" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select sta.* from t_wh_sta sta 
					where 
					sta.slip_code = :slipCode
					and sta.type = :type 
					order by sta.create_time desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="TransactionType.findByCodes" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               		select * from  T_WH_TRANSACTION_TYPE t
						where t.code = ''
						#foreach($c in $code )
							or t.code= '$c'
						#end
			]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 物流对账信息导出 -->
	<bean id="PackageInfo.findDeliveryInfoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select 
				       m.name expName,
				       ou.name warehouseName,
				       sta.finish_time outboundTime,
				       h.code handoverCode,
				       shop.name owner,
				       shop.name || '*' || sta.sku_qty as productInfo,
				       p.tracking_no, 
				       sta.slip_code as refSlipCode,
				       sta.sku_qty qty,
				       p.weight,
				       d.city city,
				       d.zipcode zipcode,
				       d.receiver receiver,
				       d.province province,
				       d.district district,
				       d.address address,
              		   case 
             	 		 when d.TRANS_TIME_TYPE = 5 then '当日'
              	         when d.TRANS_TIME_TYPE = 6 then '次日'
              	       else 
              	 	     '普通'
                       end as transTimeType,
				       sta.total_actual totalActual,
				       case when d.mobile is null then d.telephone
				       when d.telephone is null then d.mobile
				       else d.telephone || ',' || d.mobile end as phone
				       
				       from T_WH_PACKAGE_INFO p,
				       T_WH_STA_DELIVERY_INFO d,
				       t_ma_transportator m,       
				       t_au_operation_unit ou,
				       t_bi_channel shop, 
				       T_WH_STA_HO_LIST h,
				       T_WH_STA sta,
				       t_wh_sta_ho_list_line hl
				       where p.sta_delivery_info_id = d.id
				       and d.lpcode = m.exp_code
				       #if($deliveryid)
				       	   and m.id = :deliveryid
				       #end
				       and sta.id = d.id
				       and sta.main_wh_id = ou.id
				       
				       #if($oulist)
				       and (
				       	1 != 1
				       	#foreach($ouid in $oulist )
							or sta.main_wh_id = $ouid
					    #end
				       )	
				       #end
				       #if($ouid)
				       	   and ou.id = :ouid
				       #end
				       #if($starttime)
						  and sta.finish_time >= :starttime
					   #end
					   #if($endtime)
						  and sta.finish_time <= :endtime
					   #end
				       and p.tracking_no = hl.tracking_no
               		   and hl.ho_list_id = h.id
				       and sta.owner = shop.code
				       and sta.status = 10
				       and h.status = 10
				       and exists (select 1 from t_wh_sta_type_sales_mode_ref salemode where sta.type = salemode.sta_type_id)
			]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 物流对账信息导出 统计导出的数量 需小于3W才可以导 -->
	<bean id="PackageInfo.findDeliveryInfoCount" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 select count(1)
				        from T_WH_PACKAGE_INFO      p,
				             T_WH_STA_DELIVERY_INFO d,
				             t_ma_transportator     m,
				             t_au_operation_unit    ou,
				             t_bi_channel           shop,
				             T_WH_STA_HO_LIST       h,
				             T_WH_STA               sta,
				             t_wh_sta_ho_list_line  hl
				       where p.sta_delivery_info_id = d.id
				         and d.lpcode = m.exp_code 
				         #if($deliveryid)
				            and m.id = :deliveryid 
				         #end
					         and sta.id = d.id
					         and sta.main_wh_id = ou.id
					     #if($oulist)
					         and (1 != 1 #foreach($ouid in $oulist) or sta.main_wh_id = $ouid #end) 
					     #end
					     #if($ouid)
					         and ou.id = :ouid #end #if($starttime)
					         and sta.finish_time >= :starttime 
					     #end
					     #if($endtime)
					         and sta.finish_time <= :endtime
					     #end
					         and p.tracking_no = hl.tracking_no
					         and hl.ho_list_id = h.id
					         and sta.owner = shop.code
					         and sta.status = 10
					         and h.status = 10
					         and exists (select 1  from t_wh_sta_type_sales_mode_ref salemode
	              			 where sta.type = salemode.sta_type_id)

			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.countQtyByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	SELECT COUNT(1) 
					FROM t_wh_sta sta,t_wh_package_info p
					WHERE sta.id=p.sta_delivery_info_id
					      AND p.tracking_no= :trackingNo
					      AND sta.status!=17
					      AND sta.id != :staId
					      AND p.lpcode = :lpcode
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.findByStaIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	select p.* from t_wh_package_info p,t_wh_sta_delivery_info d,t_wh_sta sta
					where sta.id = d.id and p.sta_delivery_info_id = d.id and sta.id=:staid
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.findByStaIdWeight" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		select sum(sku.gross_weight*line.complete_quantity) as weight   from  t_wh_sta s,t_wh_sta_line line ,t_bi_inv_sku sku 
		where s.id=line.sta_id and line.sku_id=sku.id and s.id=:staId  and  line.complete_quantity <> 0 
			]]>
			</value>
		</constructor-arg>
	</bean>


<bean id="PackageInfo.findByStaIdWeightAddLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		select sum(sku.gross_weight) as weight from  t_wh_sta_add_line l,t_bi_inv_sku sku  where l.sku_id=sku.id and  l.sta_id=:staId
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.findPackageQtyByStaIdSql" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	SELECT COUNT(pi.id)
					FROM t_wh_package_info pi 
					WHERE pi.status!=1
					      AND pi.sta_delivery_info_id= :staId
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="PackageInfo.findAllPackageInfoByTrackingNo" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	select p.* from t_wh_package_info p,t_wh_sta_delivery_info d,t_wh_sta sta
					where sta.id = d.id and p.sta_delivery_info_id = d.id and p.tracking_no = :trackingNo
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Transportator.getTransByPlId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select exp_code as code , name,is_support_cod as isSupportCod from t_ma_transportator where exp_code is not null and life_cycle_status = 1
				and is_support_cod =(
					select t.is_support_cod from t_ma_transportator t where t.exp_code = (select lpcode from t_wh_sta_picking_list l where l.id = :pickingListId)
				)
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findTransportatorId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 	select m.id from t_ma_transportator m, t_wh_sta_delivery_info d 
				       where d.lpcode = m.exp_code 
				       and m.life_cycle_status = 1
				       and d.id = :deliveryid
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findexpNameByPlid" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select m.name as expName from 
					T_WH_STA_DELIVERY_INFO d, t_ma_transportator m, t_wh_sta sta
				where d.lpcode=m.exp_code 
					and m.exp_code is not null 
					and m.life_cycle_status = 1
					and sta.picking_list_id = :plid
					and sta.id = d.id
					and sta.status != 17
			]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="BiChannel.findTrunkTemplateName" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				 select p.trunk_template_name from t_wh_sta sta ,t_bi_channel p 
				    where sta.picking_list_id = :id 
				    and sta.owner = p.code 
				    and rownum < 2
			]]>
			</value>
		</constructor-arg>
	</bean>


	<bean id="BiChannel.findwarehosueIsRelateShopForPrint" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select p.trunk_template_name
				  from t_bi_channel p
				 where exists (select 1
				          from t_bi_channel_wh_ref w
				         where p.id = w.shop_id
				           and w.wh_ou_id = :ouid)
                ]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="BiChannel.findwarehosueShopForPrintIsSame" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select case when sp.template_type is null 
				                 then ch.name||',通用模板'
				            else ch.name||','||sp.template_type
				       end 
				from t_bi_channel ch
				inner join t_bi_channel_wh_ref ref on ref.channel_id = ch.id
				inner join t_bi_channel_special_action sp on sp.channel_id = ch.id
				where sp.type = 20
				      and ref.wh_ou_id = :ouid
				      and ch.name in (
				                    #foreach( $shop in $shopList )
				                       '$shop'
				                        ,
				                    #end
				                    '-1'
				                    ) 
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="BiChannel.warehosueIsRelateMulitShop" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
						select count(1)
						  from t_bi_channel p, t_bi_channel_wh_ref w
						 where w.wh_ou_id = :ouid
						   and w.channel_id = p.id
						   and p.trunk_template_name is not null
						 #if($innerCoders)
						   and (1 != 1 #foreach($innercode in $innerCoders) or p.code = '$innercode' #end) 
						 #end
                ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="BiChannel.customiztationTemplShop" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select p.name
				  from t_bi_channel p, t_bi_channel_wh_ref w
				 where w.wh_ou_id = :ouid 
				   and w.channel_id = p.id 
				   and p.is_marger = 1 
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="Warehouse.getWHByVmiSource" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
 					select t from Warehouse t where t.vmiSource=:source 
 					#if($sourceWH)
		       			and t.vmiSourceWh = :sourceWH
		       		#end
 					
                ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findExpNameByLpcode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					 select m.name from t_ma_transportator m where m.exp_code=:lpCode and exp_code is not null
			]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaDeliveryInfo.findExportDispatchListInvoiceFileName"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select '开票申请单 ('|| t.name ||') '|| pl.code
					from  
					t_wh_sta sta,
					T_WH_STA_PICKING_LIST pl,
					T_WH_STA_DELIVERY_INFO di,
					t_ma_transportator t
					where 
					di.id = sta.id
					and pl.id=sta.picking_list_id
					and t.exp_code = di.lpcode
					and sta.picking_list_id=:pickingListId
                 ]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="HandOverList.findCurrHandOverListTotal" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select h1.handQty as handoveredQty,h1.unHandQty as unHandoverQty, 
					(h1.handQty+h1.unHandQty) as packageCount, m.name as expName from 
					(
						select  nvl(sum(case when h.status = 10 then h.package_count else 0 end),0) as handQty,
						        nvl(sum(case when h.status = 1 then h.package_count else 0 end),0) as unHandQty,
						        h.lpcode        
								from  t_wh_ho_wh_list tw left join  t_wh_sta_ho_list h on tw.ho_list_id=h.id  where tw.OU_ID= :ouid group by h.lpcode
					) h1, t_ma_transportator m where  h1.lpcode=m.exp_code and exp_code is not null and life_cycle_status = 1
			]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverList.queryCheckHandOverList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select
ho.id,
ho.code,
trans.name as expName,
ho.lpcode,
ho.bill_count as billCount,
ho.package_count as packageCount,
ho.total_weight totalWeight,
ho.sender,
ho.party_a_operator as partyAOperator,
u.user_name as userName
from 
t_ma_transportator trans,
T_WH_STA_HO_LIST ho,
T_AU_USER u
where
ho.operator_id=u.id
and trans.exp_code = ho.lpcode
and ho.status=1
and ho.ou_id = :ouid
			]]>
			</value>
		</constructor-arg>
	</bean>



	<bean id="PackageInfo.findErrorSplitpackStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select pg1.sta_delivery_info_id
							from (select sta_delivery_info_id,count(1) as qty
							      from t_wh_package_info pg,t_wh_sta_delivery_info di,t_wh_sta sta
							      where  di.id = sta.id
				                         and di.id = pg.sta_delivery_info_id
				                         and sta.MAIN_WH_ID = :whOuId
							      		 and (1 !=1
							      	#foreach($tn in $trackingNoList)
							      		or pg.tracking_no = '$tn'
							      	#end)
							      group by sta_delivery_info_id) pg1,
							      (select sta_delivery_info_id, count(1) as qty from t_wh_package_info group by sta_delivery_info_id) pg2
							where pg1.sta_delivery_info_id = pg2.sta_delivery_info_id and pg1.qty != pg2.qty]]>
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 查询预售订单 -->
		<bean id="PackageInfo.findPreSaleTrackingNosById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
							select p.tracking_no from t_wh_package_info p ,t_wh_sta sta
		             where p.sta_delivery_info_id=sta.id(+)
		             and sta.is_pre_sale='1'  
		              #if($packageIds) 
			                  and (1 != 1
			                  #foreach($id in $packageIds)
			                or p.id = $id
			               #end)
		               #else
		                 and 1!=1 
		             #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="PackageInfo.findTrackingNosById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					select hl.tracking_no from 
				       T_WH_STA_HO_LIST_LINE hl, t_wh_package_info p
				       where hl.tracking_no = p.tracking_no
				       and hl.status != 0
				       #if($packageIds) 
				       		and (1 != 1
					       	#foreach($id in $packageIds)
								or p.id = $id
						   #end)
					   #else
						  and 1 != 1
					   #end
				]]>
			</value>
		</constructor-arg>
	</bean>
	<!-- 通过快递运单号list查出仓库id -->
		<bean id="PackageInfo.findWareHousesById" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					  SELECT  DISTINCT (NVL(a.OU_ID,op.OU_ID)) FROM (select p.OU_ID,p.TRACKING_NO from 
				      t_wh_package_info p
				       where
								1=1
				       #if($packageIds) 
				       		and (1 != 1
					       	#foreach($id in $packageIds)
								or p.id = $id
						   #end)
						   #else
						   and 1!= 1
					   #end
) a left join T_WH_OUTBOUND_PACK op ON a.TRACKING_NO=op.TRACKING_NO
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PackageInfo.findByTrackingNoList" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[select pg.id as id,
						       sta.id as staId,
						       pg.lpcode as lpcode,
						       pg.tracking_no as trackingNo,
						       sta.owner as owner,
						       sta.status as staStatus,
						       sta.slip_code as refSlipCode,
						       di.receiver as receiver,
						       di.address as address,
						       pg.weight as weight,
						       pg.status as pgStatus,
						       sta.outbound_time as outboundTime
						from t_wh_package_info pg,
						     t_wh_sta_delivery_info di,
						     t_wh_sta sta						       
						where pg.sta_delivery_info_id = di.id
						      and sta.id = di.id
						      #if($whOuId)
						      	and sta.MAIN_WH_ID = :whOuId
						      #else
						      	and sta.MAIN_WH_ID in (
						      		#foreach($id in $idList)
						      			$id,
						      		#end
						      		-1)
						      #end
						      and (1 != 1
						      	#foreach ($status in $staStatusList)
						      		or sta.status = '$status'
						      	#end
						      )
						      and (1 != 1
						      		#foreach ($tn in $trackingNoList)
						      			or pg.tracking_no = '$tn'
						      		#end)]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="HandOverListLine.findLineByHoListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select l.id as id,
					       l.tracking_no as trackingNo,
					       l.weight as weight,
									hl.last_modify_time as outboundTime,
					       l.status as lineIntStatus
					from T_WH_STA_HO_LIST_LINE l LEFT JOIN T_WH_STA_HO_LIST hl ON  l.ho_list_id=hl.id
					where 
					     l.ho_list_id = :hoListId
					      #if($status)
							and l.status=:status
						  #end
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="HandOverListLine.findExportInfoByHoListId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
					SELECT  l.tracking_no as trackingNo,
		  NVL(sta.owner, tOr.COST_CENTER_DETAIL) as owner,
		  sta.slip_code as refSlipCode,
		  NVL(l.weight,tp.PACKAGE_WEIGHT) as weight,
		  NVL(di.city, tOr.R_CITY) AS CITY,
		  di.zipcode,
		  NVL(di.receiver, tOr.RECEIVER) AS RECEIVER,
			NVL(di.address, tOr.R_ADDRESS) AS ADDRESS,
			 NVL(l.weight,tp.PACKAGE_WEIGHT) as weight,
		  sk.bar_code as barcode,
			NVL(di.mobile,tOr.R_TEL) as mobile,
			nvl(sta.total_actual,0) + nvl(di.transfer_fee,0) as totalActual 
		 FROM T_WH_STA_HO_LIST_LINE l,
		T_WH_PACKAGE_INFO p,
		T_WH_STA_DELIVERY_INFO di,
		T_WH_STA sta,
		T_BI_INV_SKU sk,
		T_WH_TRANS_PACKAGE tp,
		T_WH_TRANS_ORDER tOr
		WHERE l.id=p.HO_LIST_LINE_ID
		AND p.STA_DELIVERY_INFO_ID=di.ID(+)
		AND p.STA_DELIVERY_INFO_ID=sta.id(+)
		AND p.TANS_PG_ID=tp.ID(+)
		AND tp.ORDER_ID=tOr.ID(+)
		AND  p.SKU_ID =sk.ID(+)
		and l.ho_list_id = :hoListId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="HandOverListLine.findExportInfoByHoListId2" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				select
					 l.tracking_no as trackingNo,
				      sta.owner,
				      sta.slip_code as refSlipCode,
				      l.weight as weight,
				      di.city,
				      di.zipcode,
				      di.receiver,
				      di.address,
				      di.weight,
				      max(sk.bar_code) as barcode,
				      case when di.mobile is null then di.telephone
				      when di.telephone is null then di.mobile
				      else di.telephone || ',' || di.mobile end as mobile,
				      nvl(sta.total_actual,0) + nvl(di.transfer_fee,0) as totalActual 
				from T_WH_STA_HO_LIST_LINE l,
					T_WH_STA sta,
					T_WH_STA_DELIVERY_INFO di,
					T_WH_STA_ADD_LINE sl,
					T_BI_INV_SKU sk
				where l.sta_id = sta.id
					and sta.id = di.id
					and l.ho_list_id = :hoListId
					and sl.sta_id(+) = sta.id
					and sk.id(+) = sl.sku_id
				#if($status)
					and l.status=:status
				#end
					group by (
					  l.tracking_no,
		              sta.owner,
		              sta.slip_code,
		              l.weight,
		              di.city,
		              di.zipcode,
		              di.receiver,
		              di.address,
		              di.weight,
		              case when di.mobile is null then di.telephone
		              when di.telephone is null then di.mobile
		              else di.telephone || ',' || di.mobile end,
		              nvl(sta.total_actual,0) + nvl(di.transfer_fee,0)
		            )
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="HandOverListLine.updateCancelLine" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[
				
update T_WH_STA_HO_LIST_LINE line set line.status=0,line.cancel_time=sysdate,line.cancel_reason=:cancelReason,line.cancel_user_id=:userId
where 
line.id in (
select hll.id from 
T_WH_STA_HO_LIST_LINE hll,
t_wh_sta sta
where 
sta.ho_list_id=hll.ho_list_id
and sta.id=hll.sta_id
and sta.status != 10
and sta.ho_list_id=:holId
)

				]]>
			</value>
		</constructor-arg>
	</bean>
	
<bean id="StockTransApplication.findOutboundPickingTaskStaListPage"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                
                select sta.id,sta.code, sta.create_time,sta.slip_code, sta.type,
		            sta.owner,sta.sku_qty ,sta.status,sta.skuTypeNum as skuTypeNum,sta.pickAreasNum,sta.warehouseAreasNum from(
                 select
                    sta.id,sta.code, sta.create_time,sta.slip_code, sta.type,
		            sta.owner,sta.sku_qty ,sta.status,(select count(distinct(line.sku_id))  from  t_wh_sta_line line
          
            where
            sta.id=line.sta_id) as skuTypeNum,(select 
count(distinct(lo.zoon_id)) from  t_wh_location lo where lo.id in(select inv.location_id from t_Wh_Sku_Inventory inv where inv.occupation_code=sta.code) )as  pickAreasNum ,
(select count(distinct(zoon.wh_zoon_id)) from t_wh_pick_zoon zoon where zoon.id in( select 
lo.zoon_id from  t_wh_location lo where lo.id in(select inv.location_id from t_Wh_Sku_Inventory inv where inv.occupation_code=sta.code))) as warehouseAreasNum
		           
		         from t_wh_sta sta 
		      
						where
					    sta.main_wh_id = :ouid
					   and sta.type in(61,62,64,101,102)
						
					    #if($startCreateTime)
						  and sta.create_time >= :startCreateTime
					   #end
					   #if($endCreateTime)
						  and sta.create_time <= :endCreateTime
					   #end
					    #if($code)
							and sta.code like :code			 
					   #end
					   #if($refSlipCode)
							and sta.slip_code like :refSlipCode			 
					   #end
					   #if($intStatype)
							and sta.type = :intStatype			 
					   #end
					   #if($intStatus)
							and sta.status = :intStatus			 
					   #end
					   
					    #if($owner)
							and sta.owner = :owner			 
					   #end) sta
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findThreeDimensional"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select sta.id,sta.code,sta.slip_code,sta.slip_code1,ot.option_value strType,c.name owner,sta.status statusName,sta.memo
				from t_wh_sta sta,t_bi_channel c,t_sys_choose_option ot
				where sta.owner=c.code
					 	and ot.category_code='whSTAType'
      					and sta.type=ot.option_key(+)
					     and (
							1!= 1 
						  #foreach($sId in $staId)
						      or sta.id = $sId 
						  #end
						)
						#if($staCode)
							and sta.code= :staCode
						#end
						#if($slipCode)
			            	and sta.slip_code= :slipCode
			            #end
						#if($slipCode1)
			            	and sta.slip_code1 = :slipCode1
			            #end
						#if($staType)
			            	and sta.type= :staType
			            #end
						#if($owner)
			            	and c.name= :owner
			            #end
			            #if($staStatus)
							#if("$staStatus"=="2")
				            	and sta.status =10
							#elseif("$staStatus"=="1")
				            	and sta.status not in (15,17,10)
				            #end
			            #end
                
				]]>
			</value>
		</constructor-arg>
	</bean>
	
   <bean id="StockTransApplication.findStaLineByStaIdByTest"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
               select s.code as skuCode,s.bar_code as barCode,s.ext_code1 as extCode1,s.ext_code2 as extCode2 ,s.id as skuId,l.*  from  t_wh_sta_line l ,t_bi_inv_sku s
 				where l.sku_id=s.id and l.sta_id =:staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StockTransApplication.findStaByStaIdByTest"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
            select s.picking_list_id as pickingListId,s.*  from t_wh_sta s where s.id=:staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="StockTransApplication.findPickByPidByTest"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
			select p.*  from  t_wh_sta_picking_list p where p.id=:pId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="StockTransApplication.findStaByPidByTest"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
		select s.id from t_wh_sta s  where s.picking_list_id=:pId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<bean id="StaLine.getOutboundDetailList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
                select line.id as id,sk.code as skuCode,sk.bar_code as barCode,sk.name skuName,st.name as intInvstatusName,sk.key_properties as keyProperties,line.quantity as quantity
                 from  t_wh_sta_line line ,T_WH_INVENTORY_STATUS st,T_BI_INV_SKU sk 
                 where line.sku_id=sk.id and line.inv_status_id=st.id and line.sta_id=:staid 
               
					  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtwDiekingLine.getOutboundDetailListCollection"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
             select * from ( select dkl.dieking_area_code as diekingAreaCode ,dkl.wh_area_code as whAreaCode,sum(dkl.plan_quantity) as planQuantity ,sum(dkl.reality_quantity) as realityQuantity ,min(dkl.id) as id 
              from 
              t_wh_sta sta, t_wh_rtw_dieking dk right join  t_wh_rtw_dieking_line dkl on dk.id=dkl.rtw_dieking_id 
              where dk.sta_code=sta.code and sta.id=:staid and dk.main_wh_id=:ouid group by  dkl.dieking_area_code,dkl.wh_area_code )a 
              	]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtwDieking.getOutboundDickingTaskDetailList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
             select dk.id,dk.batch_code,dk.create_time,dk.plan_quantity,dk.reality_quantity,decode(dk.status,1,'未开始拣货',2,'拣货中',3,'短拣',10,'拣货完成') as taskStatus,
                       decode(dk.is_vas,1,'是',0,'否') as vas
              from 
              t_wh_sta sta, t_wh_rtw_dieking dk 
              where dk.sta_code=sta.code and sta.id=:staid and dk.main_wh_id=:ouid 
              	]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="RtwDiekingLineLog.getOutboundDickingZzxDetailList"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
             select * from (  select log.box_code,dk.batch_code as batchCode,log.sku_code,log.sku_bar_code,log.sku_name,log.sku_supplier_code,log.sku_key_properties,log.sku_inv_status,sum(log.dieking_quantity) as diekingQuantity 
                  from   t_wh_rtw_dieking_line_log log left join t_wh_rtw_dieking dk on dk.id=log.rtw_Dieking_Id  
                  where dk.sta_code=:staCode and dk.main_wh_id=:ouid
                  group by log.box_code,dk.batch_code,log.sku_code,log.sku_bar_code,log.sku_name,log.sku_supplier_code,log.sku_key_properties,log.sku_inv_status) a
           	    ]]>
			</value>
		</constructor-arg>
	</bean>
	<bean id="RtwDiekingLine.findDiekingLineListByDiekingId"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
             select dkl.wh_area_code as district, dkl.location_code as locationcode,dkl.dieking_area_code as pickzonecode,dkl.sku_code as skuCode,dkl.sku_bar_code as barCode,
                    dkl.sku_supplier_code as jmcode,dkl.sku_key_properties as keyproperties,dk.create_time as createtime,dkl.plan_quantity as quantity
              from 
              t_wh_rtw_dieking dk, t_wh_rtw_dieking_line dkl 
              where dk.id=dkl.rtw_Dieking_Id and dk.id=:id
              	]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PrintCustomize.getPrintCustomizeByOwnerAndType"
		class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
							t.id as id,
							t.print_type as printTypeInteger,
							t.data_type as dataType,
							t.owner as owner,
							t.master_templet as masterTemplet,
							t.sub_templet as subTemplet,
							t.memo as memo
							from T_BI_PRINT_CUSTOMIZE t
							where 
							t.owner = :owner
							and t.print_type = :printType
              	]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PrintCustomize.findPrintCustomizeByOwner" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
         select * from (       
			select 
              t.id as id,
              t.print_type as printTypeInteger,
              t.data_type as dataType,
              t.master_templet as masterTemplet,
              t.sub_templet as subTemplet,
              t.memo as memo,
              t.templet_code,
           	  wm_concat(aa.name) as owner
              from T_BI_PRINT_CUSTOMIZE t  left join
            ( select  ch.name,sp.custom_print_code from t_bi_channel_special_action sp ,t_bi_channel ch where  sp.channel_id=ch.id ) aa  on t.templet_code=aa.custom_print_code
              where 
              	t.print_type=14
          	group by      
	          	t.id ,
	            t.print_type ,
	            t.data_type ,
	            t.owner,
	            t.master_templet,
	            t.sub_templet,
	            t.memo ,
	            t.templet_code) a where 1=1
	             #if($owner)
					and a.owner like :owner
				#end
              	]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="PrintCustomize.findPcCode" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
							t.id as id,
							t.templet_code
							from T_BI_PRINT_CUSTOMIZE t
							where 
							t.print_type=14
              	]]>
			</value>
		</constructor-arg>
	</bean>
	
		<bean id="StvLine.findOutBatchCodeBackups" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
select sku_id,batch_code,production_date,valid_date,expire_date,owner,inv_status_id as intInvstatus,inbound_time,sum(quantity) as quantity from
(
select l.sku_id,l.batch_code,l.production_date,l.valid_date,l.expire_date,l.owner,l.inbound_time,l.inv_status_id,decode(l.direction,2,sum(l.quantity),sum(l.quantity)*-1) as quantity
from t_arc_sta sta,
    #if($groupStaCode)
        t_arc_sta groupSta,
    #end
    t_arc_stv stv,
    t_arc_stv_line l
where sta.id=stv.sta_id
    and stv.id=l.stv_id
    and stv.status=10
    and (stv.type=13 or stv.type=11 or stv.type is null )
    #if($groupStaCode)
    	and sta.group_sta_id = groupSta.id(+)
    	and (groupSta.Code=:groupStaCode or sta.slip_code1=:slipCode1 or sta.slip_code=:slipCode1)
    #elseif($staCode)
        and sta.code =:staCode
    #elseif($slipCode)
        and sta.slip_code =:slipCode
    #elseif($slipCode1)
        and (sta.slip_code1=:slipCode1 or sta.slip_code=:slipCode1)
    #end
group by l.sku_id,l.batch_code,l.production_date,l.valid_date,l.expire_date,l.owner,l.inbound_time,l.inv_status_id,l.direction
)
group by sku_id,batch_code,production_date,valid_date,expire_date,owner,inbound_time,inv_status_id
having sum(quantity) > 0
order by batch_code desc
				]]>
			</value>
		</constructor-arg>
	</bean>

	<!-- 删除明细配货失败信息 fanht -->
	<bean id="StaErrorLine.deleteByStaErrorLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				delete from T_WH_STA_ERROR_LINE sel
				where sel.sta_id = :staId
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	
	<!-- 查询补货建议数据 -->
	<bean id="StaErrorLine.findReplenishSummarySuggest" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
					select 
       isku.code as skuCode,
       isku.bar_code as barCode,
       isku.supplier_code as supplierCode,
       isku.jm_code as jmCode,
       (select g.name from t_wh_sku_size_config g 
         where g.max_size>greatest(isku.height, isku.length, isku.width)
           and g.min_size<=greatest(isku.height, isku.length, isku.width)) skuSize,
       tab_plan.code as staCode,
       nvl(tab_plan.plan_qty, 0) replenishmentQty,
       tab_exs.code recommenDistrictCode,
       tab_plan.owner owner,
       tab_plan.name name
  from (select sel.sku_id,max(sta.code)  code,sta.owner owner,l.name as name, sum(sel.quantity) plan_qty
          from T_WH_STA_ERROR_LINE sel,t_wh_sta sta
           left join t_bi_channel l on l.code=sta.owner 
         where sta.id = sel.sta_id
           and sta.status = 20
           and sta.main_wh_id = :ouId
           #if($staCode)
           and sta.code= :staCode
           #end
         group by sel.sku_id, sta.owner,l.name) tab_plan,
       (select inv.sku_id, inv.location_id, sum(inv.quantity) have_qty
          FROM t_wh_sku_inventory inv, T_WH_DISTRICT dis
         where (inv.occupation_code is null or inv.occupation_code = '')
           and inv.ou_id = :ouId
           and inv.quantity > 0
           and inv.district_id = dis.id
           and dis.type = 10
         group by inv.sku_id, inv.location_id) tab_have,
       (select inv.sku_id, min(dis.code) code
          FROM t_wh_sku_inventory inv, T_WH_DISTRICT dis
         where dis.type = 1
           and inv.ou_id = :ouId
           and inv.district_id = dis.id
         group by inv.sku_id) tab_exs,
       T_BI_INV_SKU isku,
       t_wh_location loc,
       T_WH_DISTRICT wdis
 	where tab_plan.sku_id = tab_have.sku_id(+)
   	and tab_plan.sku_id = isku.id
   	and tab_plan.sku_id = tab_exs.sku_id(+)
   	and tab_have.location_id = loc.id(+)
  	and loc.district_id = wdis.id(+)
 	order by isku.code
				]]>
			</value>
		</constructor-arg>
	</bean>

	<bean id="StaLine.findPoLineStaList"  class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
                <![CDATA[
				select  
					nvl(sta2.id,sta1.id) as id,
					nvl(sta2.code,sta1.code) as code ,
					nvl(sta2.slip_code,sta1.slip_code) as slipCode,
					sku.name as skuName,
					sku.bar_code as barCode,
					sku.code as skuCode,
					sku.sku_size as skuSize,
					sku.color as color,
					sku.supplier_code as supplierCode,
					line.quantity as quantity,
					line.complete_quantity as completeQuantity
				from wms.t_wh_sta sta1 left join  wms.t_wh_sta  sta2 on 
					sta1.id =sta2.group_sta_id left  join  wms.t_wh_sta_Line line on
					line.sta_id= nvl(sta2.id,sta1.id) ,
					wms.t_bi_inv_sku sku  
					where sku.id=line.sku_id 
					and sta1.id= :staId					  
				]]>
			</value>
		</constructor-arg>
	</bean>
	
	<bean id="StaAdditionalLine.deleteStaAdditionalLineByStaId" class="loxia.dao.support.DynamicQueryHolder">
		<constructor-arg>
			<value>
				<![CDATA[delete t_wh_sta_add_line  where sta_id= :staId
                 ]]>
			</value>
		</constructor-arg>
	</bean>
</beans>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
