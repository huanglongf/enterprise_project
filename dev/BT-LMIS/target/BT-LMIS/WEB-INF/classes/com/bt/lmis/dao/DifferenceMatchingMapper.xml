<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace= "com.bt.lmis.dao.DifferenceMatchingMapper" >
	<select id= "judgeFileNameDuplicate" parameterType= "Object" resultType= "Integer" >
		SELECT count(1) FROM tb_expert_bill WHERE file_name= #{fileName}
	</select>
	<select id= "selectById" parameterType= "Integer" resultType= "com.bt.lmis.model.ExpertBill" >
		SELECT
			id,
			input_time,
			template,
			cycle,
			file_name,
			batch_id,
			count,
			create_time,
			create_user
		FROM tb_expert_bill
		WHERE id= #{id }
	</select>
	<select id= "matchingSFDifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT
			sf.*,
			lmis.id as lmis_id,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.volumn_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			(1 - lmis.discount / 100) AS discount,
			lmis.standard_freight,
			lmis.afterdiscount_freight,
			lmis.insurance_fee,
			lmis.itemtype_name AS DataSouring,
			lmis.volumn * 1000 AS lmisVolumn,
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2)) AS difference,
			lmis.order_type
		FROM (
			SELECT
				date,
				express_number,
				other_area,
				other_company_name,
				charge_weight,
				product_type,
				pay_method,
				fee,
				insurance,
				delegated_picked,
				sumsung_project,
				return_goods,
				fragile_pieces,
				ts,
				amount_payable,
				operator,
				source,
				deliver_company_name,
				deliver_company_phone,
				reach,
				reach_client_name,
				reach_client_phone,
				sender,
				send_time,
				origin_province,
				send_company_address,
				recipient_no,
				deliver_content,
				deliver_num,
				value,
				num,
				volumn,
				dest_province,
				recipient,
				recipient_address,
				courier_no,
				weight,
				return_order_no,
				receiver,
				recipient_time,
				return_related_express_number,
				default1,
				default2,
				default3,
				balance_date,
				pay_net_node,
				subcompany_card_number,
				remark,
				express_content,
				reserve_column3,
				reserve_column4,
				reserve_column5,
				delegated_picked_remark,
				firstWeight,
				addedWeight,
				remark2,
				length,
				width,
				height
			FROM df_sf_template
			WHERE bat_id= #{bat_id}
			ORDER BY id
		) sf
		LEFT JOIN (SELECT * FROM tb_warehouse_express_data_settlement WHERE transport_code='SF') lmis on lmis.express_number = sf.express_number
	</select>
	
	<select id= "matchingSFDifference_oldDriver" parameterType= "Object" resultType= "java.util.Map" >
		SELECT
			sf.*,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.volumn_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			(1 - lmis.discount / 100) AS discount,
			lmis.standard_freight,
			lmis.afterdiscount_freight,
			lmis.insurance_fee,
			lmis.itemtype_name AS DataSouring,
			lmis.volumn * 1000 AS lmisVolumn,
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2)) AS difference
		FROM (
			SELECT
				date,
				express_number,
				other_area,
				other_company_name,
				charge_weight,
				product_type,
				pay_method,
				fee,
				insurance,
				delegated_picked,
				sumsung_project,
				return_goods,
				fragile_pieces,
				ts,
				amount_payable,
				operator,
				source,
				deliver_company_name,
				deliver_company_phone,
				reach,
				reach_client_name,
				reach_client_phone,
				sender,
				send_time,
				origin_province,
				send_company_address,
				recipient_no,
				deliver_content,
				deliver_num,
				value,
				num,
				volumn,
				dest_province,
				recipient,
				recipient_address,
				courier_no,
				weight,
				return_order_no,
				receiver,
				recipient_time,
				return_related_express_number,
				default1,
				default2,
				default3,
				balance_date,
				pay_net_node,
				subcompany_card_number,
				remark,
				express_content,
				reserve_column3,
				reserve_column4,
				reserve_column5,
				delegated_picked_remark,
				firstWeight,
				addedWeight,
				remark2,
				length,
				width,
				height
			FROM df_sf_template
			WHERE bat_id= #{bat_id}
			ORDER BY id
		) sf
		LEFT JOIN (SELECT * FROM tb_warehouse_express_data_settlement WHERE transport_code='SF') lmis on lmis.express_number = sf.express_number
	</select>
	
	
	
	
	
	<select id= "matchingEMSDifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT 
			ems.delivery_time,
			ems.express_number,
			ems.reach,
			ems.type,
			ems.weight,
			ems.postage,
			ems.total_fee,
			ems.balance_postage,
			ems.standard_postage,
			ems.other_fee,
			ems.product,
			ems.num,
			ems.num_in,
			ems.payment_amount,
			ems.big_client,
			ems.receiver,
			ems.staff_name,
			ems.pay_status,
			ems.package_fee,
			ems.premium,
			ems.insurance,
			ems.declare_fee,
			ems.additional_fee,
			ems.single_fee,
			ems.airport_fee,
			ems.return_fee,
			ems.information_fee,
			ems.receive_fee,
			ems.other_postage,
			ems.insurance_procedures,
			ems.length,
			ems.width,
			ems.higth,
			ems.volumn_weight,
			ems.organization_number,
			ems.system_discount,
			ems.adjustment_discount,
			ems.real_weight,
			ems.real_standard_postage,
			ems.balance_freight,
			ems.weight_different,
			ems.freight_different,
		    lmis.warehouse,
		    lmis.cost_center,
		    lmis.store_name,
		    lmis.delivery_order,
		    lmis.weight AS lmisWeight,
		    lmis.volumn,
		    lmis.province,
		    lmis.order_amount,
		    lmis.account_weight,
		    lmis.volumn_account_weight,
		    lmis.charged_weight,
		    lmis.first_weight_price,
		    lmis.added_weight_price,
		    lmis.discount,
		    lmis.standard_freight,
		    lmis.afterdiscount_freight,
		    lmis.insurance_fee,
			cast(lmis.afterdiscount_freight as DECIMAL(28, 2)) - cast(ems.balance_freight as DECIMAL(28, 2)) AS difference,
		    lmis.park_name,
		    lmis.park_cost_center
		FROM 
		     df_ems_template ems  
		LEFT JOIN 
		    tb_warehouse_express_data_settlement  lmis
		on lmis.express_number = ems.express_number
		 WHERE
		 ems.bat_id=#{bat_id};
	</select>

	<!-- 1.0 版 -->
	<!--<select id= "matchingEMSDifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT 
			ems.*,
		    lmis.warehouse,
		    lmis.cost_center,
		    lmis.store_name,
		    lmis.delivery_order,
		    lmis.weight AS lmisWeight,
		    lmis.volumn,
		    lmis.province,
		    lmis.order_amount,
		    lmis.account_weight,
		    lmis.volumn_account_weight,
		    lmis.charged_weight,
		    lmis.first_weight_price,
		    lmis.added_weight_price,
		    lmis.discount,
		    lmis.standard_freight,
		    lmis.afterdiscount_freight,
		    lmis.insurance_fee,
			cast(lmis.afterdiscount_freight as DECIMAL(28, 2)) - cast(ems.balance_freight as DECIMAL(28, 2)) AS difference,
		    lmis.park_name,
		    lmis.park_cost_center
		FROM (
	    	SELECT
		        delivery_time,
		        express_number,
		        reach,
		        type,
		        weight,
		        postage,
		        total_fee,
		        balance_postage,
		        standard_postage,
		        other_fee,
		        product,
		        num,
		        num_in,
		        payment_amount,
		        big_client,
		        receiver,
		        staff_name,
		        pay_status,
		        package_fee,
		        premium,
		        insurance,
		        declare_fee,
		        additional_fee,
		        single_fee,
		        airport_fee,
		        return_fee,
				information_fee,
				receive_fee,
				other_postage,
				insurance_procedures,
				length,
				width,
				higth,
				volumn_weight,
				organization_number,
				system_discount,
				adjustment_discount,
		        real_weight,
		        real_standard_postage,
		        balance_freight,
		        weight_different,
		        freight_different
		    FROM df_ems_template
		    WHERE bat_id= #{bat_id }
		    ORDER BY id
		) ems 
		LEFT JOIN (SELECT * FROM tb_warehouse_express_data_settlement WHERE transport_code='EMS') lmis on lmis.express_number = ems.express_number;
	</select>-->	
	
	
	<select id= "matchingYTODifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT	
			yto.transport_time,
			yto.express_number,
			yto.origin,
			yto.province_dest,
			yto.city_dist,
			yto.weight,
			yto.charge_weight,
			yto.firstWeightPrice,
			yto.addedWeightPrice,
			yto.discount,
			yto.standard_freight,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.volumn,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			lmis.standard_freight AS lmisStandardFreight,
			lmis.insurance_fee,
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(yto.standard_freight as DECIMAL(28, 2)) AS freightDifference,
			cast(lmis.charged_weight as DECIMAL(28, 2)) - cast(yto.charge_weight as DECIMAL(28, 2)) AS chargedWeightDifference,
			lmis.remark,
			lmis.park_name,
		    lmis.park_cost_center
		FROM 
		df_yto_template	yto
		LEFT JOIN 
		 tb_warehouse_express_data_settlement lmis 
		 on lmis.express_number = yto.express_number
		  WHERE 
		  yto.bat_id= #{bat_id}
	</select>
	<!-- 1.0 版 -->
	<!-- <select id= "matchingYTODifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT
			yto.*,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.volumn,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			lmis.standard_freight AS lmisStandardFreight,
			lmis.insurance_fee,
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(yto.standard_freight as DECIMAL(28, 2)) AS freightDifference,
			cast(lmis.charged_weight as DECIMAL(28, 2)) - cast(yto.charge_weight as DECIMAL(28, 2)) AS chargedWeightDifference,
			lmis.remark,
			lmis.park_name,
		    lmis.park_cost_center
		FROM (
			SELECT
				transport_time,
				express_number,
				origin,
				province_dest,
				city_dist,
				weight,
				charge_weight,
				firstWeightPrice,
				addedWeightPrice,
				discount,
				standard_freight
			FROM df_yto_template
			WHERE bat_id= #{bat_id}
			ORDER BY id
		) yto
		LEFT JOIN (SELECT 
		    express_number,
		    warehouse,
			cost_center,
			store_name,
			epistatic_order,
			weight,
			volumn,
			province,
			order_amount,
			account_weight,
			charged_weight,
			first_weight_price,
			added_weight_price,
			standard_freight,
			insurance_fee,
			remark,
			park_name,
		    park_cost_center
		 FROM tb_warehouse_express_data_settlement WHERE transport_code='YTO' or  transport_code='YL_YTO') lmis on lmis.express_number = yto.express_number
	</select>-->
	<select id= "matchingSTODifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT
		    sto.id,
			sto.transport_product_type,
			sto.transport_direction,
			sto.deliver_date,
			sto.transport_time,
			sto.express_number,
			sto.store,
			sto.order_number,
			sto.orign,
			sto.province_dest,
			sto.city_dest,
			sto.weight,
			sto.sku_number,
			sto.length,
			sto.width,
			sto.higth,
			sto.volumn,
			sto.order_amount,
			sto.firstWeigthPrice,
			sto.addedWeightPrice,
			sto.discount,
			sto.standard_freight,
			sto.afterDiscount_freight,
			sto.insurance,
			sto.other,
			sto.total_fee,
			sto.remark,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.volumn AS lmisVolumn,
			lmis.province,
			lmis.order_amount AS lmisOrderAmount,
			lmis.account_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			lmis.insurance_fee,
			lmis.standard_freight AS lmisStandardFreight,
			lmis.remark AS lmisOtherRemark,
			lmis.total_fee AS lmisTotalFee,
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sto.standard_freight as DECIMAL(28, 2)) AS difference,
			lmis.remark AS lmisRemark,lmis.remark,
			lmis.park_name,
		    lmis.park_cost_center
		FROM 
		 df_sto_template   sto
		LEFT JOIN 
		  tb_warehouse_express_data_settlement lmis  on lmis.express_number = sto.express_number
		  where sto.bat_id= #{bat_id}
		  ORDER BY sto.id
	</select>
	
	
	
	<!--1.0版  -->
	<!--<select id= "matchingSTODifference" parameterType= "Object" resultType= "java.util.Map" >
		SELECT
			sto.*,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.volumn AS lmisVolumn,
			lmis.province,
			lmis.order_amount AS lmisOrderAmount,
			lmis.account_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			lmis.insurance_fee,
			lmis.standard_freight AS lmisStandardFreight,
			lmis.remark AS lmisOtherRemark,
			lmis.total_fee AS lmisTotalFee,
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sto.standard_freight as DECIMAL(28, 2)) AS difference,
			lmis.remark AS lmisRemark,lmis.remark,
			lmis.park_name,
		    lmis.park_cost_center
		FROM (
			SELECT
				transport_product_type,
				transport_direction,
				deliver_date,
				transport_time,
				express_number,
				store,
				order_number,
				orign,
				province_dest,
				city_dest,
				weight,
				sku_number,
				length,
				width,
				higth,
				volumn,
				order_amount,
				firstWeigthPrice,
				addedWeightPrice,
				discount,
				standard_freight,
				afterDiscount_freight,
				insurance,
				other,
				total_fee,
				remark
		  	FROM df_sto_template
		  	WHERE bat_id= #{bat_id}
		  	ORDER BY id
		) sto
		LEFT JOIN (SELECT 
		    express_number,
		    warehouse,
			cost_center,
			store_name,
			epistatic_order,
			weight,
			volumn,
			province,
			order_amount,
			account_weight,
			charged_weight,
			first_weight_price,
			added_weight_price,
			insurance_fee,
			standard_freight ,
			remark ,
			total_fee,
			park_name,
		    park_cost_center
		 FROM tb_warehouse_express_data_settlement WHERE transport_code='STO' or  transport_code='YL_STO') lmis on lmis.express_number = sto.express_number
	</select>-->
	<select id='getReturnData' parameterType="java.util.Map" resultType= "java.util.Map">
	   select 
	   * 
	   from  tb_express_return_storage 
	   where waybill=#{waybill} limit 0,1;
	</select>
	<insert id="createReturnTab" parameterType= "Object">
	insert into df_sf_template_return select  a.* from  df_sf_template a left join tb_warehouse_express_data_settlement b on a.express_number = b.express_number  where a.bat_id=#{bat_id} and b.id is null
	</insert>
	<insert id="deleteReturnTabCYPP" parameterType= "Object">
	delete from  df_sf_template_return where bat_id=#{bat_id} 
	</insert>
	<insert id="deleteReturnTab" parameterType= "Object">
	delete from  tb_expressbill_detail_retrun where bat_id=#{bat_id} 
	</insert>
	<insert id="createWarehouseTab" parameterType= "Object">
	insert into tb_expressbill_detail_raw
(
create_time,
create_user,
update_time,
update_user,
billingcycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
is_verification,
reason,
bat_id,
master_id,
account_id,
account_name,
status,express_name,producttype_name)


 select 
 a.create_time,
a.create_user,
a.update_time,
a.update_user,
a.billingcycle,
a.month_account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,
a.is_verification,
a.reason,
a.bat_id,
a.master_id,
a.account_id,
a.account_name,
a.status,a.express_name,a.producttype_name
 
 from  tb_expressbill_detail_retrun a left join df_sf_waybill b on a.waybill = b.waybill  where a.bat_id=#{bat_id}  and b.bat_id is null	
    </insert>
	<insert id="deleteWarehouseTabCYPP" parameterType= "Object">
	delete from  df_sf_template_warehouse  where bat_id=#{bat_id};
	delete from df_sf_waybill where bat_id=#{bat_id};
	</insert> 
	<insert id="deleteWarehouseTab" parameterType= "Object">
	delete from  tb_expressbill_detail_raw  where bat_id=#{bat_id};
	delete from df_sf_waybill where bat_id=#{bat_id};
	</insert> 
	<select id= "matchingSFDifferenceSettle" parameterType= "Object" resultType= "java.util.Map" >
		 SELECT
sf.date,
sf.express_number,
sf.other_area,
sf.other_company_name,
sf.charge_weight,
sf.product_type,
sf.pay_method,
sf.fee,
sf.insurance,
sf.delegated_picked,
sf.sumsung_project,
sf.return_goods,
sf.fragile_pieces,
sf.ts,
sf.amount_payable,
sf.operator,
sf.source,
sf.deliver_company_name,
sf.deliver_company_phone,
sf.reach,
sf.reach_client_name,
sf.reach_client_phone,
sf.sender,
sf.send_time,
sf.origin_province,
sf.send_company_address,
sf.recipient_no,
sf.deliver_content,
sf.deliver_num,
sf.value,
sf.num,
sf.volumn,
sf.dest_province,
sf.recipient,
sf.recipient_address,
sf.courier_no,
sf.weight,
sf.return_order_no,
sf.receiver,
sf.recipient_time,
sf.return_related_express_number,
sf.default1,
sf.default2,
sf.default3,
sf.balance_date,
sf.pay_net_node,
sf.subcompany_card_number,
sf.remark,
sf.express_content,
sf.reserve_column3,
sf.reserve_column4,
sf.reserve_column5,
sf.delegated_picked_remark,
sf.firstWeight,
sf.addedWeight,
sf.remark2,
sf.length,
sf.width,
sf.height,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.volumn_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			(1 - lmis.discount / 100) AS discount,
			lmis.standard_freight,
			lmis.afterdiscount_freight,
			lmis.insurance_fee,
			lmis.itemtype_name AS DataSouring,
			lmis.volumn*1000  AS lmisVolumn,
           cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2)) AS difference,
			lmis.order_type,
             case 
             when
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2))=0.00 then '无差异' 
            when lmis.itemtype_name!=sf.product_type then '产品类型差异'
            when sf.charge_weight!=lmis.charged_weight then '计费重量差异'
            when  lmis.first_weight_price!=sf.firstWeight then '报价差异'
            end AS difference_reason
		FROM 
			 df_sf_template sf
		, tb_warehouse_express_data_settlement  lmis where 
        sf.id &gt;=#{Min} and sf.id&lt;#{Max}
          and 
         sf.bat_id= #{bat_id}
           and lmis.transport_code='SF'  
      and    lmis.express_number = sf.express_number
       
	</select>
	<select id="returnTableContent" parameterType= "Object" resultType= "java.util.Map">
	SELECT 
    a.bat_id, a.waybill
FROM
    tb_expressbill_detail_retrun a
WHERE
    EXISTS( SELECT 
            1
        FROM
            tb_express_return_storage b
        WHERE
            a.waybill = b.waybill
                AND a.bat_id = #{bat_id})
	</select>
	
	
	 <select id="returnTableContentCYPP" parameterType= "Object" resultType= "java.util.Map">
	SELECT      
                sf.bat_id,
                sf.product_type,
                sf.length,
			    sf.width,
		        sf.height,
		        sf.date,
				sf.express_number,
				sf.other_area,
				sf.other_company_name,
				sf.charge_weight,
				sf.pay_method,
				sf.fee,
				sf.insurance,
				sf.delegated_picked,
				sf.sumsung_project,
				sf.fragile_pieces,
				sf.amount_payable,
				sf.operator,
				sf.source,
				sf.deliver_company_name,
				sf.deliver_company_phone,
				sf.reach,
				sf.reach_client_name,
				sf.reach_client_phone,
				sf.sender,
				sf.send_time,
				sf.origin_province,
				sf.send_company_address,
				sf.recipient_no,
				sf.deliver_content,
				sf.deliver_num,
				sf.value,
				sf.num,
				sf.volumn,
				sf.dest_province,
				sf.recipient,
				sf.recipient_address,
				sf.courier_no,
				sf.weight,
				sf.return_order_no,
				sf.receiver,
				sf.recipient_time,
				sf.return_related_express_number,
				sf.default1,
				sf.default2,
				sf.default3,
				sf.balance_date,
				sf.pay_net_node,
				sf.subcompany_card_number,
				sf.remark,
				sf.express_content,
				sf.reserve_column3,
				sf.reserve_column4,
				sf.reserve_column5,
				sf.delegated_picked_remark,
				sf.firstWeight,
				sf.addedWeight,
				sf.remark2,
				sf.ts,
				sf.return_goods,
			lmis.warehouse,   
			lmis.cost_center, 
			lmis.store_name, 	
			lmis.epistatic_order, 
			lmis.weight AS lmisWeight,  
			lmis.re_province as province,
			lmis.order_amount,  
			'' as account_weight,
			'' as volumn_account_weight,
			'' as charged_weight,
			'' as first_weight_price,
			'' as added_weight_price,
			''  AS discount,
			'' as standard_freight,
			'' as afterdiscount_freight,
			'' as insurance_fee,
			lmis.product_type AS DataSouring,
			lmis.lmisVolumn ,
			'' as difference,
			lmis.order_type ,
			lmis.park_name,lmis.park_cost_center  
		FROM (
			SELECT
			    bat_id,
				date,
				express_number,
				other_area,
				other_company_name,
				charge_weight,
				product_type,
				pay_method,
				fee,
				insurance,
				delegated_picked,
				sumsung_project,
				return_goods,
				fragile_pieces,
				ts,
				amount_payable,
				operator,
				source,
				deliver_company_name,
				deliver_company_phone,
				reach,
				reach_client_name,
				reach_client_phone,
				sender,
				send_time,
				origin_province,
				send_company_address,
				recipient_no,
				deliver_content,
				deliver_num,
				value,
				num,
				volumn,
				dest_province,
				recipient,
				recipient_address,
				courier_no,
				weight,
				return_order_no,
				receiver,
				recipient_time,
				return_related_express_number,
				default1,
				default2,
				default3,
				balance_date,
				pay_net_node,
				subcompany_card_number,
				remark,
				express_content,
				reserve_column3,
				reserve_column4,
				reserve_column5,
				delegated_picked_remark,
				firstWeight,
				addedWeight,
				remark2,
				length,
				width,
				height
			FROM df_sf_template_return
	        where bat_id=#{bat_id}
		) sf
		, (SELECT 
    waybill,
    warehouse_name AS warehouse,
    store_name AS store_name,
    cost_center AS cost_center,
    related_no AS epistatic_order,
    re_weight AS weight,
    out_order AS order_amount,
    job_type AS order_type,
    itemtype_name AS product_type,
     re_volumn AS lmisVolumn,
     re_length as length,
     re_width as width,
     re_higth as height,
     re_province,park_name,park_cost_center
FROM
    tb_express_return_storage
) lmis where lmis.waybill = sf.express_number group by sf.express_number
	
	
	</select>
	<select id="warehouseTableContent" parameterType= "Object" resultType= "java.util.Map">
	SELECT      
			sf.date,sf.product_type,
				sf.express_number,
				sf.other_area,
				sf.other_company_name,
				sf.charge_weight,
				sf.pay_method,
				sf.fee,
				sf.insurance,
				sf.delegated_picked,
				sf.sumsung_project,
				sf.fragile_pieces,
				sf.amount_payable,
				sf.operator,
				sf.source,
				sf.deliver_company_name,
				sf.deliver_company_phone,
				sf.reach,
				sf.reach_client_name,
				sf.reach_client_phone,
				sf.sender,
				sf.send_time,
				sf.origin_province,
				sf.send_company_address,
				sf.recipient_no,
				sf.deliver_content,
				sf.deliver_num,
				sf.value,
				sf.num,
				sf.volumn,
				sf.dest_province,
				sf.recipient,
				sf.recipient_address,
				sf.courier_no,
				sf.weight,
				sf.return_order_no,
				sf.receiver,
				sf.recipient_time,
				sf.return_related_express_number,
				sf.default1,
				sf.default2,
				sf.default3,
				sf.balance_date,
				sf.pay_net_node,
				sf.subcompany_card_number,
				sf.remark,
				sf.express_content,
				sf.reserve_column3,
				sf.reserve_column4,
				sf.reserve_column5,
				sf.delegated_picked_remark,
				sf.firstWeight,
				sf.addedWeight,
				sf.remark2,
				sf.ts,
				sf.return_goods,
				lmis.warehouse,   
				lmis.cost_center, 
				lmis.store_name, 	
				lmis.epistatic_order, 
				lmis.weight AS lmisWeight,  
				lmis.province as province,
				lmis.order_amount,  
				'' as account_weight,
				'' as volumn_account_weight,
				'' as charged_weight,
				'' as first_weight_price,
				'' as added_weight_price,
				''  AS discount,
				'' as standard_freight,
				'' as afterdiscount_freight,
				'' as insurance_fee,
				lmis.itemtype_name  AS DataSouring,
				lmis.lmisVolumn ,
				'' as difference,
				lmis.order_type,
				lmis.park_name,lmis.park_cost_center
		FROM (
			SELECT
				date,
				express_number,
				other_area,
				other_company_name,
				charge_weight,
				product_type,
				pay_method,
				fee,
				insurance,
				delegated_picked,
				sumsung_project,
				return_goods,
				fragile_pieces,
				ts,
				amount_payable,
				operator,
				source,
				deliver_company_name,
				deliver_company_phone,
				reach,
				reach_client_name,
				reach_client_phone,
				sender,
				send_time,
				origin_province,
				send_company_address,
				recipient_no,
				deliver_content,
				deliver_num,
				value,
				num,
				volumn,
				dest_province,
				recipient,
				recipient_address,
				courier_no,
				weight,
				return_order_no,
				receiver,
				recipient_time,
				return_related_express_number,
				default1,
				default2,
				default3,
				balance_date,
				pay_net_node,
				subcompany_card_number,
				remark,
				express_content,
				reserve_column3,
				reserve_column4,
				reserve_column5,
				delegated_picked_remark,
				firstWeight,
				addedWeight,
				remark2,
				length,
				width,
				height
			FROM df_sf_template_warehouse
	       where bat_id=#{bat_id}
			ORDER BY id
		) sf
		LEFT JOIN (SELECT express_number, warehouse AS warehouse,store_name as store_name,cost_center as cost_center,epistatic_order as epistatic_order ,weight as  weight, order_amount as order_amount ,order_type as order_type,
                         itemtype_name as itemtype_name , (length*width*higth) as lmisVolumn,park_name,park_cost_center,province FROM tb_warehouse_express_data WHERE transport_code='SF') lmis on lmis.express_number = sf.express_number
	</select>
	
	<select id='getIdByBatId' parameterType= "Object" resultType= "java.util.Map">
	SELECT 
    (SELECT 
            id AS min_id
        FROM
            tb_expressbill_detail
        WHERE
            bat_id = #{bat_id}
        ORDER BY id
        LIMIT 0 , 1) AS min_id,
    (SELECT 
            id AS max_id
        FROM
            tb_expressbill_detail
        WHERE
            bat_id = #{bat_id}
        ORDER BY id DESC
        LIMIT 0 , 1) AS max_id;
	</select>
	<select id='getIdByBatIdCYPP' parameterType= "Object" resultType= "java.util.Map">
	SELECT 
    (SELECT 
            id AS min_id
        FROM
            df_sf_template
        WHERE
            bat_id = #{bat_id}
        ORDER BY id
        LIMIT 0 , 1) AS min_id,
    (SELECT 
            id AS max_id
        FROM
            df_sf_template
        WHERE
            bat_id = #{bat_id}
        ORDER BY id DESC
        LIMIT 0 , 1) AS max_id;
	</select>
	
	
	<select id='test' parameterType= "java.util.HashMap" resultType= "java.util.HashMap">
	select  * from  df_sf_result1 where id&gt;=#{Min} and id&lt;#{Max};
	</select>
	
	
	
	<update id="updateWarning"  parameterType= "Object" >
	 
	
	
	</update>
	
	
	
	<select id= "matchingSFDifferenceSettle_insert0" parameterType= "Object" resultType= "java.util.Map" >
		insert into ${table_name} (
		bat_id,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,reason,is_verification,master_id,express_name,producttype_name,last_fee,detail_status)
select  
a.bat_id,
a.billingcycle,
a.account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,
b.warehouse,
b.store_name,
b.cost_center,
b.epistatic_order,
b.sku_number,
b.length,
b.width,
b.higth,
b.volumn,
b.transport_time,
b.delivery_address,
b.province,
b.city,
b.weight,
b.transport_code,
b.itemtype_code,
b.order_amount,
b.volumn_weight,
b.charged_weight,
b.first_weight_price,
b.added_weight_price,
(1 - b.discount / 100) as discount,
b.standard_freight,
b.afterdiscount_freight,
b.insurance_fee,
  CASE
        WHEN CAST(b.total_fee AS DECIMAL (28 , 2 )) - CAST(a.total_charge AS DECIMAL (28 , 2 )) != 0.00 THEN '金额不匹配'
        else ''
    END,
 case 
             when
			cast(b.total_fee as DECIMAL(28, 2)) - cast(a.total_charge as DECIMAL(28, 2))=0.00 and 
			a.producttype_code=b.itemtype_code
			 then '1' else  '0' end ,
			 a.master_id,a.express_name,a.producttype_name,b.total_fee,'1'
						


 from tb_expressbill_detail a, tb_warehouse_express_data_settlement b where a.waybill=b.express_number
 and a.id&gt;=#{Min} and a.id &lt;#{Max} and bat_id=#{bat_id};
	</select>
	
	
	<select id= "matchingSFDifferenceSettle_insert1" parameterType= "Object" resultType= "java.util.Map">
		insert into ${table_name} (
		bat_id,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,reason,is_verification,master_id,express_name,producttype_name,last_fee,detail_status)
select  
a.bat_id,
a.billingcycle,
a.account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,
b.warehouse,
b.store_name,
b.cost_center,
b.epistatic_order,
b.sku_number,
b.length,
b.width,
b.higth,
b.volumn,
b.transport_time,
b.delivery_address,
b.province,
b.city,
b.weight,
b.transport_code,
b.itemtype_code,
b.order_amount,
b.volumn_weight,
b.charged_weight,
b.first_weight_price,
b.added_weight_price,
(1 - b.discount / 100) as discount,
b.standard_freight,
b.afterdiscount_freight,
b.insurance_fee,
  CASE
        WHEN cast((b.total_fee) as DECIMAL(28, 2)) - cast((a.total_charge) as DECIMAL(28, 2)) != 0.00 THEN '金额不匹配'
        else ''
    END,
 case 
             when
			cast((b.total_fee) as DECIMAL(28, 2)) - cast((a.total_charge) as DECIMAL(28, 2)) = 0.00 and 
			a.producttype_code=b.itemtype_code
			 then '1' else  '0' end ,
			 a.master_id,a.express_name,a.producttype_name,b.total_fee,'1'
						


 from tb_expressbill_detail a, tb_warehouse_express_data_settlement b where a.waybill=b.express_number
 and a.id&gt;=#{Min} and a.id &lt;#{Max} and bat_id=#{bat_id};
	</select>
	
	

	<select id= "matchingSFDifferenceSettle_insert2" parameterType= "Object" resultType= "java.util.Map" >
		insert into ${table_name} (

`日期`,
`运单号码`,
`对方地区`,
`对方公司名称`,
`计费重量`,
`产品类型`,
`付款方式`,
`费用(元)`,
`保费`,
`委托取件/逆向物流`,
`春节期间服务费+同城派件地址变更 ：10元/票`,
`退货：5元/票`,
`易碎件`,
`1月24日起—2月5日期间春节当天件：特殊服务费100元/票`,
`应付金额`,
`经手人`,
`原寄地`,
`寄件公司名称`,
`寄件公司电话`,
`到件地区`,
`到方客户名称`,
`到方客户电话`,
`寄件人`,
`寄件时间`,
`始发地(省名)`,
`寄件公司地址`,
`收件人工号`,
`托寄物内容)`,
`托寄物数量`,
`声明价值`,
`件数`,
`体积`,
`目的地(省名)`,
`收件人`,
`收件地址`,
`派件员工号`,
`实际重量`,
`回单单号`,
`签收人`,
`签收时间`,
`退回件关联运单号`,
`附加字段1`,
`附加字段2`,
`附加字段3`,
`结算日期`,
`付款网点`,
`子公司卡号`,
`备注`,
`快件内容`,
`预留字段3`,
`预留字段4`,
`预留字段5`,
`委托费备注说明`,
`首重`,
`续重`,
`备注2`,
`长2`,
`宽2`,
`高2`,
`发货仓`,
`成本中心代码`,
`所属店铺`,
`前置单据号`,
`重量`,
`省份`,
`订单金额`,
`物理核算重量`,
`体积核算重量`,
`计费重量2`,
`首重2`,
`续重2`,
`折扣2`,
`标准运费`,
`折扣运费`,
`保价费`,
`DataSouring`,
`尺寸`,
`difference`,
`订单类型`,
`差异原因`,
`bat_id`,
`park_name`,
`park_cost_center`
)
 

SELECT
			sf.date,
			sf.express_number,
			sf.other_area,
			sf.other_company_name,
			sf.charge_weight,
			sf.product_type,
			sf.pay_method,
			sf.fee,
			sf.insurance,
			sf.delegated_picked,
			sf.sumsung_project,
			sf.return_goods,
			sf.fragile_pieces,
			sf.ts,
			sf.amount_payable,
			sf.operator,
			sf.source,
			sf.deliver_company_name,
			sf.deliver_company_phone,
			sf.reach,
			sf.reach_client_name,
			sf.reach_client_phone,
			sf.sender,
			sf.send_time,
			sf.origin_province,
			sf.send_company_address,
			sf.recipient_no,
			sf.deliver_content,
			sf.deliver_num,
			sf.value,
			sf.num,
			sf.volumn,
			sf.dest_province,
			sf.recipient,
			sf.recipient_address,
			sf.courier_no,
			sf.weight,
			sf.return_order_no,
			sf.receiver,
			sf.recipient_time,
			sf.return_related_express_number,
			sf.default1,
			sf.default2,
			sf.default3,
			sf.balance_date,
			sf.pay_net_node,
			sf.subcompany_card_number,
			sf.remark,
			sf.express_content,
			sf.reserve_column3,
			sf.reserve_column4,
			sf.reserve_column5,
			sf.delegated_picked_remark,
			sf.firstWeight,
			sf.addedWeight,
			sf.remark2,
			sf.length,
			sf.width,
			sf.height,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.volumn_account_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			(1 - lmis.discount / 100) AS discount,
			lmis.standard_freight,
			lmis.afterdiscount_freight,
			lmis.insurance_fee,
			lmis.itemtype_name AS DataSouring,
			lmis.volumn*1000  AS lmisVolumn,
           cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2)) AS difference,
			lmis.order_type,
             case 
             when
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2))=0.00 then '无差异' 
            when lmis.itemtype_name!=sf.product_type then '产品类型差异'
            when sf.charge_weight!=lmis.charged_weight then '计费重量差异'
            when  lmis.first_weight_price!=sf.firstWeight then '报价差异'
            end AS difference_reason,sf.bat_id,
            lmis.park_name,lmis.park_cost_center
		FROM 
			 df_sf_template sf
		, tb_warehouse_express_data_settlement  lmis where 
        sf.id &gt;=#{Min} and sf.id&lt;#{Max}
          and 
         sf.bat_id=#{bat_id}
           and lmis.transport_code='SF'  
      and    lmis.express_number = sf.express_number;
	</select>
	<select id= "matchingSFDifferenceSettle_insert4" parameterType= "Object" resultType= "java.util.Map" >
		insert into df_sf_result5 (

`日期`,
`运单号码`,
`对方地区`,
`对方公司名称`,
`计费重量`,
`产品类型`,
`付款方式`,
`费用(元)`,
`保费`,
`委托取件/逆向物流`,
`春节期间服务费+同城派件地址变更 ：10元/票`,
`退货：5元/票`,
`易碎件`,
`1月24日起—2月5日期间春节当天件：特殊服务费100元/票`,
`应付金额`,
`经手人`,
`原寄地`,
`寄件公司名称`,
`寄件公司电话`,
`到件地区`,
`到方客户名称`,
`到方客户电话`,
`寄件人`,
`寄件时间`,
`始发地(省名)`,
`寄件公司地址`,
`收件人工号`,
`托寄物内容)`,
`托寄物数量`,
`声明价值`,
`件数`,
`体积`,
`目的地(省名)`,
`收件人`,
`收件地址`,
`派件员工号`,
`实际重量`,
`回单单号`,
`签收人`,
`签收时间`,
`退回件关联运单号`,
`附加字段1`,
`附加字段2`,
`附加字段3`,
`结算日期`,
`付款网点`,
`子公司卡号`,
`备注`,
`快件内容`,
`预留字段3`,
`预留字段4`,
`预留字段5`,
`委托费备注说明`,
`首重`,
`续重`,
`备注2`,
`长2`,
`宽2`,
`高2`,
`发货仓`,
`成本中心代码`,
`所属店铺`,
`前置单据号`,
`重量`,
`省份`,
`订单金额`,
`物理核算重量`,
`体积核算重量`,
`计费重量2`,
`首重2`,
`续重2`,
`折扣2`,
`标准运费`,
`折扣运费`,
`保价费`,
`DataSouring`,
`尺寸`,
`difference`,
`订单类型`,
`差异原因`,
`bat_id`

)
 

SELECT
			sf.date,
			sf.express_number,
			sf.other_area,
			sf.other_company_name,
			sf.charge_weight,
			sf.product_type,
			sf.pay_method,
			sf.fee,
			sf.insurance,
			sf.delegated_picked,
			sf.sumsung_project,
			sf.return_goods,
			sf.fragile_pieces,
			sf.ts,
			sf.amount_payable,
			sf.operator,
			sf.source,
			sf.deliver_company_name,
			sf.deliver_company_phone,
			sf.reach,
			sf.reach_client_name,
			sf.reach_client_phone,
			sf.sender,
			sf.send_time,
			sf.origin_province,
			sf.send_company_address,
			sf.recipient_no,
			sf.deliver_content,
			sf.deliver_num,
			sf.value,
			sf.num,
			sf.volumn,
			sf.dest_province,
			sf.recipient,
			sf.recipient_address,
			sf.courier_no,
			sf.weight,
			sf.return_order_no,
			sf.receiver,
			sf.recipient_time,
			sf.return_related_express_number,
			sf.default1,
			sf.default2,
			sf.default3,
			sf.balance_date,
			sf.pay_net_node,
			sf.subcompany_card_number,
			sf.remark,
			sf.express_content,
			sf.reserve_column3,
			sf.reserve_column4,
			sf.reserve_column5,
			sf.delegated_picked_remark,
			sf.firstWeight,
			sf.addedWeight,
			sf.remark2,
			sf.length,
			sf.width,
			sf.height,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.volumn_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			(1 - lmis.discount / 100) AS discount,
			lmis.standard_freight,
			lmis.afterdiscount_freight,
			lmis.insurance_fee,
			lmis.itemtype_name AS DataSouring,
			lmis.volumn*1000  AS lmisVolumn,
           cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2)) AS difference,
			lmis.order_type,
             case 
             when
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2))=0.00 then '无差异' 
            when lmis.itemtype_name!=sf.product_type then '产品类型差异'
            when sf.charge_weight!=lmis.charged_weight then '计费重量差异'
            when  lmis.first_weight_price!=sf.firstWeight then '报价差异'
            end AS difference_reason,sf.bat_id
		FROM 
			 df_sf_template sf
		, tb_warehouse_express_data_settlement  lmis where 
        sf.id &gt;=#{Min} and sf.id&lt;#{Max}
          and 
         sf.bat_id=#{bat_id}
           and lmis.transport_code='SF'  
      and    lmis.express_number = sf.express_number;
	</select>
	
	<select id= "matchingSFDifferenceSettle_insert3" parameterType= "Object" resultType= "java.util.Map" >
		insert into df_sf_result4 (

`日期`,
`运单号码`,
`对方地区`,
`对方公司名称`,
`计费重量`,
`产品类型`,
`付款方式`,
`费用(元)`,
`保费`,
`委托取件/逆向物流`,
`春节期间服务费+同城派件地址变更 ：10元/票`,
`退货：5元/票`,
`易碎件`,
`1月24日起—2月5日期间春节当天件：特殊服务费100元/票`,
`应付金额`,
`经手人`,
`原寄地`,
`寄件公司名称`,
`寄件公司电话`,
`到件地区`,
`到方客户名称`,
`到方客户电话`,
`寄件人`,
`寄件时间`,
`始发地(省名)`,
`寄件公司地址`,
`收件人工号`,
`托寄物内容)`,
`托寄物数量`,
`声明价值`,
`件数`,
`体积`,
`目的地(省名)`,
`收件人`,
`收件地址`,
`派件员工号`,
`实际重量`,
`回单单号`,
`签收人`,
`签收时间`,
`退回件关联运单号`,
`附加字段1`,
`附加字段2`,
`附加字段3`,
`结算日期`,
`付款网点`,
`子公司卡号`,
`备注`,
`快件内容`,
`预留字段3`,
`预留字段4`,
`预留字段5`,
`委托费备注说明`,
`首重`,
`续重`,
`备注2`,
`长2`,
`宽2`,
`高2`,
`发货仓`,
`成本中心代码`,
`所属店铺`,
`前置单据号`,
`重量`,
`省份`,
`订单金额`,
`物理核算重量`,
`体积核算重量`,
`计费重量2`,
`首重2`,
`续重2`,
`折扣2`,
`标准运费`,
`折扣运费`,
`保价费`,
`DataSouring`,
`尺寸`,
`difference`,
`订单类型`,
`差异原因`,
`bat_id`

)
 

SELECT
			sf.date,
			sf.express_number,
			sf.other_area,
			sf.other_company_name,
			sf.charge_weight,
			sf.product_type,
			sf.pay_method,
			sf.fee,
			sf.insurance,
			sf.delegated_picked,
			sf.sumsung_project,
			sf.return_goods,
			sf.fragile_pieces,
			sf.ts,
			sf.amount_payable,
			sf.operator,
			sf.source,
			sf.deliver_company_name,
			sf.deliver_company_phone,
			sf.reach,
			sf.reach_client_name,
			sf.reach_client_phone,
			sf.sender,
			sf.send_time,
			sf.origin_province,
			sf.send_company_address,
			sf.recipient_no,
			sf.deliver_content,
			sf.deliver_num,
			sf.value,
			sf.num,
			sf.volumn,
			sf.dest_province,
			sf.recipient,
			sf.recipient_address,
			sf.courier_no,
			sf.weight,
			sf.return_order_no,
			sf.receiver,
			sf.recipient_time,
			sf.return_related_express_number,
			sf.default1,
			sf.default2,
			sf.default3,
			sf.balance_date,
			sf.pay_net_node,
			sf.subcompany_card_number,
			sf.remark,
			sf.express_content,
			sf.reserve_column3,
			sf.reserve_column4,
			sf.reserve_column5,
			sf.delegated_picked_remark,
			sf.firstWeight,
			sf.addedWeight,
			sf.remark2,
			sf.length,
			sf.width,
			sf.height,
			lmis.warehouse,
			lmis.cost_center,
			lmis.store_name,
			lmis.epistatic_order,
			lmis.weight AS lmisWeight,
			lmis.province,
			lmis.order_amount,
			lmis.account_weight,
			lmis.volumn_weight,
			lmis.charged_weight,
			lmis.first_weight_price,
			lmis.added_weight_price,
			(1 - lmis.discount / 100) AS discount,
			lmis.standard_freight,
			lmis.afterdiscount_freight,
			lmis.insurance_fee,
			lmis.itemtype_name AS DataSouring,
			lmis.volumn*1000  AS lmisVolumn,
           cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2)) AS difference,
			lmis.order_type,
             case 
             when
			cast(lmis.standard_freight as DECIMAL(28, 2)) - cast(sf.fee as DECIMAL(28, 2))=0.00 then '无差异' 
            when lmis.itemtype_name!=sf.product_type then '产品类型差异'
            when sf.charge_weight!=lmis.charged_weight then '计费重量差异'
            when  lmis.first_weight_price!=sf.firstWeight then '报价差异'
            end AS difference_reason,sf.bat_id
		FROM 
			 df_sf_template sf
		, tb_warehouse_express_data_settlement  lmis where 
        sf.id &gt;=#{Min} and sf.id&lt;#{Max}
          and 
         sf.bat_id=#{bat_id}
           and lmis.transport_code='SF'  
      and    lmis.express_number = sf.express_number;
	</select>
	
	<insert id="createWarehouseTabCYPP" parameterType= "Object">
	insert into df_sf_template_warehouse select  a.* from  df_sf_template_return a left join df_sf_waybill b on (a.express_number = b.waybill and a.bat_id=b.bat_id)  where a.bat_id=#{bat_id}  and b.bat_id is null
	</insert>
	
	<select id='collect' parameterType= "Object">
	insert into  df_sf_result1 select  * from  df_sf_result2 where bat_id=#{bat_id};
	insert into  df_sf_result3 select  * from  df_sf_result4 where bat_id=#{bat_id};
	insert into  df_sf_result3 select  * from  df_sf_result5 where bat_id=#{bat_id};
	</select>
	<delete id='deleteResult0' parameterType= "Object">
	delete from tb_diff_billdeatils_temp1 where bat_id=#{bat_id};
		delete from tb_diff_billdeatils_temp2 where bat_id=#{bat_id};
			delete from tb_diff_billdeatils_temp3 where bat_id=#{bat_id};
				delete from tb_diff_billdeatils_temp4 where bat_id=#{bat_id};
					delete from tb_diff_billdeatils_temp5 where bat_id=#{bat_id};
	</delete>
	
	
	<delete id='deleteResult00' parameterType= "Object">
	delete from df_sf_result1 where bat_id=#{bat_id};
	</delete>
	<delete id='deleteResult1' parameterType= "Object">
	delete from df_sf_result2 where bat_id=#{bat_id};
	</delete>
	<delete id='deleteResult2' parameterType= "Object">
	delete from df_sf_result3 where bat_id=#{bat_id};
	</delete>
	<delete id='deleteResult3' parameterType= "Object">
	delete from df_sf_result4 where bat_id=#{bat_id};
	</delete>
	<delete id='deleteResult4' parameterType= "Object">
	delete from df_sf_result5 where bat_id=#{bat_id};
	</delete>
	<select id='matchingSF' parameterType='java.util.HashMap' resultType='java.util.HashMap' >
	select * from  ${table_name} where bat_id=#{bat_id} and difference!=0;
	</select>
	<select id='matchingSFun' parameterType='java.util.HashMap' resultType='java.util.HashMap' >
	select * from  ${table_name} where bat_id=#{bat_id} and difference=0;
	</select>
	<insert id='InsertWarehouseTab' parameterType='java.util.HashMap'>
	insert into df_sf_waybill (bat_id,waybill) values
	  
(
  #{bat_id},#{waybill}
)

	</insert>
	<insert id='InsertWarehouseTabCYPP' parameterType='java.util.HashMap'>
	insert into df_sf_waybill (bat_id,waybill) values
	  
(
  #{bat_id},#{express_number}
)

	</insert>
	
	
	
	<insert  id='insertDiff' parameterType='java.util.HashMap' >
	INSERT INTO tb_diff_billdeatils
(
billingCycle,
account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1)
select  
a.billingcycle,
a.account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,
b.warehouse,
b.store_name,
b.cost_center,
b.epistatic_order,
b.sku_number,
b.length,
b.width,
b.higth,
b.volumn,
b.transport_time,
b.delivery_address,
b.province,
b.city,
b.weight,
b.transport_code,
b.itemtype_name,
b.order_amount,
b.volumn_weight,
b.jf_weight,
b.first_weight,
b.added_weight,
(1 - b.discount / 100) as discount,
b.standard_freight,
b.afterdiscount_freight,
b.insurance_fee
 from tb_expressbill_detail a, tb_warehouse_express_data_settlement b where a.waybill=b.express_number
	</insert>
	
<insert id='createReturn' parameterType='java.util.HashMap'>
insert  into 
tb_expressbill_detail_retrun
(
create_time,
create_user,
update_time,
update_user,
billingcycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
is_verification,
reason,
bat_id,
master_id,express_name,producttype_name
 )  select  
tb_expressbill_detail.create_time,
tb_expressbill_detail.create_user,
tb_expressbill_detail.update_time,
tb_expressbill_detail.update_user,
tb_expressbill_detail.billingcycle,
tb_expressbill_detail.account,
tb_expressbill_detail.transport_time,
tb_expressbill_detail.waybill,
tb_expressbill_detail.transport_weight,
tb_expressbill_detail.transport_volumn,
tb_expressbill_detail.origin_province,
tb_expressbill_detail.origin_city,
tb_expressbill_detail.origin_state,
tb_expressbill_detail.dest_province,
tb_expressbill_detail.dest_city,
tb_expressbill_detail.dest_state,
tb_expressbill_detail.charged_weight,
tb_expressbill_detail.express_code,
tb_expressbill_detail.producttype_code,
tb_expressbill_detail.insurance,
tb_expressbill_detail.freight,
tb_expressbill_detail.insurance_fee,
tb_expressbill_detail.other_value_added_service_charges,
tb_expressbill_detail.total_charge,
tb_expressbill_detail.is_verification,
tb_expressbill_detail.reason,
tb_expressbill_detail.bat_id,
tb_expressbill_detail.master_id,
tb_expressbill_detail.express_name,tb_expressbill_detail.producttype_name
 from  tb_expressbill_detail  left join tb_warehouse_express_data_settlement
on tb_expressbill_detail.waybill=tb_warehouse_express_data_settlement.express_number
 where tb_expressbill_detail.bat_id=#{bat_id} and tb_warehouse_express_data_settlement.id is null
</insert>	
	
<insert id='insertIntoReturn' parameterType='java.util.HashMap'>
INSERT INTO tb_diff_billdeatils
(
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1)
select  
a.billingcycle,
a.account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,
b.warehouse_name,
b.store_name,
b.cost_center,
b.epistatic_order,
b.platform_no,
b.sku_number,
b.re_length,
b.re_width,
b.re_height,
b.re_volumn,
'',
'',
b.re_province,
b.re_dest_city,
'',
b.transport_name,
b.itemtyepe_code,
b.oute_order from tb_expressbill_detail_return a left join tb_express_return_storage b
on a.waybill=b.waybill where
a.bat_id=#{bat_id}
and b.id is not null 

</insert>
<insert id='insertIntoRaw' parameterType='java.util.HashMap'>
INSERT INTO tb_diff_billdeatils
(
billingCycle,
account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1)
select  
a.billingcycle,
a.account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,
b.warehouse,
b.store_name,
b.cost_center,
b.epistatic_order,
b.sku_number,
b.length,
b.width,
b.higth,
b.volumn,
'',
'',
b.province,
b.city,
'',
b.transport_name,
b.itemtype_code,
b.order_amount from tb_expressbill_detail_return a left join tb_warehouse_express_data b
on a.waybill=b.waybill where
a.bat_id=#{bat_id}
and b.id is not null 

</insert>	
	
	
<insert id='createRow' parameterType='java.util.HashMap'>
insert  into 
tb_expressbill_detail_raw
(
create_time,
create_user,
update_time,
update_user,
billingcycle,
account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
is_verification,
reason,
bat_id,
master_id,
account_id,
account_name,
status,express_name,producttype_name)  select  
create_time,
create_user,
update_time,
update_user,
billingcycle,
account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
is_verification,
reason,
bat_id,
master_id,
account_id,
account_name,
status ,
express_name,producttype_name
from  tb_expressbill_detail_return  left join  tb_express_return_storage
on  tb_expressbill_detail_return.waybill=tb_express_return_storage.waybill
 where bat_id=#{bat_id} and  tb_express_return_storage.id is null;
</insert>		
	
<insert id='insertTable' parameterType='Object'>	
	INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,bat_id,detail_status)
SELECT 
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,#{bat_id},detail_status FROM  tb_diff_billdeatils_temp1 where bat_id=#{bat_id};
INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,bat_id,detail_status)
SELECT 
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,#{bat_id},detail_status FROM  tb_diff_billdeatils_temp2 where bat_id=#{bat_id};
INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,bat_id,detail_status)
SELECT 
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name ,#{bat_id},detail_status FROM  tb_diff_billdeatils_temp3 where bat_id=#{bat_id};
INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,bat_id,detail_status)
SELECT 
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,#{bat_id},detail_status FROM  tb_diff_billdeatils_temp4 where bat_id=#{bat_id};
INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,bat_id,detail_status)
SELECT 
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,
transport_warehouse,
store,
cost_center,
epistatic_order,
platform_no,
sku_number,
length,
width,
height,
volumn,
transport_time1,
origin_province1,
origin_city1,
dest_province1,
dest_city1,
transport_weight1,
express_code1,
producttype_code1,
insurance1,
volumn_charged_weight,
charged_weight1,
firstWeight,
addedWeight,
discount,
standard_freight,
afterdiscount_freight,
insurance_fee1,
additional_fee,
last_fee,
is_verification,
reason,
remarks,
total_discount,
physical_accounting,
jp_num,
volumn_weight,
volumn_account_weight,
jf_weight,
first_weight,
first_weight_price,
added_weight,
added_weight_price,
account_id,
master_id,
close_account,express_name,producttype_name,#{bat_id},detail_status FROM  tb_diff_billdeatils_temp5 where bat_id=#{bat_id};
INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,

transport_warehouse,
cost_center,
store,
epistatic_order,
transport_weight1,
insurance1,
producttype_code1,
volumn,
is_verification,
 reason,
master_id,express_name,producttype_name,detail_status)
SELECT 
a.create_time,
a.create_user,
a.update_time,
a.update_user,
a.billingcycle,
a.month_account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,


b.warehouse,
b.cost_center,
b.store_name,
b.epistatic_order,
b.weight,
b.order_amount,
b.itemtype_name,
(b.length*b.width*b.higth),

'0',
'未结算',
a.master_id,a.express_name,a.producttype_name,'3'
 FROM  tb_expressbill_detail_raw  a  left join tb_warehouse_express_data b  on a.waybill=b.express_number where a.bat_id=#{bat_id};
 


INSERT INTO tb_diff_billdeatils
(
create_time,
create_user,
update_time,
update_user,
billingCycle,
month_account,
transport_time,
waybill,
transport_weight,
transport_volumn,
origin_province,
origin_city,
origin_state,
dest_province,
dest_city,
dest_state,
charged_weight,
express_code,
producttype_code,
insurance,
freight,
insurance_fee,
other_value_added_service_charges,
total_charge,

transport_warehouse,
cost_center,
store,
epistatic_order,
transport_weight1,
insurance1,
producttype_code1,
volumn,
length,
width,
height,
dest_province1,



is_verification,
 reason,
master_id,express_name,producttype_name,detail_status)
SELECT 
a.create_time,
a.create_user,
a.update_time,
a.update_user,
a.billingcycle,
a.month_account,
a.transport_time,
a.waybill,
a.transport_weight,
a.transport_volumn,
a.origin_province,
a.origin_city,
a.origin_state,
a.dest_province,
a.dest_city,
a.dest_state,
a.charged_weight,
a.express_code,
a.producttype_code,
a.insurance,
a.freight,
a.insurance_fee,
a.other_value_added_service_charges,
a.total_charge,


b. warehouse_name AS warehouse,
b. store_name AS store_name,
b. cost_center AS cost_center,
b. related_no AS epistatic_order,
b. re_weight AS weight,
b. out_order AS order_amount,
b. itemtype_name AS product_type,
b.  re_volumn AS lmisVolumn,
b.  re_length as length,
b.  re_width as width,
b.  re_higth as height,
b.  re_province,

'0',
'退货入库',
a.master_id,a.express_name,a.producttype_name,'2'
 FROM  tb_expressbill_detail_retrun  a ,tb_express_return_storage b  where a.waybill=b.waybill and a.bat_id=#{bat_id}
 group by a.waybill
 ;
 
	</insert>
	<update id='updateReason' parameterType= "Object"  >
	UPDATE tb_diff_billdeatils 
SET 
    reason = CONCAT(reason, ',计费重量差异')
WHERE
    charged_weight!= charged_weight1
    AND is_verification = 0
        AND bat_id = #{bat_id}
        AND detail_status = 1;

	UPDATE tb_diff_billdeatils 
SET 
    reason = CONCAT(reason, ',产品类型差异')
WHERE
    producttype_code!= producttype_code1
    AND is_verification = 0
        AND bat_id = #{bat_id}
        AND detail_status = 1;

UPDATE tb_diff_billdeatils 
SET 
    reason = CONCAT(reason, ',保价差异')
WHERE
    insurance_fee != insurance_fee1
        AND is_verification = 0
        AND bat_id = #{bat_id}
        AND detail_status = 1; 
	</update>
	
	
</mapper>