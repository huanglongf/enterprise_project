package com.bt.vims.service.impl;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.bt.vims.dao.VimsDataMapper;
import com.bt.vims.dao.VisitorInfomationMapper;
import com.bt.vims.model.VimsData;
import com.bt.vims.model.VisitorInfomation;
import com.bt.vims.service.VimsDataService;
import com.bt.vims.utils.AESUtil;
import com.bt.vims.utils.DateUtil;
import com.bt.vims.utils.ParseJsonUtil;
import com.bt.vims.utils.SignProcess;
import com.google.gson.Gson;

import common.AddressException;
import common.Contents;

@Service
@Transactional
public class VimsDataServiceImpl implements VimsDataService {

	private static final Logger logger = Logger.getLogger(VimsDataServiceImpl.class);

	@Autowired
	private VimsDataMapper vimsDataMapper;

	@Autowired
	private VisitorInfomationMapper visitorInfomationMapper;

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public Map<String, String> responseSocket(String oldSign, String bodyParam, Map<String, Object> clientMap) {
		Map<String, String> backMessage = new LinkedHashMap<>();
		if (!StringUtils.isEmpty(oldSign) && !StringUtils.isEmpty(bodyParam)) {
			Map<String, String> severMap = new LinkedHashMap();

			clientMap = new Gson().fromJson(bodyParam, clientMap.getClass());
			String bodyValue = (String) clientMap.get("body");

			String decBodyParam = AESUtil.decrypt(bodyValue, Contents.SECRET_KEY); // 此处解密bodyValue
			severMap.put("contactCode", Contents.CONTACT_CODE);
			severMap.put("method", Contents.METHOD);
			severMap.put("systemKey", Contents.SYSTEM_KEY);
			String encBodyParam = AESUtil.encrypt(decBodyParam, Contents.SECRET_KEY);
			severMap.put("body", encBodyParam);
			severMap.put("version", Contents.VERSION);
			String newSign = SignProcess.makeMd5Sign(severMap, Contents.SECRET_KEY); // 加密传入的数据
			if (oldSign.equals(newSign)) { // 此判断说明客户端发来数据与读取一致
				try {
					List<VimsData> vimsDatas = ParseJsonUtil.parseJsonData(decBodyParam);
					if (vimsDatas != null && vimsDatas.size() > 0) {
						int id = vimsDataMapper.create(vimsDatas);
						Integer mainId = insertMainInfor(vimsDatas);
						if (new Integer(id) != null && mainId != null) { // 判断两张表数据都插入成功
							backMessage.put("msg", "POST 同步请求完成");
							backMessage.put("status_code", "200");
						}
					}
				} catch (RuntimeException e) {
					e.printStackTrace();
					logger.error("responseSocket()执行失败，失败信息： " + e.getMessage());
					backMessage.put("msg", "服务器错误，确认状态并报告问题");
					backMessage.put("status_code", "500");
				}
			}
		}
		return backMessage;
	}

	/**
	 * 批量插入访客数据至主表
	 * 
	 * @param vimsDatas
	 * @return
	 */
	private Integer insertMainInfor(List<VimsData> vimsDatas) throws AddressException {
		List<VisitorInfomation> visitorInfomations = new ArrayList<>();
		Integer mainId = null;
		int dataNum = 1; //对于保证数据插入data编号唯一
		for (VimsData vimsData : vimsDatas) {
			VisitorInfomation visitorInfomation = new VisitorInfomation();
			visitorInfomation.setDatas(DateUtil.convertToString(new Date(), DateUtil.YMD3));
			List<VisitorInfomation> viList = visitorInfomationMapper.query(visitorInfomation);
			if (viList != null && viList.size() == 0) {
				visitorInfomation.setData(DateUtil.convertToString(new Date(), DateUtil.YMD3)
						+ getNumber(DateUtil.convertToString(new Date(), DateUtil.YMD3), dataNum));
			} else {
				visitorInfomation.setData(DateUtil.convertToString(new Date(), DateUtil.YMD3)
						+ getNumber(DateUtil.convertToString(new Date(), DateUtil.YMD3), (viList.size() + 1)));
			}
			visitorInfomation.setParam1(vimsData.getVisitorName(), vimsData.getVisitorPhone(), vimsData.getHost(),
					vimsData.getVisitorCompanyName(), vimsData.getLicensePlateNumber(), vimsData.getContent(),
					vimsData.getRemark());
			visitorInfomation.setParam2(vimsData.getPhoto().getBytes(), vimsData.getCheckInTime(),
					vimsData.getCheckInUser(), vimsData.getVisitorType(), vimsData.getVisitorNum(),
					vimsData.getCheckInPlcae(), vimsData.getApplyFor());
			visitorInfomation.setCheck_state("[已到访]");
			visitorInfomations.add(visitorInfomation);
			dataNum++;
		}
		int id = visitorInfomationMapper.insertMainInfor(visitorInfomations);
		mainId = new Integer(id);
		return mainId;
	}

	/**
	 * 整合日期和整数
	 * 
	 * @param ym
	 *            日期值
	 * @param i
	 *            整数
	 * @return
	 */
	private static String getNumber(String ym, int i) {
		// 得到一个NumberFormat的实例
		NumberFormat nf = NumberFormat.getInstance();
		// 设置是否使用分组
		nf.setGroupingUsed(false);
		// 设置最大整数位数
		nf.setMaximumIntegerDigits(4);
		// 设置最小整数位数
		nf.setMinimumIntegerDigits(4);
		return nf.format(i);
	}

}
