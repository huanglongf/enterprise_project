/**
 * Please modify this class to meet your needs This class is not complete
 */

package com.jumbo.webservice.pda;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.jumbo.webservice.base.AuthenticationFailedException;
import com.jumbo.webservice.pda.executeOrder.ExecuteOrderRequest;
import com.jumbo.webservice.pda.getInboundData.GetInboundDataRequest;
import com.jumbo.webservice.pda.getInboundOnShelves.GetInboundOnShelvesRequest;
import com.jumbo.webservice.pda.getInventory.GetInventoryRequest;
import com.jumbo.webservice.pda.getInventoryCheck.GetInventoryCheckRequest;
import com.jumbo.webservice.pda.getLibraryMovement.GetLibraryMovementRequest;
import com.jumbo.webservice.pda.getPickingData.GetPickingDataRequest;
import com.jumbo.webservice.pda.getReturnOrder.GetReturnOrderRequest;
import com.jumbo.webservice.pda.getSku.GetSkuRequest;
import com.jumbo.webservice.pda.getSku.GetSkuResponse;
import com.jumbo.webservice.pda.getTransNo.GetTransNoRequest;
import com.jumbo.webservice.pda.getTransNo.GetTransNoResponse;
import com.jumbo.webservice.pda.getWarehouses.GetWarehousesRequest;
import com.jumbo.webservice.pda.login.LoginRequest;
import com.jumbo.webservice.pda.manager.PdaManager;
import com.jumbo.webservice.pda.uploadHandOverList.UploadHandOverListRequest;
import com.jumbo.webservice.pda.uploadInboundOnShelves.UploadInboundOnShelvesRequest;
import com.jumbo.webservice.pda.uploadInboundReceive.UploadInboundReceiveRequest;
import com.jumbo.webservice.pda.uploadInitiativeMoveInbound.UploadInitiativeMoveInboundRequest;
import com.jumbo.webservice.pda.uploadInitiativeMoveInbound.UploadInitiativeMoveInboundResponse;
import com.jumbo.webservice.pda.uploadInitiativeMoveOutbound.UploadInitiativeMoveOutboundRequest;
import com.jumbo.webservice.pda.uploadInitiativeMoveOutbound.UploadInitiativeMoveOutboundResponse;
import com.jumbo.webservice.pda.uploadInventoryCheck.UploadInventoryCheckRequest;
import com.jumbo.webservice.pda.uploadLibraryMovement.UploadLibraryMovementRequest;
import com.jumbo.webservice.pda.uploadPickingOutbound.UploadPickingOutboundRequest;
import com.jumbo.webservice.pda.uploadReturnOrder.UploadReturnOrderRequest;

/**
 * This class was generated by Apache CXF 2.7.4 2013-04-19T13:40:34.962+08:00 Generated source
 * version: 2.7.4
 * 
 */

@javax.jws.WebService(serviceName = "PdaServiceService", portName = "PdaServicePort", targetNamespace = "http://webservice.jumbo.com/pda/", endpointInterface = "com.jumbo.webservice.pda.PdaService")
public class PdaServiceImpl implements PdaService {

    protected static final Logger logger = LoggerFactory.getLogger(PdaServiceImpl.class);
    @Autowired
    private PdaManager pdaManager;

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadReturnOrder(com.jumbo.webservice.pda.
     * UploadReturnOrderRequest uploadReturnOrderRequest )*
     */
    public com.jumbo.webservice.pda.uploadReturnOrder.UploadReturnOrderResponse uploadReturnOrder(UploadReturnOrderRequest uploadReturnOrderRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadReturnOrder");
        com.jumbo.webservice.pda.uploadReturnOrder.UploadReturnOrderResponse _return = pdaManager.uploadReturnOrder(uploadReturnOrderRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadInventoryCheck(com.jumbo.webservice.pda.
     * UploadInventoryCheckRequest uploadInventoryCheckRequest )*
     */
    public com.jumbo.webservice.pda.uploadInventoryCheck.UploadInventoryCheckResponse uploadInventoryCheck(UploadInventoryCheckRequest uploadInventoryCheckRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadInventoryCheck");
        com.jumbo.webservice.pda.uploadInventoryCheck.UploadInventoryCheckResponse _return = pdaManager.uploadInventoryCheck(uploadInventoryCheckRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadPickingOutbound(com.jumbo.webservice.pda.
     * UploadPickingOutboundRequest uploadPickingOutboundRequest )*
     */
    public com.jumbo.webservice.pda.uploadPickingOutbound.UploadPickingOutboundResponse uploadPickingOutbound(UploadPickingOutboundRequest uploadPickingOutboundRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadPickingOutbound");
        com.jumbo.webservice.pda.uploadPickingOutbound.UploadPickingOutboundResponse _return = pdaManager.uploadPickingOutbound(uploadPickingOutboundRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#getInventoryCheck(com.jumbo.webservice.pda.
     * GetInventoryCheckRequest getInventoryCheckRequest )*
     */
    public com.jumbo.webservice.pda.getInventoryCheck.GetInventoryCheckResponse getInventoryCheck(GetInventoryCheckRequest getInventoryCheckRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getInventoryCheck");
        com.jumbo.webservice.pda.getInventoryCheck.GetInventoryCheckResponse _return = pdaManager.getInventoryCheck(getInventoryCheckRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadLibraryMovement(com.jumbo.webservice.pda.
     * UploadLibraryMovementRequest uploadLibraryMovementRequest )*
     */
    public com.jumbo.webservice.pda.uploadLibraryMovement.UploadLibraryMovementResponse uploadLibraryMovement(UploadLibraryMovementRequest uploadLibraryMovementRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadLibraryMovement");
        com.jumbo.webservice.pda.uploadLibraryMovement.UploadLibraryMovementResponse _return = pdaManager.uploadLibraryMovement(uploadLibraryMovementRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#login(com.jumbo.webservice.pda.LoginRequest
     * loginRequest )*
     */
    public com.jumbo.webservice.pda.login.LoginResponse login(LoginRequest loginRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation login");
        com.jumbo.webservice.pda.login.LoginResponse _return = pdaManager.login(loginRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.jumbo.webservice.pda.PdaService#getReturnOrder(com.jumbo.webservice.pda.GetReturnOrderRequest
     * getReturnOrderRequest )*
     */
    public com.jumbo.webservice.pda.getReturnOrder.GetReturnOrderResponse getReturnOrder(GetReturnOrderRequest getReturnOrderRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getReturnOrder");
        com.jumbo.webservice.pda.getReturnOrder.GetReturnOrderResponse _return = pdaManager.getReturnOrder(getReturnOrderRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadInboundReceive(com.jumbo.webservice.pda.
     * UploadInboundReceiveRequest uploadInboundReceiveRequest )*
     */
    public com.jumbo.webservice.pda.uploadInboundReceive.UploadInboundReceiveResponse uploadInboundReceive(UploadInboundReceiveRequest uploadInboundReceiveRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadInboundReceive");
        com.jumbo.webservice.pda.uploadInboundReceive.UploadInboundReceiveResponse _return = pdaManager.uploadInboundReceive(uploadInboundReceiveRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#getLibraryMovement(com.jumbo.webservice.pda.
     * GetLibraryMovementRequest getLibraryMovementRequest )*
     */
    public com.jumbo.webservice.pda.getLibraryMovement.GetLibraryMovementResponse getLibraryMovement(GetLibraryMovementRequest getLibraryMovementRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getLibraryMovement");
        com.jumbo.webservice.pda.getLibraryMovement.GetLibraryMovementResponse _return = pdaManager.getLibraryMovement(getLibraryMovementRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.jumbo.webservice.pda.PdaService#getPickingData(com.jumbo.webservice.pda.GetPickingDataRequest
     * getPickingDataRequest )*
     */
    public com.jumbo.webservice.pda.getPickingData.GetPickingDataResponse getPickingData(GetPickingDataRequest getPickingDataRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getPickingData");
        com.jumbo.webservice.pda.getPickingData.GetPickingDataResponse _return = pdaManager.getPickingData(getPickingDataRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadInboundOnShelves(com.jumbo.webservice.pda.
     * UploadInboundOnShelvesRequest uploadInboundOnShelvesRequest )*
     */
    public com.jumbo.webservice.pda.uploadInboundOnShelves.UploadInboundOnShelvesResponse uploadInboundOnShelves(UploadInboundOnShelvesRequest uploadInboundOnShelvesRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadInboundOnShelves");
        com.jumbo.webservice.pda.uploadInboundOnShelves.UploadInboundOnShelvesResponse _return = pdaManager.uploadInboundOnShelves(uploadInboundOnShelvesRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#uploadHandOverList(com.jumbo.webservice.pda.
     * UploadHandOverListRequest uploadHandOverListRequest )*
     */
    public com.jumbo.webservice.pda.uploadHandOverList.UploadHandOverListResponse uploadHandOverList(UploadHandOverListRequest uploadHandOverListRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadHandOverList");
        com.jumbo.webservice.pda.uploadHandOverList.UploadHandOverListResponse _return = pdaManager.uploadHandOverList(uploadHandOverListRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.jumbo.webservice.pda.PdaService#getInventory(com.jumbo.webservice.pda.GetInventoryRequest
     * getInventoryRequest )*
     */
    public com.jumbo.webservice.pda.getInventory.GetInventoryResponse getInventory(GetInventoryRequest getInventoryRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getInventory");
        com.jumbo.webservice.pda.getInventory.GetInventoryResponse _return = pdaManager.getInventory(getInventoryRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.jumbo.webservice.pda.PdaService#getInboundData(com.jumbo.webservice.pda.GetInboundDataRequest
     * getInboundDataRequest )*
     */
    public com.jumbo.webservice.pda.getInboundData.GetInboundDataResponse getInboundData(GetInboundDataRequest getInboundDataRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getInboundData");
        com.jumbo.webservice.pda.getInboundData.GetInboundDataResponse _return = pdaManager.getInboundData(getInboundDataRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.jumbo.webservice.pda.PdaService#getInboundOnShelves(com.jumbo.webservice.pda.
     * GetInboundOnShelvesRequest getInboundOnShelvesRequest )*
     */
    public com.jumbo.webservice.pda.getInboundOnShelves.GetInboundOnShelvesResponse getInboundOnShelves(GetInboundOnShelvesRequest getInboundOnShelvesRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getInboundOnShelves");
        com.jumbo.webservice.pda.getInboundOnShelves.GetInboundOnShelvesResponse _return = pdaManager.getInboundOnShelves(getInboundOnShelvesRequest);
        return _return;

        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.jumbo.webservice.pda.PdaService#executeOrder(com.jumbo.webservice.pda.ExecuteOrderRequest
     * executeOrderRequest )*
     */
    public com.jumbo.webservice.pda.executeOrder.ExecuteOrderResponse executeOrder(ExecuteOrderRequest executeOrderRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation executeOrder");
        com.jumbo.webservice.pda.executeOrder.ExecuteOrderResponse _return = pdaManager.executeOrder(executeOrderRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.jumbo.webservice.pda.PdaService#getWarehouses(com.jumbo.webservice.pda.GetWarehousesRequest
     * getWarehousesRequest )*
     */
    public com.jumbo.webservice.pda.getWarehouses.GetWarehousesResponse getWarehouses(GetWarehousesRequest getWarehousesRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getWarehouses");
        com.jumbo.webservice.pda.getWarehouses.GetWarehousesResponse _return = pdaManager.getWareHouse(getWarehousesRequest);
        return _return;
        // throw new AuthenticationFailedException("authenticationFailedException...");
    }

    @Override
    public UploadInitiativeMoveOutboundResponse uploadInitiativeMoveOutbound(UploadInitiativeMoveOutboundRequest uploadInitiativeMoveOutboundRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadInitiativeMoveOutbound");
        UploadInitiativeMoveOutboundResponse response = pdaManager.uploadInitiativeMoveOutbound(uploadInitiativeMoveOutboundRequest);
        return response;
    }

    @Override
    public UploadInitiativeMoveInboundResponse uploadInitiativeMoveInbound(UploadInitiativeMoveInboundRequest uploadInitiativeMoveInboundRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation uploadInitativeMoveInbound");
        UploadInitiativeMoveInboundResponse response = pdaManager.uploadInitiativeMoveInbound(uploadInitiativeMoveInboundRequest);
        return response;
    }

    @Override
    public GetTransNoResponse getTransNo(GetTransNoRequest getTransNoRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getTransNo");
        GetTransNoResponse response = pdaManager.getTransNo(getTransNoRequest);
        return response;
    }
    
    @Override
    public GetSkuResponse getSku(GetSkuRequest getSkuRequest) throws AuthenticationFailedException {
        logger.debug("Executing operation getSku");
        GetSkuResponse response = pdaManager.getSku(getSkuRequest);
        return response;
    }

}
